<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue.js</title>
    <link href="/2020/06/20/Vue-js/"/>
    <url>/2020/06/20/Vue-js/</url>
    
    <content type="html"><![CDATA[<h1 id="前端框架的由来"><a href="#前端框架的由来" class="headerlink" title="前端框架的由来"></a>前端框架的由来</h1><p>vue 官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br>渐进式前端框架：页面可以一块一块的用 vue 做<br><strong>服务端渲染</strong><br><img src="/img/10-1.png"><br><strong>前后端分离</strong><br><img src="/img/10-2.png"><br><strong>单页应用</strong><br><img src="/img/10-3.png"><br><strong>vue 框架</strong><br><img src="/img/10-4.png"></p><h1 id="第一个-vue-应用"><a href="#第一个-vue-应用" class="headerlink" title="第一个 vue 应用"></a>第一个 vue 应用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 模板 -&gt; vue -&gt; 真实的dom --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题：&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-comment">//改vm的titile页面跟着变</span></span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;My first page&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>vue 开发核心特点：只需要关注数据的变化，不需要关注页面的变化<br>应用：<br>数据变化导致模板重渲染:数据响应式</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><blockquote><p>把 vue 配置对象注入到 vue 实例里面，所以 vue 实例里有了这些配置对象</p></blockquote><p><img src="/img/10-5.png"><br>vue 会将以下配置注入到 vue 实例：</p><ul><li>data：和界面相关的数据</li><li>computed：通过已有数据计算得来的数据，将来详细讲解</li><li>methods：方法<blockquote><p>模板中可以使用 vue 实例中的成员，放在大胡子语法里面里面</p></blockquote></li></ul><h2 id="虚拟-DOM-树"><a href="#虚拟-DOM-树" class="headerlink" title="虚拟 DOM 树"></a>虚拟 DOM 树</h2><p>直接操作真实的 DOM 会引发严重的效率问题，vue 使用虚拟 DOM（vnode）的方式来描述要渲染的内容<br>vnode 是一个<strong>普通的</strong>JS 对象，用于描述界面上应该有什么，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vnode = &#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;h1&quot;</span>,<br>  <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">tag</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;第一个vue应用：Hello World&quot;</span> &#125;],<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面的对象描述了：有一个标签名为 h1 的节点，它有一个子节点，该子节点是一个文本，内容为第一个 vue 应用：Hello World<br><strong>vue 模板并不是真实的 DOM，它会被编译为虚拟 DOM</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第一个vue应用：&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>作者：&#123;&#123;author&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--这些都不是真实DOM--&gt;</span><br></code></pre></td></tr></table></figure><p>上面的模板会被编译为类似下面结构的虚拟 DOM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">children</span>: [<br>    &#123; <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-attr">children</span>: [ &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;第一个vue应用：Hello World&quot;</span> &#125; ] &#125;,<br>    &#123; <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-attr">children</span>: [ &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;作者：袁&quot;</span> &#125; ] &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>虚拟 DOM 树会最终生成为真实的 DOM 树，这个过程叫渲染<br><img src="/img/10-6.png"><br>当数据变化后，将引发重新渲染，vue 会比较新旧两棵 vnode tree，找出差异，然后仅把差异部分应用到真实 dom tree 中。对比的是对象，效率很高</p><p><img src="/img/10-7.png"></p><p><strong>可见，在 vue 中，要得到最终的界面，必须要生成一个 vnode tree</strong><br><strong>渲染的本质:render 生成虚拟 DOM</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Hello&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;袁&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params">h</span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;render&quot;</span>); <span class="hljs-comment">//把this.author改为进，自动运行了render()，说明重新渲染靠的是render</span></span><br><span class="javascript">      <span class="hljs-comment">// return h(&#x27;p&#x27;, []);//子节点为空</span></span><br><span class="javascript">      <span class="hljs-keyword">return</span> h(<span class="hljs-string">&quot;div&quot;</span>, [</span><br><span class="javascript">        h(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">`第一个vue应用：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.title&#125;</span>`</span>),</span><br><span class="javascript">        h(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">`作者：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.author&#125;</span>`</span>),</span><br><span class="javascript">      ]);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上设计太麻烦，简化：所以有了模板：根据模板编译成 render 方法。<br>vue 通过以下逻辑生成 vnode tree：<br><img src="/img/10-8.png"><br>template 实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">  var vm = new Vue(&#123;</span></span><br><span class="xml"><span class="handlebars">    el: &quot;#app&quot;,</span></span><br><span class="xml"><span class="handlebars">    data: &#123;</span></span><br><span class="xml"><span class="handlebars">      title: &quot;Hello&quot;,</span></span><br><span class="xml"><span class="handlebars">      author: &quot;袁&quot;,</span></span><br><span class="xml"><span class="handlebars">    &#125;,</span></span><br><span class="xml"><span class="handlebars">    template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">title</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">  &#125;);</span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总之：模板会编译成 render 方法，最终总是 render()<br><strong>注意：虚拟节点树必须是单根的，所以模板必须单根</strong></p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>将生成的真实 DOM 树，放置到某个元素位置，称之为<strong>挂载</strong><br>挂载的方式：</p><ol><li>通过<code>el:&quot;css选择器&quot;</code>进行配置</li><li>通过<code>vue实例.$mount(&quot;css选择器&quot;)</code>进行配置</li></ol><h2 id="总结：完整流程"><a href="#总结：完整流程" class="headerlink" title="总结：完整流程"></a>总结：完整流程</h2><p><img src="/img/10-9.png"></p><p>v-bind:一张图片的 src 可能会变化<br>key 值唯一且稳定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, i) in products&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-on 指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;changeStock(item, item.stock-1)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeStock(item, item.stock-1)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>组件的出现是为了实现以下两个目标：</p><ol><li>降低整体复杂度，提升代码的可读性和可维护性（细粒度）</li><li>提升局部代码的可复用性</li></ol><p>绝大部分情况下，一个组件就是页面中某个区域，组件包含该区域的：</p><ul><li>功能（JS 代码）</li><li>内容（模板代码）</li><li>样式（CSS 代码）<blockquote><p>要在组件中包含样式，需要构建工具的支撑</p></blockquote></li></ul><h2 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h2><h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>组件是根据一个普通的配置对象创建的，所以要开发一个组件，只需要写一个配置对象即可<br>该配置对象和 vue 实例的配置是<strong>几乎一样</strong>的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//组件配置对象</span><br><span class="hljs-keyword">var</span> myComp = &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 为何是个函数？保证每个组件数据相互独立。每次调用都是个新的函数</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">// data函数返回一个对象</span><br>      <span class="hljs-comment">// ...</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`....`</span>, <span class="hljs-comment">//组件的模板必须写在这里</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>值得注意的是，组件配置对象和 vue 实例有以下几点差异：</p><ul><li>无<code>el</code></li><li><code>data</code>必须是一个函数，该函数返回的对象作为数据</li><li>由于没有<code>el</code>配置，组件的虚拟 DOM 树必须定义在<code>template</code>或<code>render</code>中</li></ul><h2 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h2><p>注册组件分为两种方式，一种是<strong>全局注册</strong>，一种是<strong>局部注册</strong></p><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>一旦全局注册了一个组件，整个应用中任何地方都可以使用该组件</p><p><img src="/img/10-10.png"></p><p>全局注册的方式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数1：组件名称，将来在模板中使用组件时，会使用该名称</span><br><span class="hljs-comment">// 参数2：组件配置对象</span><br><span class="hljs-comment">// 该代码运行后，即可在模板中使用组件</span><br>Vue.component(<span class="hljs-string">&quot;my-comp&quot;</span>, myComp);<br></code></pre></td></tr></table></figure><p>在模板中，可以使用组件了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-comp</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 或 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-comp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-comp</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但在一些工程化的大型项目中，很多组件都不需要全局使用。</p><blockquote><p>比如一个登录组件，只有在登录的相关页面中使用，如果全局注册，将导致构建工具无法优化打包<br><strong>因此，除非组件特别通用，否则不建议使用全局注册</strong></p></blockquote><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>局部注册就是哪里要用到组件，就在哪里注册<br><img src="/img/10-11.png"><br>局部注册的方式是，在要使用组件的组件或实例中加入一个配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这是另一个要使用my-comp的组件</span><br><span class="hljs-keyword">var</span> otherComp = &#123;<br>  <span class="hljs-attr">components</span>:&#123;<br>    <span class="hljs-comment">// 属性名为组件名称，模板中将使用该名称</span><br>    <span class="hljs-comment">// 属性值为组件配置对象</span><br>    <span class="hljs-string">&quot;my-comp&quot;</span>: myComp<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;!-- 该组件的其他内容 --&gt;</span><br><span class="hljs-string">      &lt;my-comp&gt;&lt;/my-comp&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="应用组件"><a href="#应用组件" class="headerlink" title="应用组件"></a>应用组件</h2><p>在模板中使用组件特别简单，把组件名当作 HTML 元素名使用即可。<br>但要注意以下几点：</p><ol><li><strong>组件必须有结束</strong></li></ol><p>组件可以自结束，也可以用结束标记结束，但必须要有结束<br>下面的组件使用是错误的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-comp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-comp</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>组件的命名</strong></li></ol><p>无论你使用哪种方式注册组件，组件的命名需要遵循规范。<br>组件可以使用<code>kebab-case 短横线命名法</code>，也可以使用<code>PascalCase 大驼峰命名法</code><br>下面两种命名均是可以的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> otherComp = &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-string">&quot;my-comp&quot;</span>: myComp, <span class="hljs-comment">// 方式1</span><br>    <span class="hljs-attr">MyComp</span>: myComp, <span class="hljs-comment">//方式2</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>实际上，使用<code>小驼峰命名法 camelCase</code>也是可以识别的，只不过不符合官方要求的规范</p></blockquote><p>使用<code>PascalCase</code>方式命名还有一个额外的好处，即可以在模板中使用两种组件名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> otherComp = &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-attr">MyComp</span>: myComp,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>模板中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 可用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-comp</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">MyComp</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>因此，在使用组件时，为了方便，往往使用以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> MyComp = &#123;<br>  <span class="hljs-comment">//组件配置</span><br>&#125;;<br><br><span class="hljs-keyword">var</span> OtherComp = &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    MyComp, <span class="hljs-comment">// ES6速写属性</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h2><p>一个组件创建好后，往往会在各种地方使用它。它可能多次出现在 vue 实例中，也可能出现在其他组件中。<br>于是就形成了一个组件树</p><p><img src="/img/10-12.png"></p><h2 id="向组件传递数据"><a href="#向组件传递数据" class="headerlink" title="向组件传递数据"></a>向组件传递数据</h2><p>大部分组件要完成自身的功能，都需要一些额外的信息<br>比如一个头像组件，需要告诉它头像的地址，这就需要在使用组件时向组件传递数据<br>传递数据的方式有很多种，最常见的一种是使用<strong>组件属性 component props</strong><br>首先在组件中申明可以接收哪些属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> MyComp = &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;p1&quot;</span>, <span class="hljs-string">&quot;p2&quot;</span>, <span class="hljs-string">&quot;p3&quot;</span>],<br>  <span class="hljs-comment">// 和vue实例一样，使用组件时也会创建组件的实例</span><br>  <span class="hljs-comment">// 而组件的属性会被提取到组件实例中，因此可以在模板中使用</span><br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &#123;&#123;p1&#125;&#125;, &#123;&#123;p2&#125;&#125;, &#123;&#123;p3&#125;&#125;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在使用组件时，向其传递属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> OtherComp = &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    MyComp,<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;my-comp :p1=&quot;a&quot; :p2=&quot;2&quot; p3=&quot;3&quot;/&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>注意：在组件中，属性是只读的，绝不可以更改，这叫做单向数据流</strong><br><img src="/img/10-13.png"></p><h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><h1 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h1><p>vue-cli: <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a><br>安装完查看版本：vue –version<br>搭建工程：命令输入 vue create my-site</p><p>src 文件里 运行 npm run build 打包命令，放在了 dist 目录，可以展示在页面上了<br>搭建一个开发服务器：npm run serve，内置了热更新功能<br>入口文件</p><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p><code>vue-cli</code>是一个脚手架工具，用于搭建<code>vue</code>工程<br>它内部使用了<code>webpack</code>，并预置了诸多插件（<code>plugin</code>）和加载器（<code>loader</code>），以达到开箱即用的效果<br>除了基本的插件和加载器外，<code>vue-cli</code>还预置了：</p><ul><li>babel</li><li>webpack-dev-server</li><li>eslint</li><li>postcss</li><li>less-loader</li></ul><p>打包 npm run build，打包到 dist 目录</p><h2 id="SFC"><a href="#SFC" class="headerlink" title="SFC"></a>SFC</h2><p>单文件组件，Single File Component，即一个文件就包含了一个组件所需的全部代码<br>App.vue 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 组件模板代码 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 组件配置</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-comment">/* 组件样式 */</span></span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>工程讲解：<br>安装插件后，写下 def 就会生成模板</p><h2 id="头像组件"><a href="#头像组件" class="headerlink" title="头像组件"></a>头像组件</h2><p>目前 url 传入数字或者字符串都正确，但是实际上应该只有字符串合适<br>思考:url 类型需要约束；忘了传递 url 也不提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;Avatar :url=&quot;2&quot; /&gt;<br>    &lt;!-- 加上冒号写的是JS表达式 --&gt;<br>    &lt;!-- &lt;Avatar :url=&quot;&#x27;1&quot; /&gt; --&gt;<br>    &lt;!-- 字符串 --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>props（声明组件的属性）多种形式：</p><ol><li>数组</li><li>对象</li></ol><p>现在我们对 props 进行约束 Avator.vue 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-built_in">String</span>, <span class="hljs-comment">//url属性必须是一个字符串</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>有了约束，再传数字的话</p><p>忘了传递 url 加上约束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">url</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>, <span class="hljs-comment">// url属性必须是字符串</span><br>      <span class="hljs-attr">require</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//属性必填</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>还有的是圆角<br>img 上绑定 class=”avatar-img”<br>类样式冲突怎么办</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style scoped&gt;<br>带有作用域的样式，实质在内部加上了个属性选择器<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">size: &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-number">150</span>,不填则默认<span class="hljs-number">150</span><br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>当<code>vue-cli</code>进行<strong>打包</strong>时，会直接把组件中的模板转换为<code>render</code>函数，这叫做模板预编译<br>这样做的好处在于：</p><ol><li>运行时就不再需要编译模板了，提高了运行效率</li><li>打包结果中不再需要 vue 的编译代码，减少了打包体积</li></ol><p><img src="/img/10-14.png"></p><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>例子引入：想得到全名</p><blockquote><p>小型应用可以用此方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;p&gt;性：&#123;&#123; firstName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;名：&#123;&#123; lastName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; firstName + &quot; &quot; + lastName &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      firstName: &quot;袁&quot;,<br>      lastName: &quot;进&quot;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>通过方法调用的话,有个缺陷：如果多次使用，则多次调用该函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;p&gt;性：&#123;&#123; firstName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;名：&#123;&#123; lastName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; getFullName() &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; getFullName() &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; getFullName() &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      firstName: &quot;袁&quot;,<br>      lastName: &quot;进&quot;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    getFullName() &#123;<br>      console.log(&quot;调用&quot;);<br>      return this.firstName + &quot; &quot; + this.lastName;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>所以，vue 出版了计算属性</p><blockquote><p>计算属性：根据已有的数据得到新的数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;p&gt;性：&#123;&#123; firstName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;名：&#123;&#123; lastName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      firstName: &quot;袁&quot;,<br>      lastName: &quot;进&quot;,<br>    &#125;;<br>  &#125;,<br>  computed: &#123;<br>    fullName() &#123;<br>      return this.firstName + &quot; &quot; + this.lastName;<br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br>    getFullName() &#123;<br>      return this.firstName + &quot; &quot; + this.lastName;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>应用:点击按钮改变姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;p&gt;性：&#123;&#123; firstName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;名：&#123;&#123; lastName &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;setNewName(&#x27;姬&#x27;, &#x27;成&#x27;)&quot;&gt;修改姓名为姬成&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      firstName: &quot;袁&quot;,<br>      lastName: &quot;进&quot;,<br>    &#125;;<br>  &#125;,<br>  computed: &#123;<br>    fullName() &#123;<br>      console.log(&quot;运行&quot;);<br>      return this.firstName + &quot; &quot; + this.lastName;<br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br>    getFullName() &#123;<br>      return this.firstName + &quot; &quot; + this.lastName;<br>    &#125;,<br>    setNewName(first, last) &#123;<br>      this.firstName = first;<br>      this.lastName = last;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>面试题：计算属性和方法有什么区别？(理解记忆)<br>计算属性本质上是包含 getter 和 setter 的方法<br>当获取计算属性时，实际上是在调用计算属性的 getter 方法。vue 会收集计算属性的依赖，并缓存计算属性的返回结果。只有当依赖变化后才会重新进行计算。<br>方法没有缓存，每次调用方法都会导致重新执行。<br>计算属性的 getter 和 setter 参数固定，getter 没有参数，setter 只有一个参数。而方法的参数不限。<br>由于有以上的这些区别，因此计算属性通常是根据已有数据得到其他数据，并在得到数据的过程中不建议使用异步、当前时间、随机数等副作用操作。<br>实际上，他们最重要的区别是含义上的区别。计算属性含义上也是一个数据，可以读取也可以赋值；方法含义上是一个操作，用于处理一些事情。<br>完整的计算属性书写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed: &#123;<br>  <span class="hljs-attr">propName</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">// getter</span><br>    &#125;,<br>      <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span>&#123;<br>        <span class="hljs-comment">// setter</span><br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述案例的全写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">computed: &#123; fullName: &#123; get() &#123; console.log(&quot;运行&quot;); return this.firstName + &quot; &quot;<br>+ this.lastName; &#125;, &#125;, &#125;,<br></code></pre></td></tr></table></figure><p>只包含 getter 的计算属性简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed: &#123;<br>  <span class="hljs-function"><span class="hljs-title">propName</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// getter</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p>样式链接：<code>//at.alicdn.com/t/font_2164449_nalfgtq7il.css</code><br>类样式映射：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> classMap = &#123;<br>  <span class="hljs-attr">home</span>: <span class="hljs-string">&quot;iconzhuye&quot;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-string">&quot;iconzhengque&quot;</span>,<br>  <span class="hljs-attr">error</span>: <span class="hljs-string">&quot;iconcuowu&quot;</span>,<br>  <span class="hljs-attr">close</span>: <span class="hljs-string">&quot;iconguanbi&quot;</span>,<br>  <span class="hljs-attr">warn</span>: <span class="hljs-string">&quot;iconjinggao&quot;</span>,<br>  <span class="hljs-attr">info</span>: <span class="hljs-string">&quot;iconxinxi&quot;</span>,<br>  <span class="hljs-attr">blog</span>: <span class="hljs-string">&quot;iconblog&quot;</span>,<br>  <span class="hljs-attr">code</span>: <span class="hljs-string">&quot;iconcode&quot;</span>,<br>  <span class="hljs-attr">about</span>: <span class="hljs-string">&quot;iconset_about_hov&quot;</span>,<br>  <span class="hljs-attr">weixin</span>: <span class="hljs-string">&quot;iconweixin&quot;</span>,<br>  <span class="hljs-attr">mail</span>: <span class="hljs-string">&quot;iconemail&quot;</span>,<br>  <span class="hljs-attr">github</span>: <span class="hljs-string">&quot;icongithub&quot;</span>,<br>  <span class="hljs-attr">qq</span>: <span class="hljs-string">&quot;iconsign_qq&quot;</span>,<br>  <span class="hljs-attr">arrowUp</span>: <span class="hljs-string">&quot;iconiconfonticonfonti2copy&quot;</span>,<br>  <span class="hljs-attr">arrowDown</span>: <span class="hljs-string">&quot;iconiconfonticonfonti2&quot;</span>,<br>  <span class="hljs-attr">empty</span>: <span class="hljs-string">&quot;iconempty&quot;</span>,<br>  <span class="hljs-attr">chat</span>: <span class="hljs-string">&quot;iconliuyan&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>作用域样式对子组件根元素的影响<br><img src="/img/10-15.png"></p><h1 id="组件事件"><a href="#组件事件" class="headerlink" title="组件事件"></a>组件事件</h1><h1 id="pager-组件"><a href="#pager-组件" class="headerlink" title="pager 组件"></a>pager 组件</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>current</td><td>当前页码</td><td>Number</td><td>否</td><td>1</td></tr><tr><td>total</td><td>总数据量</td><td>Number</td><td>否</td><td>0</td></tr><tr><td>limit</td><td>页容量</td><td>Number</td><td>否</td><td>10</td></tr><tr><td>visibleNumber</td><td>可见页码数</td><td>Number</td><td>否</td><td>10</td></tr></tbody></table><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><table><thead><tr><th>事件名</th><th>含义</th><th>事件参数</th><th>参数类型</th></tr></thead><tbody><tr><td>pageChange</td><td>页码变化</td><td>新的页码</td><td>Number</td></tr></tbody></table><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p><strong>全局样式</strong></p></li><li><p><strong>v-if 和 v-show</strong><br><img src="/img/10-16.png"></p></li><li><p><strong>面试题：v-if 和 v-show 有什么区别？</strong></p></li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">v-<span class="hljs-keyword">if</span>能够控制是否生成vnode，也就间接控制了是否生成对应的dom。当v-<span class="hljs-keyword">if</span>为<span class="hljs-literal">true</span>时，会生成对应的vnode，并生成对应的dom元素；当其为<span class="hljs-literal">false</span>时，不会生成对应的vnode，自然不会生成任何的dom元素。<br>v-<span class="hljs-built_in">show</span>始终会生成vnode，也就间接导致了始终生成dom。它只是控制dom的<span class="hljs-built_in">display</span>属性，当v-<span class="hljs-built_in">show</span>为<span class="hljs-literal">true</span>时，不做任何处理；当其为<span class="hljs-literal">false</span>时，生成的dom的<span class="hljs-built_in">display</span>属性为none。<br>使用v-<span class="hljs-keyword">if</span>可以有效的减少树的节点和渲染量，但也会导致树的不稳定；而使用v-<span class="hljs-built_in">show</span>可以保持树的稳定，但不能减少树的节点和渲染量。<br>因此，在实际开发中，显示状态变化频繁的情况下应该使用v-<span class="hljs-built_in">show</span>，以保持树的稳定；显示状态变化较少时应该使用v-<span class="hljs-keyword">if</span>，以减少树的节点和渲染量。<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>组件事件</strong></li></ol><p><img src="/img/10-17.png"><br>抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理<br>事件参数：子组件抛出事件时，传递给父组件的数据<br>注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理</p><h1 id="优化工程结构"><a href="#优化工程结构" class="headerlink" title="优化工程结构"></a>优化工程结构</h1><h2 id="如何使用组件？"><a href="#如何使用组件？" class="headerlink" title="如何使用组件？"></a>如何使用组件？</h2><p>编写组件说明文档<br>./src/components/README.md</p><h2 id="如何测试组件效果？"><a href="#如何测试组件效果？" class="headerlink" title="如何测试组件效果？"></a>如何测试组件效果？</h2><p><a href="https://cli.vuejs.org/zh/guide/prototyping.html">https://cli.vuejs.org/zh/guide/prototyping.html</a><br>vue serve + 路径<br>简化操作<br>利用学过的包管理器，在配置文件里面配置</p><h1 id="组件练习"><a href="#组件练习" class="headerlink" title="组件练习"></a>组件练习</h1><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>在某些组件的模板中，有一部分区域需要父组件来指定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- message组件：一个弹窗消息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里是消息内容，可以是一个文本，也可能是一段html，具体是什么不知道，需要父组件指定 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="插槽的简单用法"><a href="#插槽的简单用法" class="headerlink" title="插槽的简单用法"></a>插槽的简单用法</h2><p>此时，就需要使用插槽来定制组件的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- message组件：一个弹窗消息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- slot是vue的内置组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件App --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Message</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>App Message<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>detail<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Message</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 最终的结果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-message&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>App Message<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>detail<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/10-18.png"></p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>如果某个组件中需要父元素传递多个区域的内容，也就意味着需要提供多个插槽</p><p>为了避免冲突，就需要给不同的插槽赋予不同的名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Layout 组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layout-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 我们希望把页头放这里，提供插槽，名为header --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 我们希望把主要内容放这里，提供插槽，名为default --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 我们希望把页脚放这里，提供插槽，名为footer --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件App --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/10-19.png"></p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>vue-router 官网：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></p><p><img src="/img/10-20.png"></p><ol><li><strong>如何根据地址中的路径选择不同的组件？</strong></li><li><strong>把选择的组件放到哪个位置？</strong></li><li><strong>如何无刷新的切换组件？</strong></li></ol><h2 id="路由插件"><a href="#路由插件" class="headerlink" title="路由插件"></a>路由插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i vue-router<br></code></pre></td></tr></table></figure><p>路由插件的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br>Vue.use(VueRouter); <span class="hljs-comment">// Vue.use(插件)  在Vue中安装插件</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-comment">// 路由配置</span><br>&#125;)<br><span class="hljs-keyword">new</span> Vue(&#123;<br>  ...,<br>  router<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 路由配置</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">// 路由规则</span><br>    <span class="hljs-comment">// 当匹配到路径 /foo 时，渲染 Foo 组件</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-attr">component</span>: Foo &#125;,<br>    <span class="hljs-comment">// 当匹配到路径 /bar 时，渲染 Bar 组件</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/bar&quot;</span>, <span class="hljs-attr">component</span>: Bar &#125;,<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- App.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 公共区域 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 页面区域 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- vue-router 匹配到的组件会渲染到这里 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RouterView</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><p>路由模式决定了：</p><ol><li>路由从哪里获取访问路径</li><li>路由如何改变访问路径</li></ol><p><code>vue-router</code>提供了三种路由模式：</p><ol><li>hash：默认值。路由从浏览器地址栏中的 hash 部分获取路径，改变路径也是改变的 hash 部分。该模式兼容性最好。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/#/</span>blog  --&gt;  /blog<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/about#/</span>blog  --&gt; /blog<br></code></pre></td></tr></table></figure><ol start="2"><li>history：路由从浏览器地址栏的<code>location.pathname</code>中获取路径，改变路径使用的 H5 的<code>history api</code>。该模式可以让地址栏最友好，但是需要浏览器支持<code>history api</code></li></ol><p><strong>内部实现原理：history.pushState(null, null, “./blog”)，不刷新改变地址,但是自己写是监控不到的，怎么监控，等会讲</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/#/</span>blog  --&gt;  /<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/about#/</span>blog  --&gt; /about<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/blog  --&gt; /</span>blog<br></code></pre></td></tr></table></figure><ol start="3"><li>abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">内存： /--&gt;   /<br>内存： /about--&gt; /about<br>内存： /blog  --&gt; /blog<br></code></pre></td></tr></table></figure><blockquote><p>每一次刷新页面</p></blockquote><p>请求 inde.html<br>请求各种.js<br>请求各种.css<br>执行 Js<br>创建 vue 应用<br>渲染全部组件树<br>挂载到指定的 div 中</p><blockquote><p>不刷新</p></blockquote><p>执行一段 JS 代码：切换某个区域的组件<br>以上，所以推荐单页面应用</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p><code>vue-router</code>提供了全局的组件<code>RouterLink</code>，它的渲染结果是一个<code>a</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">RouterLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/blog&quot;</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">RouterLink</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mode:hash 生成 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/blog&quot;</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mode:history 生成 --&gt;</span><br><span class="hljs-comment">&lt;!-- 为了避免刷新页面，vue-router实际上为它添加了点击事件，并阻止了默认行为，在事件内部使用hitory api更改路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/blog&quot;</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/10-21.png"></p><h3 id="激活状态"><a href="#激活状态" class="headerlink" title="激活状态"></a>激活状态</h3><p>默认情况下，<code>vue-router</code>会用 <strong>当前路径</strong> 匹配 <strong>导航路径</strong> ：</p><ul><li>如果当前路径是以导航路径开头，则算作匹配，会为导航的 a 元素添加类名<code>router-link-active</code></li><li>如果当前路径完全等于导航路径，则算作精确匹配，会为导航的 a 元素添加类名<code>router-link-exact-active</code></li></ul><p>例如，当前访问的路径是<code>/blog</code>，则：</p><table><thead><tr><th>导航路径</th><th>类名</th></tr></thead><tbody><tr><td>/</td><td>router-link-active</td></tr><tr><td>/blog</td><td>router-link-active   router-link-exact-active</td></tr><tr><td>/about</td><td>无</td></tr><tr><td>/message</td><td>无</td></tr></tbody></table><p>可以为组件<code>RouterLink</code>添加 bool 属性<code>exact</code>，将匹配规则改为：必须要精确匹配才能添加匹配类名<code>router-link-active</code><br>例如，当前访问的路径是<code>/blog</code>，则：</p><table><thead><tr><th>导航路径</th><th>exact</th><th>类名</th></tr></thead><tbody><tr><td>/</td><td>true</td><td>无</td></tr><tr><td>/blog</td><td>false</td><td>router-link-active   router-link-exact-active</td></tr><tr><td>/about</td><td>true</td><td>无</td></tr><tr><td>/message</td><td>true</td><td>无</td></tr></tbody></table><p>例如，当前访问的路径是<code>/blog/detail/123</code>，则：</p><table><thead><tr><th>导航路径</th><th>exact</th><th>类名</th></tr></thead><tbody><tr><td>/</td><td>true</td><td>无</td></tr><tr><td>/blog</td><td>false</td><td>router-link-active</td></tr><tr><td>/about</td><td>true</td><td>无</td></tr><tr><td>/message</td><td>true</td><td>无</td></tr></tbody></table><p>另外，可以通过<code>active-class</code>属性更改匹配的类名，通过<code>exact-active-class</code>更改精确匹配的类名</p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>使用命名路由可以解除系统与路径之间的耦合，解决了某些需求—需要从 blog 改为 article</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 路由配置</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">// 路由规则</span><br>    <span class="hljs-comment">// 当匹配到路径 /foo 时，渲染 Foo 组件</span><br>    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-attr">component</span>: Foo &#125;,<br>    <span class="hljs-comment">// 当匹配到路径 /bar 时，渲染 Bar 组件</span><br>    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/bar&quot;</span>, <span class="hljs-attr">component</span>: Bar &#125;,<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RouterLink</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name:&#x27;foo&#x27; &#125;&quot;</span>&gt;</span>go to foo<span class="hljs-tag">&lt;/<span class="hljs-name">RouterLink</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="弹出消息"><a href="#弹出消息" class="headerlink" title="弹出消息"></a>弹出消息</h1><h2 id="使用-css-module"><a href="#使用-css-module" class="headerlink" title="使用 css module"></a>使用 css module</h2><p>需要将样式文件命名为<code>xxx.module.ooo</code><br><code>xxx</code>为文件名<br><code>ooo</code>为样式文件后缀名，可以是<code>css</code>、<code>less</code></p><h2 id="得到组件渲染的-Dom"><a href="#得到组件渲染的-Dom" class="headerlink" title="得到组件渲染的 Dom"></a>得到组件渲染的 Dom</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    获取某个组件渲染的Dom根元素</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getComponentRootDom</span>(<span class="hljs-params">comp, props</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(comp, &#123; props &#125;),<br>  &#125;);<br>  vm.$mount();<br>  <span class="hljs-keyword">return</span> vm.$el;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="扩展-vue-实例"><a href="#扩展-vue-实例" class="headerlink" title="扩展 vue 实例"></a>扩展 vue 实例</h2><p><img src="/img/10-22.png"></p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;para&quot;</span>&gt;</span>some paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ChildComp</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;comp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span>查看所有引用<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> ChildComp <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ChildComp&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">      ChildComp,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 获取持有的所有引用</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs);</span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">        &#123;</span></span><br><span class="hljs-comment"><span class="javascript">        para: p元素（原生DOM）,</span></span><br><span class="hljs-comment"><span class="javascript">        comp: ChildComp的组件实例</span></span><br><span class="hljs-comment"><span class="javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="javascript">        */</span></span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>通过<code>ref</code>可以直接操作<code>dom</code>元素，甚至可能直接改动子组件，这些都不符合<code>vue</code>的设计理念。<br>除非迫不得已，否则不要使用<code>ref</code></p></blockquote><h1 id="获取远程数据"><a href="#获取远程数据" class="headerlink" title="获取远程数据"></a>获取远程数据</h1><p>本节课内容和 vue 没有任何关系！</p><blockquote><p>vue cli: <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a><br>axios: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a><br>mockjs：<a href="http://mockjs.com/">http://mockjs.com/</a></p></blockquote><h2 id="远程获取数据的意义"><a href="#远程获取数据的意义" class="headerlink" title="远程获取数据的意义"></a>远程获取数据的意义</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384408586-3867783d-91cc-4cd8-bf4d-a24133fc442c.png#height=275&id=YP5lA&originHeight=698&originWidth=1228&originalType=binary&ratio=1&size=0&status=done&style=none&width=484"><br>复习所学</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fetch(<span class="hljs-string">&quot;url&quot;</span>)<br>  .then(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> r.json())<br>  .then(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(r));<br></code></pre></td></tr></table></figure><p>跨域只有浏览器会产生，和 http 没关系</p><h2 id="开发环境有跨域问题"><a href="#开发环境有跨域问题" class="headerlink" title="开发环境有跨域问题"></a>开发环境有跨域问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1632323546099-99cb98ab-7119-4c7f-9ad4-a632cf78c488.png#clientId=u5a0a5108-e1a2-4&from=paste&height=483&id=ud834d8d2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=966&originWidth=1540&originalType=binary&ratio=1&size=447775&status=done&style=none&taskId=uea98b23f-a5b2-4b17-93d4-5600f722988&width=770" alt="image.png"></p><h2 id="生产环境没有跨域问题"><a href="#生产环境没有跨域问题" class="headerlink" title="生产环境没有跨域问题"></a>生产环境没有跨域问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384502900-97e4ffd3-9cc5-4eaf-8274-af8a654afaeb.png#height=601&id=KsXs3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=527&originWidth=703&originalType=binary&ratio=1&size=37911&status=done&style=none&width=801.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384513936-ba529e23-57c7-45c9-be7c-c96299d7141f.png#height=400&id=Nryu4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=539&originWidth=1037&originalType=binary&ratio=1&size=61153&status=done&style=none&width=770.5" alt="image.png"></p><h2 id="解决开发环境的跨域问题"><a href="#解决开发环境的跨域问题" class="headerlink" title="解决开发环境的跨域问题"></a>解决开发环境的跨域问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384533698-fe2b2a58-aa96-4362-862e-b84df48ea745.png#height=448&id=edCK0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=706&originWidth=1104&originalType=binary&ratio=1&size=76382&status=done&style=none&width=701" alt="image.png"></p><h2 id="为什么要-Mock-数据"><a href="#为什么要-Mock-数据" class="headerlink" title="为什么要 Mock 数据"></a>为什么要 Mock 数据</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384544238-f755ef4e-7e2b-4f02-817c-c7ca7b385cb5.png#height=337&id=a2xds&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=1084&originalType=binary&ratio=1&size=73731&status=done&style=none&width=542" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384552936-f4ef4ada-436e-408b-ba95-bf9e0e9c76ac.png#height=306&id=qNfYp&margin=%5Bobject%20Object%5D&name=image.png&originHeight=612&originWidth=1057&originalType=binary&ratio=1&size=63902&status=done&style=none&width=528.5" alt="image.png"></p><blockquote><p>以上解决了跨域问题</p></blockquote><h1 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h1><h2 id="组件生命周期-1"><a href="#组件生命周期-1" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384727422-aac976d1-c143-4533-87f5-7c241dc5d9ac.png#height=954&id=E5rvJ&originHeight=954&originWidth=1388&originalType=binary&ratio=1&size=0&status=done&style=none&width=1388"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384727425-1fe15040-90a2-4630-9d92-9485f091995a.png#height=1158&id=n79yv&originHeight=1158&originWidth=1194&originalType=binary&ratio=1&size=0&status=done&style=none&width=1194"></p><h2 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h2><blockquote><p>不要死记硬背，要根据具体情况灵活处理</p></blockquote><h3 id="加载远程数据"><a href="#加载远程数据" class="headerlink" title="加载远程数据"></a>加载远程数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">news</span>: [],<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.news = <span class="hljs-keyword">await</span> getNews();<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="直接操作-DOM"><a href="#直接操作-DOM" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">containerWidth</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">containerHeight</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.containerWidth = <span class="hljs-built_in">this</span>.$refs.container.clientWidth;<br>    <span class="hljs-built_in">this</span>.containerHeight = <span class="hljs-built_in">this</span>.$refs.container.containerHeight;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="启动和清除计时器"><a href="#启动和清除计时器" class="headerlink" title="启动和清除计时器"></a>启动和清除计时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">timer</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>     ...<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">destroyed</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timer);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完成首页"><a href="#完成首页" class="headerlink" title="完成首页"></a>完成首页</h1><p><code>Home</code>组件负责呈现整体效果<br><code>CarouselItem</code>组件负责呈现单张轮播图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384770613-ee3252ca-5b62-4d46-a937-623826e59bf6.png#height=854&id=oqEGW&originHeight=854&originWidth=1036&originalType=binary&ratio=1&size=0&status=done&style=none&width=1036"><br><code>Home</code>组件负责：</p><ul><li>整体布局</li><li>监听鼠标滚轮事件，切换轮播图</li><li>提供上下按钮，切换轮播图</li><li>提供指示器，切换轮播图</li></ul><p><code>CarouselItem</code>组件负责：</p><ul><li>单张轮播图的全部事务</li></ul><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h3 id="定义指令"><a href="#定义指令" class="headerlink" title="定义指令"></a>定义指令</h3><h3 id="全局定义"><a href="#全局定义" class="headerlink" title="全局定义"></a>全局定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 指令名称为：mydirec1</span><br>Vue.directive(<span class="hljs-string">&quot;mydirec1&quot;</span>, &#123;<br>  <span class="hljs-comment">// 指令配置</span><br>&#125;);<br><br><span class="hljs-comment">// 指令名称为：mydirec2</span><br>Vue.directive(<span class="hljs-string">&quot;mydirec2&quot;</span>, &#123;<br>  <span class="hljs-comment">// 指令配置</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>之后，所有的组件均可以使用<code>mydirec1</code>和<code>mydirec2</code>指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 某个组件代码 --&gt;<br>  &lt;div&gt;<br>    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;<br>    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;...&lt;/div&gt;<br>    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="局部定义"><a href="#局部定义" class="headerlink" title="局部定义"></a>局部定义</h3><p>局部定义是指在某个组件中定义指令，和局部注册组件类似。</p><p>定义的指令仅在该组件中有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 某个组件代码 --&gt;<br>  &lt;div&gt;<br>    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;<br>    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;...&lt;/div&gt;<br>    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  // 定义指令<br>  directives: &#123;<br>    // 指令名称：mydirec1<br>    mydirec1: &#123;<br>      // 指令配置<br>    &#125;,<br>    // 指令名称：mydirec2<br>    mydirec2: &#123;<br>      // 指令配置<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>和局部注册组件一样，为了让指令更加通用，通常我们会把指令的配置提取到其他模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 某个组件代码 --&gt;<br>  &lt;div&gt;<br>    &lt;MyComp v-mydirec1=&quot;js表达式&quot; /&gt;<br>    &lt;div v-mydirec2=&quot;js表达式&quot;&gt;...&lt;/div&gt;<br>    &lt;img v-mydirec1=&quot;js表达式&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 导入当前组件需要用到的指令配置对象<br>import mydirec1 from &quot;@/directives/mydirec1&quot;;<br>import mydirec2 from &quot;@/directives/mydirec2&quot;;<br>export default &#123;<br>  // 定义指令<br>  directives: &#123;<br>    mydirec1,<br>    mydirec2,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="指令配置对象"><a href="#指令配置对象" class="headerlink" title="指令配置对象"></a>指令配置对象</h2><p>没有配置的指令，就像没有配置的组件一样，毫无意义</p><p><code>vue</code>支持在指令中配置一些<strong>钩子函数</strong>，在适当的时机，<code>vue</code>会调用这些钩子函数并传入适当的参数，以便开发者完成自己想做的事情。</p><p>常用的钩子函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 指令配置对象</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 被绑定元素插入父节点时调用。</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 所在组件的 VNode 更新时调用</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0">查看更多的钩子函数</a></p></blockquote><p>每个钩子函数在调用时，<code>vue</code>都会向其传递一些参数，其中最重要的是前两个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 指令配置对象</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, binding</span>)</span>&#123;<br>    <span class="hljs-comment">// el 是被绑定元素对应的真实DOM</span><br>    <span class="hljs-comment">// binding 是一个对象，描述了指令中提供的信息</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bingding-对象"><a href="#bingding-对象" class="headerlink" title="bingding 对象"></a>bingding 对象</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384822460-4a700f0e-4121-400c-a89e-4e215707a381.png#height=388&id=UJNcm&originHeight=870&originWidth=1230&originalType=binary&ratio=1&size=0&status=done&style=none&width=548"></p><blockquote><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">查看更多 bingding 对象的属性</a></p></blockquote><h2 id="配置简化"><a href="#配置简化" class="headerlink" title="配置简化"></a>配置简化</h2><p>比较多的时候，在配置自定义指令时，我们都会配置两个钩子函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, bingding</span>)</span>&#123;<br><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params">el, bingding</span>)</span>&#123;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，在元素绑定和更新时，都能运行到钩子函数</p><p>如果这两个钩子函数实现的功能相同，可以直接把指令配置简化为一个单独的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el, bingding</span>)</span>&#123;<br>  <span class="hljs-comment">// 该函数会被同时设置到bind和update中</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>利用上述知识，可满足大部分自定义指令的需求<br>更多的自定义指令用法见<a href="https://cn.vuejs.org/v2/guide/custom-directive.html">官网</a></p></blockquote><h1 id="组件混入"><a href="#组件混入" class="headerlink" title="组件混入"></a>组件混入</h1><p>有的时候，许多组件有着类似的功能，这些功能代码分散在组件不同的配置中。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384889359-7c84f667-adc4-4708-888b-c5dda4e09c1a.png#height=359&id=mvY5O&originHeight=882&originWidth=1178&originalType=binary&ratio=1&size=0&status=done&style=none&width=479"></p><p>于是，我们可以把这些配置代码抽离出来，利用<strong>混入</strong>融合到组件中。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384889374-9497764c-c41f-4bc6-af0e-3f34a9661b81.png#height=476&id=x8yaH&originHeight=1162&originWidth=1224&originalType=binary&ratio=1&size=0&status=done&style=none&width=501"></p><p>具体的做法非常简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 抽离的公共代码</span><br><span class="hljs-keyword">const</span> common = &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;common created&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">computed</span>:&#123;<br>    <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a + <span class="hljs-built_in">this</span>.b;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用comp1，将会得到：</span><br><span class="hljs-comment"> * common created</span><br><span class="hljs-comment"> * comp1 created 1 2 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> comp1 = &#123;<br>  <span class="hljs-attr">mixins</span>: [common] <span class="hljs-comment">// 之所以是数组，是因为可以混入多个配置代码</span><br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;comp1 created&quot;</span>, <span class="hljs-built_in">this</span>.a, <span class="hljs-built_in">this</span>.b, <span class="hljs-built_in">this</span>.sum);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>混入并不复杂，更多细节参见<a href="https://cn.vuejs.org/v2/guide/mixins.html">官网</a></p><h1 id="组件递归"><a href="#组件递归" class="headerlink" title="组件递归"></a>组件递归</h1><h1 id="开发文章列表页-part1"><a href="#开发文章列表页-part1" class="headerlink" title="开发文章列表页-part1"></a>开发文章列表页-part1</h1><h1 id="开发文章列表页-part2"><a href="#开发文章列表页-part2" class="headerlink" title="开发文章列表页-part2"></a>开发文章列表页-part2</h1><h2 id="文章列表页逻辑"><a href="#文章列表页逻辑" class="headerlink" title="文章列表页逻辑"></a>文章列表页逻辑</h2><h3 id="路由跳转逻辑"><a href="#路由跳转逻辑" class="headerlink" title="路由跳转逻辑"></a>路由跳转逻辑</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384985880-e76268b4-ac4b-467d-a9d7-9363e2d393c9.png#height=722&id=FxPth&originHeight=722&originWidth=1744&originalType=binary&ratio=1&size=0&status=done&style=none&width=1744"></p><h3 id="组件逻辑"><a href="#组件逻辑" class="headerlink" title="组件逻辑"></a>组件逻辑</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384985888-19702db2-bac1-4d46-8134-85eff6f43392.png#height=1054&id=lezoI&originHeight=1054&originWidth=1396&originalType=binary&ratio=1&size=0&status=done&style=none&width=1396"></p><h4 id="BlogList"><a href="#BlogList" class="headerlink" title="BlogList"></a>BlogList</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384985888-db709542-7294-430e-879e-f8169bafdf29.png#height=998&id=GH7ly&originHeight=998&originWidth=1432&originalType=binary&ratio=1&size=0&status=done&style=none&width=1432"></p><h4 id="BlogCategory"><a href="#BlogCategory" class="headerlink" title="BlogCategory"></a>BlogCategory</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616384985883-abf3de74-f398-460a-946e-2ed06d360013.png#height=910&id=PzC4k&originHeight=910&originWidth=1386&originalType=binary&ratio=1&size=0&status=done&style=none&width=1386"></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>我们希望下面的地址都能够匹配到<code>Blog</code>组件</p><ul><li><code>/article</code>，显示全部文章</li><li><code>/article/cate/1</code>，显示分类<code>id</code>为<code>1</code>的文章</li><li><code>/article/cate/3</code>，显示分类<code>id</code>为<code>3</code>的文章</li><li>…</li></ul><p>第一种情况很简单，只需要将一个固定的地址匹配到<code>Blog</code>组件即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article&quot;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Blog&quot;</span>,<br>  <span class="hljs-attr">component</span>: Blog<br>&#125;<br></code></pre></td></tr></table></figure><p>但后面的情况则不同：匹配到<code>Blog</code>组件的地址中，有一部分是动态变化的，则需要使用一种特殊的表达方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article/cate/:categoryId&quot;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;CategoryBlog&quot;</span>,<br>  <span class="hljs-attr">component</span>: Blog<br>&#125;<br></code></pre></td></tr></table></figure><p>在地址中使用<code>:xxx</code>，来表达这一部分的内容是变化的，在<code>vue-router</code>中，将变化的这一部分称之为<code>params</code>，可以在<code>vue</code>组件中通过<code>this.$route.params</code>来获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 访问 /article/cate/3</span><br><span class="hljs-built_in">this</span>.$route.params; <span class="hljs-comment">// &#123; categoryId: &quot;3&quot; &#125;</span><br><span class="hljs-comment">// 访问 /article/cate/1</span><br><span class="hljs-built_in">this</span>.$route.params; <span class="hljs-comment">// &#123; categoryId: &quot;1&quot; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="动态路由的导航"><a href="#动态路由的导航" class="headerlink" title="动态路由的导航"></a>动态路由的导航</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/article/cate/3&quot;&gt;to article of category 3&lt;/router-link&gt;<br><br>&lt;router-link<br>  :to=&quot;&#123;<br>    name: &#x27;CategoryBlog&#x27;,<br>    params: &#123;<br>      categoryId: 3,<br>    &#125;,<br>  &#125;&quot;<br>&gt;to article of category 3&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>除了使用<code>&lt;RouterLink&gt;</code>超链接导航外，<code>vue-router</code>还允许在代码中跳转页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&quot;跳转地址&quot;</span>); <span class="hljs-comment">// 普通跳转</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<br>  <span class="hljs-comment">// 命名路由跳转</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Blog&quot;</span>,<br>&#125;);<br><br><span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 回退。类似于 history.go</span><br></code></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>利用<code>watch</code>配置，可以直接观察某个数据的变化，变化时可以做一些处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ... 其他配置</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-comment">// 观察 this.$route 的变化，变化后，会调用该函数</span><br>    $route(newVal, oldVal)&#123;<br>      <span class="hljs-comment">// newVal：this.$route 新的值，等同 this.$route</span><br>      <span class="hljs-comment">// oldVal：this.$route 旧的值</span><br>    &#125;,<br>    <span class="hljs-comment">// 完整写法</span><br>    <span class="hljs-attr">$route</span>: &#123;<br>      <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span>&#123;&#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否监听该数据内部属性的变化，默认 false</span><br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否立即执行一次 handler，默认 false</span><br>    &#125;<br>    <span class="hljs-comment">// 观察 this.$route.params 的变化，变化后，会调用该函数</span><br>    [<span class="hljs-string">&quot;$route.params&quot;</span>](newVal, oldVal)&#123;<br>      <span class="hljs-comment">// newVal：this.$route.params 新的值，等同 this.$route.params</span><br>      <span class="hljs-comment">// oldVal：this.$route.params 旧的值</span><br>    &#125;,<br>  <span class="hljs-comment">// 完整写法</span><br>    [<span class="hljs-string">&quot;$route.params&quot;</span>]: &#123;<br>      <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span>&#123;&#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否监听该数据内部属性的变化，默认 false</span><br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否立即执行一次 handler，默认 false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="开发文章详情页-part1"><a href="#开发文章详情页-part1" class="headerlink" title="开发文章详情页-part1"></a>开发文章详情页-part1</h1><h1 id="文章数据逻辑"><a href="#文章数据逻辑" class="headerlink" title="文章数据逻辑"></a>文章数据逻辑</h1><h1 id="组件逻辑-1"><a href="#组件逻辑-1" class="headerlink" title="组件逻辑"></a>组件逻辑</h1><h2 id="BlogDetail"><a href="#BlogDetail" class="headerlink" title="BlogDetail"></a>BlogDetail</h2><p>该组件没有任何难度，根据「属性 - 文章对象」显示出文章信息即可</p><p>由于文章的内容属于<strong>原始 html</strong>，因此需要使用<code>v-html</code>指令来设置</p><p>另外，文章的内容是不带样式的，因此需要选择一款<code>markdown</code>的<code>css</code>样式（见附件<code>markdown.css</code>）</p><p>对于文章中脚本部分的样式，可以使用第三方库<a href="https://highlightjs.org/">highlight.js</a>中提供的样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;highlight.js/styles/github.css&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="BlogTOC"><a href="#BlogTOC" class="headerlink" title="BlogTOC"></a>BlogTOC</h2><h2 id="BlogComment"><a href="#BlogComment" class="headerlink" title="BlogComment"></a>BlogComment</h2><h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><p><strong>针对</strong><code>**dom**</code><strong>节点的原生事件</strong>，<code>vue</code>支持多种修饰符以简化代码</p><p>详见：<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">事件修饰符、按键修饰符、系统修饰符</a></p><h1 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h1><p><code>$listeners</code>是<code>vue</code>的一个实例属性，它用于获取父组件传过来的所有事件函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">event1</span>=<span class="hljs-string">&quot;handleEvent1&quot;</span> @<span class="hljs-attr">event2</span>=<span class="hljs-string">&quot;handleEvent2&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 子组件</span><br><span class="hljs-built_in">this</span>.$listeners; <span class="hljs-comment">// &#123; event1: handleEvent1, event2: handleEvent2 &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>$emit</code>和<code>$listeners</code>通信的异同</p><p>相同点：均可实现子组件向父组件传递消息</p><p>差异点：</p><ul><li><code>$emit</code>更加符合单向数据流，子组件仅发出通知，由父组件监听做出改变；而<code>$listeners</code>则是在子组件中直接使用了父组件的方法。</li><li>调试工具可以监听到子组件<code>$emit</code>的事件，但无法监听到<code>$listeners</code>中的方法调用。（想想为什么）</li><li>由于<code>$listeners</code>中可以获得传递过来的方法，因此调用方法可以得到其返回值。但<code>$emit</code>仅仅是向父组件发出通知，无法知晓父组件处理的结果</li></ul></blockquote><blockquote><p>对于上述中的第三点，可以在<code>$emit</code>中传递回调函数来解决</p><p>父组件：</p><p>子组件：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;Child @click=&quot;handleClick&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Child from &quot;./Child&quot;;<br>export default &#123;<br>  components: &#123;<br>    Child,<br>  &#125;,<br>  methods: &#123;<br>    handleClick(data, callback) &#123;<br>      console.log(data); // 得到子组件事件中的数据<br>      setTimeout(() =&gt; &#123;<br>        callback(1); // 一段时间后，调用子组件传递的回调函数<br>      &#125;, 3000);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;handleClick&quot;&gt;click&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    handleClick() &#123;<br>      this.$emit(&quot;click&quot;, 123, (data) =&gt; &#123;<br>        console.log(data); // data为父组件处理完成后得到的数据<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><p><code>v-model</code>指令实质是一个语法糖，它是<code>value</code>属性和<code>input</code>事件的<em>结合体</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;data&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;data=$event.target.value&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等同于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;data&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>详见：<a href="https://cn.vuejs.org/v2/guide/forms.html">表单输入绑定</a><br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1622535058512-f2c3d03f-2448-4265-ab37-8ff0a7682f63.png#clientId=uec4ddfb2-2bbe-4&from=drop&id=SkzzD&margin=%5Bobject%20Object%5D&name=%E6%96%87%E7%AB%A0%E8%AF%A6%E6%83%85%E9%A1%B5%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84.png&originHeight=1094&originWidth=1470&originalType=binary&ratio=1&size=1296035&status=done&style=none&taskId=u49933081-c97c-472f-aa63-b1a5432f722" alt="文章详情页组件结构.png"></p><p>在<code>vue</code>中遇到<strong>共享数据</strong>，会带来下面的多个问题：</p><ul><li><p>如何保证数据的唯一性？</p><ul><li>如果数据不唯一，则会浪费大量的内存资源，降低运行效率</li><li>如果数据不唯一，就可能出现不统一的数据，难以维护</li></ul></li><li><p>某个组件改动数据后，如何让其他用到该数据的组件知道数据变化了？</p><ul><li>事件总线貌似可以解决该问题，但需要在组件中手动的维护监听，极其不方便，而且事件总线的目的在于「通知」，而不是「共享数据」</li></ul></li></ul><p>一种比较容易想到的方案，就是把所有的共享数据<strong>全部</strong>提升到根组件，然后通过属性不断下发，当某个组件需要修改数据时，又不断向上抛出事件，直到根组件完成对数据的修改。</p><p>这种方案的缺陷也非常明显：</p><ul><li>需要编写大量的代码层层下发数据，很多组件被迫拥有了自己根本不需要的数据</li><li>需要编写大量的代码层层上抛事件，很多组件被迫注册了自己根本处理不了的事件</li></ul><p>基于上面的问题，我们可以简单的设置一个<strong>独立的数据仓库</strong>。</p><ul><li>组件需要什么共享数据，可以自由的从仓库中获取，需要什么拿什么。</li><li>组件可以自由的改变仓库中的数据，仓库的数据变化后，会自动通知用到对应数据的组件更新</li></ul><p>要实现这一切，可以选择<code>vuex</code></p><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>安装<code>vuex</code>后，可以通过下面的代码创建一个数据仓库，在大部分情况下，一个工程仅需创建一个数据仓库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br>Vue.use(Vuex); <span class="hljs-comment">// 应用vuex插件</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  <span class="hljs-comment">// 仓库的配置</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 仓库的初始状态（数据）</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>仓库创建好后，你可以使用<code>store.state</code>来访问仓库中的数据</p><p>如果希望在<code>vue</code>中方便的使用仓库数据，需要将<code>vuex</code>作为插件安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br>Vue.use(Vuex); <span class="hljs-comment">// 安装Vuex插件</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex(&#123;<br>  <span class="hljs-comment">// 仓库的配置</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 仓库的初始状态（数据）</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store.js&quot;</span>;<br><span class="hljs-keyword">new</span> Vue(&#123;<br>  store, <span class="hljs-comment">// 向vue中注入仓库</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>之后，在<code>vue</code>组件中，可以通过实例的<code>$store</code>属性访问到仓库</p><p><code>Vuex</code>会自动将配置的状态数据设置为响应式数据，当数据变化时，依赖该数据的组件会自动渲染。</p><h1 id="数据的变更"><a href="#数据的变更" class="headerlink" title="数据的变更"></a>数据的变更</h1><p>尽管可以利用数据响应式的特点直接变更数据，但这样的做法在大型项目中会遇到问题</p><blockquote><p>如果有一天，你发现某个共享数据是错误的，而有一百多个组件都有可能变更过这块数据，你该如何知道是哪一步数据变更出现了问题？</p></blockquote><p>为了能够更好的跟踪数据的变化，<code>vuex</code>强烈建议使用<code>mutation</code>来更改数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex(&#123;<br>  <span class="hljs-comment">// 仓库的配置</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 仓库的初始状态（数据）</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每个mutation是一个方法，它描述了数据在某种场景下的变化</span><br><span class="hljs-comment">     * increase mutation描述了数据在增加时应该发生的变化</span><br><span class="hljs-comment">     * 参数state为当前的仓库数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">increase</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">decrease</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count--;<br>    &#125;,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求n次幂</span><br><span class="hljs-comment">     * 该mutation需要一个额外的参数来提供指数</span><br><span class="hljs-comment">     * 我们把让数据产生变化时的附加信息称之为负荷（负载） payload</span><br><span class="hljs-comment">     * payload可以是任何类型，数字、字符串、对象均可</span><br><span class="hljs-comment">     * 在该mutation中，我们约定payload为一个数字，表示指数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">power</span>(<span class="hljs-params">state, payload</span>)</span> &#123;<br>      state.count **= payload;<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>当我们有了<code>mutation</code>后，就不应该直接去改动仓库的数据了</p><p>而是通过<code>store.commit</code>方法提交一个<code>mutation</code>，具体做法是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store.commit(<span class="hljs-string">&quot;mutation的名字&quot;</span>, payload);<br></code></pre></td></tr></table></figure><p>现在，我们可以通过<code>vue devtools</code>观测到数据的变化了</p><p>**特别注意： **</p><ol><li><p><code>mutation</code>中不得出现异步操作</p><blockquote><p>在实际开发的规范中，甚至要求不得有副作用操作</p><p>副作用操作包括：</p><ul><li>异步</li><li>更改或读取外部环境的信息，例如<code>localStorage、location、DOM</code>等</li></ul></blockquote></li><li><p> 提交<code>mutation</code>是数据改变的<strong>唯一原因</strong></p></li></ol><h1 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h1><p>如果在<code>vuex</code>中要进行异步操作，需要使用<code>action</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increase</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">decrease</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count--;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">power</span>(<span class="hljs-params">state, payload</span>)</span> &#123;<br>      state.count **= payload;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ctx: 类似于store的对象</span><br><span class="hljs-comment">     * payload: 本次异步操作的额外信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">asyncPower</span>(<span class="hljs-params">ctx, payload</span>)</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        ctx.commit(<span class="hljs-string">&quot;power&quot;</span>, payload);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="用户模块逻辑示意图"><a href="#用户模块逻辑示意图" class="headerlink" title="用户模块逻辑示意图"></a>用户模块逻辑示意图</h1><p>路由总体示意图</p><p>鉴权守卫逻辑示意图</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p><a href="https://cn.vuejs.org/v2/api/#watch">watch 配置</a></p><p><a href="https://cn.vuejs.org/v2/api/#vm-watch">Vue.prototype.$watch</a></p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><a href="https://vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0">mapState</a></p><p><a href="https://vuex.vuejs.org/zh/guide/getters.html">getters</a></p><p><a href="https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0">mapGetters</a></p><p><a href="https://vuex.vuejs.org/zh/guide/modules.html">modules</a></p><p><a href="https://vuex.vuejs.org/zh/api/#watch">watch</a></p><h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><p><a href="https://router.vuejs.org/api/#exact-path">exact-path</a></p><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB">导航守卫</a><br>​</p><h1 id="分析打包结果"><a href="#分析打包结果" class="headerlink" title="分析打包结果"></a>分析打包结果</h1><p>由于<code>vue-cli</code>是利用<code>webpack</code>进行打包，我们仅需加入一个<code>webpack</code>插件<code>webpack-bundle-analyzer</code>即可分析打包结果</p><p>为了避免在开发环境中启动<code>webpack-bundle-analyzer</code>，我们仅需使用以下代码即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> BundleAnalyzerPlugin =<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-bundle-analyzer&quot;</span>).BundleAnalyzerPlugin;<br><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 通过 configureWebpack 选项，可对 webpack 进行额外的配置</span><br>  <span class="hljs-comment">// 该配置最终会和 vue-cli 的默认配置进行合并（webpack-merge）</span><br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> BundleAnalyzerPlugin()],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="优化公共库打包体积"><a href="#优化公共库打包体积" class="headerlink" title="优化公共库打包体积"></a>优化公共库打包体积</h1><h2 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h2><p>CDN 全称为 Content Delivery Network，称之为内容分发网络<br>它的基本原理是：架设多台服务器，这些服务器定期从源站拿取资源保存本地，到让不同地域的用户能够通过访问最近的服务器获得资源<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1622535335918-ea201af5-cfd2-496a-8760-0436e7877dea.png#clientId=uec4ddfb2-2bbe-4&from=paste&height=333&id=Wi51G&margin=%5Bobject%20Object%5D&originHeight=666&originWidth=1401&originalType=url&ratio=1&status=done&style=none&taskId=ue8c9362c-9828-400e-b8bd-9ab5d6ee904&width=700.5"><br>我们可以把项目中的所有静态资源都放到 CDN 上（收费），也可以利用现成免费的 CDN 获取公共库的资源<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1622535335927-dc168c15-d8e5-439c-8459-eba65dc8ae24.png#clientId=uec4ddfb2-2bbe-4&from=paste&height=239&id=xkM9t&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=880&originalType=url&ratio=1&status=done&style=none&taskId=uca4fc545-f8de-46da-a5b6-1ea2858046a&width=440"><br>首先，我们需要告诉 webpack 不要对公共库进行打包<br>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">externals</span>: &#123;<br>      <span class="hljs-attr">vue</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>      <span class="hljs-attr">vuex</span>: <span class="hljs-string">&quot;Vuex&quot;</span>,<br>      <span class="hljs-string">&quot;vue-router&quot;</span>: <span class="hljs-string">&quot;VueRouter&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后，在页面中手动加入<code>cdn</code>链接，这里使用<a href="https://www.bootcdn.cn/">bootcn</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vuex/3.5.1/vuex.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.4.7/vue-router.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于<code>vuex</code>和<code>vue-router</code>，使用这种传统的方式引入的话会自动成为<code>Vue</code>的插件，因此需要去掉<code>Vue.use(xxx)</code></p><p>我们可以使用下面的代码来进行兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.Vuex) &#123;<br>  <span class="hljs-comment">// 没有使用传统的方式引入Vuex</span><br>  Vue.use(Vuex);<br>&#125;<br><br><span class="hljs-comment">// router.js</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.VueRouter) &#123;<br>  <span class="hljs-comment">// 没有使用传统的方式引入VueRouter</span><br>  Vue.use(VueRouter);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启用现代模式"><a href="#启用现代模式" class="headerlink" title="启用现代模式"></a>启用现代模式</h2><p>为了兼容各种浏览器，<code>vue-cli</code>在内部使用了<code>@babel/present-env</code>对代码进行降级，你可以通过<code>.browserlistrc</code>配置来设置需要兼容的目标浏览器</p><p>这是一种比较<em>偷懒</em>的办法，因为对于那些使用现代浏览器的用户，它们也<em>被迫</em>使用了降级之后的代码，而降低的代码中包含了大量的<code>polyfill</code>，从而提升了包的体积</p><p>因此，我们希望提供两种打包结果：</p><ol><li>降级后的包（大），提供给旧浏览器用户使用</li><li>未降级的包（小），提供给现代浏览器用户使用</li></ol><p>除了应用<code>webpack</code>进行多次打包外，还可以利用<code>vue-cli</code>给我们提供的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vue-cli-service build --modern<br></code></pre></td></tr></table></figure><h1 id="优化项目包体积"><a href="#优化项目包体积" class="headerlink" title="优化项目包体积"></a>优化项目包体积</h1><p>这里的项目包是指<code>src</code>目录中的打包结果</p><h2 id="页面分包"><a href="#页面分包" class="headerlink" title="页面分包"></a>页面分包</h2><p>默认情况下，<code>vue-cli</code>会利用<code>webpack</code>将<code>src</code>目录中的所有代码打包成一个<code>bundle</code></p><p>这样就导致访问一个页面时，需要加载所有页面的<code>js</code>代码</p><p>我们可以利用<code>webpack</code>对<code>动态import</code>的支持，从而达到把不同页面的代码打包到不同文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// routes</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="hljs-string">&quot;@/views/Home&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;About&quot;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&quot;@/views/About&quot;</span>),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h1 id="优化首屏响应"><a href="#优化首屏响应" class="headerlink" title="优化首屏响应"></a>优化首屏响应</h1><blockquote><p>首页白屏受很多因素的影响</p></blockquote><p><code>vue</code>页面需要通过<code>js</code>构建，因此在<code>js</code>下载到本地之前，页面上什么也没有</p><p>一个非常简单有效的办法，即在页面中先渲染一个小的加载中效果，等到<code>js</code>下载到本地并运行后，即会自动替换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><p>在代码层面，<code>vue</code>组件本质上是一个配置对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> comp = &#123;<br>  <span class="hljs-attr">props</span>: xxx,<br>  <span class="hljs-attr">data</span>: xxx,<br>  <span class="hljs-attr">computed</span>: xxx,<br>  <span class="hljs-attr">methods</span>: xxx,<br>&#125;;<br></code></pre></td></tr></table></figure><p>但有的时候，要得到某个组件配置对象需要一个异步的加载过程，比如：</p><ul><li>需要使用 ajax 获得某个数据之后才能加载该组件</li><li>为了合理的分包，组件配置对象需要通过<code>import(xxx)</code>动态加载</li></ul><p>如果一个组件<strong>需要通过异步的方式得到组件配置对象</strong>，该组件可以把它做成一个异步组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步组件本质上是一个函数</span><br><span class="hljs-comment"> * 该函数调用后返回一个Promise，Promise成功的结果是一个组件配置对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> AsyncComponent = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./MyComp&quot;</span>);<br><br><span class="hljs-keyword">var</span> App = &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 你可以把该函数当做一个组件使用（异步组件）</span><br><span class="hljs-comment">     * Vue会调用该函数，并等待Promise完成，完成之前该组件位置什么也不渲染</span><br><span class="hljs-comment">     */</span><br>    AsyncComponent,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>异步组件的函数不仅可以返回一个 Promise，还支持返回一个对象</p><p>详见：<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%A4%84%E7%90%86%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81">返回对象格式的异步组件</a></p></blockquote><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>异步组件通常应用在路由懒加载中，以达到更好的分包</p><p>为了提高用户体验，可以在组件配置对象加载完成之前给用户显示一些提示信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;组件开始加载&quot;</span>);<br>      <span class="hljs-keyword">const</span> HomeComp = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./Views/Home.vue&quot;</span>);<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;组件加载完毕&quot;</span>);<br>      <span class="hljs-keyword">return</span> HomeComp;<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>推荐使用<a href="https://github.com/rstacruz/nprogress">NProgress</a>展现一个进度条</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack5重要更新</title>
    <link href="/2020/06/06/webpack5%E9%87%8D%E8%A6%81%E6%9B%B4%E6%96%B0/"/>
    <url>/2020/06/06/webpack5%E9%87%8D%E8%A6%81%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="top-level-await"><a href="#top-level-await" class="headerlink" title="top-level-await"></a>top-level-await</h1><p><code>webpack5</code>现在允许在模块的顶级代码中直接使用<code>await</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br><span class="hljs-keyword">const</span> jsonBody = <span class="hljs-keyword">await</span> resp.json();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> jsonBody;<br></code></pre></td></tr></table></figure><p>目前，<code>top-level-await</code>还未成为正式标准，因此，对于<code>webpack5</code>而言，该功能是作为<code>experiments</code>发布的，需要在<code>webpack.config.js</code>中配置开启</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">experiments</span>: &#123;<br>    <span class="hljs-attr">topLevelAwait</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="打包体积优化"><a href="#打包体积优化" class="headerlink" title="打包体积优化"></a>打包体积优化</h1><p><code>webpack5</code>对模块的合并、作用域提升、<code>tree shaking</code>等处理更加智能</p><h1 id="打包缓存开箱即用"><a href="#打包缓存开箱即用" class="headerlink" title="打包缓存开箱即用"></a>打包缓存开箱即用</h1><p>在<code>webpack4</code>中，需要使用<code>cache-loader</code>缓存打包结果以优化之后的打包性能</p><p>而在<code>webpack5</code>中，默认就已经开启了打包缓存，无须再安装<code>cache-loader</code></p><p>默认情况下，<code>webpack5</code>是将模块的打包结果缓存到内存中，可以通过<code>cache</code>配置进行更改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">cache</span>: &#123;<br>    <span class="hljs-comment">// 缓存类型，支持：memory、filesystem</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;filesystem&quot;</span>, <br>    <span class="hljs-comment">// 缓存目录，仅类型为 filesystem 有效</span><br>    <span class="hljs-attr">cacheDirectory</span>: path.resolve(__dirname, <span class="hljs-string">&quot;node_modules/.cache/webpack&quot;</span>), <br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>关于<code>cache</code>的更多配置参考：<a href="https://webpack.docschina.org/configuration/other-options/#cache">https://webpack.docschina.org/configuration/other-options/#cache</a></p></blockquote><h1 id="资源模块"><a href="#资源模块" class="headerlink" title="资源模块"></a>资源模块</h1><p>在<code>webpack4</code>中，针对资源型文件我们通常使用<code>file-loader</code>、<code>url-loader</code>、<code>raw-loader</code>进行处理</p><p>由于大部分前端项目都会用到资源型文件，因此<code>webpack5</code>原生支持了资源型模块</p><p>详见：<a href="https://webpack.docschina.org/guides/asset-modules/">https://webpack.docschina.org/guides/asset-modules/</a></p><h1 id="扩展-模块联邦"><a href="#扩展-模块联邦" class="headerlink" title="[扩展]模块联邦"></a>[扩展]模块联邦</h1><p>在大型项目中，往往会把项目中的某个区域或功能模块作为单独的项目开发，最终形成「微前端」架构</p><p>在微前端架构中，不同的工程可能出现下面的场景</p><p>这涉及到很多非常棘手的问题：</p><ul><li>如何避免公共模块重复打包</li><li>如何将某个项目中一部分模块分享出去，同时还要避免重复打包</li><li>如何管理依赖的不同版本</li><li>如何更新模块</li><li><code>......</code></li></ul><p><code>webpack5</code>尝试着通过<code>模块联邦</code>来解决此类问题</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>现有两个微前端工程，它们各自独立开发、测试、部署，但它们有一些相同的公共模块，并有一些自己的模块需要分享给其他工程使用，同时又要引入其他工程的模块。</p><h3 id="暴露自身模块"><a href="#暴露自身模块" class="headerlink" title="暴露自身模块"></a>暴露自身模块</h3><p>如果一个项目需要把一部分模块暴露给其他项目使用，可以使用<code>webpack5</code>的模块联邦将这些模块暴露出去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> ModuleFederationPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 使用模块联邦插件</span><br>    <span class="hljs-keyword">new</span> ModuleFederationPlugin(&#123;<br>      <span class="hljs-comment">// 模块联邦的名称</span><br>      <span class="hljs-comment">// 该名称将成为一个全部变量，通过该变量将可获取当前联邦的所有暴露模块</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>, <br>      <span class="hljs-comment">// 模块联邦生成的文件名，全部变量将置入到该文件中</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;home-entry.js&quot;</span>,<br>      <span class="hljs-comment">// 模块联邦暴露的所有模块</span><br>      <span class="hljs-attr">exposes</span>: &#123;<br>        <span class="hljs-comment">// key：相对于模块联邦的路径</span><br>        <span class="hljs-comment">// 这里的 ./Timer 将决定该模块的访问路径为 home/Timer</span><br>        <span class="hljs-comment">// value: 模块的具体路径</span><br>        <span class="hljs-string">&quot;./Timer&quot;</span>: <span class="hljs-string">&quot;./src/Timer.js&quot;</span>,<br>      &#125;,<br>    &#125;),<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用对方暴露的模块"><a href="#使用对方暴露的模块" class="headerlink" title="使用对方暴露的模块"></a>使用对方暴露的模块</h3><p>在模块联邦的配置中，不仅可以暴露自身模块，还可以使用其他项目暴露的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> ModuleFederationPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 使用模块联邦插件</span><br>    <span class="hljs-keyword">new</span> ModuleFederationPlugin(&#123;<br>      <span class="hljs-comment">// 远程使用其他项目暴露的模块</span><br>      <span class="hljs-attr">remotes</span>: &#123;<br>        <span class="hljs-comment">// key: 自定义远程暴露的联邦名</span><br>        <span class="hljs-comment">// 比如为 abc， 则之后引用该联邦的模块则使用 import &quot;abc/模块名&quot;</span><br>        <span class="hljs-comment">// value: 模块联邦名@模块联邦访问地址</span><br>        <span class="hljs-comment">// 远程访问时，将从下面的地址加载</span><br>        <span class="hljs-attr">home</span>: <span class="hljs-string">&quot;home@http://localhost:8080/home-entry.js&quot;</span>,<br>      &#125;,<br>    &#125;),<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h3><p>不同的项目可能使用了一些公共的第三方库，可以将这些第三方库作为共享模块，避免反复打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> ModuleFederationPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 使用模块联邦插件</span><br>    <span class="hljs-keyword">new</span> ModuleFederationPlugin(&#123;<br>      <span class="hljs-attr">shared</span>: [<span class="hljs-string">&quot;jquery&quot;</span>, <span class="hljs-string">&quot;lodash&quot;</span>]<br>    &#125;),<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><code>webpack</code>会根据需要从合适的位置引入合适的版本<br>​</p><p>好东西</p><p><a href="https://www.tailwindcss.cn/">https://www.tailwindcss.cn/</a></p><p><a href="https://tailwindcss.com/">https://tailwindcss.com/</a></p><p><a href="https://tailwindcss.com/docs%E6%96%87%E6%A1%A3">https://tailwindcss.com/docs文档</a></p><p><a href="https://play.tailwindcss.com/?ref=producthunt">https://play.tailwindcss.com/?ref=producthunt</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-full h-full bg-red-400 fixed&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 本身不能设置高度，高度相对于父元素，变成绝对定位才可以 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-full h-full flex bg-red-400 fixed&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-60 bg-gray-800 h-full&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;w-60 bg-blue-200 h-full&quot;&gt;&lt;/div&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-blue-200 h-full flex-grow&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 宽度自动增长 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-full h-full flex bg-red-400 fixed&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-60 bg-gray-800 h-full text-gray-50&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;font-bold text-2xl text-center my-5&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center py-4 text-green-50 hover:text-green-300 hover:bg-gray-900&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Lorem.<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center py-4 text-green-50 hover:text-green-300 hover:bg-gray-900&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Earum.<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center py-4 text-green-50 hover:text-green-300 hover:bg-gray-900&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Eveniet?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center py-4 text-green-50 hover:text-green-300 hover:bg-gray-900&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Veniam.<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center py-4 text-green-50 hover:text-green-300 hover:bg-gray-900&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Dolore!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-blue-200 h-full flex-grow&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配合postcss使用的</p><p>vscode插件：</p><p>智能提示：tailwind css intellisense</p><p>查看文档：tailwind docs<br>​</p><h1 id="技术拓展"><a href="#技术拓展" class="headerlink" title="技术拓展"></a>技术拓展</h1><p><a href="https://www.tailwindcss.cn/docs">https://www.tailwindcss.cn/docs</a></p><p><a href="https://github.com/yjisme/boilerplate-tranditional-proj">https://github.com/yjisme/boilerplate-tranditional-proj</a></p><p>vscode插件：Tailwind css intellisense智能提示</p><p><a href="https://quasar.dev/">https://quasar.dev/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>性能优化</title>
    <link href="/2020/06/01/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2020/06/01/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p><strong>一、CDN</strong></p><ol><li> CDN的概念 </li><li> CDN的作用 </li><li> CDN的原理 </li><li> CDN的使用场景 </li></ol><p><strong>二、懒加载</strong></p><ol><li> 懒加载的概念 </li><li> 懒加载的特点 </li><li> 懒加载的实现原理 </li><li> 懒加载与预加载的区别 </li></ol><p><strong>三、回流与重绘</strong></p><ol><li> 回流与重绘的概念及触发条件 </li><li> 如何避免回流与重绘？ </li><li> 如何优化动画？ </li><li> documentFragment 是什么？用它跟直接操作 DOM 的区别是什么？ </li></ol><p><strong>四、节流与防抖</strong></p><ol><li>对节流与防抖的理解</li><li>实现节流函数和防抖函数</li></ol><p><strong>五、图片优化</strong></p><ol><li>如何对项目中的图片进行优化？</li><li>常见的图片格式及使用场景</li></ol><p><strong>六、Webpack优化</strong></p><ol><li> 如何提⾼webpack的打包速度? </li><li> 如何减少 Webpack 打包体积 </li><li> 如何⽤webpack来优化前端性能？ </li><li> 如何提⾼webpack的构建速度？ </li><li> 如何优化长列表 </li><li> 如何实现一个dialog组件 </li><li> 服务端渲染的原理 </li><li> 项目打包到服务器的整个过程 </li><li> 以前端角度出发做好 SEO 需要考虑什么？ </li><li> 如何实现前端登录 </li><li> 如何实现扫码登录 </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">77px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">77px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/3_1.png</span>);</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/ico_01.png</span>);</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/ico_02.png</span>);</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/ico_03.png</span>);</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/ico_04.png</span>);</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/ico_05.png</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-comment">/*  ul li:nth-child(1)&#123;</span></span><br><span class="hljs-comment"><span class="css">            background-position: 0 0;</span></span><br><span class="hljs-comment"><span class="css">        &#125;</span></span><br><span class="hljs-comment"><span class="css">        ul li:nth-child(2)&#123;</span></span><br><span class="hljs-comment"><span class="css">            background-position: -77px 0;</span></span><br><span class="hljs-comment"><span class="css">        &#125;</span></span><br><span class="hljs-comment"><span class="css">        ul li:nth-child(3)&#123;</span></span><br><span class="hljs-comment"><span class="css">            background-position: -154px 0;</span></span><br><span class="hljs-comment"><span class="css">        &#125; */</span></span><br><span class="css">      <span class="hljs-comment">/*  ul li:nth-child(4)&#123;</span></span><br><span class="hljs-comment"><span class="css">            background: url(images/ico_04.png)</span></span><br><span class="hljs-comment"><span class="css">        &#125;</span></span><br><span class="hljs-comment"><span class="css">        ul li:nth-child(5)&#123;</span></span><br><span class="hljs-comment"><span class="css">            background: url(images/ico_05.png)</span></span><br><span class="hljs-comment"><span class="css">        &#125; */</span></span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>: green;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    defer    </span><br><span class="hljs-comment">        1. 解析html</span><br><span class="hljs-comment">        2. 遇到带defer属性的script标签，继续解析html，同时下载script引入的文件</span><br><span class="hljs-comment">        3. 浏览器完成解析HTML，然后执行下载的脚本（按书写顺序执行）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    async</span><br><span class="hljs-comment">        1. 解析html</span><br><span class="hljs-comment">        2. 遇到带async属性的script标签。继续解析html，同时下载script引入的文件</span><br><span class="hljs-comment">        3. js文件下载完毕，浏览器暂停解析html，开始执行js</span><br><span class="hljs-comment">        4. js执行完毕，浏览器接着解析html</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">            一、页面级的优化</span></span><br><span class="hljs-comment"><span class="javascript">                1、CSS Spritesr</span></span><br><span class="hljs-comment"><span class="javascript">                2、使用CDN</span></span><br><span class="hljs-comment"><span class="javascript">                3、压缩合并代码</span></span><br><span class="hljs-comment"><span class="javascript">                4、使用DNS预解析</span></span><br><span class="hljs-comment"><span class="javascript">            二、代码级别的优化 </span></span><br><span class="hljs-comment"><span class="javascript">                1、减少DOM操作</span></span><br><span class="hljs-comment"><span class="javascript">2、异步加载</span></span><br><span class="hljs-comment"><span class="javascript">3、事件代理</span></span><br><span class="hljs-comment"><span class="javascript">4、使用requestAnimationFrame来替代setTimeout和setInterval</span></span><br><span class="hljs-comment"><span class="javascript">5、图片懒加载</span></span><br><span class="hljs-comment"><span class="javascript"></span></span><br><span class="hljs-comment"><span class="javascript">                60Hz</span></span><br><span class="hljs-comment"><span class="javascript"></span></span><br><span class="hljs-comment"><span class="javascript">                16.7ms  1000ms/60Hz=16.7</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">var</span> len = lis.length;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;ul&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">/* for(var i=0;i&lt;len;i++)&#123;</span></span><br><span class="hljs-comment"><span class="javascript">            lis[i].onclick=function()&#123;</span></span><br><span class="hljs-comment"><span class="javascript"></span></span><br><span class="hljs-comment"><span class="javascript">            &#125;</span></span><br><span class="hljs-comment"><span class="javascript">        &#125; */</span></span><br><span class="javascript"></span><br><span class="javascript">      ul.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//console.log(ev.target.tagName);</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">if</span> (ev.target.tagName.toLowerCase() == <span class="hljs-string">&quot;li&quot;</span>) &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(ev.target.innerHTML);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;kaivon&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;</span><br><span class="javascript">        div.innerHTML += <span class="hljs-string">&quot;a&quot;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;kaivon&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;kaivon&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;</span><br><span class="javascript">        str += <span class="hljs-string">&quot;a&quot;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      div.innerHTML = str;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;kaivon&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">var</span> timer = requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        box.style.width = box.offsetWidth + <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">        box.innerHTML = box.offsetWidth / <span class="hljs-number">5</span> + <span class="hljs-string">&quot;%&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// console.log(this);</span></span><br><span class="javascript"></span><br><span class="javascript">        timer = requestAnimationFrame(fn);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">if</span> (box.offsetWidth &gt;= <span class="hljs-number">500</span>) &#123;</span><br><span class="javascript">          cancelAnimationFrame(timer);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTopValue</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> top = <span class="hljs-number">0</span>;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">while</span> (obj.offsetParet) &#123;</span><br><span class="javascript">          top += obj.offsetTop;</span><br><span class="javascript"></span><br><span class="javascript">          obj = obj.offsetParet;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/ico.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-s</span>=<span class="hljs-string">&quot;http://www.baidu.com/12.jpg&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2020/05/29/webpack/"/>
    <url>/2020/05/29/webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="1-webpack"><a href="#1-webpack" class="headerlink" title="1. webpack"></a>1. webpack</h1><p>前端工程化</p><h1 id="2-webpack-核心功能"><a href="#2-webpack-核心功能" class="headerlink" title="2. webpack 核心功能"></a>2. webpack 核心功能</h1><ol><li>合适的深度：webpack 使用层面很简单，但原理层面非常复杂</li><li>合适的广度：webpack 生态圈极其繁荣，有海量的第三方库可以融入到 webpack</li></ol><h2 id="2-1-如何在浏览器端实现模块"><a href="#2-1-如何在浏览器端实现模块" class="headerlink" title="2-1 如何在浏览器端实现模块"></a>2-1 如何在浏览器端实现模块</h2><h3 id="浏览器端的模块化"><a href="#浏览器端的模块化" class="headerlink" title="浏览器端的模块化"></a>浏览器端的模块化</h3><p>问题：</p><ul><li>效率问题：精细的模块划分带来了更多的 JS 文件，更多的 JS 文件带来了更多的请求，降低了页面访问效率</li><li>兼容性问题：浏览器目前仅支持 ES6 的模块化标准，并且还存在兼容性问题</li><li>工具问题：浏览器不支持 npm 下载的第三方包</li></ul><p>这些仅仅是前端工程化的一个缩影<br>当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。</p><h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h3><p>思考：上面提到的问题，为什么在 node 端没有那么明显，反而到了浏览器端变得如此严重呢？<br>答：在 node 端，运行的 JS 文件在本地，因此可以本地读取文件，它的效率比浏览器远程传输文件高的多<br><strong>根本原因</strong>：在浏览器端，开发时态（devtime）和运行时态（runtime）的侧重点不一样<br><strong>开发时态，devtime：</strong></p><ol><li>模块划分越细越好</li><li>支持多种模块化标准</li><li>支持 npm 或其他包管理器下载的模块</li><li>能够解决其他工程化的问题</li></ol><p><strong>运行时态，runtime：</strong></p><ol><li>文件越少越好</li><li>文件体积越小越好</li><li>代码内容越乱越好</li><li>所有浏览器都要兼容</li><li>能够解决其他运行时的问题，主要是执行效率问题</li></ol><p>这种差异在小项目中表现的并不明显，可是一旦项目形成规模，就越来越明显，如果不解决这些问题，前端项目形成规模只能是空谈</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。<br>这样的工具，叫做<strong>构建工具</strong><br><img src="/img/9-1.png"><br>这样一来，开发者就可以专注于开发时态的代码结构，而不用担心运行时态遇到的问题了。</p><h3 id="常见的构建工具"><a href="#常见的构建工具" class="headerlink" title="常见的构建工具"></a>常见的构建工具</h3><ul><li><strong>webpack</strong></li><li>grunt</li><li>gulp</li><li>browserify</li><li>fis</li><li>其他</li></ul><h2 id="2-2-webpack-的安装和使用"><a href="#2-2-webpack-的安装和使用" class="headerlink" title="2-2.webpack 的安装和使用"></a>2-2.webpack 的安装和使用</h2><blockquote><p>webpack 官网：<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a>目前的最新版本：webpack4<br>阅读文档 ability</p></blockquote><h3 id="webpack-简介"><a href="#webpack-简介" class="headerlink" title="webpack 简介"></a>webpack 简介</h3><p>全部东西视为模块<br>webpack 是基于模块化的打包（构建）工具，它把一切视为模块<br>它通过一个开发时态的入口模块为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。<br>webpack 的特点：</p><ul><li><p><strong>为前端工程化而生</strong>：webpack 致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给 webpack 来处理</p></li><li><p><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用 webpack</p></li><li><p><strong>强大的生态</strong>：webpack 是非常灵活、可以扩展的，webpack 本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到 webpack 中</p></li><li><p><strong>基于 nodejs</strong>：由于 webpack 在构建的过程中需要读取文件，因此<strong>它是（中间是）运行在 node 环境中的</strong></p><blockquote><p>理解:中间打包需要 node 环境，如果左边是浏览器环境，右边即浏览器；如果左边是 node 环境，右边即 node</p></blockquote></li><li><p><strong>基于模块化</strong>：webpack 在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括 CommonJS、ES6 Module</p><blockquote><p>只打包依赖的东西</p></blockquote></li></ul><h3 id="webpack-的安装"><a href="#webpack-的安装" class="headerlink" title="webpack 的安装"></a>webpack 的安装</h3><p>webpack 通过 npm 安装，它提供了两个包：</p><ul><li>webpack：核心包，包含了 webpack 构建过程中要用到的所有 api</li><li>webpack-cli：提供一个简单的 cli 命令，它调用了 webpack 核心包的 api，来完成构建过程</li></ul><p>安装方式：</p><ul><li>全局安装：可以全局使用 webpack 命令，但是无法为不同项目对应不同的 webpack 版本</li><li>本地安装：推荐，每个项目都使用自己的 webpack 版本进行构建</li></ul><p>先初始化 npm init，在 npm i -D webpack webpack-cli D 开发依赖，而不是生产,右边要运行，右边已经构建完成，和 webpack 没关系了</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>webpack<br>默认情况下，webpack 会以<code>./src/index.js</code>作为入口文件分析依赖关系，打包到<code>./dist/main.js</code>文件中<br>通过–mode 选项可以控制 webpack 的打包结果的运行环境<br>npx webpack 命令运行<br>src 里面是开发时候的代码，dist 里面是运行时候的代码. src 里面如果语法错误，也不报错，因为根本就不运行</p><blockquote><p>打包完成的代码要在什么环境内运行？</p></blockquote><p>1.</p><p>开发环境配置：npx webpack –mode=development<br>生产环境配置：npx webpack –mode=production</p><ol start="2"><li>也可以在 package.json 配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode=production&quot;</span>,<br>  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode=development&quot;</span><br>&#125;,<br>运行：npm run build--------生产环境<br> npm run dev----------开发环境<br></code></pre></td></tr></table></figure><ol start="3"><li>也可以在 webpack.config.js 里面配置以下代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-3-模块化兼容性-​"><a href="#2-3-模块化兼容性-​" class="headerlink" title="2-3. 模块化兼容性 ​"></a>2-3. 模块化兼容性 ​</h2><p>由于 webpack 同时支持 CommonJS 和 ES6 module，因此需要理解它们互操作时 webpack 是如何处理的</p><h3 id="同模块化标准"><a href="#同模块化标准" class="headerlink" title="同模块化标准"></a>同模块化标准</h3><p>如果导出和导入使用的是同一种模块化标准，打包后的效果和之前学习的模块化没有任何差异</p><p><img src="/img/9-2.png"></p><h3 id="不同模块化标准"><a href="#不同模块化标准" class="headerlink" title="不同模块化标准"></a>不同模块化标准</h3><p>不同的模块化标准，webpack 按照如下的方式处理<br><img src="/img/9-3.png"><br>​</p><p>命令实现：es6 导出，commonjs 导入<br>package.json 配置好</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode=production&quot;</span>,<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode=development&quot;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>写好代码<br>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./es6a&quot;</span>);<br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-built_in">console</span>.log(obj.a, obj.b, obj.default);<br></code></pre></td></tr></table></figure><p>es6a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>运行 webpack : npm run dev<br>es6 导出，commonjs 导入<br>common:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>index</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> obj <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./commonjsa&quot;</span>;<br><span class="hljs-comment">// import obj from &quot;./commonjsa&quot;</span><br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></td></tr></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>代码编写最忌讳的是精神分裂，选择一个合适的模块化标准，然后贯彻整个开发阶段。</p><h2 id="2-4-数字特效"><a href="#2-4-数字特效" class="headerlink" title="2-4.数字特效"></a>2-4.数字特效</h2><h2 id="2-5-编译结果分析（重点）"><a href="#2-5-编译结果分析（重点）" class="headerlink" title="2-5.编译结果分析（重点）"></a>2-5.编译结果分析（重点）</h2><h2 id="2-6-配置文件"><a href="#2-6-配置文件" class="headerlink" title="2-6.配置文件"></a>2-6.配置文件</h2><p>命令 npx webpack 打包<br>通过命令给与参数：npx webpack –mode=development 也能完成打包、<br>webpack 提供的 cli 支持很多的参数，例如<code>--mode</code>，但更多的时候，我们会使用更加灵活的配置文件来控制 webpack 的行为</p><p>默认情况下，webpack 会读取<code>webpack.config.js</code>文件作为配置文件，但也可以通过 CLI 参数<code>--config</code>来指定某个配置文件<br>命令：npx webpack –config 123.js<br>配置文件中通过 CommonJS 模块导出一个对象，不能用 es6（面试题）对象中的各种属性对应不同的 webpack 配置<br>因为中间打包的过程中要读取配置文件的内容<br>打包的过程中要运行配置文件<br>src 下面 main.js 就算有错误，打包过程也不报错，因为打包和 main.js 无关</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;&#125;;<br></code></pre></td></tr></table></figure><p><strong>注意：配置文件中的代码，必须是有效的 node 代码</strong><br><strong>​</strong></p><p>当命令行参数与配置文件中的配置出现冲突时，以命令行参数为准。<br><strong>基本配置：</strong></p><ol><li>mode：编译模式，字符串，取值为 development 或 production，指定编译结果代码运行的环境，会影响 webpack 对编译结果代码格式的处理</li></ol><p>在 webpack.config.js 里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>entry：入口，字符串（后续会详细讲解），指定入口文件</li></ol><p>默认./src/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./123.js&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>output：出口，对象（后续会详细讲解），指定编译结果文件</li></ol><p>默认./dist/main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-7-devtool-配置"><a href="#2-7-devtool-配置" class="headerlink" title="2-7. devtool 配置"></a>2-7. devtool 配置</h2><h3 id="source-map-源码地图"><a href="#source-map-源码地图" class="headerlink" title="source map 源码地图"></a>source map 源码地图</h3><blockquote><p>本小节的知识与 webpack 无关</p></blockquote><p>前端发展到现阶段，很多时候都不会直接运行源代码，可能需要对源代码进行合并、压缩、转换等操作，真正运行的是转换后的代码</p><p><img src="/img/9-4.png"></p><p>这就给调试带来了困难，因为当运行发生错误的时候，我们更加希望能看到源代码中的错误，而不是转换后代码的错误</p><blockquote><p>jquery 压缩后的代码：<a href="https://code.jquery.com/jquery-3.4.1.min.js">https://code.jquery.com/jquery-3.4.1.min.js</a></p></blockquote><p>为了解决这一问题，chrome 浏览器率先支持了 source map，其他浏览器纷纷效仿，目前，几乎所有新版浏览器都支持了 source map<br>source map 实际上是一个配置，配置中不仅记录了所有源码内容，还记录了和转换后的代码的对应关系<br>下面是浏览器处理 source map 的原理<br><img src="/img/9-5.png"></p><p><strong>最佳实践</strong>：</p><ol><li>source map 应在开发环境中使用，作为一种调试手段</li><li>source map 不应该在生产环境中使用，source map 的文件一般较大，不仅会导致额外的网络传输，还容易暴露原始代码。即便要在生产环境中使用 source map，用于调试真实的代码运行问题，也要做出一些处理规避网络传输和代码暴露的问题。</li></ol><h3 id="webpack-中的-source-map"><a href="#webpack-中的-source-map" class="headerlink" title="webpack 中的 source map"></a>webpack 中的 source map</h3><p>使用 webpack 编译后的代码难以调试，可以通过 devtool 配置来<strong>优化调试体验</strong><br>具体的配置见文档：<a href="https://www.webpackjs.com/configuration/devtool/">https://www.webpackjs.com/configuration/devtool/</a><br>使用开发环境：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">eval</span>(<br>  <span class="hljs-string">&#x27;var obj = null;\nobj.abc();\nconsole.log(&quot;a module&quot;)\n\n//# sourceURL=webpack:///./src/a.js?&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>eval 是简易版的 source map    <br>生产环境 production 就不行，要想有则需要 devtool 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;eval&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-8-webpack-编译过程（重点）"><a href="#2-8-webpack-编译过程（重点）" class="headerlink" title="2-8.webpack 编译过程（重点）"></a>2-8.webpack 编译过程（重点）</h2><p>webpack 的作用是将源代码编译（构建、打包）成最终代码<br><img src="/img/9-6.png"></p><p>整个过程大致分为三个步骤</p><ol><li>初始化</li><li>编译</li><li>输出</li></ol><p><img src="/img/9-7.png"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>此阶段，webpack 会将<strong>CLI 参数</strong>、<strong>配置文件</strong>、<strong>默认配置</strong>进行融合，形成一个最终的配置对象。<br>对配置的处理过程是依托一个第三方库<code>yargs</code>完成的<br>此阶段相对比较简单，主要是为接下来的编译阶段做必要的准备<br>目前，可以简单的理解为，初始化阶段主要用于产生一个最终的配置</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ol><li><strong>创建 chunk</strong></li></ol><p>chunk 是 webpack 在内部构建过程中的一个概念，译为<code>块</code>，它表示通过某个入口找到的所有依赖的统称。<br>根据入口模块（默认为<code>./src/index.js</code>）创建一个 chunk</p><p><img src="/img/9-8.png"></p><p>每个 chunk 都有至少两个属性：</p><ul><li>name：默认为 main</li><li>id：唯一编号，开发环境和 name 相同，生产环境是一个数字，从 0 开始</li></ul><ol start="2"><li><strong>构建所有依赖模块</strong></li></ol><p><img src="/img/9-9.png"></p><blockquote><p>AST 在线测试工具：<a href="https://astexplorer.net/">https://astexplorer.net/</a></p></blockquote><p>简图</p><p><img src="/img/9-10.png"></p><ol start="3"><li><strong>产生 chunk assets</strong></li></ol><p>在第二步完成后，chunk 中会产生一个模块列表，列表中包含了<strong>模块 id</strong>和<strong>模块转换后的代码</strong><br>接下来，webpack 会根据配置为 chunk 生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成到最终文件的文件名和文件内容<br><img src="/img/9-11.png"></p><blockquote><p>chunk hash 是根据所有 chunk assets 的内容生成的一个 hash 字符串<br>hash：一种算法，具体有很多分类，特点是将一个任意长度的字符串转换为一个固定长度的字符串，而且可以保证原始内容不变，产生的 hash 字符串就不变</p></blockquote><p>简图</p><p><img src="/img/9-12.png"></p><ol start="4"><li><strong>合并 chunk assets</strong></li></ol><p>将多个 chunk 的 assets 合并到一起，并产生一个总的 hash</p><p><img src="/img/9-13.png"></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>此步骤非常简单，webpack 将利用 node 中的 fs 模块（文件处理模块），根据编译产生的总的 assets，生成相应的文件。</p><p><img src="/img/9-14.png"></p><h3 id="总过程"><a href="#总过程" class="headerlink" title="总过程"></a>总过程</h3><p><img src="/img/9-15.png"></p><p><img src="/img/9-16.png"></p><p><strong>涉及术语</strong></p><ol><li>module：模块，分割的代码单元，webpack 中的模块可以是任何内容的文件，不仅限于 JS</li><li>chunk：webpack 内部构建模块的块，一个 chunk 中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li><li>bundle：chunk 构建好模块后会生成 chunk 的资源清单，清单中的每一项就是一个 bundle，可以认为 bundle 就是最终生成的文件</li><li>hash：最终的资源清单所有内容联合生成的 hash 值</li><li>chunkhash：chunk 生成的资源清单内容联合生成的 hash 值</li><li>chunkname：chunk 的名称，如果没有配置则使用 main</li><li>id：通常指 chunk 的唯一编号，如果在开发环境下构建，和 chunkname 相同；如果是生产环境下构建，则使用一个从 0 开始的数字进行编号</li></ol><h1 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h1><p><img src="/img/9-17.png"></p><blockquote><p>node 内置模块 - path: <a href="https://nodejs.org/dist/latest-v12.x/docs/api/path.html">https://nodejs.org/dist/latest-v12.x/docs/api/path.html</a></p></blockquote><p><strong>出口</strong></p><p>这里的出口是针对资源列表的文件名或路径的配置</p><p>出口通过 output 进行配置</p><p><strong>入口</strong></p><p><strong>入口真正配置的是 chunk</strong></p><p>入口通过 entry 进行配置</p><p>规则：</p><ul><li>name：chunkname</li><li>hash: 总的资源 hash，通常用于解决缓存问题。哈希就是根据文件内容生成出来的。内容变化，哈希变化。反之，就算文件内容有所改变，浏览器会用缓存，对于更新的文件无动于衷</li><li>chunkhash: 使用 chunkhash</li><li>id: 使用 chunkid，不推荐。会导致生产环境和开发环境的名字不一致。</li></ul><h1 id="入口和出口的最佳实践"><a href="#入口和出口的最佳实践" class="headerlink" title="入口和出口的最佳实践"></a>入口和出口的最佳实践</h1><p>具体情况具体分析</p><p>下面是一些经典场景</p><h2 id="一个页面一个-JS"><a href="#一个页面一个-JS" class="headerlink" title="一个页面一个 JS"></a>一个页面一个 JS</h2><p>源码结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|—— src</span><br>    <span class="hljs-string">|—— pageA   页面A的代码目录</span><br>        <span class="hljs-string">|—— index.js 页面A的启动模块</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— pageB   页面B的代码目录</span><br>        <span class="hljs-string">|—— index.js 页面B的启动模块</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— pageC   页面C的代码目录</span><br>        <span class="hljs-string">|—— main1.js 页面C的启动模块1 例如：主功能</span><br>        <span class="hljs-string">|—— main2.js 页面C的启动模块2 例如：实现访问统计的额外功能</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— common  公共代码目录</span><br>        <span class="hljs-string">|—— ...</span><br></code></pre></td></tr></table></figure><p>webpack 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">pageA</span>: <span class="hljs-string">&quot;./src/pageA/index.js&quot;</span>,<br>    <span class="hljs-attr">pageB</span>: <span class="hljs-string">&quot;./src/pageB/index.js&quot;</span>,<br>    <span class="hljs-attr">pageC</span>: [<span class="hljs-string">&quot;./src/pageC/main1.js&quot;</span>, <span class="hljs-string">&quot;./src/pageC/main2.js&quot;</span>],<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[name].[chunkhash:5].js&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这种方式适用于页面之间的功能差异巨大、公共代码较少的情况，这种情况下打包出来的最终代码不会有太多重复</p><blockquote><p>面试题：打包出来的 js，里面会有公共代码，这里代码的重复会造成什么影响？</p></blockquote><p>不好维护。并不存在这种问题，因为写的并不是打包出来的 js。自己写的并没有重复代码。<br>导致传输量增加。</p><h2 id="一个页面多个-JS"><a href="#一个页面多个-JS" class="headerlink" title="一个页面多个 JS"></a>一个页面多个 JS</h2><p>源码结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|—— src</span><br>    <span class="hljs-string">|—— pageA   页面A的代码目录</span><br>        <span class="hljs-string">|—— index.js 页面A的启动模块</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— pageB   页面B的代码目录</span><br>        <span class="hljs-string">|—— index.js 页面B的启动模块</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— statistics   用于统计访问人数功能目录</span><br>        <span class="hljs-string">|—— index.js 启动模块</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— common  公共代码目录</span><br>        <span class="hljs-string">|—— ...</span><br></code></pre></td></tr></table></figure><p>webpack 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">pageA</span>: <span class="hljs-string">&quot;./src/pageA/index.js&quot;</span>,<br>    <span class="hljs-attr">pageB</span>: <span class="hljs-string">&quot;./src/pageB/index.js&quot;</span>,<br>    <span class="hljs-attr">statistics</span>: <span class="hljs-string">&quot;./src/statistics/index.js&quot;</span>, <span class="hljs-comment">//statistics和AB都没关系，可以单独开一个chunk</span><br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[name].[chunkhash:5].js&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这种方式适用于页面之间有一些<strong>独立</strong>、相同的功能，专门使用一个 chunk 抽离这部分 JS 有利于浏览器更好的缓存这部分内容。</p><blockquote><p>思考：为什么不使用多启动模块的方式？</p></blockquote><h2 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h2><p>所谓单页应用，是指整个网站（或网站的某一个功能块）只有一个页面，页面中的内容全部靠 JS 创建和控制。 vue 和 react 都是实现单页应用的利器。</p><p>源码结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|—— src</span><br>    <span class="hljs-string">|—— subFunc   子功能目录</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— subFunc   子功能目录</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— common  公共代码目录</span><br>        <span class="hljs-string">|—— ...</span><br>    <span class="hljs-string">|—— index.js</span><br></code></pre></td></tr></table></figure><p>webpack 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;index.[hash:5].js&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><blockquote><p>webpack 做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。<br>更多的功能需要借助 webpack loaders 和 webpack plugins 完成。</p></blockquote><p>webpack loader： loader 本质上是一个函数，它的作用是将某个源码字符串转换成另一个源码字符串返回。</p><p>loader 函数的将在模块解析的过程中被调用，以得到最终的源码。</p><p><strong>chunk 中解析模块的流程：</strong></p><p><strong>chunk 中解析模块的更详细流程：</strong></p><p><strong>处理 loaders 流程：</strong></p><p><strong>loader 配置：</strong></p><p><strong>完整配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span><br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">//模块匹配规则，可以存在多个规则</span><br>      &#123;<br>        <span class="hljs-comment">//每个规则是一个对象</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, <span class="hljs-comment">//匹配的模块正则</span><br>        use: [<br>          <span class="hljs-comment">//匹配到后应用的规则模块</span><br>          &#123;<br>            <span class="hljs-comment">//其中一个规则</span><br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;模块路径&quot;</span>, <span class="hljs-comment">//loader模块的路径，该字符串会被放置到require中</span><br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-comment">//向对应loader传递的额外参数</span><br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>简化配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span><br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">//模块匹配规则，可以存在多个规则</span><br>      &#123;<br>        <span class="hljs-comment">//每个规则是一个对象</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, <span class="hljs-comment">//匹配的模块正则</span><br>        use: [<span class="hljs-string">&quot;模块路径1&quot;</span>, <span class="hljs-string">&quot;模块路径2&quot;</span>], <span class="hljs-comment">//loader模块的路径，该字符串会被放置到require中</span><br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><p>loader 的功能定位是转换代码，而一些其他的操作难以使用 loader 完成，比如：</p><ul><li>当 webpack 生成文件时，顺便多生成一个说明描述文件</li><li>当 webpack 编译启动时，控制台输出一句话表示 webpack 启动了</li><li>当 xxxx 时，xxxx</li></ul><p>这种类似的功能需要把功能嵌入到 webpack 的编译流程中，而这种事情的实现是依托于 plugin 的</p><p>plugin 的<strong>本质</strong>是一个带有 apply 方法的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> plugin = &#123;<br>  <span class="hljs-attr">apply</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">compiler</span>) </span>&#123;&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>通常，习惯上，我们会将该对象写成构造函数的模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPlugin</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">compiler</span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> plugin = <span class="hljs-keyword">new</span> MyPlugin();<br></code></pre></td></tr></table></figure><p>要将插件应用到 webpack，需要把插件对象配置到 webpack 的 plugins 数组中，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> MyPlugin()],<br>&#125;;<br></code></pre></td></tr></table></figure><p>apply 函数会在初始化阶段，创建好 Compiler 对象后运行。</p><p>compiler 对象是在初始化阶段构建的，整个 webpack 打包期间只有一个 compiler 对象，后续完成打包工作的是 compiler 对象内部创建的 compilation</p><p>apply 方法会在<strong>创建好 compiler 对象后调用</strong>，并向方法传入一个 compiler 对象</p><blockquote><p>compiler 只有一个，compilation 可能多个</p></blockquote><p>compiler 对象提供了大量的钩子函数（hooks，可以理解为事件），plugin 的开发者可以注册这些钩子函数，参与 webpack 编译和生成。</p><p>你可以在 apply 方法中使用下面的代码注册钩子函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPlugin</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">compiler</span>)</span> &#123;<br>    compiler.hooks.事件名称.事件类型(name, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">compilation</span>) </span>&#123;<br>      <span class="hljs-comment">//事件处理函数</span><br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>事件名称</strong></p><p>即要监听的事件名，即钩子名，所有的钩子：<a href="https://www.webpackjs.com/api/compiler-hooks">https://www.webpackjs.com/api/compiler-hooks</a></p><p><strong>事件类型</strong></p><p>这一部分使用的是 Tapable API，这个小型的库是一个专门用于钩子函数监听的库。</p><p>它提供了一些事件类型：</p><ul><li>tap：注册一个同步的钩子函数，函数运行完毕则表示事件处理结束</li><li>tapAsync：注册一个基于回调的异步的钩子函数，函数通过调用一个回调表示事件处理结束</li><li>tapPromise：注册一个基于 Promise 的异步的钩子函数，函数通过返回的 Promise 进入已决状态表示事件处理结束</li></ul><p><strong>处理函数</strong></p><p>处理函数有一个事件参数<code>compilation</code><br>​</p><h1 id="区分环境"><a href="#区分环境" class="headerlink" title="区分环境"></a>区分环境</h1><p>有些时候，我们需要针对生产环境和开发环境分别书写 webpack 配置</p><p>为了更好的适应这种要求，webpack 允许配置不仅可以是一个对象，还可以是一个<strong>函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">env</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">//配置内容</span><br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在开始构建时，webpack 如果发现配置是一个函数，会调用该函数，将函数返回的对象作为配置内容，因此，开发者可以根据不同的环境返回不同的对象</p><p>在调用 webpack 函数时，webpack 会向函数传入一个参数 env，该参数的值来自于 webpack 命令中给 env 指定的值，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx webpack --env abc # env: &quot;abc&quot;<br><br>npx webpack --env.abc # env: &#123;abc:true&#125;<br>npx webpack --env.abc=1  # env： &#123;abc:1&#125;<br>npx webpack --env.abc=1 --env.bcd=2 # env: &#123;abc:1, bcd:2&#125;<br></code></pre></td></tr></table></figure><p>这样一来，我们就可以在命令中指定环境，在代码中进行判断，根据环境返回不同的配置结果。<br>​</p><h1 id="其他细节配置"><a href="#其他细节配置" class="headerlink" title="其他细节配置"></a>其他细节配置</h1><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context: path.resolve(__dirname, <span class="hljs-string">&quot;app&quot;</span>);<br></code></pre></td></tr></table></figure><p>该配置会影响入口和 loaders 的解析，入口和 loaders 的相对路径会以 context 的配置作为基准路径，这样，你的配置会独立于 CWD（current working directory 当前执行路径）</p><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><h3 id="library"><a href="#library" class="headerlink" title="library"></a>library</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">library: <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>这样一来，打包后的结果中，会将自执行函数的执行结果暴露给 abc</p><h3 id="libraryTarget"><a href="#libraryTarget" class="headerlink" title="libraryTarget"></a>libraryTarget</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">libraryTarget: <span class="hljs-string">&quot;var&quot;</span>;<br></code></pre></td></tr></table></figure><p>该配置可以更加精细的控制如何暴露入口包的导出结果</p><p>其他可用的值有：</p><ul><li>var：默认值，暴露给一个普通变量</li><li>window：暴露给 window 对象的一个属性</li><li>this：暴露给 this 的一个属性</li><li>global：暴露给 global 的一个属性</li><li>commonjs：暴露给 exports 的一个属性</li><li>其他：<a href="https://www.webpackjs.com/configuration/output/#output-librarytarget">https://www.webpackjs.com/configuration/output/#output-librarytarget</a></li></ul><h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">target: <span class="hljs-string">&quot;web&quot;</span>; <span class="hljs-comment">//默认值</span><br></code></pre></td></tr></table></figure><p>设置打包结果最终要运行的环境，常用值有</p><ul><li>web: 打包后的代码运行在 web 环境中</li><li>node：打包后的代码运行在 node 环境中</li><li>其他：<a href="https://www.webpackjs.com/configuration/target/">https://www.webpackjs.com/configuration/target/</a></li></ul><h2 id="module-noParse"><a href="#module-noParse" class="headerlink" title="module.noParse"></a>module.noParse</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">noParse: <span class="hljs-regexp">/jquery/</span>;<br></code></pre></td></tr></table></figure><p>不解析正则表达式匹配的模块，通常用它来忽略那些大型的单模块库，以提高<strong>构建性能。和运行性能无关。</strong></p><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><p>resolve 的相关配置主要用于控制模块解析过程</p><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">modules: [<span class="hljs-string">&quot;node_modules&quot;</span>]; <span class="hljs-comment">//默认值。可以自行配置更改</span><br></code></pre></td></tr></table></figure><p>当解析模块时，如果遇到导入语句，<code>require(&quot;test&quot;)</code>，webpack 会从下面的位置寻找依赖的模块</p><ol><li>当前目录下的<code>node_modules</code>目录</li><li>上级目录下的<code>node_modules</code>目录</li><li>…</li></ol><h3 id="extensions"><a href="#extensions" class="headerlink" title="extensions"></a>extensions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">extensions: [<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;.json&quot;</span>]; <span class="hljs-comment">//默认值</span><br></code></pre></td></tr></table></figure><p>当解析模块时，遇到无具体后缀的导入语句，例如<code>require(&quot;test&quot;)</code>，会依次测试它的后缀名<br>webpack 自动补全后缀名，而不是 node</p><ul><li>test.js</li><li>test.json</li></ul><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">alias: &#123;<br>  <span class="hljs-string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>),<br>  <span class="hljs-string">&quot;_&quot;</span>: __dirname<br>&#125;<br></code></pre></td></tr></table></figure><p>有了 alias（别名）后，导入语句中可以加入配置的键名，例如<code>require(&quot;@/abc.js&quot;)</code>，webpack 会将其看作是<code>require(src的绝对路径+&quot;/abc.js&quot;)</code>。</p><p>在大型系统中，源码结构往往比较深和复杂，别名配置可以让我们更加方便的导入依赖</p><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">externals: &#123;    <span class="hljs-attr">jquery</span>: <span class="hljs-string">&quot;$&quot;</span>,    <span class="hljs-attr">lodash</span>: <span class="hljs-string">&quot;_&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>从最终的 bundle 中排除掉配置的配置的源码，例如，入口模块是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.jsrequire(&quot;jquery&quot;)require(&quot;lodash&quot;)</span><br></code></pre></td></tr></table></figure><p>生成的 bundle 是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    ...<br>&#125;)(&#123;<br>    <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>)</span>&#123;<br>        __webpack_require__(<span class="hljs-string">&quot;jquery&quot;</span>)<br>        __webpack_require__(<span class="hljs-string">&quot;lodash&quot;</span>)<br>    &#125;,<br>    <span class="hljs-string">&quot;jquery&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span></span>)</span>&#123;<br>        <span class="hljs-comment">//jquery的大量源码</span><br>    &#125;,<br>    <span class="hljs-string">&quot;lodash&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span></span>)</span>&#123;<br>        <span class="hljs-comment">//lodash的大量源码</span><br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>但有了上面的配置后，则变成了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    ...<br>&#125;)(&#123;<br>    <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>)</span>&#123;<br>        __webpack_require__(<span class="hljs-string">&quot;jquery&quot;</span>)<br>        __webpack_require__(<span class="hljs-string">&quot;lodash&quot;</span>)<br>    &#125;,<br>    <span class="hljs-string">&quot;jquery&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span></span>)</span>&#123;<br>        <span class="hljs-built_in">module</span>.exports = $;<br>    &#125;,<br>    <span class="hljs-string">&quot;lodash&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span></span>)</span>&#123;<br>        <span class="hljs-built_in">module</span>.exports = _;<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>这比较适用于一些第三方库来自于外部 CDN 的情况，这样一来，即可以在页面中使用 CDN，又让 bundle 的体积变得更小，还不影响源码的编写</p><h2 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h2><p>stats 控制的是构建过程中控制台的输出内容<br>​</p><h1 id="三、常用拓展"><a href="#三、常用拓展" class="headerlink" title="三、常用拓展"></a>三、常用拓展</h1><p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a>查阅文档</p><h2 id="清楚输出目录"><a href="#清楚输出目录" class="headerlink" title="清楚输出目录"></a>清楚输出目录</h2><p>clean-webpack-plugin<br>当文件内容变化，重新打包，会自动删除原来打包的文件</p><h2 id="自动生成页面"><a href="#自动生成页面" class="headerlink" title="自动生成页面"></a>自动生成页面</h2><p>html-webpack-plugin。<br>解决的问题：用打包后的 js 文件时，需要自行创建 html 文件，引入。但是当 js 文件变化，再次打包，生成的压缩文件名字变化了，并且用了 clean-webpack-plugin 插件，清楚了 dist 目录，把我写的 html 也删除了。<br>配置：</p><ol><li><p>自己定义模版，让他按照模版生成页面</p></li><li><p>多入口（chunk）。最终生成的 html 会把两个打包后的 js 入口都引入。</p></li></ol><h2 id="复制静态资源"><a href="#复制静态资源" class="headerlink" title="复制静态资源"></a>复制静态资源</h2><p>copy-webpack-plugin</p><h2 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h2><h1 id="开发服务器-1"><a href="#开发服务器-1" class="headerlink" title="开发服务器"></a>开发服务器</h1><p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p><ol><li>编写代码</li><li>控制台运行命令完成打包</li><li>打开页面查看效果</li><li>继续编写代码，回到步骤 2</li></ol><p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</p><p>为了解决这些问题，webpack 官方制作了一个单独的库：<strong>webpack-dev-server</strong></p><p>它<strong>既不是 plugin 也不是 loader</strong></p><p>先来看看它怎么用</p><ol><li>安装</li><li>执行<code>npx webpack-dev-server</code>命令</li></ol><p><code>webpack-dev-server</code>命令几乎支持所有的 webpack 命令参数，如<code>--config</code>、<code>-env</code>等等，你可以把它当作 webpack 命令使用</p><p>这个命令是专门为开发阶段服务的，真正部署的时候还是得使用 webpack 命令</p><p>当我们执行<code>webpack-dev-server</code>命令后，它做了以下操作：</p><ol><li>内部执行 webpack 命令，传递命令参数</li><li>开启 watch</li><li>注册 hooks：类似于 plugin，webpack-dev-server 会向 webpack 中注册一些钩子函数，主要功能如下：<ol><li>将资源列表（aseets）保存起来</li><li>禁止 webpack 输出文件</li></ol></li><li>用 express 开启一个服务器，监听某个端口，当请求到达后，根据请求的路径，给予相应的资源内容</li></ol><p><strong>配置</strong></p><p>针对 webpack-dev-server 的配置，参考：<a href="https://www.webpackjs.com/configuration/dev-server/">https://www.webpackjs.com/configuration/dev-server/</a></p><p>常见配置有：</p><ul><li>port：配置监听端口</li><li>proxy：配置代理，常用于跨域访问</li><li>stats：配置控制台输出内容</li></ul><h2 id="普通文件处理"><a href="#普通文件处理" class="headerlink" title="普通文件处理"></a>普通文件处理</h2><p>file-loader: 生成依赖的文件到输出目录，然后将模块文件设置为：导出一个路径\</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//file-loader</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loader</span>(<span class="hljs-params">source</span>) </span>&#123;<br>  <span class="hljs-comment">// source：文件内容（图片内容 buffer）</span><br>  <span class="hljs-comment">// 1. 生成一个具有相同文件内容的文件到输出目录</span><br>  <span class="hljs-comment">// 2. 返回一段代码   export default &quot;文件名&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>url-loader：将依赖的文件转换为：导出一个 base64 格式的字符串，不生成文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//file-loader</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loader</span>(<span class="hljs-params">source</span>) </span>&#123;<br>  <span class="hljs-comment">// source：文件内容（图片内容 buffer）</span><br>  <span class="hljs-comment">// 1. 根据buffer生成一个base64编码</span><br>  <span class="hljs-comment">// 2. 返回一段代码   export default &quot;base64编码&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解决路径问题"><a href="#解决路径问题" class="headerlink" title="解决路径问题"></a>解决路径问题</h1><p>在使用 file-loader 或 url-loader 时，可能会遇到一个非常有趣的问题</p><p>比如，通过 webpack 打包的目录结构如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">dist</span><br>    <span class="hljs-string">|——</span> <span class="hljs-string">img</span><br>        <span class="hljs-string">|——</span> <span class="hljs-string">a.png</span>  <span class="hljs-comment">#file-loader生成的文件</span><br>    <span class="hljs-string">|——</span> <span class="hljs-string">scripts</span><br>        <span class="hljs-string">|——</span> <span class="hljs-string">main.js</span>  <span class="hljs-comment">#export default &quot;img/a.png&quot;</span><br>    <span class="hljs-string">|——</span> <span class="hljs-string">html</span><br>        <span class="hljs-string">|——</span> <span class="hljs-string">index.html</span> <span class="hljs-comment">#&lt;script src=&quot;../scripts/main.js&quot; &gt;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>这种问题发生的根本原因：模块中的路径来自于某个 loader 或 plugin，当产生路径时，loader 或 plugin 只有相对于 dist 目录的路径，并不知道该路径将在哪个资源中使用，从而无法确定最终正确的路径</p><p>面对这种情况，需要依靠 webpack 的配置 publicPath 解决<br>​</p><blockquote><p>详细看视频</p></blockquote><h2 id="webpack-内置插件"><a href="#webpack-内置插件" class="headerlink" title="webpack 内置插件"></a>webpack 内置插件</h2><h1 id="webpack-内置插件-1"><a href="#webpack-内置插件-1" class="headerlink" title="webpack 内置插件"></a>webpack 内置插件</h1><p>所有的 webpack 内置插件都作为 webpack 的静态属性存在的，使用下面的方式即可创建一个插件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack&quot;</span>);<br><br><span class="hljs-keyword">new</span> webpack.插件名(options);<br></code></pre></td></tr></table></figure><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p>全局常量定义插件，使用该插件通常定义一些常量值，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> webpack.DefinePlugin(&#123;<br>  <span class="hljs-attr">PI</span>: <span class="hljs-string">`Math.PI`</span>, <span class="hljs-comment">// PI = Math.PI</span><br>  <span class="hljs-attr">VERSION</span>: <span class="hljs-string">`&quot;1.0.0&quot;`</span>, <span class="hljs-comment">// VERSION = &quot;1.0.0&quot;</span><br>  <span class="hljs-attr">DOMAIN</span>: <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-string">&quot;duyi.com&quot;</span>),<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样一来，在源码中，我们可以直接使用插件中提供的常量，当 webpack 编译完成后，会自动替换为常量的值</p><h2 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h2><p>它可以为每个 chunk 生成的文件头部添加一行注释，一般用于添加作者、公司、版权等信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> webpack.BannerPlugin(&#123;<br>  <span class="hljs-attr">banner</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  hash:[hash]</span><br><span class="hljs-string">  chunkhash:[chunkhash]</span><br><span class="hljs-string">  name:[name]</span><br><span class="hljs-string">  author:yuanjin</span><br><span class="hljs-string">  corporation:duyi</span><br><span class="hljs-string">  `</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h2><p>自动加载模块，而不必到处 import 或 require</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> webpack.ProvidePlugin(&#123;<br>  <span class="hljs-attr">$</span>: <span class="hljs-string">&quot;jquery&quot;</span>,<br>  <span class="hljs-attr">_</span>: <span class="hljs-string">&quot;lodash&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后在我们任意源码中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#item&quot;</span>); <span class="hljs-comment">// &lt;= 起作用</span><br>_.drop([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>); <span class="hljs-comment">// &lt;= 起作用</span><br></code></pre></td></tr></table></figure><h1 id="四、CSS-工程化"><a href="#四、CSS-工程化" class="headerlink" title="四、CSS 工程化"></a>四、CSS 工程化</h1><h2 id="css-的问题"><a href="#css-的问题" class="headerlink" title="css 的问题"></a>css 的问题</h2><h3 id="类名冲突的问题"><a href="#类名冲突的问题" class="headerlink" title="类名冲突的问题"></a>类名冲突的问题</h3><p>当你写一个 css 类的时候，你是写全局的类呢，还是写多个层级选择后的类呢？</p><p>你会发现，怎么都不好</p><ul><li>过深的层级不利于编写、阅读、压缩、复用</li><li>过浅的层级容易导致类名冲突</li></ul><p>一旦样式多起来，这个问题就会变得越发严重，其实归根结底，就是类名冲突不好解决的问题</p><h3 id="重复样式"><a href="#重复样式" class="headerlink" title="重复样式"></a>重复样式</h3><p>这种问题就更普遍了，一些重复的样式值总是不断的出现在 css 代码中，维护起来极其困难</p><p>比如，一个网站的颜色一般就那么几种：</p><ul><li>primary</li><li>info</li><li>warn</li><li>error</li><li>success</li></ul><p>如果有更多的颜色，都是从这些色调中自然变化得来，可以想象，这些颜色会到处充斥到诸如背景、文字、边框中，一旦要做颜色调整，是一个非常大的工程</p><h3 id="css-文件细分问题"><a href="#css-文件细分问题" class="headerlink" title="css 文件细分问题"></a>css 文件细分问题</h3><p>在大型项目中，css 也需要更细的拆分，这样有利于 css 代码的维护。</p><p>比如，有一个做轮播图的模块，它不仅需要依赖 js 功能，还需要依赖 css 样式，既然依赖的 js 功能仅关心轮播图，那 css 样式也应该仅关心轮播图，由此类推，不同的功能依赖不同的 css 样式、公共样式可以单独抽离，这样就形成了不同于过去的 css 文件结构：文件更多、拆分的更细</p><p>而同时，在真实的运行环境下，我们却希望文件越少越好，这种情况和 JS 遇到的情况是一致的</p><p>因此，对于 css，也需要工程化管理</p><p>从另一个角度来说，css 的工程化会遇到更多的挑战，因为 css 不像 JS，它的语法本身经过这么多年并没有发生多少的变化（css3 也仅仅是多了一些属性而已），对于 css 语法本身的改变也是一个工程化的课题</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>这么多年来，官方一直没有提出方案来解决上述问题</p><p>一些第三方机构针对不同的问题，提出了自己的解决方案</p><h3 id="解决类名冲突"><a href="#解决类名冲突" class="headerlink" title="解决类名冲突"></a>解决类名冲突</h3><p>一些第三方机构提出了一些方案来解决该问题，常见的解决方案如下：</p><p><strong>命名约定</strong></p><p>即提供一种命名的标准，来解决冲突，常见的标准有：</p><ul><li>BEM</li><li>OOCSS</li><li>AMCSS</li><li>SMACSS</li><li>其他</li></ul><p><strong>css in js</strong></p><p>这种方案非常大胆，它觉得，css 语言本身几乎无可救药了，干脆直接用 js 对象来表示样式，然后把样式直接应用到元素的 style 中</p><p>这样一来，css 变成了一个一个的对象，就可以完全利用到 js 语言的优势，你可以：</p><ul><li>通过一个函数返回一个样式对象</li><li>把公共的样式提取到公共模块中返回</li><li>应用 js 的各种特性操作对象，比如：混合、提取、拆分</li><li>更多的花样</li></ul><blockquote><p>这种方案在手机端的 React Native 中大行其道</p></blockquote><p><strong>css module</strong></p><p>非常有趣和好用的 css 模块化方案，编写简单，绝对不重名</p><p>具体的课程中详细介绍</p><h3 id="解决重复样式的问题"><a href="#解决重复样式的问题" class="headerlink" title="解决重复样式的问题"></a>解决重复样式的问题</h3><p><strong>css in js</strong></p><p>这种方案虽然可以利用 js 语言解决重复样式值的问题，但由于太过激进，很多习惯写 css 的开发者编写起来并不是很适应</p><p><strong>预编译器</strong></p><p>有些第三方搞出一套 css 语言的进化版来解决这个问题，它支持变量、函数等高级语法，然后经过编译器将其编译成为正常的 css</p><p>这种方案特别像构建工具，不过它仅针对 css</p><p>常见的预编译器支持的语言有：</p><ul><li>less</li><li>sass</li></ul><h3 id="解决-css-文件细分问题"><a href="#解决-css-文件细分问题" class="headerlink" title="解决 css 文件细分问题"></a>解决 css 文件细分问题</h3><p>这一部分，就要依靠构建工具，例如 webpack 来解决了</p><p>利用一些 loader 或 plugin 来打包、合并、压缩 css 文件</p><h1 id="利用-webpack-拆分-css"><a href="#利用-webpack-拆分-css" class="headerlink" title="利用 webpack 拆分 css"></a>利用 webpack 拆分 css</h1><p>要拆分 css，就必须把 css 当成像 js 那样的模块；要把 css 当成模块，就必须有一个构建工具（webpack），它具备合并代码的能力</p><p>而 webpack 本身只能读取 css 文件的内容、将其当作 JS 代码进行分析，因此，会导致错误</p><p>于是，就必须有一个 loader，能够将 css 代码转换为 js 代码</p><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>css-loader 的作用，就是将 css 代码转换为 js 代码</p><p>它的处理原理极其简单：将 css 代码作为字符串导出</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#f40&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 css-loader 转换后变成 js 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">`.red&#123;</span><br><span class="hljs-string">    color:&quot;#f40&quot;;</span><br><span class="hljs-string">&#125;`</span>;<br></code></pre></td></tr></table></figure><blockquote><p>上面的 js 代码是经过我简化后的，不代表真实的 css-loader 的转换后代码，css-loader 转换后的代码会有些复杂，同时会导出更多的信息，但核心思想不变</p></blockquote><p>再例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#f40&quot;</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./bg.png&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 css-loader 转换后变成 js 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> import1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bg.png&quot;</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">`.red&#123;</span><br><span class="hljs-string">    color:&quot;#f40&quot;;</span><br><span class="hljs-string">    background:url(&quot;<span class="hljs-subst">$&#123;import1&#125;</span>&quot;)</span><br><span class="hljs-string">&#125;`</span>;<br></code></pre></td></tr></table></figure><p>这样一来，经过 webpack 的后续处理，会把依赖<code>./bg.png</code>添加到模块列表，然后再将代码转换为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> import1 = __webpack_require__(<span class="hljs-string">&quot;./src/bg.png&quot;</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">`.red&#123;</span><br><span class="hljs-string">    color:&quot;#f40&quot;;</span><br><span class="hljs-string">    background:url(&quot;<span class="hljs-subst">$&#123;import1&#125;</span>&quot;)</span><br><span class="hljs-string">&#125;`</span>;<br></code></pre></td></tr></table></figure><p>再例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./reset.css&quot;</span>;<br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#f40&quot;</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./bg.png&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>会转换为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> import1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./reset.css&quot;</span>);<br><span class="hljs-keyword">var</span> import2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bg.png&quot;</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">`<span class="hljs-subst">$&#123;import1&#125;</span></span><br><span class="hljs-string">.red&#123;</span><br><span class="hljs-string">    color:&quot;#f40&quot;;</span><br><span class="hljs-string">    background:url(&quot;<span class="hljs-subst">$&#123;import2&#125;</span>&quot;)</span><br><span class="hljs-string">&#125;`</span>;<br></code></pre></td></tr></table></figure><p>总结，css-loader 干了什么：</p><ol><li>将 css 文件的内容作为字符串导出</li><li>将 css 中的其他依赖作为 require 导入，以便 webpack 分析依赖</li></ol><h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p>由于 css-loader 仅提供了将 css 转换为字符串导出的能力，剩余的事情要交给其他 loader 或 plugin 来处理</p><p>style-loader 可以将 css-loader 转换后的代码进一步处理，将 css-loader 导出的字符串加入到页面的 style 元素中</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#f40&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 css-loader 转换后变成 js 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">`.red&#123;</span><br><span class="hljs-string">    color:&quot;#f40&quot;;</span><br><span class="hljs-string">&#125;`</span>;<br></code></pre></td></tr></table></figure><p>经过 style-loader 转换后变成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">`.red&#123;</span><br><span class="hljs-string">    color:&quot;#f40&quot;;</span><br><span class="hljs-string">&#125;`</span>;<br><span class="hljs-keyword">var</span> style = <span class="hljs-built_in">module</span>.exports;<br><span class="hljs-keyword">var</span> styleElem = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;style&quot;</span>);<br>styleElem.innerHTML = style;<br><span class="hljs-built_in">document</span>.head.appendChild(styleElem);<br><span class="hljs-built_in">module</span>.exports = &#123;&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>以上代码均为简化后的代码，并不代表真实的代码<br>style-loader 有能力避免同一个样式的重复导入</p></blockquote><h1 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h1><p>BEM 是一套针对 css 类样式的命名方法。</p><blockquote><p>其他命名方法还有：OOCSS、AMCSS、SMACSS 等等</p></blockquote><p>BEM 全称是：<strong>B</strong>lock <strong>E</strong>lement <strong>M</strong>odifier</p><p>一个完整的 BEM 类名：block**element_modifier，例如：<code>banner**dot_selected</code>，可以表示：轮播图中，处于选中状态的小圆点<br>​</p><p>一切类名都采用顶级的，不分级</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">banner__dot_selected &#123;<br>&#125;<br>banner_dot_unselected &#123;<br>&#125;<br>nav__dot_selected &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>三个部分的具体含义为：</p><ul><li><strong>Block</strong>：页面中的大区域，表示最顶级的划分，例如：轮播图(<code>banner</code>)、布局(<code>layout</code>)、文章(<code>article</code>)等等</li><li><strong>element</strong>：区域中的组成部分，例如：轮播图中的横幅图片(<code>banner__img</code>)、轮播图中的容器（<code>banner__container</code>）、布局中的头部(<code>layout__header</code>)、文章中的标题(<code>article_title</code>)</li><li><strong>modifier</strong>：可选。通常表示状态，例如：处于展开状态的布局左边栏（<code>layout__left_expand</code>）、处于选中状态的轮播图小圆点(<code>banner__dot_selected</code>)</li></ul><p>在某些大型工程中，如果使用 BEM 命名法，还可能会增加一个前缀，来表示类名的用途，常见的前缀有：</p><ul><li><strong>l</strong>: layout，表示这个样式是用于布局的</li><li><strong>c</strong>: component，表示这个样式是一个组件，即一个功能区域</li><li><strong>u</strong>: util，表示这个样式是一个通用的、工具性质的样式</li><li><strong>j</strong>: javascript，表示这个样式没有实际意义，是专门提供给 js 获取元素使用的</li></ul><h1 id="css-in-js"><a href="#css-in-js" class="headerlink" title="css in js"></a>css in js</h1><p>css in js 的核心思想是：用一个 JS 对象来描述样式，而不是 css 样式表</p><p>例如下面的对象就是一个用于描述样式的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> styles = &#123;<br>  <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#f40&quot;</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;400px&quot;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;500px&quot;</span>,<br>  <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;0 auto&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>由于这种描述样式的方式<strong>根本就不存在类名</strong>，自然不会有类名冲突</p><p>至于如何把样式应用到界面上，不是它所关心的事情，你可以用任何技术、任何框架、任何方式将它应用到界面。</p><blockquote><p>后续学习的 vue、react 都支持 css in js，可以非常轻松的应用到界面</p></blockquote><p>css in js 的特点：</p><ul><li><strong>绝无冲突的可能</strong>：由于它根本不存在类名，所以绝不可能出现类名冲突</li><li><strong>更加灵活</strong>：可以充分利用 JS 语言灵活的特点，用各种招式来处理样式</li><li><strong>应用面更广</strong>：只要支持 js 语言，就可以支持 css in js，因此，在一些用 JS 语言开发移动端应用的时候非常好用，因为移动端应用很有可能并不支持 css</li><li><strong>书写不便</strong>：书写样式，特别是公共样式的时候，处理起来不是很方便</li><li><strong>在页面中增加了大量冗余内容</strong>：在页面中处理 css in js 时，往往是将样式加入到元素的 style 属性中，会大量增加元素的内联样式，并且可能会有大量重复，不易阅读最终的页面代码</li></ul><h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h1><blockquote><p>通过命名规范来限制类名太过死板，而 css in js 虽然足够灵活，但是书写不便。<br>css module 开辟一种全新的思路来解决类名冲突的问题</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>css module 遵循以下思路解决类名冲突问题：</p><ol><li>css 的类名冲突往往发生在大型项目中</li><li>大型项目往往会使用构建工具（webpack 等）搭建工程</li><li>构建工具允许将 css 样式切分为更加精细的模块</li><li>同 JS 的变量一样，每个 css 模块文件中难以出现冲突的类名，冲突的类名往往发生在不同的 css 模块文件中</li><li>只需要保证构建工具在合并样式代码后不会出现类名冲突即可</li></ol><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在 webpack 中，作为处理 css 的 css-loader，它实现了 css module 的思想，要启用 css module，需要将 css-loader 的配置<code>modules</code>设置为<code>true</code>。</p><p>原理极其简单，开启了 css module 后，css-loader 会将样式中的类名进行转换，转换为一个唯一的 hash 值。</p><p>由于 hash 值是根据模块路径和类名生成的，因此，不同的 css 模块，哪怕具有相同的类名，转换后的 hash 值也不一样。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1621674804232-7b41f37a-1e04-4c97-ac56-794a3bc39d63.png#clientId=ua1f07be5-6e53-4&from=paste&height=432&id=u2695a54e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=864&originWidth=1317&originalType=binary&ratio=1&size=193590&status=done&style=none&taskId=u898712d3-b82e-4fbe-b777-c44e293a956&width=658.5" alt="image.png"></p><h2 id="如何应用样式"><a href="#如何应用样式" class="headerlink" title="如何应用样式"></a>如何应用样式</h2><p>css module 带来了一个新的问题：源代码的类名和最终生成的类名是不一样的，而开发者只知道自己写的源代码中的类名，并不知道最终的类名是什么，那如何应用类名到元素上呢？</p><p>为了解决这个问题，css-loader 会导出原类名和最终类名的对应关系，该关系是通过一个对象描述的</p><p>这样一来，我们就可以在 js 代码中获取到 css 模块导出的结果，从而应用类名了</p><p>style-loader 为了我们更加方便的应用类名，会去除掉其他信息，仅暴露对应关系</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="全局类名"><a href="#全局类名" class="headerlink" title="全局类名"></a>全局类名</h3><p>某些类名是全局的、静态的，不需要进行转换，仅需要在类名位置使用一个特殊的语法即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">:<span class="hljs-built_in">global</span>(.main) &#123;<br>  ...;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了 global 的类名不会进行转换，相反的，没有使用 global 的类名，表示默认使用了 local</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">:<span class="hljs-built_in">local</span>(.main) &#123;<br>  ...;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了 local 的类名表示局部类名，是可能会造成冲突的类名，会被 css module 进行转换</p><h3 id="如何控制最终的类名"><a href="#如何控制最终的类名" class="headerlink" title="如何控制最终的类名"></a>如何控制最终的类名</h3><p>绝大部分情况下，我们都不需要控制最终的类名，因为控制它没有任何意义</p><p>如果一定要控制最终的类名，需要配置 css-loader 的<code>localIdentName</code></p><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><ul><li>css module 往往配合构建工具使用</li><li>css module 仅处理顶级类名，尽量不要书写嵌套的类名，也没有这个必要</li><li>css module 仅处理类名，不处理其他选择器</li><li>css module 还会处理 id 选择器，不过任何时候都没有使用 id 选择器的理由</li><li>使用了 css module 后，只要能做到让类名望文知意即可，不需要遵守其他任何的命名规范</li></ul><h1 id="CSS-预编译器"><a href="#CSS-预编译器" class="headerlink" title="CSS 预编译器"></a>CSS 预编译器</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>编写 css 时，受限于 css 语言本身，常常难以处理一些问题：</p><ul><li>重复的样式值：例如常用颜色、常用尺寸</li><li>重复的代码段：例如绝对定位居中、清除浮动</li><li>重复的嵌套书写</li></ul><p>由于官方迟迟不对 css 语言本身做出改进，一些第三方机构开始想办法来解决这些问题</p><p>其中一种方案，便是预编译器</p><p>预编译器的原理很简单，即使用一种更加优雅的方式来书写样式代码，通过一个编译器，将其转换为可被浏览器识别的传统 css 代码</p><p>目前，最流行的预编译器有<strong>LESS</strong>和<strong>SASS</strong>，由于它们两者特别相似，因此仅学习一种即可（本课程学习 LESS）</p><blockquote><p>less 官网：<a href="http://lesscss.org/">http://lesscss.org/</a><br>less 中文文档 1（非官方）：<a href="http://lesscss.cn/">http://lesscss.cn/</a><br>less 中文文档 2（非官方）：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a><br>sass 官网：<a href="https://sass-lang.com/">https://sass-lang.com/</a><br>sass 中文文档 1（非官方）：<a href="https://www.sass.hk/">https://www.sass.hk/</a><br>sass 中文文档 2（非官方）：<a href="https://sass.bootcss.com/">https://sass.bootcss.com/</a></p></blockquote><h2 id="LESS-的安装和使用"><a href="#LESS-的安装和使用" class="headerlink" title="LESS 的安装和使用"></a>LESS 的安装和使用</h2><p>从原理可知，要使用 LESS，必须要安装 LESS 编译器</p><p>LESS 编译器是基于 node 开发的，可以通过 npm 下载安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D less<br></code></pre></td></tr></table></figure><p>安装好了 less 之后，它提供了一个 CLI 工具<code>lessc</code>，通过该工具即可完成编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lessc less代码文件 编译后的文件<br></code></pre></td></tr></table></figure><p>试一试:</p><p>新建一个<code>index.less</code>文件，编写内容如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// less代码</span><br><span class="hljs-variable">@red:</span> <span class="hljs-number">#f40</span>;<br><br><span class="hljs-selector-class">.redcolor</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@red</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 css 文件夹终端中运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx lessc index.less index.css<br></code></pre></td></tr></table></figure><p>可以看到编译之后的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.redcolor</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LESS-的基本使用"><a href="#LESS-的基本使用" class="headerlink" title="LESS 的基本使用"></a>LESS 的基本使用</h2><p>具体的使用见文档：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p><ul><li>变量</li><li>混合</li><li>嵌套</li><li>运算</li><li>函数</li><li>作用域</li><li>注释</li><li>导入</li></ul><h1 id="webpack-中使用-less"><a href="#webpack-中使用-less" class="headerlink" title="webpack 中使用 less"></a>webpack 中使用 less</h1><p>转换过程：<br>less — 用 less-loader —&gt; css —用 css loader —&gt; js —–用 style-loader —&gt; 放到 style 元素<br>只需要进行配置 webpack：less-loader</p><h1 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h1><h1 id="什么是-PostCss"><a href="#什么是-PostCss" class="headerlink" title="什么是 PostCss"></a>什么是 PostCss</h1><p>学习到现在，可以看出，CSS 工程化面临着诸多问题，而解决这些问题的方案多种多样。</p><p>如果把 CSS 单独拎出来看，光是样式本身，就有很多事情要处理。</p><p>既然有这么多事情要处理，何不把这些事情集中到一起统一处理呢？</p><p>PostCss 就是基于这样的理念出现的。</p><p>PostCss 类似于一个编译器，可以将样式源码编译成最终的 CSS 代码<br><img src="/img/9-18.png"></p><p>看上去是不是和 LESS、SASS 一样呢？</p><p>但 PostCss 和 LESS、SASS 的思路不同，它其实只做一些代码分析之类的事情，将分析的结果交给插件，具体的代码转换操作是插件去完成的。</p><p><img src="/img/9-19.png"></p><p>官方的一张图更能说明 postcss 的处理流程：</p><p><img src="/img/9-20.png"></p><blockquote><p>这一点有点像 webpack，webpack 本身仅做依赖分析、抽象语法树分析，其他的操作是靠插件和加载器完成的。</p></blockquote><p>官网地址：<a href="https://postcss.org/">https://postcss.org/</a><br>github 地址：<a href="https://github.com/postcss/postcss">https://github.com/postcss/postcss</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>PostCss 是基于 node 编写的，因此可以使用 npm 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D postcss<br></code></pre></td></tr></table></figure><p>postcss 库提供了对应的 js api 用于转换代码，如果你想使用 postcss 的一些高级功能，或者想开发 postcss 插件，就要 api 使用 postcss，api 的文档地址是：<a href="http://api.postcss.org/">http://api.postcss.org/</a><br>​</p><p>后缀：.postcss .pcss .sss<br>安装插件：postcss-sugarss-language 可以识别拓展名</p><p>不过绝大部分时候，我们都是使用者，并不希望使用代码的方式来使用 PostCss</p><p>因此，我们可以再安装一个 postcss-cli，通过命令行来完成编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D postcss-cli<br></code></pre></td></tr></table></figure><p>postcss-cli 提供一个命令，它调用 postcss 中的 api 来完成编译</p><p>命令的使用方式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">postcss 源码文件 -o 输出文件<br></code></pre></td></tr></table></figure><p>编译：npm start</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>和 webpack 类似，postcss 有自己的配置文件，该配置文件会影响 postcss 的某些编译行为。</p><p>配置文件的默认名称是：<code>postcss.config.js</code></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">map</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//关闭source-map</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>光使用 postcss 是没有多少意义的，要让它真正的发挥作用，需要插件</p><p>postcss 的插件市场：<a href="https://www.postcss.parts/">https://www.postcss.parts/</a></p><p>下面罗列一些 postcss 的常用插件</p><h2 id="postcss-preset-env"><a href="#postcss-preset-env" class="headerlink" title="postcss-preset-env"></a>postcss-preset-env</h2><p>过去使用 postcss 的时候，往往会使用大量的插件，它们各自解决一些问题</p><p>这样导致的结果是安装插件、配置插件都特别的繁琐</p><p>于是出现了这么一个插件<code>postcss-preset-env</code>，它称之为<code>postcss预设环境</code>，大意就是它整合了很多的常用插件到一起，并帮你完成了基本的配置，你只需要安装它一个插件，就相当于安装了很多插件了。</p><p>安装好该插件后，在 postcss 配置中加入下面的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: &#123;<br>    <span class="hljs-string">&quot;postcss-preset-env&quot;</span>: &#123;&#125;, <span class="hljs-comment">// &#123;&#125; 中可以填写插件的配置</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>该插件的功能很多，下面一一介绍</p><h3 id="自动的厂商前缀"><a href="#自动的厂商前缀" class="headerlink" title="自动的厂商前缀"></a>自动的厂商前缀</h3><p>某些新的 css 样式需要在旧版本浏览器中使用厂商前缀方可实现</p><p>例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>该功能在不同的旧版本浏览器中需要书写为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-input-placeholder &#123;<br>  color: red;<br>&#125;<br>::-moz-placeholder &#123;<br>  color: red;<br>&#125;<br>:-ms-input-placeholder &#123;<br>  color: red;<br>&#125;<br>::-ms-input-placeholder &#123;<br>  color: red;<br>&#125;<br><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>要完成这件事情，需要使用<code>autoprefixer</code>库。</p><p>而<code>postcss-preset-env</code>内部包含了该库，自动有了该功能。</p><p>如果需要调整<strong>兼容的浏览器</strong>范围，可以通过下面的方式进行配置</p><p><strong>方式 1：在 postcss-preset-env 的配置中加入 browsers</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: &#123;<br>    <span class="hljs-string">&quot;postcss-preset-env&quot;</span>: &#123;<br>      <span class="hljs-attr">browsers</span>: [<span class="hljs-string">&quot;last 2 version&quot;</span>, <span class="hljs-string">&quot;&gt; 1%&quot;</span>],<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方式 2【推荐】：添加 .browserslistrc 文件 –通用</strong></p><p>创建文件<code>.browserslistrc</code>，填写配置内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">last</span> <span class="hljs-number">2</span> <span class="hljs-built_in">version</span><br>&gt; <span class="hljs-number">1</span>%<br></code></pre></td></tr></table></figure><p><strong>方式 3【推荐】：在 package.json 的配置中加入 browserslist</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;browserslist&quot;</span>: [<br>    <span class="hljs-string">&quot;last 2 version&quot;</span>,<br>    <span class="hljs-string">&quot;&gt; 1%&quot;</span><br>]<br></code></pre></td></tr></table></figure><p><code>browserslist</code>是一个多行的（数组形式的）标准字符串。</p><p>它的书写规范多而繁琐，详情见：<a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a></p><p>一般情况下，大部分网站都使用下面的格式进行书写</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">last</span> <span class="hljs-number">2</span> <span class="hljs-built_in">version</span><br>&gt; <span class="hljs-number">1</span>% <span class="hljs-keyword">in</span> CN<br><span class="hljs-keyword">not</span> ie &lt;= <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><ul><li><code>last 2 version</code>: 浏览器的兼容最近期的两个版本</li><li><code>&gt; 1% in CN</code>: 匹配中国大于 1%的人使用的浏览器， <code>in CN</code>可省略</li><li><code>not ie &lt;= 8</code>: 排除掉版本号小于等于 8 的 IE 浏览器</li></ul><blockquote><p>默认情况下，匹配的结果求的是并集</p></blockquote><p>你可以通过网站：<a href="https://browserl.ist/">https://browserl.ist/</a> 对配置结果覆盖的浏览器进行查询，查询时，多行之间使用英文逗号分割</p><blockquote><p>browserlist 的数据来自于<a href="http://caniuse.com/">CanIUse</a>网站，由于数据并非实时的，所以不会特别准确</p></blockquote><h3 id="未来的-CSS-语法"><a href="#未来的-CSS-语法" class="headerlink" title="未来的 CSS 语法"></a>未来的 CSS 语法</h3><p>CSS 的某些前沿语法正在制定过程中，没有形成真正的标准，如果希望使用这部分语法，为了浏览器兼容性，需要进行编译</p><p>过去，完成该语法编译的是<code>cssnext</code>库，不过有了<code>postcss-preset-env</code>后，它自动包含了该功能。</p><p>你可以通过<code>postcss-preset-env</code>的<code>stage</code>配置，告知<code>postcss-preset-env</code>需要对哪个阶段的 css 语法进行兼容处理，它的默认值为 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;postcss-preset-env&quot;</span>: &#123;<br>    <span class="hljs-attr">stage</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一共有 5 个阶段可配置：</p><ul><li>Stage 0: Aspirational - 只是一个早期草案，极其不稳定</li><li>Stage 1: Experimental - 仍然极其不稳定，但是提议已被 W3C 公认</li><li>Stage 2: Allowable - 虽然还是不稳定，但已经可以使用了</li><li>Stage 3: Embraced - 比较稳定，可能将来会发生一些小的变化，它即将成为最终的标准</li><li>Stage 4: Standardized - 所有主流浏览器都应该支持的 W3C 标准</li></ul><p>了解了以上知识后，接下来了解一下未来的 css 语法，尽管某些语法仍处于非常早期的阶段，但是有该插件存在，编译后仍然可以被浏览器识别</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>未来的 css 语法是天然支持变量的</p><p>在<code>:root&#123;&#125;</code>中定义常用变量，使用<code>--</code>前缀命名变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  --lightColor: <span class="hljs-number">#ddd</span>;<br>  --darkColor: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--lightColor);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--darkColor);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编译后，仍然可以看到原语法，因为某些新语法的存在并不会影响浏览器的渲染，尽管浏览器可能不认识<br>如果不希望在结果中看到新语法，可以配置<code>postcss-preset-env</code>的<code>preserve</code>为<code>false</code></p></blockquote><h4 id="自定义选择器"><a href="#自定义选择器" class="headerlink" title="自定义选择器"></a>自定义选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@custom-selector</span> :--heading h1, h2, h3, h4, h5, h6;<br><span class="hljs-keyword">@custom-selector</span> :--enter :focus, :<span class="hljs-attribute">hover</span>;<br><br><span class="hljs-selector-tag">a</span>:--enter &#123;<br>  color: <span class="hljs-number">#f40</span>;<br>&#125;<br><br>:--heading &#123;<br>  font-weight: bold;<br>&#125;<br><br>:--heading.active &#123;<br>  font-weight: bold;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span>,<br><span class="hljs-selector-tag">h2</span>,<br><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-tag">h5</span>,<br><span class="hljs-selector-tag">h6</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-tag">h4</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-tag">h5</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-tag">h6</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>与 LESS 相同，只不过嵌套的选择器前必须使用符号<code>&amp;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-selector-tag">&amp;</span> <span class="hljs-selector-class">.b</span> &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span> &gt; <span class="hljs-selector-class">.b</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.a</span> <span class="hljs-selector-class">.b</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br><br><span class="hljs-selector-class">.a</span> &gt; <span class="hljs-selector-class">.b</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-class">.a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="postcss-apply"><a href="#postcss-apply" class="headerlink" title="postcss-apply"></a>postcss-apply</h2><p>该插件可以支持在 css 中书写属性集</p><p>类似于 LESS 中的混入，可以利用 CSS 的新语法定义一个 CSS 代码片段，然后在需要的时候应用它</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  --center: &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: translate(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-variable">@apply</span> --center;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实际上，该功能也属于 cssnext，不知为何<code>postcss-preset-env</code>没有支持</p></blockquote><h2 id="postcss-color-function"><a href="#postcss-color-function" class="headerlink" title="postcss-color-function"></a>postcss-color-function</h2><p>该插件支持在源码中使用一些颜色函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span><br>  <span class="hljs-attribute">color</span>: color(<span class="hljs-number">#aabbcc</span>);<br>  <span class="hljs-comment">/* 将颜色#aabbcc透明度设置为90% */</span><br>  <span class="hljs-attribute">color</span>: color(<span class="hljs-number">#aabbcc</span> a(<span class="hljs-number">90%</span>));<br>  <span class="hljs-comment">/* 将颜色#aabbcc的红色部分设置为90% */</span><br>  <span class="hljs-attribute">color</span>: color(<span class="hljs-number">#aabbcc</span> red(<span class="hljs-number">90%</span>));<br>  <span class="hljs-comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span><br>  <span class="hljs-attribute">color</span>: color(<span class="hljs-number">#aabbcc</span> tint(<span class="hljs-number">50%</span>));<br>  <span class="hljs-comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span><br>  <span class="hljs-attribute">color</span>: color(<span class="hljs-number">#aabbcc</span> shade(<span class="hljs-number">50%</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">170</span>, <span class="hljs-number">187</span>, <span class="hljs-number">204</span>);<br>  <span class="hljs-comment">/* 将颜色#aabbcc透明度设置为90% */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">170</span>, <span class="hljs-number">187</span>, <span class="hljs-number">204</span>, <span class="hljs-number">0.9</span>);<br>  <span class="hljs-comment">/* 将颜色#aabbcc的红色部分设置为90% */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">230</span>, <span class="hljs-number">187</span>, <span class="hljs-number">204</span>);<br>  <span class="hljs-comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">213</span>, <span class="hljs-number">221</span>, <span class="hljs-number">230</span>);<br>  <span class="hljs-comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">85</span>, <span class="hljs-number">94</span>, <span class="hljs-number">102</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="扩展-postcss-import"><a href="#扩展-postcss-import" class="headerlink" title="[扩展]postcss-import"></a>[扩展]postcss-import</h2><p>该插件可以让你在<code>postcss</code>文件中导入其他样式代码，通过该插件可以将它们合并</p><blockquote><p>由于后续的知识点中，会将 postcss 加入到 webpack 中，而 webpack 本身具有依赖分析的功能，所以该插件的实际意义不大</p></blockquote><h2 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h2><blockquote><p>官网：<a href="https://stylelint.io/">https://stylelint.io/</a></p></blockquote><p>在实际的开发中，我们可能会错误的或不规范的书写一些 css 代码，stylelint 插件会即时的发现错误</p><p>由于不同的公司可能使用不同的 CSS 书写规范，stylelint 为了保持灵活，它本身并没有提供具体的规则验证</p><p>你需要安装或自行编写规则验证方案</p><p>通常，我们会安装<code>stylelint-config-standard</code>库来提供标准的 CSS 规则判定</p><p>安装好后，我们需要告诉 stylelint 使用该库来进行规则验证</p><p>告知的方式有多种，比较常见的是使用文件<code>.stylelintrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//.styleintrc</span><br>&#123;<br>  <span class="hljs-attr">&quot;extends&quot;</span>: <span class="hljs-string">&quot;stylelint-config-standard&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此时，如果你的代码出现不规范的地方，编译时将会报出错误</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: #f4;<br>&#125;<br></code></pre></td></tr></table></figure><p>发生了两处错误：</p><ol><li>缩进应该只有两个空格</li><li>十六进制的颜色值不正确</li></ol><p>如果某些规则并非你所期望的，可以在配置中进行设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;extends&quot;</span>: <span class="hljs-string">&quot;stylelint-config-standard&quot;</span>,<br>  <span class="hljs-attr">&quot;rules&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;indentation&quot;</span>: <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置为<code>null</code>可以禁用该规则，或者设置为 4，表示一个缩进有 4 个空格。具体的设置需要参见 stylelint 文档：<a href="https://stylelint.io/">https://stylelint.io/</a></p><p>但是这种错误报告需要在编译时才会发生，如果我希望在编写代码时就自动在编辑器里报错呢？</p><p>既然想在编辑器里达到该功能，那么就要在编辑器里做文章</p><p>安装 vscode 的插件<code>stylelint</code>即可，它会读取你工程中的配置文件，按照配置进行实时报错</p><blockquote><p>实际上，如果你拥有了<code>stylelint</code>插件，可以不需要在 postcss 中使用该插件了</p></blockquote><h1 id="抽离-css-文件"><a href="#抽离-css-文件" class="headerlink" title="抽离 css 文件"></a>抽离 css 文件</h1><p>目前，css 代码被 css-loader 转换后，交给的是 style-loader 进行处理。</p><p>style-loader 使用的方式是用一段 js 代码，将样式加入到 style 元素中。</p><p>而实际的开发中，我们往往希望依赖的样式最终形成一个 css 文件</p><p>此时，就需要用到一个库：<code>mini-css-extract-plugin</code></p><p>该库提供了 1 个 plugin 和 1 个 loader</p><ul><li>plugin：负责生成 css 文件</li><li>loader：负责记录要生成的 css 文件的内容，同时导出开启 css-module 后的样式对象</li></ul><p>使用方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [MiniCssExtractPlugin.loader, <span class="hljs-string">&quot;css-loader?modules&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(), <span class="hljs-comment">//负责生成css文件</span><br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>配置生成的文件名</strong></p><p>同<code>output.filename</code>的含义一样，即根据 chunk 生成的样式文件名</p><p>配置生成的文件名，例如<code>[name].[contenthash:5].css</code></p><p>默认情况下，每个 chunk 对应一个 css 文件<br>​</p><h1 id="四、JS-兼容性"><a href="#四、JS-兼容性" class="headerlink" title="四、JS 兼容性"></a>四、JS 兼容性</h1><h1 id="babel-的安装和使用-ignore"><a href="#babel-的安装和使用-ignore" class="headerlink" title="babel 的安装和使用 {ignore}"></a>babel 的安装和使用 {ignore}</h1><blockquote><p>官网：<a href="https://babeljs.io/">https://babeljs.io/</a><br>民间中文网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></p></blockquote><h2 id="babel-简介"><a href="#babel-简介" class="headerlink" title="babel 简介"></a>babel 简介</h2><p>babel 一词来自于希伯来语，直译为巴别塔</p><p>巴别塔象征的统一的国度、统一的语言</p><p>而今天的 JS 世界缺少一座巴别塔，不同版本的浏览器能识别的 ES 标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。</p><p>babel 的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言</p><p>由于语言的转换工作灵活多样，babel 的做法和 postcss、webpack 差不多，它本身仅提供一些分析功能，真正的转换需要依托于插件完成</p><h2 id="babel-的安装"><a href="#babel-的安装" class="headerlink" title="babel 的安装"></a>babel 的安装</h2><p>babel 可以和构建工具联合使用，也可以独立使用</p><p>如果要独立的使用 babel，需要安装下面两个库：</p><ul><li>@babel/core：babel 核心库，提供了编译所需的所有 api</li><li>@babel/cli：提供一个命令行工具，调用核心库的 api 完成编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D @babel/core @babel/cli<br></code></pre></td></tr></table></figure><h2 id="babel-的使用"><a href="#babel-的使用" class="headerlink" title="babel 的使用"></a>babel 的使用</h2><p>@babel/cli 的使用极其简单</p><p>它提供了一个命令<code>babel</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 按文件编译</span><br>babel 要编译的文件 -o 编辑结果文件<br>npx babel js/a.js -o js/b.js<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 按目录编译</span><br>babel 要编译的整个目录 -d 编译结果放置的目录<br>npx babel js -d dist<br></code></pre></td></tr></table></figure><h2 id="babel-的配置"><a href="#babel-的配置" class="headerlink" title="babel 的配置"></a>babel 的配置</h2><p>可以看到，babel 本身没有做任何事情，真正的编译要依托于<strong>babel 插件</strong>和<strong>babel 预设</strong>来完成</p><blockquote><p>babel 预设和 postcss 预设含义一样，是多个插件的集合体，用于解决一系列常见的兼容问题</p></blockquote><p>如何告诉 babel 要使用哪些插件或预设呢？需要通过一个配置文件<code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="babel-预设"><a href="#babel-预设" class="headerlink" title="babel 预设"></a>babel 预设</h1><p>babel 有多种预设，最常见的预设是<code>@babel/preset-env</code></p><p>安装 <code>@babel/preset-env</code>可以让你使用最新的 JS 语法，而无需针对每种语法转换设置具体的插件<br>​</p><p><strong>配置</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>兼容的浏览器</strong></p><p><code>@babel/preset-env</code>需要根据兼容的浏览器范围来确定如何编译，和 postcss 一样，可以使用文件<code>.browserslistrc</code>来描述浏览器的兼容范围</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">last</span> <span class="hljs-number">3</span> <span class="hljs-built_in">version</span><br>&gt; <span class="hljs-number">1</span>%<br><span class="hljs-keyword">not</span> ie &lt;= <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><strong>自身的配置</strong></p><p>和<code>postcss-preset-env</code>一样，<code>@babel/preset-env</code>自身也有一些配置</p><blockquote><p>具体的配置见：<a href="https://www.babeljs.cn/docs/babel-preset-env#options">https://www.babeljs.cn/docs/babel-preset-env#options</a></p></blockquote><p>配置方式是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<br>    [<br>      <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;配置项1&quot;</span>: <span class="hljs-string">&quot;配置值&quot;</span>,<br>        <span class="hljs-attr">&quot;配置项2&quot;</span>: <span class="hljs-string">&quot;配置值&quot;</span>,<br>        <span class="hljs-attr">&quot;配置项3&quot;</span>: <span class="hljs-string">&quot;配置值&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>其中一个比较常见的配置项是<code>usebuiltins</code>，该配置的默认值是 false</p><p>它有什么用呢？由于该预设仅转换新的语法，并不对新的 API 进行任何处理</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  resolve();<br>&#125;);<br></code></pre></td></tr></table></figure><p>转换的结果为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>  resolve();<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果遇到没有 Promise 构造函数的旧版本浏览器，该代码就会报错</p><p>而配置<code>usebuiltins</code>可以在编译结果中注入这些新的 API，它的值默认为<code>false</code>，表示不注入任何新的 API，可以将其设置为<code>usage</code>，表示根据 API 的使用情况，按需导入 API<br>​</p><p>对于新的 api npm i core-js<br>对于新的语法变成 api 实现 generator-runtime</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<br>    [<br>      <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span>,<br>        <span class="hljs-attr">&quot;corejs&quot;</span>: <span class="hljs-number">3</span> <span class="hljs-comment">//默认会使用2，我需要使用3版本</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="babel-插件"><a href="#babel-插件" class="headerlink" title="babel 插件"></a>babel 插件</h1><p>先安装在使用 npm i -D …</p><blockquote><p>上节课补充：@babel/polyfill 已过时，目前被<code>core-js</code>和<code>generator-runtime</code>所取代</p></blockquote><p>除了预设可以转换代码之外，插件也可以转换代码，它们的顺序是：</p><ul><li>插件在 Presets 前运行。</li><li>插件顺序从前往后排列。</li><li>Preset 顺序是颠倒的（从后往前）。</li></ul><p>通常情况下，<code>@babel/preset-env</code>只转换那些已经形成正式标准的语法，对于某些处于早期阶段、还没有确定的语法不做转换。</p><p>如果要转换这些语法，就要单独使用插件</p><p>下面随便列举一些插件</p><h2 id="babel-plugin-proposal-class-properties"><a href="#babel-plugin-proposal-class-properties" class="headerlink" title="@babel/plugin-proposal-class-properties"></a><code>@babel/plugin-proposal-class-properties</code></h2><p>该插件可以让你在类中书写初始化字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>  a = <span class="hljs-number">1</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-number">3</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="babel-plugin-proposal-function-bind"><a href="#babel-plugin-proposal-function-bind" class="headerlink" title="@babel/plugin-proposal-function-bind"></a><code>@babel/plugin-proposal-function-bind</code></h2><p>该插件可以让你轻松的为某个方法绑定 this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.loginId);<br>&#125;<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">loginId</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>&#125;;<br><br>obj::Print(); <span class="hljs-comment">//相当于：Print.call(obj);</span><br></code></pre></td></tr></table></figure><blockquote><p>遗憾的是，目前 vscode 无法识别该语法，会在代码中报错，虽然并不会有什么实际性的危害，但是影响观感</p></blockquote><h2 id="babel-plugin-proposal-optional-chaining"><a href="#babel-plugin-proposal-optional-chaining" class="headerlink" title="@babel/plugin-proposal-optional-chaining"></a><code>@babel/plugin-proposal-optional-chaining</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">foo</span>: &#123;<br>    <span class="hljs-attr">bar</span>: &#123;<br>      <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> baz = obj?.foo?.bar?.baz; <span class="hljs-comment">// 42</span><br><br><span class="hljs-keyword">const</span> safe = obj?.qux?.baz; <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h2 id="babel-plugin-transform-remove-console"><a href="#babel-plugin-transform-remove-console" class="headerlink" title="babel-plugin-transform-remove-console"></a><code>babel-plugin-transform-remove-console</code></h2><p>该插件会移除源码中的控制台输出语句</p><h2 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a>@babel/plugin-transform-runtime</h2><p>用于提供一些公共的 API，这些 API 会帮助代码转换<br>使用的时候发现依赖其他库，所以还要安装 babel runtime</p><h1 id="五、性能优化"><a href="#五、性能优化" class="headerlink" title="五、性能优化"></a>五、性能优化</h1><h1 id="性能优化概述"><a href="#性能优化概述" class="headerlink" title="性能优化概述"></a>性能优化概述</h1><p>本章所讲的性能优化主要体现在三个方面：</p><p><strong>构建性能</strong></p><p>这里所说的构建性能，是指在<strong>开发阶段的构建性能</strong>，而不是生产环境的构建性能</p><p>优化的目标，<strong>是降低从打包开始，到代码效果呈现所经过的时间</strong></p><p>构建性能会影响开发效率。构建性能越高，开发过程中时间的浪费越少</p><p><strong>传输性能</strong></p><p>传输性能是指，打包后的 JS 代码传输到浏览器经过的时间</p><p>在优化传输性能时要考虑到：</p><ol><li>总传输量：所有需要传输的 JS 文件的内容加起来，就是总传输量，重复代码越少，总传输量越少</li><li>文件数量：当访问页面时，需要传输的 JS 文件数量，文件数量越多，http 请求越多，响应速度越慢</li><li>浏览器缓存：JS 文件会被浏览器缓存，被缓存的文件不会再进行传输</li></ol><p><strong>运行性能</strong></p><p>运行性能是指，JS 代码在浏览器端的运行速度</p><p>它主要取决于我们如何书写高性能的代码</p><p><strong>永远不要过早的关注于性能</strong>，因为你在开发的时候，无法完全预知最终的运行性能，过早的关注性能会极大的降低开发效率</p><hr><p>性能优化主要从上面三个维度入手</p><p><strong>性能优化没有完美的解决方案，需要具体情况具体分析</strong><br><strong>​</strong></p><h1 id="减少模块解析"><a href="#减少模块解析" class="headerlink" title="减少模块解析"></a>减少模块解析</h1><h2 id="什么叫做模块解析？"><a href="#什么叫做模块解析？" class="headerlink" title="什么叫做模块解析？"></a>什么叫做模块解析？</h2><p>模块解析包括：抽象语法树分析、依赖分析、模块语法替换</p><h2 id="不做模块解析会怎样？"><a href="#不做模块解析会怎样？" class="headerlink" title="不做模块解析会怎样？"></a>不做模块解析会怎样？</h2><p>如果某个模块不做解析，该模块经过 loader 处理后的代码就是最终代码。</p><p>如果没有 loader 对该模块进行处理，该模块的源码就是最终打包结果的代码。</p><p>如果不对某个模块进行解析，可以缩短构建时间</p><h2 id="哪些模块不需要解析？"><a href="#哪些模块不需要解析？" class="headerlink" title="哪些模块不需要解析？"></a>哪些模块不需要解析？</h2><p>模块中无其他依赖：一些已经打包好的第三方库，比如 jquery</p><h2 id="如何让某个模块不要解析？"><a href="#如何让某个模块不要解析？" class="headerlink" title="如何让某个模块不要解析？"></a>如何让某个模块不要解析？</h2><p>配置<code>module.noParse</code>，它是一个正则，被正则匹配到的模块不会解析<br>​</p><h1 id="优化-loader-性能"><a href="#优化-loader-性能" class="headerlink" title="优化 loader 性能"></a>优化 loader 性能</h1><h2 id="进一步限制-loader-的应用范围"><a href="#进一步限制-loader-的应用范围" class="headerlink" title="进一步限制 loader 的应用范围"></a>进一步限制 loader 的应用范围</h2><p>思路是：对于某些库，不使用 loader</p><p>例如：babel-loader 可以转换 ES6 或更高版本的语法，可是有些库本身就是用 ES5 语法书写的，不需要转换，使用 babel-loader 反而会浪费构建时间</p><p>lodash 就是这样的一个库</p><blockquote><p>lodash 是在 ES5 之前出现的库，使用的是 ES3 语法</p></blockquote><p>通过<code>module.rule.exclude</code>或<code>module.rule.include</code>，排除或仅包含需要应用 loader 的场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/lodash/</span>,<br>        use: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果暴力一点，甚至可以排除掉<code>node_modules</code>目录中的模块，或仅转换<code>src</code>目录的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">//或</span><br>        <span class="hljs-comment">// include: /src/,</span><br>        use: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>这种做法是对 loader 的范围进行进一步的限制，和 noParse 不冲突，想想看，为什么不冲突</p></blockquote><h2 id="缓存-loader-的结果"><a href="#缓存-loader-的结果" class="headerlink" title="缓存 loader 的结果"></a>缓存 loader 的结果</h2><p>我们可以基于一种假设：如果某个文件内容不变，经过相同的 loader 解析后，解析后的结果也不变</p><p>于是，可以将 loader 的解析结果保存下来，让后续的解析直接使用保存的结果</p><p><code>cache-loader</code>可以实现这样的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        use: [<span class="hljs-string">&quot;cache-loader&quot;</span>, ...loaders],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>有趣的是，<code>cache-loader</code>放到最前面，却能够决定后续的 loader 是否运行</p><p>实际上，loader 的运行过程中，还包含一个过程，即<code>pitch</code></p><p><code>cache-loader</code>还可以实现各自自定义的配置，具体方式见文档</p><h2 id="为-loader-的运行开启多线程"><a href="#为-loader-的运行开启多线程" class="headerlink" title="为 loader 的运行开启多线程"></a>为 loader 的运行开启多线程</h2><p><code>thread-loader</code>会开启一个线程池，线程池中包含适量的线程</p><p>它会把后续的 loader 放到线程池的线程中运行，以提高构建效率</p><p>由于后续的 loader 会放到新的线程中，所以，后续的 loader 不能：</p><ul><li>使用 webpack api 生成文件</li><li>无法使用自定义的 plugin api</li><li>无法访问 webpack options</li></ul><blockquote><p>在实际的开发中，可以进行测试，来决定<code>thread-loader</code>放到什么位置</p></blockquote><p><strong>特别注意</strong>，开启和管理线程需要消耗时间，在小型项目中使用<code>thread-loader</code>反而会增加构建时间<br>​</p><h1 id="热替换-HMR"><a href="#热替换-HMR" class="headerlink" title="热替换 HMR"></a>热替换 HMR</h1><blockquote><p>热替换并不能降低构建时间（可能还会稍微增加），但可以降低代码改动到效果呈现的时间</p></blockquote><p>当使用<code>webpack-dev-server</code>时，考虑代码改动到效果呈现的过程</p><p>而使用了热替换后，流程发生了变化</p><h1 id="使用和原理"><a href="#使用和原理" class="headerlink" title="使用和原理"></a>使用和原理</h1><ol><li>更改配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启HMR</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 可选</span><br>    <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin(),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>更改代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">module</span>.hot) &#123;<br>  <span class="hljs-comment">// 是否开启了热更新</span><br>  <span class="hljs-built_in">module</span>.hot.accept(); <span class="hljs-comment">// 接受热更新</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先，这段代码会参与最终运行！</p><p>当开启了热更新后，<code>webpack-dev-server</code>会向打包结果中注入<code>module.hot</code>属性</p><p>默认情况下，<code>webpack-dev-server</code>不管是否开启了热更新，当重新打包后，都会调用<code>location.reload</code>刷新页面</p><p>但如果运行了<code>module.hot.accept()</code>，将改变这一行为</p><p><code>module.hot.accept()</code>的作用是让<code>webpack-dev-server</code>通过<code>socket</code>管道，把服务器更新的内容发送到浏览器</p><p>然后，将结果交给插件<code>HotModuleReplacementPlugin</code>注入的代码执行</p><p>插件<code>HotModuleReplacementPlugin</code>会根据覆盖原始代码，然后让代码重新执行</p><p><strong>所以，热替换发生在代码运行期</strong></p><h1 id="样式热替换"><a href="#样式热替换" class="headerlink" title="样式热替换"></a>样式热替换</h1><p>对于样式也是可以使用热替换的，但需要使用<code>style-loader</code></p><p>因为热替换发生时，<code>HotModuleReplacementPlugin</code>只会简单的重新运行模块代码</p><p>因此<code>style-loader</code>的代码一运行，就会重新设置<code>style</code>元素中的样式</p><p>而<code>mini-css-extract-plugin</code>，由于它生成文件是在<strong>构建期间</strong>，运行期间并会也无法改动文件，因此它对于热替换是无效的<br>​</p><h1 id="手动分包"><a href="#手动分包" class="headerlink" title="手动分包"></a>手动分包</h1><h1 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h1><p>手动分包的总体思路是：</p><ol><li>先单独的打包公共模块</li></ol><p>公共模块会被打包成为动态链接库(dll Dynamic Link Library)，并生成资源清单</p><ol start="2"><li>根据入口模块进行正常打包</li></ol><p>打包时，如果发现模块中使用了资源清单中描述的模块，则不会形成下面的代码结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//源码，入口文件index.js</span><br><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;jquery&quot;</span>;<br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;lodash&quot;</span>;<br>_.isArray($(<span class="hljs-string">&quot;.red&quot;</span>));<br></code></pre></td></tr></table></figure><p>由于资源清单中包含<code>jquery</code>和<code>lodash</code>两个模块，因此打包结果的大致格式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) </span>&#123;<br>  <span class="hljs-comment">//...</span><br>&#125;)(&#123;<br>  <span class="hljs-comment">// index.js文件的打包结果并没有变化</span><br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> $ = __webpack_require__(<span class="hljs-string">&quot;./node_modules/jquery/index.js&quot;</span>);<br>    <span class="hljs-keyword">var</span> _ = __webpack_require__(<span class="hljs-string">&quot;./node_modules/lodash/index.js&quot;</span>);<br>    _.isArray($(<span class="hljs-string">&quot;.red&quot;</span>));<br>  &#125;,<br>  <span class="hljs-comment">// 由于资源清单中存在，jquery的代码并不会出现在这里</span><br>  <span class="hljs-string">&quot;./node_modules/jquery/index.js&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-built_in">module</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-built_in">exports</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    __webpack_require__</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) </span>&#123;<br>    <span class="hljs-built_in">module</span>.exports = jquery;<br>  &#125;,<br>  <span class="hljs-comment">// 由于资源清单中存在，lodash的代码并不会出现在这里</span><br>  <span class="hljs-string">&quot;./node_modules/lodash/index.js&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-built_in">module</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-built_in">exports</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    __webpack_require__</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) </span>&#123;<br>    <span class="hljs-built_in">module</span>.exports = lodash;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="打包公共模块"><a href="#打包公共模块" class="headerlink" title="打包公共模块"></a>打包公共模块</h1><p>打包公共模块是一个<strong>独立的</strong>打包过程</p><ol><li>单独打包公共模块，暴露变量名 . npm run dll</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.dll.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">jquery</span>: [<span class="hljs-string">&quot;jquery&quot;</span>], <span class="hljs-comment">//数组</span><br>    <span class="hljs-attr">lodash</span>: [<span class="hljs-string">&quot;lodash&quot;</span>],<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;dll/[name].js&quot;</span>,<br>    <span class="hljs-attr">library</span>: <span class="hljs-string">&quot;[name]&quot;</span>, <span class="hljs-comment">// 每个bundle暴露的全局变量名</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>利用<code>DllPlugin</code>生成资源清单</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.dll.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.DllPlugin(&#123;<br>      <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&quot;dll&quot;</span>, <span class="hljs-string">&quot;[name].manifest.json&quot;</span>), <span class="hljs-comment">//资源清单的保存位置</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;[name]&quot;</span>, <span class="hljs-comment">//资源清单中，暴露的变量名</span><br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>运行后，即可完成公共模块打包</p><h1 id="使用公共模块"><a href="#使用公共模块" class="headerlink" title="使用公共模块"></a>使用公共模块</h1><ol><li>在页面中手动引入公共模块</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dll/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dll/lodash.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>重新设置<code>clean-webpack-plugin</code></li></ol><p>如果使用了插件<code>clean-webpack-plugin</code>，为了避免它把公共模块清除，需要做出以下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> CleanWebpackPlugin(&#123;<br>  <span class="hljs-comment">// 要清除的文件或目录</span><br>  <span class="hljs-comment">// 排除掉dll目录本身和它里面的文件</span><br>  <span class="hljs-attr">cleanOnceBeforeBuildPatterns</span>: [<span class="hljs-string">&quot;**/*&quot;</span>, <span class="hljs-string">&quot;!dll&quot;</span>, <span class="hljs-string">&quot;!dll/*&quot;</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>目录和文件的匹配规则使用的是<a href="https://github.com/sindresorhus/globby#globbing-patterns">globbing patterns</a>语法</p></blockquote><ol start="3"><li>使用<code>DllReferencePlugin</code>控制打包结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 资源清单</span><br>    <span class="hljs-keyword">new</span> webpack.DllReferencePlugin(&#123;<br>      <span class="hljs-attr">manifest</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./dll/jquery.manifest.json&quot;</span>),<br>    &#125;),<br>    <span class="hljs-keyword">new</span> webpack.DllReferencePlugin(&#123;<br>      <span class="hljs-attr">manifest</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./dll/lodash.manifest.json&quot;</span>),<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>手动打包的过程</strong>：</p><ol><li>开启<code>output.library</code>暴露公共模块</li><li>用<code>DllPlugin</code>创建资源清单</li><li>用<code>DllReferencePlugin</code>使用资源清单</li></ol><p><strong>手动打包的注意事项</strong>：</p><ol><li>资源清单不参与运行，可以不放到打包目录中</li><li>记得手动引入公共 JS，以及避免被删除</li><li>不要对小型的公共 JS 库使用</li></ol><p><strong>优点</strong>：</p><ol><li>极大提升自身模块的打包速度</li><li>极大的缩小了自身文件体积</li><li>有利于浏览器缓存第三方库的公共代码</li></ol><p><strong>缺点</strong>：</p><ol><li>使用非常繁琐</li><li>如果第三方库中包含重复代码，则效果不太理想</li></ol><h1 id="自动分包"><a href="#自动分包" class="headerlink" title="自动分包"></a>自动分包</h1><h1 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h1><p>不同与手动分包，自动分包是从<strong>实际的角度</strong>出发，从一个更加<strong>宏观的角度</strong>来控制分包，而一般不对具体哪个包要分出去进行控制</p><p>因此使用自动分包，不仅非常方便，而且更加贴合实际的开发需要</p><p>要控制自动分包，关键是要配置一个合理的<strong>分包策略</strong></p><p>有了分包策略之后，不需要额外安装任何插件，webpack 会自动的按照策略进行分包</p><blockquote><p>实际上，webpack 在内部是使用<code>SplitChunksPlugin</code>进行分包的<br>过去有一个库<code>CommonsChunkPlugin</code>也可以实现分包，不过由于该库某些地方并不完善，到了<code>webpack4</code>之后，已被<code>SplitChunksPlugin</code>取代</p></blockquote><p>从分包流程中至少可以看出以下几点：</p><ul><li>分包策略至关重要，它决定了如何分包</li><li>分包时，webpack 开启了一个<strong>新的 chunk</strong>，对分离的模块进行打包</li><li>打包结果中，公共的部分被提取出来形成了一个单独的文件，它是新 chunk 的产物</li></ul><h1 id="分包策略的基本配置"><a href="#分包策略的基本配置" class="headerlink" title="分包策略的基本配置"></a>分包策略的基本配置</h1><p>webpack 提供了<code>optimization</code>配置项，用于配置一些优化信息</p><p>其中<code>splitChunks</code>是分包策略的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-comment">// 分包策略</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>事实上，分包策略有其默认的配置，我们只需要轻微的改动，即可应对大部分分包场景</p><ol><li>chunks</li></ol><p>该配置项用于配置需要应用分包策略的 chunk</p><p>我们知道，分包是从已有的 chunk 中分离出新的 chunk，那么哪些 chunk 需要分离呢</p><p>chunks 有三个取值，分别是：</p><ul><li>all: 对于所有的 chunk 都要应用分包策略</li><li>async：【默认】仅针对异步 chunk 应用分包策略</li><li>initial：仅针对普通 chunk 应用分包策略</li></ul><p>所以，你只需要配置<code>chunks</code>为<code>all</code>即可</p><ol start="2"><li>maxSize</li></ol><p>该配置可以控制包的最大字节数</p><p>如果某个包（包括分出来的包）超过了该值，则 webpack 会尽可能的将其分离成多个包</p><p>但是不要忽略的是，分包的<strong>基础单位是模块</strong>，如果一个完整的模块超过了该体积，它是无法做到再切割的，因此，尽管使用了这个配置，完全有可能某个包还是会超过这个体积</p><p>另外，该配置看上去很美妙，实际意义其实不大</p><p>因为分包的目的是<strong>提取大量的公共代码</strong>，从而减少总体积和充分利用浏览器缓存</p><p>虽然该配置可以把一些包进行再切分，但是实际的总体积和传输量并没有发生变化</p><blockquote><p>如果要进一步减少公共模块的体积，只能是压缩和<code>tree shaking</code></p></blockquote><h1 id="分包策略的其他配置"><a href="#分包策略的其他配置" class="headerlink" title="分包策略的其他配置"></a>分包策略的其他配置</h1><p>如果不想使用其他配置的默认值，可以手动进行配置：</p><ul><li>automaticNameDelimiter：新 chunk 名称的分隔符，默认值~</li><li>minChunks：一个模块被多少个 chunk 使用时，才会进行分包，默认值 1。如果我自己写一个文件，默认也不分包，因为自己写的那个太小，没达到拆分的条件，所以要配合 minSize 使用。</li><li>minSize：当分包达到多少字节后才允许被真正的拆分，默认值 30000</li></ul><h1 id="缓存组"><a href="#缓存组" class="headerlink" title="缓存组"></a>缓存组</h1><p>之前配置的分包策略是全局的</p><p>而实际上，分包策略是基于缓存组的</p><p>每个缓存组提供一套独有的策略，webpack 按照缓存组的优先级依次处理每个缓存组，被缓存组处理过的分包不需要再次分包</p><p>默认情况下，webpack 提供了两个缓存组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-comment">//全局配置</span><br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-comment">// 属性名是缓存组名称，会影响到分包的chunk名</span><br>        <span class="hljs-comment">// 属性值是缓存组的配置，缓存组继承所有的全局配置，也有自己特殊的配置</span><br>        <span class="hljs-attr">vendors</span>: &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>, <span class="hljs-comment">// 当匹配到相应模块时，将这些模块进行单独打包</span><br>          priority: -<span class="hljs-number">10</span>, <span class="hljs-comment">// 缓存组优先级，优先级越高，该策略越先进行处理，默认值为0</span><br>        &#125;,<br>        <span class="hljs-attr">default</span>: &#123;<br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 覆盖全局配置，将最小chunk引用数改为2</span><br>          <span class="hljs-attr">priority</span>: -<span class="hljs-number">20</span>, <span class="hljs-comment">// 优先级</span><br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 重用已经被分离出去的chunk</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>很多时候，缓存组对于我们来说没什么意义，因为默认的缓存组就已经够用了</p><p>但是我们同样可以利用缓存组来完成一些事情，比如对公共样式的抽离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">styles</span>: &#123;<br>          <span class="hljs-comment">// 样式抽离</span><br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">// 匹配样式模块</span><br>          minSize: <span class="hljs-number">0</span>, <span class="hljs-comment">// 覆盖默认的最小尺寸，这里仅仅是作为测试</span><br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 覆盖默认的最小chunk引用数</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, use: [MiniCssExtractPlugin.loader, <span class="hljs-string">&quot;css-loader&quot;</span>] &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> CleanWebpackPlugin(),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./public/index.html&quot;</span>,<br>      <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&quot;index&quot;</span>],<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[name].[hash:5].css&quot;</span>,<br>      <span class="hljs-comment">// chunkFilename是配置来自于分割chunk的文件名</span><br>      <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&quot;common.[hash:5].css&quot;</span>,<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="配合多页应用"><a href="#配合多页应用" class="headerlink" title="配合多页应用"></a>配合多页应用</h1><p>虽然现在单页应用是主流，但免不了还是会遇到多页应用</p><p>由于在多页应用中需要为每个 html 页面指定需要的 chunk，这就造成了问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./public/index.html&quot;</span>,<br>  <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&quot;index~other&quot;</span>, <span class="hljs-string">&quot;vendors~index~other&quot;</span>, <span class="hljs-string">&quot;index&quot;</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们必须手动的指定被分离出去的 chunk 名称，这不是一种好办法</p><p>幸好<code>html-webpack-plugin</code>的新版本中解决了这一问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i -D html-webpack-plugin@next<br></code></pre></td></tr></table></figure><p>做出以下配置即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./public/index.html&quot;</span>,<br>  <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&quot;index&quot;</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><p>它会自动的找到被<code>index</code>分离出去的 chunk，并完成引用</p><blockquote><p>目前这个版本仍处于测试解决，还未正式发布</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>自动分包的原理其实并不复杂，主要经过以下步骤：</p><ol><li>检查每个 chunk 编译的结果</li><li>根据分包策略，找到那些满足策略的模块</li><li>根据分包策略，生成新的 chunk 打包这些模块（代码有所变化）</li><li>把打包出去的模块从原始包中移除，并修正原始包代码</li></ol><p>在代码层面，有以下变动</p><ol><li>分包的代码中，加入一个全局变量，类型为数组，其中包含公共模块的代码</li><li>原始包的代码中，使用数组中的公共代码</li></ol><h1 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><strong>为什么要进行代码压缩</strong></li></ol><p>减少代码体积；破坏代码的可读性，提升破解成本；</p><ol start="2"><li><strong>什么时候要进行代码压缩</strong></li></ol><p>生产环境</p><ol start="3"><li><strong>使用什么压缩工具</strong></li></ol><p>目前最流行的代码压缩工具主要有两个：<code>UglifyJs</code>和<code>Terser</code></p><p><code>UglifyJs</code>是一个传统的代码压缩工具，已存在多年，曾经是前端应用的必备工具，但由于它不支持<code>ES6</code>语法，所以目前的流行度已有所下降。</p><p><code>Terser</code>是一个新起的代码压缩工具，支持<code>ES6+</code>语法，因此被很多构建工具内置使用。<code>webpack</code>安装后会内置<code>Terser</code>，当启用生产环境后即可用其进行代码压缩。</p><p>因此，我们选择<code>Terser</code></p><p><strong>关于副作用 side effect</strong></p><p>副作用：函数运行过程中，可能会对外部环境造成影响的功能</p><p>如果函数中包含以下代码，该函数叫做副作用函数:</p><ul><li>异步代码</li><li>localStorage</li><li>对外部数据的修改</li></ul><p>如果一个函数没有副作用，同时，函数的返回结果仅依赖参数，则该函数叫做纯函数(pure function)</p><h1 id="Terser"><a href="#Terser" class="headerlink" title="Terser"></a>Terser</h1><p>在<code>Terser</code>的官网可尝试它的压缩效果</p><blockquote><p>Terser 官网：<a href="https://terser.org/">https://terser.org/</a></p></blockquote><h1 id="webpack-Terser"><a href="#webpack-Terser" class="headerlink" title="webpack+Terser"></a>webpack+Terser</h1><p>webpack 自动集成了 Terser</p><p>如果你想更改、添加压缩工具，又或者是想对 Terser 进行配置，使用下面的 webpack 配置即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> TerserPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> OptimizeCSSAssetsPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;optimize-css-assets-webpack-plugin&quot;</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">minimize</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否要启用压缩，默认情况下，生产环境会自动开启</span><br>    <span class="hljs-attr">minimizer</span>: [<br>      <span class="hljs-comment">// 压缩时使用的插件，可以有多个</span><br>      <span class="hljs-keyword">new</span> TerserPlugin(),<br>      <span class="hljs-keyword">new</span> OptimizeCSSAssetsPlugin(),<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h1><blockquote><p>压缩可以移除模块内部的无效代码<br>tree shaking 可以移除模块之间的无效代码</p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某些模块导出的代码并不一定会被用到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// myMath.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;add&quot;</span>);<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sub&quot;</span>);<br>  <span class="hljs-keyword">return</span> a - b;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./myMath&quot;</span>;<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>tree shaking 用于移除掉不会用到的导出</p><h1 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h1><p><code>webpack2</code>开始就支持了<code>tree shaking</code></p><p>只要是生产环境，<code>tree shaking</code>自动开启</p><h1 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h1><p>webpack 会从入口模块出发寻找依赖关系</p><p>当解析一个模块时，webpack 会根据 ES6 的模块导入语句来判断，该模块依赖了另一个模块的哪个导出</p><p>webpack 之所以选择 ES6 的模块导入语句，是因为 ES6 模块有以下特点：</p><ol><li>导入导出语句只能是顶层语句</li><li>import 的模块名只能是字符串常量</li><li>import 绑定的变量是不可变的</li></ol><p>这些特征都非常有利于分析出稳定的依赖</p><p>在具体分析依赖时，webpack 坚持的原则是：<strong>保证代码正常运行，然后再尽量 tree shaking</strong></p><p>所以，如果你依赖的是一个导出的对象，由于 JS 语言的动态特性，以及<code>webpack</code>还不够智能，为了保证代码正常运行，它不会移除对象中的任何信息</p><p>因此，我们在编写代码的时候，<strong>尽量</strong>：</p><ul><li>使用<code>export xxx</code>导出，而不使用<code>export default &#123;xxx&#125;</code>导出。后者会整个导出，但是不一定都需要。</li><li>使用<code>import &#123;xxx&#125; from &quot;xxx&quot;</code>导入，而不使用<code>import xxx from &quot;xxx&quot;</code>导入</li></ul><p>依赖分析完毕后，<code>webpack</code>会根据每个模块每个导出是否被使用，标记其他导出为<code>dead code</code>，然后交给代码压缩工具处理</p><p>代码压缩工具最终移除掉那些<code>dead code</code>代码</p><h1 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h1><p>某些第三方库可能使用的是<code>commonjs</code>的方式导出，比如<code>lodash</code></p><p>又或者没有提供普通的 ES6 方式导出</p><p>对于这些库，<code>tree shaking</code>是无法发挥作用的</p><p>因此要寻找这些库的<code>es6</code>版本，好在很多流行但没有使用的<code>ES6</code>的第三方库，都发布了它的<code>ES6</code>版本，比如<code>lodash-es</code></p><h1 id="作用域分析"><a href="#作用域分析" class="headerlink" title="作用域分析"></a>作用域分析</h1><p><code>tree shaking</code>本身并没有完善的作用域分析，可能导致在一些<code>dead code</code>函数中的依赖仍然会被视为依赖</p><p>插件<code>webpack-deep-scope-plugin</code>提供了作用域分析，可解决这些问题</p><h1 id="副作用问题"><a href="#副作用问题" class="headerlink" title="副作用问题"></a>副作用问题</h1><p>webpack 在<code>tree shaking</code>的使用，有一个原则：<strong>一定要保证代码正确运行</strong></p><p>在满足该原则的基础上，再来决定如何<code>tree shaking</code></p><p>因此，当<code>webpack</code>无法确定某个模块是否有副作用时，它往往将其视为有副作用</p><p>因此，某些情况可能并不是我们所想要的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//common.js</span><br><span class="hljs-keyword">var</span> n = <span class="hljs-built_in">Math</span>.random();<br><br><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./common.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>虽然我们根本没用有<code>common.js</code>的导出，但<code>webpack</code>担心<code>common.js</code>有副作用，如果去掉会影响某些功能</p><p>如果要解决该问题，就需要标记该文件是没有副作用的</p><p>在<code>package.json</code>中加入<code>sideEffects</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;sideEffects&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>有两种配置方式：</p><ul><li>false：当前工程中，所有模块都没有副作用。注意，这种写法会影响到某些 css 文件的导入</li><li>数组：设置哪些文件拥有副作用，例如：<code>[&quot;!src/common.js&quot;]</code>，表示只要不是<code>src/common.js</code>的文件，都有副作用</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;sideEffects&quot;</span>: [<span class="hljs-string">&quot;!src/common.js&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这种方式我们一般不处理，通常是一些第三方库在它们自己的<code>package.json</code>中标注</p></blockquote><h1 id="css-tree-shaking"><a href="#css-tree-shaking" class="headerlink" title="css tree shaking"></a>css tree shaking</h1><p><code>webpack</code>无法对<code>css</code>完成<code>tree shaking</code>，因为<code>css</code>跟<code>es6</code>没有半毛钱关系</p><p>因此对<code>css</code>的<code>tree shaking</code>需要其他插件完成</p><p>例如：<code>purgecss-webpack-plugin</code></p><blockquote><p>注意：<code>purgecss-webpack-plugin</code>对<code>css module</code>无能为力</p></blockquote><h1 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h1><p>ESLint 是一个针对 JS 的代码风格<strong>检查</strong>工具，当不满足其要求的风格时，会给予警告或错误</p><p>官网：<a href="https://eslint.org/">https://eslint.org/</a></p><p>民间中文网：<a href="https://eslint.bootcss.com/">https://eslint.bootcss.com/</a></p><h1 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h1><p>ESLint 通常配合编辑器使用</p><ol><li>在 vscode 中安装<code>ESLint</code></li></ol><p>该工具会自动检查工程中的 JS 文件</p><p>检查的工作交给<code>eslint</code>库，如果当前工程没有，则会去全局库中查找，如果都没有，则无法完成检查</p><p>另外，检查的依据是<code>eslint</code>的配置文件<code>.eslintrc</code>，如果找不到工程中的配置文件，也无法完成检查</p><ol start="2"><li>安装<code>eslint</code></li></ol><p><code>npm i [-g] eslint</code></p><ol start="3"><li>创建配置文件</li></ol><p>可以通过<code>eslint</code>交互式命令创建配置文件</p><blockquote><p>由于 windows 环境中 git 窗口对交互式命名支持不是很好，建议使用 powershell</p></blockquote><p><code>npx eslint --init</code></p><blockquote><p>eslint 会识别工程中的<code>.eslintrc.*</code>文件，也能够识别<code>package.json</code>中的<code>eslintConfig</code>字段</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>配置代码的运行环境</p><ul><li>browser：代码是否在浏览器环境中运行</li><li>es6：是否启用 ES6 的全局 API，例如<code>Promise</code>等</li></ul><h2 id="parserOptions"><a href="#parserOptions" class="headerlink" title="parserOptions"></a>parserOptions</h2><p>该配置指定<code>eslint</code>对哪些语法的支持</p><ul><li>ecmaVersion: 支持的 ES 语法版本</li><li>sourceType<ul><li>script：传统脚本</li><li>module：模块化脚本</li></ul></li></ul><h2 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h2><p><code>eslint</code>的工作原理是先将代码进行解析，然后按照规则进行分析</p><p><code>eslint</code> 默认使用<code>Espree</code>作为其解析器，你可以在配置文件中指定一个不同的解析器。</p><h2 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h2><p>配置可以使用的额外的全局变量</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;globals&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;var1&quot;</span>: <span class="hljs-string">&quot;readonly&quot;</span>,<br>    <span class="hljs-attr">&quot;var2&quot;</span>: <span class="hljs-string">&quot;writable&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>eslint</code>支持注释形式的配置，在代码中使用下面的注释也可以完成配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* global var1, var2 */</span><br><span class="hljs-comment">/* global var3:writable, var4:writable */</span><br></code></pre></td></tr></table></figure><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>该配置继承自哪里</p><p>它的值可以是字符串或者数组</p><p>比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;extends&quot;</span>: <span class="hljs-string">&quot;eslint:recommended&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>表示，该配置缺失的位置，使用<code>eslint</code>推荐的规则</p><h2 id="ignoreFiles"><a href="#ignoreFiles" class="headerlink" title="ignoreFiles"></a>ignoreFiles</h2><p>排除掉某些不需要验证的文件</p><p><code>.eslintignore</code> 要放在根目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">dist<span class="hljs-regexp">/**/</span>*.js<br>node_modules<span class="hljs-regexp">//</span> 自动忽略<br></code></pre></td></tr></table></figure><h2 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h2><p><code>eslint</code>规则集</p><p>每条规则影响某个方面的代码风格</p><p>每条规则都有下面几个取值：</p><ul><li>off 或 0 或 false: 关闭该规则的检查</li><li>warn 或 1 或 true：警告，不会导致程序退出</li><li>error 或 2：错误，当被触发的时候，程序会退出</li></ul><p>除了在配置文件中使用规则外，还可以在注释中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://eslint.bootcss.com/docs/rules/">https://eslint.bootcss.com/docs/rules/</a><br>带有 🔧 的可以自动修复：npx eslint –fix src/index.js</p></blockquote><h1 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h1><p>gzip 是一种压缩文件的算法</p><h1 id="B-S-结构中的压缩传输"><a href="#B-S-结构中的压缩传输" class="headerlink" title="B/S 结构中的压缩传输"></a>B/S 结构中的压缩传输</h1><p>优点：传输效率可能得到大幅提升</p><p>缺点：服务器的压缩需要时间，客户端的解压需要时间</p><h1 id="使用-webpack-进行预压缩"><a href="#使用-webpack-进行预压缩" class="headerlink" title="使用 webpack 进行预压缩"></a>使用 webpack 进行预压缩</h1><p>使用<code>compression-webpack-plugin</code>插件对打包结果进行预压缩，可以移除服务器的压缩时间</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Package manager</title>
    <link href="/2020/05/16/Package-manager/"/>
    <url>/2020/05/16/Package-manager/</url>
    
    <content type="html"><![CDATA[<h1 id="包管理工具概述"><a href="#包管理工具概述" class="headerlink" title="包管理工具概述"></a>包管理工具概述</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p><strong>模块（module）</strong><br>通常以单个文件形式存在的功能片段，入口文件通常称之为<strong>入口模块</strong>或<strong>主模块</strong><br><strong>库（library，简称 lib）</strong><br>以一个或多个模块组成的完整功能块，为开发中某一方面的问题提供完整的解决方案<br><strong>包（package）</strong><br>包含元数据的库，这些元数据包括：名称、描述、git 主页、许可证协议、作者、依赖等等<br><img src="/img/8-1.png"></p><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2.背景"></a>2.背景</h2><p>CommonJS 的出现，使 node 环境下的 JS 代码可以用模块更加细粒度的划分。一个类、一个函数、一个对象、一个配置等等均可以作为模块，这种细粒度的划分，是开发大型应用的基石。<br>为了解决在开发过程中遇到的常见问题，比如加密、提供常见的工具方法、模拟数据等等，一时间，在前端社区涌现了大量的第三方库。这些库使用 CommonJS 标准书写而成，非常容易使用。<br>然而，在下载使用这些第三方库的时候，遇到难以处理的问题：</p><ul><li><strong>下载过程繁琐</strong><ul><li>进入官网或 github 主页</li><li>找到并下载相应的版本</li><li>拷贝到工程的目录中</li><li>如果遇到有同名的库，需要更改名称</li></ul></li><li><strong>如果该库需要依赖其他库，还需要按照要求先下载其他库</strong></li><li><strong>开发环境中安装的大量的库如何在生产环境中还原，又如何区分</strong></li><li><strong>更新一个库极度麻烦</strong></li><li><strong>自己开发的库，如何在下一次开发使用</strong></li></ul><p><strong>以上问题，就是包管理工具要解决的问题</strong></p><h2 id="3-前端包管理器"><a href="#3-前端包管理器" class="headerlink" title="3.前端包管理器"></a>3.前端包管理器</h2><blockquote><p>本门课程讲解的包管理器<br>npm：重点<br>yarn：次重点<br>其他：了解</p></blockquote><p>几乎可以这样认为，前端所有的包管理器都是基于 npm 的，目前，npm 即是一个包管理器，也是其他包管理的基石<br>npm 全称为 node package manager，即 node 包管理器，它运行在 node 环境中，让开发者可以用简单的方式完成包的查找、安装、更新、卸载、上传等操作</p><blockquote><p>npm 之所以要运行在 node 环境，而不是浏览器环境，根本原因是因为浏览器环境无法提供下载、删除、读取本地文件的功能。而 node 属于服务器环境，没有浏览器的种种限制，理论上可以完全掌控运行 node 的计算机。</p></blockquote><p>npm 的出现，弥补了 node 没有包管理器的缺陷，于是很快，node 在安装文件中内置了 npm，当开发者安装好 node 之后，就自动安装了 npm，不仅如此，node 环境还专门为 npm 提供了良好的支持，使用 npm 下载的包更加方便了。<br>npm 由三部分组成：</p><ul><li>registry：入口<ul><li>可以把它想象成一个庞大的数据库</li><li>第三方库的开发者，将自己的库按照 npm 的规范，打包上传到数据库中</li><li>使用者通过统一的地址下载第三方包</li></ul></li><li>官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a><ul><li>查询包</li><li>注册、登录、管理个人信息</li></ul></li><li>CLI：command-line interface 命令行接口<ul><li>这一部分是本门课讲解的重点</li><li>安装好 npm 后，通过 CLI 来使用 npm 的各种功能</li><li>vscode 里面 Ctrl+j</li></ul></li></ul><p>cmd 常用命令<br>换到 e 盘：e:<br>查看目录：dir<br>vscode<br>查看 npm 的当前版本<br>输入 npm -v 或者 npm –version 注意空格</p><blockquote><p>node 和 npm 是互相成就的，node 的出现让 npm 火了，npm 的火爆带动了大量的第三方库的发展，很多优秀的第三方库打包上传到了 npm，这些第三方库又为 node 带来了大量的用户</p></blockquote><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h1 id="包的安装"><a href="#包的安装" class="headerlink" title="包的安装"></a>包的安装</h1><blockquote><p>安装（install）即下载包<br>由于 npm 的官方 registry 服务器位于国外，可能受网速影响导致下载缓慢或失败。因此，安装好 npm 之后，需要重新设置 registry 的地址为国内地址。目前，淘宝 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 提供了国内的 registry 地址，先设置到该地址。设置方式为<code>npm config set registry [https://registry.npm.taobao.org](https://registry.npm.taobao.org)</code>。设置好后，通过命令<code>npm config get registry</code>进行检查<br><img src="/img/8-2.png"><br>npm 安装一个包，分为两种安装方式：</p></blockquote><ol><li>本地安装</li><li>全局安装</li></ol><h2 id="1-本地安装"><a href="#1-本地安装" class="headerlink" title="1.本地安装"></a>1.本地安装</h2><p>使用命令<code>npm install 包名</code>或<code>npm i 包名</code>即可完成本地安装<br>终端 clear 是清除命令<br>本地安装的包出现在当前目录下的<code>node_modules</code>目录中</p><blockquote><p>随着开发的进展，<code>node_modules</code>目录会变得异常庞大，目录下的内容不适合直接传输到生产环境，因此通常使用<code>.gitignore</code>文件忽略该目录中的内容<br>本地安装适用于绝大部分的包，它会在当前目录及其子目录中发挥作用<br>通常在项目的根目录中使用本地安装<br>安装一个包的时候，npm 会自动管理依赖，它会下载该包的依赖包到<code>node_modules</code>目录中<br>例如：react<br>如果本地安装的包带有 CLI，npm 会将它的 CLI 脚本文件放置到<code>node_modules/.bin</code>下，使用命令<code>npx 命令名</code>即可调用（npx mocha）<br>例如：mocha</p></blockquote><p>演示<br>安装 jQuery：命令 npm install jquery</p><h2 id="2-全局安装"><a href="#2-全局安装" class="headerlink" title="2.全局安装"></a>2.全局安装</h2><p>全局安装的包放置在一个特殊的全局目录，该目录可以通过命令<code>npm config get prefix</code>查看<br>使用命令<code>npm install --global 包名</code> 或 <code>npm i -g 包名</code><br>重要：<strong>全局安装的包并非所有工程可用，它仅提供全局的 CLI 工具</strong><br>大部分情况下，都不需要全局安装包，除非：</p><ol><li>包的版本非常稳定，很少有大的更新</li><li>提供的 CLI 工具在各个工程中使用的非常频繁</li><li>CLI 工具仅为开发环境提供支持，而非部署环境</li></ol><h1 id="包配置"><a href="#包配置" class="headerlink" title="包配置"></a>包配置</h1><blockquote><p>前节补充：同时下载两个包：命令 npm i jquery loadsh</p></blockquote><p>目前遇到的问题：</p><ol><li>拷贝工程后如何还原？</li><li>如何区分开发依赖和生产依赖？</li><li>如果自身的项目也是一个包，如何描述包的信息</li></ol><p>以上这些问题都需要通过包的<strong>配置文件</strong>解决</p><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h2><p>npm 将每个使用 npm 的工程本身都看作是一个包，包的信息需要通过一个名称固定的配置文件来描述<br><strong>配置文件的名称固定为：package.json</strong><br>可以手动创建该文件，而更多的时候，是通过命令<code>npm init</code>创建的<br>配置文件中可以描述大量的信息，包括：</p><ul><li>name：包的名称，该名称必须是<strong>英文单词字符</strong>，支持连接符</li><li>version：版本<ul><li>版本规范：主版本号.次版本号.补丁版本号</li><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的 API、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的 API</li><li>补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</li></ul></li><li>description：包的描述</li><li>homepage：官网地址</li><li>author：包的作者，必须是有效的 npm 账户名，书写规范是 <code>account &lt;mail&gt;</code>，例如：<code>zhangsan &lt;zhangsan@gmail.com&gt;</code>，不正确的账号和邮箱可能导致发布包时失败</li><li>repository：包的仓储地址，通常指 git 或 svn 的地址，它是一个对象<ul><li>type：仓储类型，git 或 svn</li><li>url：地址</li></ul></li></ul><p>命令：get remote -v</p><ul><li>main：包的入口文件，使用包的人默认从该入口文件导入包的内容</li><li>keywords: 搜索关键字，发布包后，可以通过该数组中的关键字搜索到包<blockquote><p>一步到位简化配置 json 文件</p></blockquote></li></ul><p>使用<code>npm init --yes</code>或<code>npm init -y</code>可以在生成配置文件时自动填充默认配置<br>操作：创建一个英文文件夹，右键终端打开，输入<code>npm init --yes</code>或<code>npm init -y</code></p><h2 id="2-保存依赖关系"><a href="#2-保存依赖关系" class="headerlink" title="2.保存依赖关系"></a>2.保存依赖关系</h2><p>大部分时候，我们仅仅是开发项目，并不会把它打包发布出去，尽管如此，我们仍然需要 package.json 文件<br><strong>package.json 文件最重要的作用，是记录当前工程的依赖</strong></p><ul><li>dependencies：生产环境的依赖包</li><li>devDependencies：仅开发环境的依赖包</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<span class="hljs-comment">//不推荐最新，防止开发冲突</span><br>    <span class="hljs-attr">&quot;lodash&quot;</span>: <span class="hljs-string">&quot;4.17.15&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;mocha&quot;</span>: <span class="hljs-string">&quot;6.2.2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>配置好依赖后，使用下面的命令即可安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 本地安装所有依赖 dependencies + devDependencies</span></span><br>npm install<br>npm i<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 仅安装生产环境的依赖 dependencies</span></span><br>npm install --production<br></code></pre></td></tr></table></figure><p>这样一来，代码移植就不是问题了，只需要移植源代码和 package.json 文件，不用移植 node_modules 目录，然后在移植之后通过命令即可重新恢复安装<br>为了更加方便的添加依赖，npm 支持在使用 install 命令时，加入一些额外的参数，用于将安装的依赖包保存到 package.json 文件中(自动地)<br>涉及的命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 安装依赖到生产环境</span></span><br>npm i 包名<br>npm i --save 包名<br>npm i -S 包名<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 安装依赖到开发环境</span></span><br>npm i --save-dev 包名<br>npm i -D 包名<br></code></pre></td></tr></table></figure><p>安装包之后 package.json 会自动生成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;^3.4.1&quot;</span>,<br>    <span class="hljs-attr">&quot;lodash&quot;</span>: <span class="hljs-string">&quot;^4.17.15&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;mocha&quot;</span>: <span class="hljs-string">&quot;^6.2.2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>自动保存的依赖版本，例如<code>^15.1.3</code>，这种书写方式叫做语义版本号（semver version），具体规则后续讲解</p></blockquote><h1 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h1><blockquote><p>引入模块：npm init—chapter2—回车—-回车—-npm i lodash 安装成功</p></blockquote><p>nodejs 对 npm 支持非常良好<br>使用 nodejs 导入模块时传统方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./node_modules/lodash/index&quot;</span>);<br><span class="hljs-comment">// 习惯用下划线命名</span><br><span class="hljs-built_in">console</span>.log(_);<br>运行命令：node index.js<br></code></pre></td></tr></table></figure><p>返回的里面有很多方法，例如：compact</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = _.compact([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">5</span>]);<br><span class="hljs-comment">// compact会把数组里面判定为假的除去，返回新数组</span><br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>当使用 nodejs 导入模块时，如果模块路径不是以 ./ 或 ../ 开头，则 node 会认为导入的模块来自于 node_modules 目录，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;lodash&quot;</span>);<br></code></pre></td></tr></table></figure><p>它首先会从当前目录的以下位置寻找文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node_modules/lodash.js<br>node_modules/lodash/入口文件<br></code></pre></td></tr></table></figure><p>若当前目录没有这样的文件，则会回溯到上级目录按照同样的方式查找</p><blockquote><p><strong>运行命令：包管理器\2. npm\2-3. 包的使用&gt; node .\sub\test.js</strong></p></blockquote><p>如果到顶级目录都无法找到文件，则抛出错误 <code>Cannot find module &#39;jquery&#39;</code><br>上面提到的入口文件按照以下规则确定</p><ol><li>查看导入包的 package.json 文件，读取 main 字段作为入口文件</li><li>若不包含 main 字段，则使用 index.js 作为入口文件<blockquote><p>入口文件的规则同样适用于自己工程中的模块<br>自己工程中的模块为 a 作为举例：</p></blockquote></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">// 首先，查看当前目录是否有 a.js //<br>把a当作文件夹，并且，把该文件夹当作一个包，看该包中是否有package.json文件，读取main字段。。。。<br>var a = require(&quot;./a&quot;); console.log(a)<br></code></pre></td></tr></table></figure><blockquote><p>在 node 中，还可以手动指定路径来导入相应的文件，这种情况比较少见</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;lodash/fp/add&quot;</span>);<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><h1 id="简易数据爬虫"><a href="#简易数据爬虫" class="headerlink" title="简易数据爬虫"></a>简易数据爬虫</h1><blockquote><p>补充： require 导入一个包，如果以./或../开头，就导入自己写的文件。如果没有写，就导入 node_modules 下面的模块<br>特殊情况：导入模块是一个特殊名字，使用 nodejs 自带的模块。（require(“fs”)）</p></blockquote><p>初始化：命令 npm init 生成 package.js 文件<br>将豆瓣电影的电影数据抓取下来，保存到本地文件 movie.json 中<br>需要用到的包：用法通过 npm 网站查询</p><ol><li><p>axios：专门用于在各种环境中发送网络请求，并获取到服务器响应结果</p><blockquote><p>安装 npm i axios,   运行 node .\index.js</p></blockquote></li><li><p>cheerio：jquery 的核心逻辑包，支持所有环境，可用于讲一个 html 字符串转换成为 jquery 对象，并通过 jquery 对象完成后续操作</p></li><li><p>fs：node 核心模块，专门用于文件处理</p><ul><li>fs.writeFile(文件名, 数据)</li></ul></li></ol><h1 id="语义版本"><a href="#语义版本" class="headerlink" title="语义版本"></a>语义版本</h1><p>思考：如果你编写了一个包 A，依赖另外一个包 B，你在编写代码时，包 B 的版本是 2.4.1，你是希望使用你包的人一定要安装包 B，并且是 2.4.1 版本，还是希望他可以安装更高的版本，如果你希望它安装更高的版本，高的什么程度呢<br>回顾：版本号规则<br>版本规范：主版本号.次版本号.补丁版本号</p><ul><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的 API、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的 API</li><li>补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</li></ul><p>有的时候，我们希望：安装我的依赖包的时候，次版本号和补丁版本号是可以有提升的，但是主版本号不能变化</p><p>有的时候，我们又希望：安装我的依赖包的时候，只有补丁版本号可以提升，其他都不能提升</p><p>甚至我们希望依赖包保持固定的版本，尽管这比较少见</p><p>这样一来，就需要在配置文件中描述清楚具体的依赖规则，而不是直接写上版本号那么简单。</p><p>这种规则的描述，即<strong>语义版本</strong></p><p>语义版本的书写规则非常丰富，下面列出了一些常见的书写方式</p><table><thead><tr><th>符号</th><th>描述</th><th>示例</th><th>示例描述</th></tr></thead><tbody><tr><td>&gt;</td><td>大于某个版本</td><td>&gt;1.2.1</td><td>大于 1.2.1 版本</td></tr><tr><td>&gt;=</td><td>大于等于某个版本</td><td>&gt;=1.2.1</td><td>大于等于 1.2.1 版本</td></tr><tr><td>&lt;</td><td>小于某个版本</td><td>&lt;1.2.1</td><td>小于 1.2.1 版本</td></tr><tr><td>&lt;=</td><td>小于等于某个版本</td><td>&lt;=1.2.1</td><td>小于等于 1.2.1 版本</td></tr><tr><td>-</td><td>介于两个版本之间</td><td>1.2.1 - 1.4.5</td><td>介于 1.2.1 和 1.4.5 之间</td></tr><tr><td>x</td><td>不固定的版本号</td><td>1.3.x</td><td>只要保证主版本号是 1，次版本号是 3 即可</td></tr><tr><td>~</td><td>补丁版本号可增</td><td>~1.3.4</td><td>保证主版本号是 1，次版本号是 3，补丁版本号大于等于 4</td></tr><tr><td>^</td><td>此版本和补丁版本可增</td><td>^1.3.4</td><td>保证主版本号是 1，次版本号可以大于等于 3，补丁版本号可以大于等于 4</td></tr><tr><td>*</td><td>最新版本</td><td>*</td><td>始终安装最新版本</td></tr></tbody></table><h2 id="1-避免还原的差异"><a href="#1-避免还原的差异" class="headerlink" title="1.避免还原的差异"></a>1.避免还原的差异</h2><p>版本依赖控制始终是一个两难的问题<br>如果允许版本增加，可以让依赖包的 bug 得以修复（补丁版本号），可以带来一些意外的惊喜（次版本号），但同样可能带来不确定的风险（新的 bug）<br>如果不允许版本增加，可以获得最好的稳定性，但失去了依赖包自我优化的能力<br>而有的时候情况更加复杂，如果依赖包升级后，依赖也发生了变化，会有更多不确定的情况出现<br>基于此，npm 在安装包的时候，会自动生成一个 package-lock.json 文件，该文件记录了安装包时的确切依赖关系<br>当移植工程时，如果移植了 package-lock.json 文件，恢复安装时，会按照 package-lock.json 文件中的确切依赖进行安装，最大限度的避免了差异</p><h2 id="2-扩展-npm-的差异版本处理"><a href="#2-扩展-npm-的差异版本处理" class="headerlink" title="2.[扩展]npm 的差异版本处理"></a>2.[扩展]npm 的差异版本处理</h2><p>如果两个包依赖同一个包的不同版本，如下图<br><img src="/img/8-3.png"></p><p>面对这种情况，在 node_modules 目录中，不会使用扁平的目录结构，而会形成嵌套的目录，如下图：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">├── node_modules │ ├── a │ │ ├── node_modules │ │ │ ├── c │ │ │ | |—— c包的文件<br>│ │ │── a包的文件 │ ├── b │ │ ├── node_modules │ │ │ ├── c │ │ │ | |—— c包的文件<br>│ │ │── b包的文件<br></code></pre></td></tr></table></figure><h1 id="npm-脚本-（npm-scripts）"><a href="#npm-脚本-（npm-scripts）" class="headerlink" title="npm 脚本 （npm scripts）"></a>npm 脚本 （npm scripts）</h1><p>在开发的过程中，我们可能会反复使用很多的 CLI 命令，例如：</p><ul><li>启动工程命令（node 或 一些第三方包提供的 CLI 命令）</li><li>部署工程命令（一些第三方包提供的 CLI 命令）</li><li>测试工程命令（一些第三方包提供的 CLI 命令）</li></ul><p>这些命令纷繁复杂，根据第三方包的不同命令也会不一样，非常难以记忆<br>于是，npm 非常贴心的支持了脚本，只需要在 package.json 中配置 scripts 字段，即可配置各种脚本名称<br>之后，我们就可以运行简单的指令来完成各种操作了<br>运行方式是 <code>npm run 脚本名称</code><br>不仅如此，npm 还对某些常用的脚本名称进行了简化，下面的脚本名称是不需要使用 run 的：</p><ul><li>start <strong>可以简化成 npm start</strong></li><li>stop</li><li>test</li></ul><p>一些细节：</p><ul><li>脚本中可以省略 npx</li><li>start 脚本有默认值：node server.js</li></ul><p>演示</p><blockquote><p>启动 node 方式一：</p></blockquote><p>js 文件终端打开，初始化创建 package.json 文件，node .\index.js</p><blockquote><p>启动 node 方式二：</p></blockquote><p>第三方工具 npm in nodemon<br>输入命令：npx nodemon .\index.js<br>可以不断刷新运行，想停止：ctrl+c<br>以上两种方式要记着，太麻烦了，所以有了本节课内容：<br>在 package.json 里面加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;nodemon index.js&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;npx nodemon index.js&quot;</span>,<br>      <span class="hljs-string">&quot;trick&quot;</span>: <span class="hljs-string">&quot;chrome https://www.baidu.com&quot;</span><br>  <span class="hljs-string">&quot;trick&quot;</span>: <span class="hljs-string">&quot;dir&quot;</span><br><br>&#125;,<br></code></pre></td></tr></table></figure><p>向运行 node,这次就直接 npm run start/trick<br>这里可以配置各种命令<strong>​</strong></p><h1 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h1><p>我们书写的代码一般有三种运行环境：</p><ol><li>开发环境</li><li>生产环境</li><li>测试环境</li></ol><p>有的时候，我们可能需要在 node 代码中根据不同的环境做出不同的处理<br>如何优雅的让 node 知道处于什么环境，是极其重要的<br>通常我们使用如下的处理方式：<br>node 中有一个全局变量 global (可以类比浏览器环境的 window)，该变量是一个对象，对象中的所有属性均可以直接使用<br>global 有一个属性是 process，该属性是一个对象，包含了当前运行 node 程序的计算机的很多信息，其中有一个信息是 env，是一个对象，包含了计算机中所有的系统变量<br>设置环境变量：<br>名字：NODE_ENV<br>值：development<br>通常，我们通过系统变量 NODE_ENV 的值，来判定 node 程序处于何种环境</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;没有环境变量&quot;</span>;<br><span class="hljs-comment">// 此电脑属性高级系统设置进行配置</span><br><span class="hljs-comment">// console.log(process.env.NODE_ENV)//development</span><br><br><span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&quot;development&quot;</span>) &#123;<br>  a = <span class="hljs-string">&quot;开发环境&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>  a = <span class="hljs-string">&quot;生产环境&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&quot;test&quot;</span>) &#123;<br>  a = <span class="hljs-string">&quot;测试环境&quot;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>有两种方式设置 NODE_ENV 的值</p><ol><li>永久设置</li><li>临时设置</li></ol><p>我们一般使用临时设置</p><p>因此，我们可以配置 scripts 脚本，在设置好了 NODE_ENV 后启动程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//开发环境</span><br><span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;set NODE_ENV=development&amp;&amp;node index.js&quot;</span>,<span class="hljs-comment">//这里不能有空格</span><br> <span class="hljs-comment">//在package.json里面配置：相当于设置NODE_ENV为development并且执行index.js</span><br><span class="hljs-comment">//生产环境</span><br><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;set NODE_ENV=production&amp;&amp;node index.js</span><br><span class="hljs-string">//测试环境</span><br><span class="hljs-string">&quot;</span>build<span class="hljs-string">&quot;: &quot;</span>set NODE_ENV=test&amp;&amp;node index.js<br></code></pre></td></tr></table></figure><blockquote><p>为了避免不同系统(macOS windows 不同)的设置方式的差异，可以使用第三方库 cross-env 对环境变量进行设置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;cross-env NODE_ENV=development node index.js&quot;</span>,<br><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;cross-env NODE_ENV=production node index.js&quot;</span>,<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;cross-env NODE_ENV=test node index.js&quot;</span><br><br><br>npm start;<br>npm run build;<br>npm test;<br></code></pre></td></tr></table></figure><h2 id="在-node-中读取-package-json"><a href="#在-node-中读取-package-json" class="headerlink" title="在 node 中读取 package.json"></a>在 node 中读取 package.json</h2><p>有的时候，我们可能在 package.json 中配置一些自定义的字段，这些字段需要在 node 中读取<br>在 node 中，可以直接导入一个 json 格式的文件，它会自动将其转换为 js 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//读取package.json文件中的版本号</span><br><br><span class="hljs-keyword">var</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./package.json&quot;</span>);<br><span class="hljs-built_in">console</span>.log(config.version);<br><span class="hljs-built_in">console</span>.log(config.a);<br></code></pre></td></tr></table></figure><h1 id="其他-npm-命令"><a href="#其他-npm-命令" class="headerlink" title="其他 npm 命令"></a>其他 npm 命令</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><ol><li>精确安装最新版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-exact 包名<br>npm install -E 包名<br></code></pre></td></tr></table></figure><ol start="2"><li>安装指定版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install 包名@版本号<br></code></pre></td></tr></table></figure><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><ol><li>查询包安装路径</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm root [-g]<br></code></pre></td></tr></table></figure><ol start="2"><li>查看包信息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm view 包名 [子信息]<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># view aliases：v info show</span></span><br><br>依赖的包：npm v react dependencies<br>版本：npm v react version<br></code></pre></td></tr></table></figure><ol start="3"><li>查询安装包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm list [-g] [--depth=依赖深度]//0开始<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># list aliases: ls  la  ll</span></span><br></code></pre></td></tr></table></figure><h2 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h2><ol><li>检查有哪些包需要更新</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm outdated<br></code></pre></td></tr></table></figure><ol start="2"><li>更新包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm update [-g] [包名]<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># update 别名（aliases）：up、upgrade</span></span><br></code></pre></td></tr></table></figure><p>用 npm 安装最新版的 npm<br>npm i -g npm</p><h2 id="4-卸载包"><a href="#4-卸载包" class="headerlink" title="4.卸载包"></a>4.卸载包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall [-g] 包名<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># uninstall aliases: remove, rm, r, un, unlink</span></span><br></code></pre></td></tr></table></figure><h2 id="5-npm-配置"><a href="#5-npm-配置" class="headerlink" title="5.npm 配置"></a>5.npm 配置</h2><p>npm 的配置会对其他命令产生或多或少的影响<br>安装好 npm 之后，最终会产生两个配置文件，一个是用户配置，一个是系统配置，当两个文件的配置项有冲突的时候，用户配置会覆盖系统配置<br>通常，我们不关心具体的配置文件，而只关心最终生效的配置<br>通过下面的命令可以查询目前生效的各种配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config ls [-l] [--json]<br></code></pre></td></tr></table></figure><p>另外，可以通过下面的命令操作配置</p><ol><li>获取某个配置项</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get 配置项<br></code></pre></td></tr></table></figure><ol start="2"><li>设置某个配置项</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set 配置项=值<br></code></pre></td></tr></table></figure><ol start="3"><li>移除某个配置项</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config delete 配置项<br></code></pre></td></tr></table></figure><h1 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol><li>移除淘宝镜像源</li></ol><p>命令：npm config delete registry<br>检查：npm config get registry</p><ol start="2"><li>到 npm 官网注册一个账号，并完成邮箱认证</li><li>本地使用 npm cli 进行登录<ol><li>使用命令<code>npm login</code>登录</li><li>使用命令<code>npm whoami</code>查看当前登录的账号</li><li>使用命令<code>npm logout</code>注销</li></ol></li><li>创建工程根目录</li><li>使用 npm init 进行初始化（包名必须是小写） author：bnagbangji <a href="mailto:&#49;&#x31;&#x31;&#49;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#49;&#x31;&#x31;&#49;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a></li><li>创建 LICENSE 使用刚才使用的协议</li></ol><h2 id="2-发布"><a href="#2-发布" class="headerlink" title="2.发布"></a>2.发布</h2><ol><li>开发</li><li>确定版本</li><li>使用命令<code>npm publish</code>完成发布</li></ol><h1 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h1><p><img src="/img/8-4.png"></p><p>可以通过网站 <a href="http://choosealicense.online/appendix/">http://choosealicense.online/appendix/</a> 选择协议，并复制协议内容</p><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h1 id="yarn-简介"><a href="#yarn-简介" class="headerlink" title="yarn 简介"></a>yarn 简介</h1><blockquote><p>yarn 官网：<a href="https://www.yarnpkg.com/zh-Hans/">https://www.yarnpkg.com/zh-Hans/</a><br>yarn -v 是否安装成功</p></blockquote><p>yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具，<strong>它仍然使用 npm 的 registry</strong>，不过提供了全新 CLI 来对包进行管理<br>过去，yarn 的出现极大的抢夺了 npm 的市场，甚至有人戏言，npm 只剩下一个 registry 了。<br>之所以会出现这种情况，是因为在过去，npm 存在下面的问题：</p><ul><li>依赖目录嵌套层次深：过去，npm 的依赖是嵌套的，这在 windows 系统上是一个极大的问题，由于众所周知的原因，windows 系统无法支持太深的目录</li><li>下载速度慢<ul><li>由于嵌套层次的问题，所以 npm 对包的下载只能是串行的，即前一个包下载完后才会下载下一个包，导致带宽资源没有完全利用</li><li>多个相同版本的包被重复的下载</li></ul></li><li>控制台输出繁杂：过去，npm 安装包的时候，每安装一个依赖，就会输出依赖的详细信息，导致一次安装有大量的信息输出到控制台，遇到错误极难查看</li><li>工程移植问题：由于 npm 的版本依赖可以是模糊的，可能会导致工程移植后，依赖的确切版本不一致。</li></ul><p>针对上述问题，yarn 从诞生那天就已经解决，它用到了以下的手段：</p><ul><li>使用扁平的目录结构</li><li>并行下载</li><li>使用本地缓存</li><li>控制台仅输出关键信息</li><li>使用 yanr-lock 文件记录确切依赖</li></ul><p>不仅如此，yarn 还优化了以下内容：</p><ul><li>增加了某些功能强大的命令</li><li>让既有的命令更加语义化</li><li>本地安装的 CLI 工具可以使用 yarn 直接启动</li><li>将全局安装的目录当作一个普通的工程，生成 package.json 文件，便于全局安装移植</li></ul><p>全局安装目录：<br>npm root -g<br>yarn 的出现给 npm 带来了巨大的压力，很快，npm 学习了 yarn 先进的理念，不断的对自身进行优化，到了目前的 npm6 版本，几乎完全解决了上面的问题：</p><ul><li>目录扁平化</li><li>并行下载</li><li>本地缓存 （清空缓存：npm chache clean）</li><li>使用 package-lock 记录确切依赖</li><li>增加了大量的命令别名</li><li>内置了 npx，可以启动本地的 CLI 工具</li><li>极大的简化了控制台输出</li></ul><p><strong>总结</strong><br>npm6 之后，可以说 npm 已经和 yarn 非常接近，甚至没有差距了。很多新的项目，又重新从 yarn 转回到 npm。<br>这两个包管理器是目前的主流，都必须要学习。</p><h1 id="yarn-的核心命令"><a href="#yarn-的核心命令" class="headerlink" title="yarn 的核心命令"></a>yarn 的核心命令</h1><ol><li><strong>初始化</strong></li></ol><p>初始化：<code>yarn init [--yes/-y]</code></p><ol start="2"><li><strong>安装</strong></li></ol><p>添加指定包：<code>yarn [global] add package-name [--dev/-D] [--exact/-E] 全局安装 </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> add nodemon<br></code></pre></td></tr></table></figure><p>安装 package.json 中的所有依赖：<code>yarn install [--production/--prod]</code></p><ol start="3"><li><strong>脚本和本地 CLI</strong></li></ol><p>运行脚本：<code>yarn run 脚本名</code></p><blockquote><p>start、stop、test 可以省略 run</p></blockquote><p>运行本地安装的 CLI：<code>yarn run CLI名</code></p><ol start="4"><li><strong>查询</strong></li></ol><p>查看 bin 目录：<code>yarn [global] bin</code><br>查询包信息：<code>yarn info 包名 [子字段]</code><br><code>yarn info 包名 version</code><br>列举已安装的依赖：<code>yarn [global] list [--depth=依赖深度]</code></p><blockquote><p>yarn 的 list 命令和 npm 的 list 不同，yarn 输出的信息更加丰富，包括顶级目录结构、每个包的依赖版本号</p></blockquote><ol start="5"><li><strong>更新</strong></li></ol><p>列举需要更新的包：<code>yarn outdated</code><br>更新包：<code>yarn [global] upgrade [包名]</code></p><ol start="6"><li><strong>卸载</strong></li></ol><p>卸载包：<code>yarn remove 包名</code></p><h1 id="yarn-的特别礼物"><a href="#yarn-的特别礼物" class="headerlink" title="yarn 的特别礼物"></a>yarn 的特别礼物</h1><p>在终端命令上，yarn 不仅仅是对 npm 的命令做了一个改名，还增加了一些原本没有的命令，这些命令在某些时候使用起来非常方便</p><ol><li><strong>yarn check</strong></li></ol><p>使用<code>yarn check</code>命令，可以验证 package.json 文件的依赖记录和 lock 文件是否一致</p><p>这对于防止篡改非常有用</p><ol start="2"><li><strong>yarn audit</strong></li></ol><p>使用<code>yarn audit</code>命令，可以检查本地安装的包有哪些已知漏洞，以表格的形式列出，漏洞级别分为以下几种：</p><ul><li>INFO：信息级别</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>  <span class="hljs-comment">// 求和，没有考虑到字符串输入会导致拼接</span><br>  <span class="hljs-keyword">return</span> args.reduce(<span class="hljs-function">(<span class="hljs-params">s, item</span>) =&gt;</span> s + item, <span class="hljs-number">0</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>LOW: 低级别</li><li>MODERATE：中级别</li><li>HIGH：高级别</li><li>CRITICAL：关键级别</li></ul><ol start="3"><li><strong>yarn why</strong></li></ol><p>使用<code>yarn why 包名</code>命令，可以在控制台打印出为什么安装了这个包，哪些包会用到它</p><ol start="4"><li><strong>yarn create</strong></li></ol><p>非常有趣的命令</p><p>今后，我们会学习一些脚手架，所谓脚手架，就是使用一个命令来搭建一个工程结构</p><p>过去，我们都是使用如下的做法：</p><ol><li>全局安装脚手架工具</li><li>使用全局命令搭建脚手架</li></ol><p>由于大部分脚手架工具都是以<code>create-xxx</code>的方式命名的，比如 react 的官方脚手架名称为<code>create-react-app</code></p><p>因此，可以使用<code>yarn create</code>命令来一步完成安装和搭建</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn create react-app my-app<br><span class="hljs-meta">#</span><span class="bash"> 等同于下面的两条命令</span><br>yarn global add create-react-app<br>create-react-app my-app<br></code></pre></td></tr></table></figure><h1 id="其他包管理器"><a href="#其他包管理器" class="headerlink" title="其他包管理器"></a>其他包管理器</h1><h1 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h1><blockquote><p>官网地址：<a href="https://npm.taobao.org/">https://npm.taobao.org/</a></p></blockquote><p>为解决国内用户连接 npm registry 缓慢的问题，淘宝搭建了自己的 registry，即淘宝 npm 镜像源</p><p>过去，npm 没有提供修改 registry 的功能，因此，淘宝提供了一个 CLI 工具即 cnpm，它支持除了<code>npm publish</code>以外的所有命令，只不过连接的是淘宝镜像源</p><p>如今，npm 已经支持修改 registry 了，可能 cnpm 唯一的作用就是和 npm 共存，即如果要使用官方源，则使用 npm，如果使用淘宝源，则使用 cnpm</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g cnpm --registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><p>nvm 并非包管理器，它是用于管理多个 node 版本的工具</p><p>在实际的开发中，可能会出现多个项目分别使用的是不同的 node 版本，在这种场景下，管理不同的 node 版本就显得尤为重要</p><p>nvm 就是用于切换版本的一个工具</p><h2 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1.下载和安装"></a>1.下载和安装</h2><p>最新版下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>下载 nvm-setup.zip 后，直接安装<br>一路下一步，不要改动安装路径（开发类工具尽量不该动）<br>​</p><h2 id="2-使用-nvm"><a href="#2-使用-nvm" class="headerlink" title="2.使用 nvm"></a>2.使用 nvm</h2><p>nvm 提供了 CLI 工具，用于管理 node 版本</p><p>管理员运行输入 nvm，以查看各种可用命令<br>nvm arch：打印系统版本和默认 node 架构类型<br>nvm install 8.5.4：nvm 安装指定的 node 版本<br>nvm list ：列出目前电脑上使用的以及已经安装过的那些 node 版本<br>npm list available：node 版本</p><blockquote><p>为了加快下载速度，建议设置淘宝镜像<br>node 淘宝镜像：<a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm 淘宝镜像：<a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p></blockquote><p>nvm node _mirror <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>nvm npm_mirror <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a><br>查看全局安装包：npm -g list –depth=0<br>切换 node 版本：nvm use 10.18.0<br>看 node 版本：node -v<br>卸载：nvm uninstall 10.18.0</p><h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p>pnpm 是一种新起的包管理器，从 npm 的下载量看，目前还没有超过 yarn，但它的实现方式值得主流包管理器学习，某些开发者极力推荐使用 pnpm</p><p>从结果上来看，它具有以下优势：</p><ol><li>目前，安装效率高于 npm 和 yarn 的最新版</li><li>极其简洁的 node_modules 目录</li><li>避免了开发时使用间接依赖的问题（之前的包管理器可以使用间接依赖不报错）pnpm 没有把间接依赖直接放入 node_modules 里面</li><li>能极大的降低磁盘空间的占用</li><li>使用缓存</li></ol><h2 id="1-安装和使用"><a href="#1-安装和使用" class="headerlink" title="1.安装和使用"></a>1.安装和使用</h2><p>全局安装 pnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g pnpm<br></code></pre></td></tr></table></figure><p>之后在使用时，只需要把 npm 替换为 pnpm 即可</p><p>如果要执行安装在本地的 CLI，可以使用 pnpx，它和 npx 的功能完全一样，唯一不同的是，在使用 pnpx 执行一个需要安装的命令时，会使用 pnpm 进行安装</p><blockquote><p>比如<code>npx mocha</code>执行本地的<code>mocha</code>命令时，如果<code>mocha</code>没有安装，则 npx 会自动的、临时的安装 mocha，安装好后，自动运行 mocha 命令<br>类似：npx create-react-app my-app 临时下载 create-react-app，然后自动运行命令</p></blockquote><h2 id="2-pnpm-原理"><a href="#2-pnpm-原理" class="headerlink" title="2.pnpm 原理"></a>2.pnpm 原理</h2><ol><li>同 yarn 和 npm 一样，pnpm 仍然使用缓存来保存已经安装过的包，以及使用 pnpm-lock.yaml 来记录详细的依赖版本</li></ol><p>缓存位于工程所在盘的根目录，所以位置不固定</p><ol start="2"><li>不同于 yarn 和 npm， pnpm 使用<strong>符号链接和硬链接</strong>（可将它们想象成快捷方式）的做法来放置依赖，从而规避了从缓存中拷贝文件的时间，使得安装和卸载的速度更快</li><li>由于使用了<strong>符号链接和硬链接</strong>，pnpm 可以规避 windows 操作系统路径过长的问题，因此，它选择使用树形的依赖结果，有着几乎完美的依赖管理。也因为如此，项目中只能使用直接依赖，而不能使用间接依赖</li></ol><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h2><p>由于 pnpm 会改动 node_modules 目录结构，使得每个包只能使用直接依赖，而不能使用间接依赖，因此，如果使用 pnpm 安装的包中包含间接依赖，则会出现问题(<strong>现在不会了，除非使用了绝对路径</strong>)</p><p>由于 pnpm 超高的安装卸载效率，越来越多的包开始修正之前的间接依赖代码</p><h1 id="【扩展】pnpm-原理"><a href="#【扩展】pnpm-原理" class="headerlink" title="【扩展】pnpm 原理"></a>【扩展】pnpm 原理</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>要彻底理解 pnpm 是怎么做的，需要有一些操作系统知识</p></blockquote><ol><li><strong>文件的本质</strong></li></ol><p>在操作系统中，文件实际上是一个指针，只不过它指向的不是内存地址，而是一个外部存储地址（这里的外部存储可以是硬盘、U 盘、甚至是网络）</p><ol start="2"><li><strong>文件的拷贝</strong></li></ol><p>如果你复制一个文件，是将该文件指针指向的内容进行复制，然后产生一个新文件指向新的内容</p><ol start="3"><li><strong>硬链接 hard link</strong></li></ol><p>硬链接的概念来自于 Unix 操作系统，它是指将一个文件 A 指针复制到另一个文件 B 指针中，文件 B 就是文件 A 的硬链接</p><p>通过硬链接，不会产生额外的磁盘占用，并且，两个文件都能找到相同的磁盘内容</p><p>硬链接的数量没有限制，可以为同一个文件产生多个硬链接</p><p>windows Vista 操作系统开始，支持了创建硬链接的操作，在 cmd 中使用下面的命令可以创建硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mklink /h 链接名称 目标文件<br></code></pre></td></tr></table></figure><p>由于文件夹（目录）不存在文件内容，所以文件夹（目录）不能创建硬链接</p><blockquote><p>由于种种原因，在 windows 操作系统中，通常不要跨越盘符创建硬链接</p></blockquote><ol start="4"><li><strong>符号链接 symbol link</strong></li></ol><p>符号链接又称为软连接，如果为某个文件或文件夹 A 创建符号连接 B，则 B 指向 A。</p><p>windows Vista 操作系统开始，支持了创建符号链接的操作，在 cmd 中使用下面的命令可以创建符号链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mklink /d 链接名称 目标文件<br><span class="hljs-meta">#</span><span class="bash"> /d表示创建的是目录的符号链接，不写则是文件的符号链接</span><br></code></pre></td></tr></table></figure><blockquote><p>早期的 windows 系统不支持符号链接，但它提供了一个工具 junction 来达到类似的功能</p></blockquote><p><strong>符号链接和硬链接的区别</strong></p><ol><li><p>硬链接仅能链接文件，而符号链接可以链接目录</p></li><li><p>硬链接在链接完成后仅和文件内容关联，和之前链接的文件没有任何关系。而符号链接始终和之前链接的文件关联，和文件内容不直接相关</p></li><li><p><strong>快捷方式</strong></p></li></ol><p>快捷方式类似于符号链接，是 windows 系统早期就支持的链接方式。</p><p>它不仅仅是一个指向其他文件或目录的指针，其中还包含了各种信息：如权限、兼容性启动方式等其他各种属性</p><p>由于快捷方式是 windows 系统独有的，在跨平台的应用中一般不会使用</p><ol start="6"><li><strong>node 环境对硬链接和符号链接的处理</strong></li></ol><p><strong>硬链接</strong>：硬链接是一个实实在在的文件，node 不对其做任何特殊处理，也无法区别对待，实际上，node 根本无从知晓该文件是不是一个硬链接</p><p><strong>符号链接</strong>：由于符号链接指向的是另一个文件或目录，当 node 执行符号链接下的 JS 文件时，会使用原始路径。</p><h2 id="2-pnpm-原理-1"><a href="#2-pnpm-原理-1" class="headerlink" title="2.pnpm 原理"></a>2.pnpm 原理</h2><p>pnpm 使用符号链接和硬链接来构建 node_modules 目录</p><p>下面用一个例子来说明它的构建方式</p><p>假设两个包 a 和 b，a 依赖 b：<br>假设我们的工程为 proj，直接依赖 a，则安装时，pnpm 会做下面的处理</p><ol><li><p>查询依赖关系，得到最终要安装的包：a 和 b</p></li><li><p>查看 a 和 b 是否已经有缓存，如果没有，下载到缓存中，如果有，则进入下一步</p></li><li><p>创建 node_modules 目录，并对目录进行结构初始化</p></li><li><p>从缓存的对应包中使用硬链接放置文件到相应包代码目录中</p></li><li><p>使用符号链接，将每个包的<strong>直接依赖</strong>放置到自己的目录中</p></li></ol><p>这样做的目的，是为了保证 a 的代码在执行过程中，可以读取到它们的直接依赖</p><ol start="6"><li>新版本的 pnpm 为了解决一些书写不规范的包（读取间接依赖）的问题，又将所有的工程非直接依赖，使用符号链接加入到了 .pnpm/node_modules 中</li></ol><p>在本例中好像没有必要，但是如果 b 依赖 c，a 又要直接用 c，这种不规范的用法现在 pnpm 通过这种方式支持了。</p><blockquote><p>但对于那些使用绝对路径的奇葩写法，可能永远也无法支持</p></blockquote><ol start="7"><li><p>在工程的 node_modules 目录中使用符号链接，放置直接依赖</p></li><li><p>完成</p></li></ol><h1 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h1><p>浏览器端</p><blockquote><p>过时了</p></blockquote><p>安装：npm i -g bower<br>bower init<br>bower install –save jquery<br>用法：html 里面 script 引入 bower_components 下的 jquery 的 dist 下 jquery.js</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>modularization</title>
    <link href="/2020/05/10/modularization/"/>
    <url>/2020/05/10/modularization/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JavaScript-模块化发展史"><a href="#1-JavaScript-模块化发展史" class="headerlink" title="1.JavaScript 模块化发展史"></a>1.JavaScript 模块化发展史</h1><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果<br>那个时候，一个页面所用到的 JS 可能只有区区几百行的代码<br>在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题<br>在这个阶段，也不存在专业的前端工程师，由于前端要做的事情实在太少，因此这一部分工作往往由后端工程师顺带完成<br>第一阶段发生的大事件：</p><ul><li>1996 年，NetScape 将 JavaScript 语言提交给欧洲的一个标准制定组织 ECMA（欧洲计算机制造商协会）</li><li>1998 年，NetScape 在与微软浏览器 IE 的竞争中失利，宣布破产</li></ul><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>ajax 的出现，逐渐改变了 JavaScript 在浏览器中扮演的角色。现在，它不仅可以实现小的效果，还可以和服务器之间进行交互，以更好的体验来改变数据<br>JS 代码的数量开始逐渐增长，从最初的几百行，到后来的几万行，前端程序逐渐变得复杂<br>后端开发者压力逐渐增加，致使一些公司开始招募专业的前端开发者<br>但此时，前端开发者的待遇远不及后端开发者，因为前端开发者承担的开发任务相对于后端开发来说，还是比较简单的，通过短短一个月的时间集训，就可以成为满足前端开发的需要<br>究其根本原因，是因为前端开发还有几个大的问题没有解决，这些问题都严重的制约了前端程序的规模进一步扩大：</p><ol><li><strong>浏览器解释执行 JS 的速度太慢</strong></li><li><strong>用户端的电脑配置不足</strong></li><li>更多的代码带来了全局变量污染、依赖关系混乱等问题</li></ol><p>上面三个问题，就像是阿喀琉斯之踵，成为前端开发挥之不去的阴影和原罪。<br>在这个阶段，前端开发处在一个非常尴尬的境地，它在传统的开发模式和前后端分离之间无助的徘徊<br>第二阶段的大事件：</p><ol><li>IE 浏览器制霸市场后，几乎不再更新</li><li>ES4.0 流产，导致 JS 语言 10 年间几乎毫无变化</li><li>2008 年 ES5 发布，仅解决了一些 JS API 不足的糟糕局面</li></ol><h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>时间继续向前推移，到了 2008 年，谷歌的 V8 引擎发布(面试），将 JS 的执行速度推上了一个新的台阶，甚至可以和后端语言媲美。<br>摩尔定律持续发酵，个人电脑的配置开始飞跃<br>突然间，制约前端发展的两大问题得以解决，此时，只剩下最后一个问题还在负隅顽抗，即<strong>全局变量污染和依赖混乱</strong>的问题，解决了它，前端便可以突破一切障碍，未来无可限量。<br>于是，全世界的前端开发者在社区中激烈的讨论，想要为这个问题寻求解决之道……<br>2008 年，有一个名叫 Ryan Dahl 小伙子正在为一件事焦头烂额，它需要在服务器端手写一个高性能的 web 服务，该服务对于性能要求之高，以至于目前市面上已有的 web 服务产品都满足不了需求。</p><blockquote><p>服务器开发</p></blockquote><p>新浪的服务器（电脑）收到请求<br>其中一个应用程序在做以下的事情 web 服务</p><ol><li>监听 80 端口</li><li>将请求进行分析</li><li>将分析的结果交给相应的程序（php，Java）进行处理</li><li>把程序处理的结果返还给客户端</li></ol><p>经过分析，它确定，如果要实现高性能，那么必须要尽可能的减少线程，而要减少线程，避免不了要实用异步的处理方案。<br>一开始，他打算自己实用 C/C++语言来编写，可是这一过程实在太痛苦。<br>就在他一筹莫展的时候，谷歌 V8 引擎的发布引起了他的注意，他突然发现，JS 不就是最好的实现 web 服务的语言吗？它天生就是单线程，并且是基于异步的！有了 V8 引擎的支撑，它的执行速度完全可以撑起一个服务器。而且 V8 是鼎鼎大名的谷歌公司发布的，谷歌一定会不断的优化 V8，有这种又省钱又省力的好事，我干嘛还要自己去写呢？<br>典型异步场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-comment">//后面不会阻塞</span><br><span class="hljs-comment">//JS单线程指的是执行线程，不代表浏览器单线程</span><br></code></pre></td></tr></table></figure><p>于是，它基于开源的 V8 引擎，对源代码作了一些修改，便快速的完成了该项目。<br>2009 年，Ryan 推出了该 web 服务项目，命名为 nodejs。<br>从此，JS 第一次堂堂正正的入主后端，不再是必须附属于浏览器的“玩具”语言了。<br>也是从此刻开始，人们认识到，JS（ES）是一门真正的语言，它依附于运行环境（运行时）（宿主程序）而执行</p><p><img src="/img/7-1.png"></p><p>nodejs 的诞生，便把 JS 中的最后一个问题放到了台前，即<strong>全局变量污染和依赖混乱</strong>问题<br>要直到，nodejs 是服务器端，如果不解决这个问题，分模块开发就无从实现，而模块化开发是所有后端程序必不可少的内容<br>经过社区的激烈讨论，最终，形成了一个模块化方案，即鼎鼎大名的 CommonJS，该方案，彻底解决了全局变量污染和依赖混乱的问题<br>该方案一出，立即被 nodejs 支持，于是，nodejs 成为了第一个为 JS 语言实现模块化的平台，为前端接下来的迅猛发展奠定了实践基础<br>该阶段发生的大事件：</p><ul><li>2008 年，V8 发布</li><li>IE 的市场逐步被 firefox 和 chrome 蚕食，现已无力回天</li><li>2009 年，nodejs 发布，并附带 commonjs 模块化标准</li></ul><h2 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h2><p>CommonJS 的出现打开了前端开发者的思路<br>既然后端可以使用模块化的 JS，作为 JS 语言的老东家浏览器为什么不行呢？<br>于是，开始有人想办法把 CommonJS 运用到浏览器中<br>可是这里面存在诸多的困难（课程中详解）<br>办法总比困难多，有些开发者就想，既然 CommonJS 运用到浏览器困难，我们干嘛不自己重新定一个模块化的标准出来，难道就一定要用 CommonJS 标准吗？<br>于是很快，AMD 规范出炉，它解决的问题和 CommonJS 一样，但是可以更好的适应浏览器环境<br>相继的，CMD 规范出炉，它对 AMD 规范进行了改进<br>这些行为，都受到了 ECMA 官方的密切关注……<br>2015 年，ES6 发布，它提出了官方的模块化解决方案 —— ES6 模块化<br>从此以后，模块化成为了 JS 本身特有的性质，这门语言终于有了和其他语言较量的资本，成为了可以编写大型应用的正式语言<br>于此同时，很多开发者、技术厂商早已预见到 JS 的无穷潜力，于是有了下面的故事</p><ul><li>既然 JS 也能编写大型应用，那么自然也需要像其他语言那样有解决复杂问题的开发框架<ul><li>Angular、React、Vue 等前端开发框架出现</li><li>Express、Koa 等后端开发框架出现</li><li>各种后端数据库驱动出现</li></ul></li><li>要开发大型应用，自然少不了各种实用的第三方库的支持<ul><li>npm 包管理器出现，实用第三方库变得极其方便</li><li>webpack 等构建工具出现，专门用于打包和部署</li></ul></li><li>既然 JS 可以放到服务器环境，为什么不能放到其他终端环境呢？<ul><li>Electron 发布，可以使用 JS 语言开发桌面应用程序</li><li>RN 和 Vuex 等技术发布，可以使用 JS 语言编写移动端应用程序</li><li>各种小程序出现，可以使用 JS 编写依附于其他应用的小程序</li><li>目前还有很多厂商致力于将 JS 应用到各种其他的终端设备，最终形成大前端生态<blockquote><p>可以看到，模块化的出现，是 JS 通向大型应用的基石，学习好模块化，变具备了编写大型应用的基本功。</p></blockquote></li></ul></li></ul><h1 id="2-CommonJS"><a href="#2-CommonJS" class="headerlink" title="2. CommonJS"></a>2. CommonJS</h1><h2 id="2-1-安装-nodejs"><a href="#2-1-安装-nodejs" class="headerlink" title="2-1. 安装 nodejs"></a>2-1. 安装 nodejs</h2><p>官网地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br><strong>浏览器</strong><br>浏览器运行的是 html 页面，并加载页面中通过 script 元素引入的 js</p><p><img src="/img/7-2.png"></p><p><strong>nodejs</strong><br>nodejs 直接运行某个 js 文件，该文件被称之为入口文件</p><p><img src="/img/7-3.png"></p><p>nodejs 遵循 EcmaScript 标准，但由于脱离了浏览器环境，因此：</p><ol><li>你可以在 nodejs 中使用 EcmaScript 标准的任何语法或 api，例如：循环、判断、数组、对象等</li><li>你不能在 nodejs 中使用浏览器的 web api，例如：dom 对象、window 对象、document 对象等</li></ol><p>由于大部分开发者是从浏览器端开发转向 nodejs 开发的，为了降低开发者的学习成本，nodejs 中提供了一些和浏览器 web api 同样的对象或函数，例如：console、setTimeout、setInterval 等</p><p>运行 node demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello NodeJs&quot;</span>); <span class="hljs-comment">//是不是ES标准</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h2 id="2-2-CommonJS"><a href="#2-2-CommonJS" class="headerlink" title="2-2. CommonJS"></a>2-2. CommonJS</h2><p>在 nodejs 中，由于有且仅有一个入口文件（启动文件），而开发一个应用肯定会涉及到多个文件配合，因此，nodejs 对模块化的需求比浏览器端要大的多</p><p><img src="/img/7-4.png"></p><p>由于 nodejs 刚刚发布的时候，前端没有统一的、官方的模块化规范，因此，它选择使用社区提供的 CommonJS 作为模块化规范<br>在学习 CommonJS 之前，首先认识两个重要的概念：<strong>模块的导出</strong>和<strong>模块的导入</strong></p><h3 id="模块的导出"><a href="#模块的导出" class="headerlink" title="模块的导出"></a>模块的导出</h3><p>要理解模块的导出，首先要理解模块的含义<br>什么是模块？<br>模块就是一个 JS 文件，它实现了一部分功能，并隐藏自己的内部实现，同时提供了一些接口供其他模块使用<br>模块有两个核心要素：<strong>隐藏</strong>和<strong>暴露</strong><br><strong>demo</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//需要隐藏的内部实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumber</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//要暴露的接口</span><br>  count++;<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getNumber());<br><span class="hljs-built_in">console</span>.log(getNumber());<br><span class="hljs-built_in">console</span>.log(getNumber());<br><span class="hljs-built_in">console</span>.log(getNumber());<br></code></pre></td></tr></table></figure><p>隐藏的，是自己内部的实现<br>暴露的，是希望外部使用的接口<br>任何一个正常的模块化标准，都应该默认隐藏模块中的所有实现，而通过一些语法或 api 调用来暴露接口<br><strong>暴露接口的过程即模块的导出</strong></p><p><img src="/img/7-5.png"></p><h3 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h3><p>当需要使用一个模块时，使用的是该模块暴露的部分（导出的部分），隐藏的部分是永远无法使用的。<br><strong>当通过某种语法或 api 去使用一个模块时，这个过程叫做模块的导入</strong></p><h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><p>CommonJS 使用<code>exports</code>导出模块，<code>require</code>导入模块<br>具体规范如下：</p><ol><li>如果一个 JS 文件中存在<code>exports</code>或<code>require</code>，该 JS 文件是一个模块</li><li>模块内的所有代码均为隐藏代码，包括全局变量、全局函数，这些全局的内容均不应该对全局变量造成任何污染</li><li>如果一个模块需要暴露一些 API 提供给外部使用，需要通过<code>exports</code>导出，<code>exports</code>是一个空的对象，你可以为该对象添加任何需要导出的内容</li><li>如果一个模块需要导入其他模块，通过<code>require</code>实现，<code>require</code>是一个函数，传入模块的路径即可返回该模块导出的整个内容</li></ol><p>导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原本相当于exports=&#123;&#125;</span><br><span class="hljs-built_in">exports</span>.getNumber = getNumber;<br>相当于;<br><span class="hljs-comment">// exports: &#123;</span><br><span class="hljs-comment">//     getNumber: getNumber</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-built_in">exports</span>.abc = <span class="hljs-number">123</span>;<br>相当于;<br><span class="hljs-comment">// exports: &#123;</span><br><span class="hljs-comment">//     getNumber: fn,</span><br><span class="hljs-comment">//         abc: 123</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./util.js&quot;</span>);<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//a是对象</span><br>count不能访问，因为没有导出<br></code></pre></td></tr></table></figure><h3 id="nodejs-对-CommonJS-的实现（面试）"><a href="#nodejs-对-CommonJS-的实现（面试）" class="headerlink" title="nodejs 对 CommonJS 的实现（面试）"></a>nodejs 对 CommonJS 的实现（面试）</h3><p>为了实现 CommonJS 规范，nodejs 对模块做出了以下处理</p><ol><li><p>为了保证高效的执行，仅加载必要的模块。nodejs 只有执行到<code>require</code>函数时才会加载并执行模块</p><blockquote><p>nodejs 中导入模块，使用相对路径，并且必须以./或../开头,浏览器可以省略./，nodejs 不行</p></blockquote></li><li><p>为了隐藏模块中的代码，nodejs 执行模块时，会将模块中的所有代码放置到一个函数中执行，以保证不污染全局变量。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//模块中的代码</span><br>&#125;)();<br></code></pre></td></tr></table></figure><ol start="3"><li>为了保证顺利的导出模块内容，nodejs 做了以下处理<ol><li>在模块开始执行前，初始化一个值<code>module.exports = &#123;&#125;</code></li><li><code>module.exports</code>即模块的导出值</li><li>为了方便开发者便捷的导出，nodejs 在初始化完<code>module.exports</code>后，又声明了一个变量<code>exports = module.exports</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">module</span></span>) </span>&#123;<br>  <span class="hljs-built_in">module</span>.exports = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-built_in">module</span>.exports;<br>  <span class="hljs-comment">//模块中的代码</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports;<br>&#125;)();<br><span class="hljs-comment">//面试题经常考module.exports与module几乎没区别，只是最后返回module.exports</span><br></code></pre></td></tr></table></figure><p>面试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./index.js&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">module</span>.exports == <span class="hljs-built_in">exports</span>); <span class="hljs-comment">//没区别</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">getNumber</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    count++;<br>    <span class="hljs-keyword">return</span> count;<br>  &#125;,<br>  <span class="hljs-attr">abc</span>: <span class="hljs-number">123</span>,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">module</span>.exports == <span class="hljs-built_in">exports</span>); <span class="hljs-comment">//module被赋值了，exports=&#123;&#125;,他两个不一样了。应用：下一题</span><br><span class="hljs-comment">// 最终导出的是module.exports</span><br></code></pre></td></tr></table></figure><p>经典面试题<br>util.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">getNumber</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    count++;<br>    <span class="hljs-keyword">return</span> count;<br>  &#125;,<br>  <span class="hljs-attr">abc</span>: <span class="hljs-number">123</span>,<br>&#125;;<br><span class="hljs-built_in">exports</span>.bcd = <span class="hljs-number">456</span>;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./util.js&quot;</span>);<br><span class="hljs-built_in">console</span>.log(util.bcd); <span class="hljs-comment">//undefined</span><br><span class="hljs-comment">// 因为最终返回module.exports,当前面被重新赋值，意味着module.exports和exports无关了</span><br></code></pre></td></tr></table></figure><p>经验：对 exports 赋值无意义，建议用 module.exports</p><ol start="4"><li>为了避免反复加载同一个模块，nodejs 默认开启了模块缓存，如果加载的模块已经被加载过了，则会自动使用之前的导出结果</li></ol><h1 id="3-AMD-和-CMD"><a href="#3-AMD-和-CMD" class="headerlink" title="3.AMD 和 CMD"></a>3.AMD 和 CMD</h1><h2 id="3-1-浏览器端模块化的难题"><a href="#3-1-浏览器端模块化的难题" class="headerlink" title="3-1 浏览器端模块化的难题"></a>3-1 浏览器端模块化的难题</h2><p>本节为重点：AMD CMD 不常用了<br><strong>CommonJS 的工作原理</strong><br>当使用<code>require(模块路径)</code>导入一个模块时，node 会做以下两件事情（不考虑模块缓存）：</p><ol><li>通过模块路径找到本机文件，并读取文件内容</li><li>将文件中的代码放入到一个函数环境中执行，并将执行后 module.exports 的值作为 require 函数的返回结果</li></ol><p>正是这两个步骤，使得 CommonJS 在 node 端可以良好的被支持<br>可以认为，<strong>CommonJS 是同步的</strong>，必须要等到加载完文件并执行完代码后才能继续向后执行<br><strong>当浏览器遇到 CommonJS</strong><br>当想要把 CommonJS 放到浏览器端时，就遇到了一些挑战</p><ol><li>浏览器要加载 JS 文件，需要远程从服务器读取，而网络传输的效率远远低于 node 环境中读取本地文件的效率。由于 CommonJS 是同步的，这会极大的降低运行性能</li><li>如果需要读取 JS 文件内容并把它放入到一个环境中执行，需要浏览器厂商的支持，可是浏览器厂商不愿意提供支持，最大的原因是 CommonJS 属于社区标准，并非官方标准</li></ol><p><strong>新的规范</strong><br>基于以上两点原因，浏览器无法支持模块化<br>可这并不代表模块化不能在浏览器中实现<br>要在浏览器中实现模块化，只要能解决上面的两个问题就行了<br>解决办法其实很简单：</p><ol><li>远程加载 JS 浪费了时间？做成异步即可，加载完成后调用一个回调就行了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./a.js&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;); <span class="hljs-comment">//回调</span><br></code></pre></td></tr></table></figure><ol start="2"><li>模块中的代码需要放置到函数中执行？编写模块时，直接放函数中就行了</li></ol><p>基于这种简单有效的思路，出现了 AMD 和 CMD 规范，有效的解决了浏览器模块化的问题。</p><h2 id="3-2AMD"><a href="#3-2AMD" class="headerlink" title="3-2AMD"></a>3-2AMD</h2><p>全称是 Asynchronous Module Definition，即异步模块加载机制<br>require.js 实现了 AMD 规范</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">&quot;./js/index.js&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/require.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- index.js入口 , 必须引用require.js--&gt;</span><br></code></pre></td></tr></table></figure><p>在 AMD 中，导入和导出模块的代码，都必须放置在 define 函数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">define([依赖的模块列表], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">模块名称列表</span>) </span>&#123;<br>  <span class="hljs-comment">//模块内部的代码</span><br>  <span class="hljs-keyword">return</span> 导出的内容;<br>&#125;);<br></code></pre></td></tr></table></figure><p>require.js 里面提供了个全局方法 define()<br>写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">define(<span class="hljs-number">123</span>); <span class="hljs-comment">//导出123</span><br>define(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;); <span class="hljs-comment">//导出对象</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>; <span class="hljs-comment">//不会污染</span><br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b模块&quot;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;b模块的数据&quot;</span>,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="3-3CMD"><a href="#3-3CMD" class="headerlink" title="3-3CMD"></a>3-3CMD</h2><p>全称是 Common Module Definition，公共模块定义规范<br>sea.js 实现了 CMD 规范</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/sea.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  seajs.use(<span class="hljs-string">&quot;./js/index&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 CMD 中，导入和导出模块的代码，都必须放置在 define 函数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>) </span>&#123;<br>  <span class="hljs-comment">//模块内部的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>可以使用异步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">define(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">require</span>.async(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>  &#125;);<br>  <span class="hljs-built_in">require</span>.async(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(b);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="4-es6-模块化"><a href="#4-es6-模块化" class="headerlink" title="4.es6 模块化"></a>4.es6 模块化</h1><h2 id="4-1-ES6-模块化简介"><a href="#4-1-ES6-模块化简介" class="headerlink" title="4-1.ES6 模块化简介"></a>4-1.ES6 模块化简介</h2><p>ECMA 组织参考了众多社区模块化标准，终于在 2015 年，随着 ES6 发布了官方的模块化标准，后成为 ES6 模块化<br>ES6 模块化具有以下的特点</p><ol><li>使用依赖<strong>预声明</strong>的方式导入模块<ol><li>依赖延迟声明（commonjs）<ol><li>优点：某些时候可以提高效率</li><li>缺点：无法在一开始确定模块依赖关系（比较模糊）</li></ol></li><li>依赖预声明（AMD）<ol><li>优点：在一开始可以确定模块依赖关系</li><li>缺点：某些时候效率较低</li></ol></li></ol></li><li>灵活的多种导入导出方式(相对于 module.export 较简单）</li><li>规范的路径表示法：所有路径必须以./或../开头</li></ol><h2 id="4-2-基本导入导出"><a href="#4-2-基本导入导出" class="headerlink" title="4-2.基本导入导出"></a>4-2.基本导入导出</h2><h3 id="模块的引入"><a href="#模块的引入" class="headerlink" title="模块的引入"></a>模块的引入</h3><p><strong>注意：这一部分非模块化标准</strong><br>目前，浏览器使用以下方式引入一个 ES6 模块文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;入口文件&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//module作为模块运行</span></span><br><span class="javascript">  <span class="hljs-comment">//当成了模块，就不会污染全局变量</span></span><br></code></pre></td></tr></table></figure><h3 id="模块的基本导出和导入"><a href="#模块的基本导出和导入" class="headerlink" title="模块的基本导出和导入"></a>模块的基本导出和导入</h3><p>ES6 中的模块导入导出分为两种：</p><ol><li>基本导入导出</li><li>默认导入导出</li></ol><p><img src="/img/7-6.png"></p><h3 id="基本导出"><a href="#基本导出" class="headerlink" title="基本导出"></a>基本导出</h3><p>类似于 <code>exports.xxx = xxxx</code><br>基本导出可以有多个，每个必须有名称<br>基本导出的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> 声明表达式  <span class="hljs-comment">//必须是声明语句</span><br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>; <span class="hljs-comment">//导出a，值为1，类似于CommonJS中的exports.a = 1</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//导出test，值为一个函数，类似于CommonJS中的exports.test = function ()&#123;&#125;</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; 具名符号 &#125;; <span class="hljs-comment">// 大括号不是对象</span><br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">var</span> sex = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">export</span> &#123; age, sex &#125;; <span class="hljs-comment">//将age变量的名称作为导出的名称，age变量的值，作为导出的值</span><br></code></pre></td></tr></table></figure><p>由于基本导出必须具有名称，所以要求导出内容必须跟上<strong>声明表达式</strong>或<strong>具名符号</strong></p><h3 id="基本导入"><a href="#基本导入" class="headerlink" title="基本导入"></a>基本导入</h3><p>由于使用的是<strong>依赖预加载</strong>，因此，导入任何其他模块，导入代码必须放置到所有代码之前<br>对于基本导出，如果要进行导入，使用下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; 导入的符号列表 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块路径&quot;</span>;<br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; name, age &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>注意以下细节：</p><ul><li>导入时，可以通过关键字<code>as</code>对导入的符号进行重命名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; name <span class="hljs-keyword">as</span> name1, age <span class="hljs-keyword">as</span> age1 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">console</span>.log(b2);<br><span class="hljs-built_in">console</span>.log(name1, age);<br><span class="hljs-built_in">console</span>.log(b);<br></code></pre></td></tr></table></figure><ul><li>导入时使用的符号是常量，不可修改</li><li>可以使用*号导入所有的基本导出，形成一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./b.js&quot;</span>; <span class="hljs-comment">//这条导入语句，仅会运行模块，不适用它内部的任何导出</span><br><span class="hljs-comment">// 适用于初始化代码init</span><br></code></pre></td></tr></table></figure><h2 id="4-3-默认导入导出"><a href="#4-3-默认导入导出" class="headerlink" title="4-3. 默认导入导出"></a>4-3. 默认导入导出</h2><p><img src="/img/7-7.png"></p><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><p>每个模块，除了允许有多个基本导出之外，还允许有一个默认导出<br>默认导出类似于 CommonJS 中的<code>module.exports</code>，由于只有一个，因此无需具名<br>具体的语法是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 默认导出的数据;<br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-number">123</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> a;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;adsfaf&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; 默认导出的数据 <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125;;<br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; a <span class="hljs-keyword">as</span> abc &#125;;<br></code></pre></td></tr></table></figure><p>由于每个模块仅允许有一个默认导出，因此，每个模块不能出现多个默认导出语句</p><h3 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h3><p>需要想要导入一个模块的默认导出，需要使用下面的语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;导入的符号列表&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块路径”</span><br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> data <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>; <span class="hljs-comment">//将a.js模块中的默认导出放置到常量data中</span><br></code></pre></td></tr></table></figure><p>类似于 CommonJS 中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 接受变量名 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;模块路径&quot;</span>);<br></code></pre></td></tr></table></figure><p>由于默认导入时变量名是自行定义的，因此没有别名一说<br>如果希望同时导入某个模块的默认导出和基本导出，可以使用下面的语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> 接收默认导出的变量，&#123;接收基本导出的变量&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块变量&quot;</span><br></code></pre></td></tr></table></figure><p>注：如果使用*号，会将所有基本导出和默认导出聚合到一个对象中，默认导出会作为属性 default 存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> data, &#123; a, b &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br><span class="hljs-comment">// a里面默认导出放在data里面，基本导出放在a,b里面</span><br></code></pre></td></tr></table></figure><h2 id="4-4-ES6-模块化的其他细节"><a href="#4-4-ES6-模块化的其他细节" class="headerlink" title="4-4.ES6 模块化的其他细节"></a>4-4.ES6 模块化的其他细节</h2><ol><li><strong>尽量导出不可变值</strong></li></ol><p>当导出一个内容时，尽量保证该内容是不可变的（大部分情况都是如此）<br>因为，虽然导入后，无法更改导入内容，但是在导入的模块内部却有可能发生更改，这将导致一些无法预料的事情发生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;模块a&quot;</span>; <span class="hljs-comment">//用const更加坐实了这点</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>可以使用无绑定的导入用于执行一些初始化代码</strong></li></ol><p>如果我们只是想执行模块中的一些代码，而不需要导入它的任何内容，可以使用无绑定的导入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;模块路径&quot;</span>;<br></code></pre></td></tr></table></figure><p>举例<br>arrayPatcher.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.print = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br><span class="hljs-comment">//一些其他的代码</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./arrayPatcher.js&quot;</span>; <span class="hljs-comment">//无绑定的导入</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br>arr.print();<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>可以使用绑定再导出，来重新导出来自另一个模块的内容</strong></li></ol><p>有的时候，我们可能需要用一个模块封装多个模块，然后有选择的将多个模块的内容分别导出，可以使用下面的语法轻松完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; 绑定的标识符 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;模块路径&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/7-8.png"><br>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; a, b &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./m1.js&quot;</span>;<br><span class="hljs-keyword">export</span> &#123; k, <span class="hljs-keyword">default</span>, a <span class="hljs-keyword">as</span> m2a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./m2.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> r = <span class="hljs-string">&quot;m-r&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2020/05/01/git/"/>
    <url>/2020/05/01/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git-常用命令。"><a href="#git-常用命令。" class="headerlink" title="git 常用命令。"></a>git 常用命令。</h1><h2 id="创建-SSH-Key"><a href="#创建-SSH-Key" class="headerlink" title="创建 SSH Key"></a>创建 SSH Key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><blockquote><p>在当前目录新建一个 Git 代码库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git init</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个目录，将其初始化为 Git 代码库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git init [project-name]</span><br></code></pre></td></tr></table></figure><blockquote><p>下载一个项目和它的整个代码历史</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> [url]</span><br></code></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><blockquote><p>添加指定文件到暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add [file1] [file2] ...</span><br></code></pre></td></tr></table></figure><blockquote><p>添加指定目录到暂存区，包括子目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add [dir]</span><br></code></pre></td></tr></table></figure><blockquote><p>添加当前目录的所有文件到暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add .</span><br></code></pre></td></tr></table></figure><blockquote><p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add -p</span><br></code></pre></td></tr></table></figure><blockquote><p>删除工作区文件，并且将这次删除放入暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rm [file1] [file2] ...</span><br></code></pre></td></tr></table></figure><blockquote><p>停止追踪指定文件，但该文件会保留在工作区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rm --cached [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>改名文件，并且将这个改名放入暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span><br></code></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><blockquote><p>提交暂存区到仓库区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -m [message]</span><br></code></pre></td></tr></table></figure><blockquote><p>提交工作区自上次 commit 之后的变化，直接到仓库区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -a</span><br></code></pre></td></tr></table></figure><blockquote><p>提交时显示所有 diff 信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -v</span><br></code></pre></td></tr></table></figure><blockquote><p>使用一次新的 commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次 commit 的提交信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit --amend -m [message]</span><br></code></pre></td></tr></table></figure><blockquote><p>重做上一次 commit，并包括指定文件的新变化</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span><br></code></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><blockquote><p>显示有变更的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span><br></code></pre></td></tr></table></figure><blockquote><p>显示当前分支的版本历史</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><br></code></pre></td></tr></table></figure><blockquote><p>显示 commit 历史，以及每次 commit 发生变更的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><br></code></pre></td></tr></table></figure><blockquote><p>搜索提交历史，根据关键词</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -S [keyword]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示某个 commit 之后的所有变动，每个 commit 占据一行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s</span><br></code></pre></td></tr></table></figure><blockquote><p>显示某个 commit 之后的所有变动，其”提交说明”必须符合搜索条件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature</span><br></code></pre></td></tr></table></figure><blockquote><p>显示某个文件的版本历史，包括文件改名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --follow [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示指定文件相关的每一次 diff</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -p [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示过去 5 次提交</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -5 --pretty --oneline</span><br></code></pre></td></tr></table></figure><blockquote><p>显示所有提交过的用户，按提交次数排序</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git shortlog -sn</span><br></code></pre></td></tr></table></figure><blockquote><p>显示指定文件是什么人在什么时间修改过</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git blame [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示暂存区和工作区的差异</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff</span><br></code></pre></td></tr></table></figure><blockquote><p>显示暂存区和上一个 commit 的差异</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff --cached [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示工作区与当前分支最新 commit 之间的差异</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff HEAD</span><br></code></pre></td></tr></table></figure><blockquote><p>显示两次提交之间的差异</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示今天你写了多少行代码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>显示某次提交的元数据和内容变化</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git show [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示某次提交发生变化的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git show --name-only [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示某次提交时，某个文件的内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git show [commit]:[filename]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示当前分支的最近几次提交</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><blockquote><p>列出所有本地分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch</span><br></code></pre></td></tr></table></figure><blockquote><p>列出所有远程分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -r</span><br></code></pre></td></tr></table></figure><blockquote><p>列出所有本地分支和远程分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -a</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个分支，但依然停留在当前分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch [branch-name]</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个分支，并切换到该分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b [branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个分支，指向指定 commit</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch [branch] [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个分支，与指定的远程分支建立追踪关系</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>切换到指定分支，并更新工作区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout [branch-name]</span><br></code></pre></td></tr></table></figure><blockquote><p>切换到上一个分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -</span><br></code></pre></td></tr></table></figure><blockquote><p>建立追踪关系，在现有分支与指定的远程分支之间</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>合并指定分支到当前分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git merge [branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>选择一个 commit，合并进当前分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git cherry-pick [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>删除分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch -d [branch-name]</span><br></code></pre></td></tr></table></figure><blockquote><p>删除远程分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin --delete [branch-name]</span><br></code></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><blockquote><p>列出所有 tag</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个 tag 在当前 commit</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag [tag]</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个 tag 在指定 commit</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag [tag] [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>删除本地 tag</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag -d [tag]</span><br></code></pre></td></tr></table></figure><blockquote><p>删除远程 tag</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span><br></code></pre></td></tr></table></figure><blockquote><p>查看 tag 信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git show [tag]</span><br></code></pre></td></tr></table></figure><blockquote><p>提交指定 tag</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push [remote] [tag]</span><br></code></pre></td></tr></table></figure><blockquote><p>提交所有 tag</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push [remote] --tags</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个分支，指向某个 tag</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span><br></code></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><blockquote><p>下载远程仓库的所有变动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git fetch [remote]</span><br></code></pre></td></tr></table></figure><blockquote><p>显示所有远程仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote -v</span><br></code></pre></td></tr></table></figure><blockquote><p>显示某个远程仓库的信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote show [remote]</span><br></code></pre></td></tr></table></figure><blockquote><p>增加一个新的远程仓库，并命名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote add [shortname] [url]</span><br></code></pre></td></tr></table></figure><blockquote><p>取回远程仓库的变化，并与本地分支合并</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git pull [remote] [branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>允许不相关历史提交,并强制合并</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git pull origin master --allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><blockquote><p>上传本地指定分支到远程仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push [remote] [branch]</span><br></code></pre></td></tr></table></figure><blockquote><p>强行推送当前分支到远程仓库，即使有冲突</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push [remote] --force</span><br></code></pre></td></tr></table></figure><blockquote><p>推送所有分支到远程仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push [remote] --all</span><br></code></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><blockquote><p>恢复暂存区的指定文件到工作区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>恢复某个 commit 的指定文件到暂存区和工作区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout [commit] [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>恢复暂存区的所有文件到工作区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout .</span><br></code></pre></td></tr></table></figure><blockquote><p>重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset [file]</span><br></code></pre></td></tr></table></figure><blockquote><p>重置暂存区与工作区，与上一次 commit 保持一致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset --hard</span><br></code></pre></td></tr></table></figure><blockquote><p>重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset --hard [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset --keep [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>新建一个 commit，用来撤销指定 commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git revert [commit]</span><br></code></pre></td></tr></table></figure><blockquote><p>暂时将未提交的变化移除，稍后再移入</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git stash</span><br><span class="hljs-meta">$</span><span class="bash"> git stash pop</span><br></code></pre></td></tr></table></figure><h2 id="忽略文件配置（-gitignore"><a href="#忽略文件配置（-gitignore" class="headerlink" title="忽略文件配置（.gitignore)"></a>忽略文件配置（.gitignore)</h2><p>1、配置语法:</p><blockquote><p>以斜杠“/”开头表示目录；</p><p>以星号“*”通配多个字符；</p><p>以问号“?”通配单个字符</p><p>以方括号“[]”包含单个字符的匹配列表；</p><p>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p></blockquote><p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p><p>2、示例：</p><p>（1）规则：fd1/*<br>　　　　 说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</p><p>（2）规则：/fd1/*<br>　　　　 说明：忽略根目录下的 /fd1/ 目录的全部内容；</p><p>（3）规则：</p><p>/*<br>!.gitignore<br>!/fw/bin/<br>!/fw/sf/</p><p>说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ES6++</title>
    <link href="/2020/04/26/ES6-1/"/>
    <url>/2020/04/26/ES6-1/</url>
    
    <content type="html"><![CDATA[<ol><li><strong>Math.pow —— ES2015</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span> ** <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span> * <span class="hljs-number">2</span> * <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p><strong>2. Object.entries Object.values —— ES2015</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><br><span class="hljs-built_in">Object</span>.keys(obj); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;]</span><br><span class="hljs-built_in">Object</span>.values(obj); <span class="hljs-comment">// [1, 2]</span><br><span class="hljs-built_in">Object</span>.entries(obj); <span class="hljs-comment">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2]]</span><br></code></pre></td></tr></table></figure><p><strong>3. ES2019 新增数组 API</strong><br>Array.prototype.flat<br>该函数可以将某个数组拍扁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]]]];<br><span class="hljs-keyword">const</span> arr1 = arr.flat(); <span class="hljs-comment">// [1, 2, 3, [4, 5, [6, 7]]]</span><br><span class="hljs-keyword">const</span> arr2 = arr.flat(<span class="hljs-number">2</span>); <span class="hljs-comment">// [1, 2, 3, 4, 5, [6, 7]]</span><br><span class="hljs-keyword">const</span> arr3 = arr.flat(<span class="hljs-literal">Infinity</span>); <span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>Array.prototype.flatMap</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = ...;<br>arr.flatMap(fn);<br><span class="hljs-comment">//等效于</span><br>arr.map(fn).flat()<br></code></pre></td></tr></table></figure><p>示例 1：利用 flatMap 在 map 期间去掉一些数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    [</span><br><span class="hljs-comment">        &#123;number:1, doubleNumber: 2&#125;,</span><br><span class="hljs-comment">        &#123;number:3, doubleNumber: 6&#125;,</span><br><span class="hljs-comment">        &#123;number:5, doubleNumber: 10&#125;,</span><br><span class="hljs-comment">    ]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>写法 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-keyword">if</span> (item % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>) &#123;<br>    newArr.push(&#123;<br>      <span class="hljs-attr">number</span>: item,<br>      <span class="hljs-attr">doubleNum</span>: item * <span class="hljs-number">2</span>,<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><p>写法 2：先筛选后映射</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = arr<br>  .filter(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> it % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>)<br>  .map(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> (&#123; <span class="hljs-attr">number</span>: it, <span class="hljs-attr">doubleNumber</span>: it * <span class="hljs-number">2</span> &#125;));<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><p>不建议的方法 3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = arr<br>  .map(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> (it % <span class="hljs-number">2</span> === <span class="hljs-number">1</span> ? &#123; <span class="hljs-attr">number</span>: it, <span class="hljs-attr">doubleNumber</span>: it * <span class="hljs-number">2</span> &#125; : []))<br>  .flat();<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-comment">//等价于</span><br><span class="hljs-keyword">var</span> result = arr.flatMap(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span><br>  it % <span class="hljs-number">2</span> === <span class="hljs-number">1</span> ? &#123; <span class="hljs-attr">number</span>: it, <span class="hljs-attr">doubleNumber</span>: it * <span class="hljs-number">2</span> &#125; : []<br>);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><p>示例 2：利用 flatMap 分割一个单词数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<br>  <span class="hljs-string">&quot;Yestoday is a History&quot;</span>,<br>  <span class="hljs-string">&quot;Tomorrow is a Mystery&quot;</span>,<br>  <span class="hljs-string">&quot;Today is a Gift&quot;</span>,<br>  <span class="hljs-string">&quot;That&#x27;s why we call it the Present&quot;</span>,<br>];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    [&quot;Yestoday&quot;, &quot;is&quot;, &quot;a&quot;, &quot;History&quot;, &quot;Tomorrow&quot;, ...]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>写法 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<br>  <span class="hljs-string">&quot;Yestoday is a History&quot;</span>,<br>  <span class="hljs-string">&quot;Tomorrow is a Mystery&quot;</span>,<br>  <span class="hljs-string">&quot;Today is a Gift&quot;</span>,<br>  <span class="hljs-string">&quot;That&#x27;s why we call it the Present&quot;</span>,<br>];<br><span class="hljs-keyword">var</span> result = arr.map(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> it.split(<span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">//console.log(result);</span><br><span class="hljs-keyword">var</span> result = arr.map(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> it.split(<span class="hljs-string">&quot; &quot;</span>)).flat();<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">var</span> result = arr.flatMap(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> it.split(<span class="hljs-string">&quot;&quot;</span>));<br></code></pre></td></tr></table></figure><p>Object.fromEntries</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.fromEntries(iterable);<br></code></pre></td></tr></table></figure><p>它接收一个可迭代对象，该对象每次迭代必须返回一个包含两项数据的数组（参考 map），该函数会将第一项作为对象的属性名，第二项作为对象的属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<br>  [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>],<br>];<br><span class="hljs-built_in">Object</span>.fromEntries(arr); <span class="hljs-comment">// &#123;a:1, b:2&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">localMoneyFomat</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-comment">//略</span><br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>  <span class="hljs-attr">balance</span>: <span class="hljs-number">199.8</span>, <span class="hljs-comment">//余额</span><br>  <span class="hljs-attr">taken</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">//消费</span><br>&#125;;<br>localMoneyFomat(obj); <span class="hljs-comment">// &#123;name:&quot;xxx&quot;, balance:&quot;￥199.8&quot;, taken: &quot;￥3000&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>答案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">localMoneyFomat</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Object</span>.entries(obj); <span class="hljs-comment">// 变成数组</span><br>  <span class="hljs-built_in">console</span>.log(result);<br>  <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Object</span>.entries(obj).map(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span><br>    <span class="hljs-keyword">typeof</span> it[<span class="hljs-number">1</span>] === <span class="hljs-string">&quot;number&quot;</span> ? [it[<span class="hljs-number">0</span>], <span class="hljs-string">`￥<span class="hljs-subst">$&#123;it[<span class="hljs-number">1</span>]&#125;</span>`</span>] : it<br>  );<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>  <span class="hljs-attr">balance</span>: <span class="hljs-number">199.8</span>, <span class="hljs-comment">//余额</span><br>  <span class="hljs-attr">taken</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">//消费</span><br>&#125;;<br>localMoneyFomat(obj); <span class="hljs-comment">// &#123;name:&quot;xxx&quot;, balance:&quot;￥199.8&quot;, taken: &quot;￥3000&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>解构的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">localMoneyFomat</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Object</span>.entries(obj).map(<span class="hljs-function">(<span class="hljs-params">[k, v]</span>) =&gt;</span><br>    <span class="hljs-keyword">typeof</span> v === <span class="hljs-string">&quot;number&quot;</span> ? [k, <span class="hljs-string">`￥<span class="hljs-subst">$&#123;v&#125;</span>`</span>] : [k, v]<br>  );<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.fromEntries(result);<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>String.prototype.trimStart<br>同 trimLeft，去掉字符串左边的空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;   abc   &quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.length);<br><span class="hljs-keyword">var</span> str1 = str.trimStart();<br><span class="hljs-built_in">console</span>.log(str1);<br></code></pre></td></tr></table></figure><p>String.prototype.trimEnd<br>同 trimRight，去掉字符串右边的空格</p><h1 id="ES2020"><a href="#ES2020" class="headerlink" title="ES2020"></a>ES2020</h1><p>以前的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">addr</span>: &#123;<br>      <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;黑龙江&quot;</span>,<br>      <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;哈尔滨&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 如果这是对象是ajax远程获取的,不知道里面是不是空</span><br><span class="hljs-built_in">console</span>.log(person.info.addr.city);<br><span class="hljs-comment">// person可能是NUll，person.info可能是null,person.info.addr可能是null</span><br></code></pre></td></tr></table></figure><p>以前的解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person &amp;&amp; person.info &amp;&amp; person.addr &amp;&amp; person.info.addr.city);<br></code></pre></td></tr></table></figure><p><strong>可选链操作符（Optional Chaining）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">person?.addr?.province;<br></code></pre></td></tr></table></figure><p>通过可选链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person?.info?.addr?.city);<br></code></pre></td></tr></table></figure><p><strong>空位合并操作符（Nullish coalescing Operator）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a ?? b;<br><span class="hljs-comment">// 等同于</span><br>a === <span class="hljs-literal">undefined</span> || a === <span class="hljs-literal">null</span> ? b : a; <span class="hljs-comment">// a没有东西就取b，有东西就取a</span><br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params">option</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = option.a || <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br>method(&#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">// a:null/undefined/0</span><br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>此方法有 bug，当 a:0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDef</span>(<span class="hljs-params">vaule</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> value === <span class="hljs-literal">undefined</span> || value === <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params">option</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = isDef(option.a) || <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params">option</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = option.a ?? <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br>method(&#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">// a:null/undefined/0</span><br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>Promise.allSettled</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.allSettled([<br>  <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>),<br>  <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">2</span>),<br>  <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;error&quot;</span>),<br>]).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">  result: [</span><br><span class="hljs-comment">    &#123;status: &quot;fulfilled&quot;, value: 1&#125;,</span><br><span class="hljs-comment">    &#123;status: &quot;fulfilled&quot;, value: 2&#125;,</span><br><span class="hljs-comment">    &#123;status: &quot;rejected&quot;, reason: &quot;error&quot;&#125;</span><br><span class="hljs-comment">  ]</span><br><span class="hljs-comment">*/</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>以前：</p><blockquote><p>Promise.all(Promise 数组)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> getTestPromise = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  isSuccess,</span></span><br><span class="hljs-params"><span class="hljs-function">  dataOrErr <span class="hljs-comment">// 返回Promise，是成功还是失败；成功后数据是什么，失败后错误是什么</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>        resolve(dataOrErr);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reject(dataOrErr);<br>      &#125;<br>    &#125;, <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1000</span>);<br>  &#125;);<br><span class="hljs-keyword">var</span> proms = [<br>  <span class="hljs-comment">// Promise数组</span><br>  getTestPromise(<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>),<br>  getTestPromise(<span class="hljs-literal">true</span>, <span class="hljs-number">2</span>),<br>  getTestPromise(<span class="hljs-literal">false</span>, <span class="hljs-number">3</span>),<br>  getTestPromise(<span class="hljs-literal">false</span>, <span class="hljs-number">4</span>),<br>];<br><span class="hljs-built_in">Promise</span>.all(proms)<br>  .then(<span class="hljs-function">(<span class="hljs-params">datas</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all resolved&quot;</span>, datas); <span class="hljs-comment">// 必须全部成功</span><br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all rejected&quot;</span>, reason); <span class="hljs-comment">//只要有一个错误,就不用等了，判定为失败</span><br>  &#125;);<br></code></pre></td></tr></table></figure><blockquote><p>Promise.race(Promise 数组)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.race(proms) <span class="hljs-comment">// 看谁先到终点：已决</span><br>  .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all resolved&quot;</span>, data);<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all rejected&quot;</span>, reason);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>新规范方法 Promise.allSettled 等待全部已决，不存在失败</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.allSettled(proms)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all resolved&quot;</span>, result);<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all rejected&quot;</span>, reason);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proms = [<br>  <span class="hljs-comment">// Promise数组</span><br>  getTestPromise(<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>),<br>  getTestPromise(<span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;failed&quot;</span>)),<br>  getTestPromise(<span class="hljs-literal">true</span>, <span class="hljs-number">3</span>),<br>  getTestPromise(<span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;failed&quot;</span>)),<br>];<br><span class="hljs-built_in">Promise</span>.allSettled(proms).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> sum = result.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + (b.value ?? <span class="hljs-number">0</span>), <span class="hljs-number">0</span>); <span class="hljs-comment">// 这个0表示第一次的值</span><br>  <span class="hljs-built_in">console</span>.log(result);<br>  <span class="hljs-built_in">console</span>.log(sum);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><strong>Dynamic Import</strong></li><li><strong>BigInt</strong>新的数据类型（值类型，基本类型）<blockquote><p>复习数据类型 typeof 返回：String Number undefined object Boolean function symbol</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第8种类型</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER * <span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER;<br><span class="hljs-comment">// Number.MAX_SAFE_INTEGER最大安全整数</span><br><span class="hljs-comment">// =&gt; 8.112963841460666e+31精读丢失了</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-built_in">BigInt</span>(<span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER) * <span class="hljs-built_in">BigInt</span>(<span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER);<br><span class="hljs-comment">// =&gt; 81129638414606663681390495662081n</span><br><span class="hljs-keyword">typeof</span> b; <span class="hljs-comment">// =&gt; bigint</span><br>a + b; <span class="hljs-comment">// error: Cannot mix BigInt and other types</span><br></code></pre></td></tr></table></figure><ul><li><strong>globalThis</strong>永远指向全局对象</li></ul><p><strong>4. Promise/A+</strong><br>Promise 的规范。Promise 构造函数满足了 PromiseA+规范。通过 es6 的 Promise 构造函数创建的对象满足 PromiseA+规范<br>只有 html css 属于 w3c</p><blockquote><p>学习网站<a href="https://wangdoc.com/">https://wangdoc.com/</a></p></blockquote><h1 id="ES2021"><a href="#ES2021" class="headerlink" title="ES2021"></a>ES2021</h1><ul><li>String.prototype.replaceAll</li></ul><p>替换字符串中所有的匹配字符</p><ul><li>Promise.any</li></ul><p>ES2021 将引入 Promise.any() 方法，一旦该方法从 promise 列表或数组中命中首个 resolve(成功) 的 promise ，就会短路并返回一个值。如果所有 promise 都被 reject ，该方法则将抛出一个聚合的错误信息 （在 Example 1b 里有所展示）。<br>其区别于 Promise.race() 之处在于，后者在某个 promise 率先 resolve 或 reject 后都会短路。<br>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proms = [<br>  getTestPromise(<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>),<br>  getTestPromise(<span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;failed&quot;</span>)),<br>  getTestPromise(<span class="hljs-literal">true</span>, <span class="hljs-number">3</span>),<br>  getTestPromise(<span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;failed&quot;</span>)),<br>];<br><span class="hljs-built_in">Promise</span>.any(proms)<br>  .then(<span class="hljs-function">(<span class="hljs-params">datas</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all resolved&quot;</span>, datas);<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Promise.all rejected&quot;</span>, reason);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>一个成功，就返回成功的那个 data<br>全部失败，就会返回一个对象，对象里面有一个数组，记录错误<br>​</p><p>上层工具：bit.dev 研究一下</p><h1 id="字节笔试"><a href="#字节笔试" class="headerlink" title="字节笔试"></a>字节笔试</h1><p>实现一个函数 toJSON，将传入的数据转换为 JSON 格式的字符串</p><blockquote><p>不可使用 JS 中的 JSON 对象 JSON.stringify()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将传入的数据转换为 JSON 格式的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;any&#125;</span> </span>data 要转换的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;String&#125;</span> </span>返回转换后的 JSON 字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toJSON</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-comment">// code here</span><br>&#125;<br><br><span class="hljs-comment">// test</span><br>toJSON(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// -&gt; &quot;&quot;</span><br>toJSON(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">// -&gt; &quot;abc&quot;</span><br>toJSON(<span class="hljs-number">123</span>); <span class="hljs-comment">// -&gt; 123</span><br>toJSON(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;); <span class="hljs-comment">// -&gt; &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;</span><br>toJSON([<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">3</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;monica&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;]); <span class="hljs-comment">//-&gt; [&quot;1&quot;, 3, &#123;&quot;name&quot;:&quot;monica&quot;, &quot;age&quot;:18&#125;]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> specialTypes = [<span class="hljs-string">&quot;function&quot;</span>, <span class="hljs-string">&quot;symbol&quot;</span>, <span class="hljs-string">&quot;undefined&quot;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isArrayItemToNull</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-comment">//数组的元素是不是转换成null</span><br>  <span class="hljs-keyword">const</span> itemType = <span class="hljs-keyword">typeof</span> item;<br>  <span class="hljs-keyword">return</span> (<br>    specialTypes.includes(itemType) || (<span class="hljs-built_in">isNaN</span>(item) &amp;&amp; itemType === <span class="hljs-string">&quot;number&quot;</span>) <span class="hljs-comment">//判断NaN</span><br>  );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDropProp</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> specialTypes.includes(<span class="hljs-keyword">typeof</span> data);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hanldeObject</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-comment">// 是不是null</span><br>  <span class="hljs-keyword">if</span> (data === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>  &#125;<br>  data = data.valueOf();<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data !== <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-comment">// 说明data已经是原始类型</span><br>    <span class="hljs-keyword">return</span> toJSON(data);<br>  &#125;<br>  <span class="hljs-comment">// 是数组的情况</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(data)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`[<span class="hljs-subst">$&#123;data</span></span><br><span class="hljs-subst"><span class="hljs-string">      .map((it) =&gt; (isArrayItemToNull(it) ? <span class="hljs-string">&quot;null&quot;</span> : toJSON(it)))</span></span><br><span class="hljs-subst"><span class="hljs-string">      .join(<span class="hljs-string">&quot;, &quot;</span>)&#125;</span>]`</span>;<br>  &#125;<br>  <span class="hljs-comment">// 是普通对象的情况</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Object</span>.entries(data)<br>    .flatMap(<span class="hljs-function">(<span class="hljs-params">[k, v]</span>) =&gt;</span> (isDropProp(v) ? [] : <span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;k&#125;</span>&quot;: <span class="hljs-subst">$&#123;toJSON(v)&#125;</span>`</span>))<br>    .join(<span class="hljs-string">&quot;,&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&#123;<span class="hljs-subst">$&#123;result&#125;</span>&#125;`</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将传入的数据转换为 JSON 格式的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;any&#125;</span> </span>data 要转换的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;String|undefined&#125;</span> </span>返回转换后的 JSON 字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toJSON</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-comment">// 给我一个什么类型的值  我应该返回一个什么样的字符串</span><br>  <span class="hljs-keyword">const</span> type = <span class="hljs-keyword">typeof</span> data; <span class="hljs-comment">// 拿到data的数据类型</span><br>  <span class="hljs-keyword">switch</span> (type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;boolean&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;number&quot;</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> + data;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bigint&quot;</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;Do not know how to serialize a BigInt&quot;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;string&quot;</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;data&#125;</span>&quot;`</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;function&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;undefined&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;symbol&quot;</span>:<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;object&quot;</span>:<br>      <span class="hljs-keyword">return</span> hanldeObject(data);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// test</span><br><span class="hljs-built_in">console</span>.log(<br>  toJSON(&#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;1&quot;</span>),<br>    <span class="hljs-attr">d</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>    <span class="hljs-attr">c</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-attr">e</span>: &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">b</span>: [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;monica&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;, <span class="hljs-number">44</span>, &#123;&#125;],<br>    &#125;,<br>  &#125;)<br>);<br><span class="hljs-comment">// console.log(toJSON(&quot;&quot;));</span><br><span class="hljs-comment">// toJSON(&quot;&quot;); // -&gt; &quot;&quot;</span><br><span class="hljs-comment">// toJSON(&quot;abc&quot;); // -&gt; &quot;abc&quot;</span><br><span class="hljs-comment">// toJSON(123); // -&gt; 123</span><br><span class="hljs-comment">// toJSON(&#123; a: 1, b: 2 &#125;); // -&gt; &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;</span><br><span class="hljs-comment">// toJSON([&quot;1&quot;, 3, &#123; name: &quot;monica&quot;, age: 18 &#125;]); //-&gt; [&quot;1&quot;, 3, &#123;&quot;name&quot;:&quot;monica&quot;,</span><br></code></pre></td></tr></table></figure><ol start="2"><li> var、let、const 之间的区别？</li></ol><ul><li>作用域</li><li>重复声明</li><li>是否会挂载到 window</li><li>定义前访问（暂时性死区 TDZ）</li><li>语义</li></ul><ol start="3"><li> ES6 中的<code>class</code>和传统的构造函数有什么区别？</li></ol><ul><li>是否必须使用<code>new</code>调用</li><li>严格模式</li><li>原型上的方法是否可被枚举</li><li><strong>原型上</strong>的方法是否能使用<code>new</code>调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span> &#123;&#125; <span class="hljs-comment">//不可枚举</span><br>&#125;<br><br><span class="hljs-comment">// new A.prototype.method1();不能new</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>B.prototype.m1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;; <span class="hljs-comment">//可枚举</span><br>B.prototype.m2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><br><span class="hljs-comment">// console.log(Object.keys(B.prototype));</span><br><span class="hljs-keyword">new</span> B.prototype.m1(); <span class="hljs-comment">//可以new</span><br></code></pre></td></tr></table></figure><ol start="4"><li> 箭头函数和普通的函数表达式有什么区别？</li></ol><ul><li><code>this</code>指向</li><li><code>arugments</code></li><li>不能使用<code>new</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">m</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> m2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.length); <span class="hljs-comment">//箭头函数没有arguments  5</span><br>  &#125;;<br><br>  m2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>&#125;<br>m(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><ol start="5"><li> 下面的输出结果是多少</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//立即执行</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  resolve();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;);<br><br>promise.then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//微队列</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>); <span class="hljs-comment">//1243</span><br></code></pre></td></tr></table></figure><ol start="6"><li> 下面 Set 结构，打印出的 size 值是多少</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>s.add([<span class="hljs-number">1</span>]);<br>s.add([<span class="hljs-number">1</span>]); <span class="hljs-comment">//字面量   这是两个数组</span><br><span class="hljs-built_in">console</span>.log(s.size);<br></code></pre></td></tr></table></figure><ol start="7"><li> 下面的代码输出结果是</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> promise2 = promise1.then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//等着1</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2);<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> promise2 = promise1.catch(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//2取决于1的话，看处理没处理这个状态，处理了，看他处理过程，没有处理就漏下来</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;error&quot;</span>); <span class="hljs-comment">//此处成功了没有处理，状态和1一样。这里只处理了错误</span><br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2); <span class="hljs-comment">//fulfilled</span><br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    reject(); <span class="hljs-comment">//promise是rejected</span><br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> promise2 = promise1<br>  .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//处理了错误，处理的过程没报错</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//此处要执行</span><br>  &#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1); <span class="hljs-comment">// rejected</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2); <span class="hljs-comment">// fulfiled</span><br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这里要是报错，发生在同步代码里面，返回rejected。</span><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//但是此处跑错是在异步代码里面。执行的此处的时候，已经没有proimise环境了</span><br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> promise2 = promise1.catch(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>, promise1); <span class="hljs-comment">// pending</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>, promise2); <span class="hljs-comment">// pending</span><br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><ol start="8"><li> 下面代码的运行结果是</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;success1&quot;</span>);<br>  reject(<span class="hljs-string">&quot;error&quot;</span>);<br>  resolve(<span class="hljs-string">&quot;success2&quot;</span>);<br>&#125;);<br><br>promise<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;then: &quot;</span>, res);<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;catch: &quot;</span>, err);<br>  &#125;);<br></code></pre></td></tr></table></figure><ol start="9"><li> 下面的代码输出结果是多少</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">2</span>)<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;) <span class="hljs-comment">//返回一个新Promsie,状态为成功</span><br>  .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//2</span><br>  &#125;);<br></code></pre></td></tr></table></figure><ol start="10"><li>下面的代码输出结果是多少</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.resolve()<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;error!!!&quot;</span>); <span class="hljs-comment">//这里是return 不是throw。没报错，只是返回了一个错误对象</span><br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;then: &quot;</span>, res);<br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;catch: &quot;</span>, err);<br>  &#125;);<br></code></pre></td></tr></table></figure><ol start="11"><li>下面的代码输出结果是多少</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>) <span class="hljs-comment">// promise  fullfilled   1</span><br>  .then(<span class="hljs-number">2</span>) <span class="hljs-comment">//如果then里传递的不是函数，就当没执行就行</span><br>  .then(<span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>)) <span class="hljs-comment">//传递的是对象，then必须传函数，也是无效</span><br>  .then(<span class="hljs-built_in">console</span>.log); <span class="hljs-comment">//函数  console.log(1)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>事件循环与异步</title>
    <link href="/2020/04/20/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <url>/2020/04/20/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="线程和异步"><a href="#线程和异步" class="headerlink" title="线程和异步"></a>线程和异步</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>当一个应用程序运行时，需要使用内存和 CPU 资源，这些资源需要向操作系统申请。<br>操作系统以进程的方式来分配这些资源，一个进程就代表着一块独立于其他进程的内存空间。<br>一个应用程序要运行，必须至少有一个进程启动。<br>进程的最大特点是<strong>独立</strong>，一个进程不能随意的访问其他进程的资源。这就保证了多个程序在操作系统上运行互不干扰。<br><img src="/img/6-1.png"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>任何一个进程在启动的时候，操作系统都会给其分配一个线程，应用程序的入口函数在主线程中运行。<br>在应用程序的运行过程中，可能有多个任务需要<strong>同时</strong>执行，于是可以向操作系统申请分配更多的线程来执行不同的任务。<br>比如，<strong>浏览器启动后，会开启多个线程来处理不同的事情。</strong><br><img src="/img/6-2.png"><br>两者区别：<br><strong>和进程不一样的是，线程之间的资源不是隔离的，它们可以共享数据，并且线程可以被调度。</strong><br>比如浏览器中的执行线程和 GUI 线程就是被调度为<strong>互斥的</strong>，当 GUI 线程执行渲染时，执行线程会被阻塞，反之亦然。所以在下面的代码中你是看不到元素内容被改变的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Monica<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test()&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    title.innerHTML = <span class="hljs-string">&quot;莫妮卡&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--点击之后JS执行引擎在执行，test()运行，下一步才渲染。但是进入了死循环,执行线程结束不了了--&gt;</span><br></code></pre></td></tr></table></figure><p><strong>我们所说的「JS 中是单线程」的语言，是指在宿主环境中，执行 JS 代码的线程只有一个，不代表宿主环境是单线程</strong><br>为什么要互斥？先执行完后渲染，效率高<br>为什么渲染的时候不能执行 JS 代码？执行混乱</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>单线程的主要优势是不需要考虑线程调度，降低了程序的复杂性<br>但在单线程中如果要处理需要等待的任务时，就必须要考虑阻塞的问题。<br>考虑下面的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// 获取某个dom元素</span><br><span class="hljs-keyword">var</span> name = syncConnect(<span class="hljs-string">&quot;http://server/getname&quot;</span>); <span class="hljs-comment">// 以同步的方式向服务器获取名字</span><br>dom.innerHTML = name;<br>otherTask(); <span class="hljs-comment">// 其他无关任务</span><br></code></pre></td></tr></table></figure><p><img src="/img/6-3.png"><br>因此，JS 引入异步来处理该问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// 获取某个dom元素</span><br>asyncConnect(<span class="hljs-string">&quot;http://server/getname&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">result</span>) </span>&#123;<br>  <span class="hljs-comment">//以异步的方式向服务器获取名字</span><br>  dom.innerHTML = result;<br>&#125;);<br>otherTask(); <span class="hljs-comment">// 其他无关任务</span><br></code></pre></td></tr></table></figure><p><img src="/img/6-4.png"></p><h1 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h1><p>要想执行必须有执行上下文<br>JS 执行引擎只会执行栈顶端的东西<br>实例 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;A&quot;</span>); <span class="hljs-comment">// 函数调用，新建log上下文，入栈，执行完出栈</span><br>  B(); <span class="hljs-comment">// 建立B的上下文</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;B&quot;</span>); <span class="hljs-comment">// log上下文</span><br>&#125;<br>A(); <span class="hljs-comment">// 创建A的上下文，入栈。JS执行引擎只会执行栈顶端的东西，所以不执行下一句，而是执行A</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;global&quot;</span>);<br><span class="hljs-comment">// 答案：A B global</span><br></code></pre></td></tr></table></figure><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>事件循环是 JS 处理异步函数的具体方法</p><p>具体的做法是：</p><ol><li>执行 执行栈 中的代码</li><li>遇到一些特殊代码交给浏览器的其他线程处理</li><li>将执行栈中的代码全部执行完毕</li><li>从事件队列中取出第一个任务放入执行栈，然后重复第 1 步</li></ol><p><img src="/img/6-5.png"></p><p>事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：</p><ul><li>宏任务（队列）：macroTask，计时器结束的回调、事件回调、http 回调等等绝大部分异步函数进入宏队列</li><li>微任务（队列）：microTask，Promise.then, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a></li></ul><p>当执行栈清空时，JS 引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="javascript">    app.innerHTML = <span class="hljs-string">&quot;1&quot;</span>;</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 该函数将在微队列中</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">C</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  observer.observe(app, &#123; <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span> &#125;); <span class="hljs-comment">// 观察 app 的变化</span></span><br><span class="javascript">  app.innerHTML = <span class="hljs-string">&quot;2&quot;</span>;</span><br><span class="javascript">  <span class="hljs-comment">// 2 1 2 3 3</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ol><li>怎样理解 JS 的异步？（必考）JS 是一个<strong>单线程</strong>的语言，意味着宿主仅为其<strong>分配了一个执行线程</strong>。而在<strong>实际的开发</strong>中，JS 有时需要执行一些<strong>耗时的操作</strong>，比如等待一个 DOM 事件发生、等待网络通信完成、等待计时结束等等。如果在执行线程上去等待，就浪费线程的宝贵执行时间，<strong>阻塞后续操作</strong>。更可怕的是，由于浏览器的<strong>GUI 线程和 JS 执行线程是互斥的</strong>，这就导致浏览器界面会因为 JS 的等待处于卡死状态。因此，JS 通过异步来解决这个问题，当需要等待的时候，通知宿主的其他线程去做处理，执行线程则继续后续执行。当其他线程完成处理后，会发出通知，此时执行线程转而去执行事先定义好的回调函数即可。异步的方式充分了解放了执行线程，让执行线程可以毫无阻塞的运行，也就避免了浏览器宿主因为等待操作完成出现的卡死现象。</li><li>下面的哪个函数执行会导致报错？如果报错，会报什么错误？为什么会出现这种情况？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>  A();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (n &gt;= <span class="hljs-number">0</span>) &#123;<br>    n++;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 执行上下文 A Maximum call stack size exceeded 栈溢出</span><br><span class="hljs-comment">// B 死循环 不报错 栈空间不变化，一直是B</span><br></code></pre></td></tr></table></figure><p>下面的代码输出结果是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// func1先进入事件队列</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  a();<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  &#125;, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;<br>a();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 3 4 1 3 2 2</span><br></code></pre></td></tr></table></figure><p>!考点：GUI 线程怎么渲染的？<br>​</p><h1 id="ES6-异步机制"><a href="#ES6-异步机制" class="headerlink" title="ES6 异步机制"></a>ES6 异步机制</h1><blockquote><p>面试常考：JS 基础里面的事件循环 原形原型链 作用域链</p></blockquote><h1 id="异步处理的演化"><a href="#异步处理的演化" class="headerlink" title="异步处理的演化"></a>异步处理的演化</h1><p>JS 实现异步的代码模型主要依托于回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.addEventListener(<br>  <span class="hljs-string">&quot;click&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-comment">// 回调函数作为第二个参数传递，函数可接收一个参数</span><br>  &#125;,<br>  &#123;&#125;<br>);<br>dom.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">// 回调函数作为属性传递，函数可接收一个参数</span><br>&#125;;<br>fs.readFile(<span class="hljs-string">&quot;./txt&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, buffer</span>) </span>&#123;<br>  <span class="hljs-comment">// 回调函数作为最后一个参数传递，函数可接收两个参数</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>这种设计实际上是有缺陷的</p><ol><li>没有统一的标准</li><li>容易陷入回调地狱（callback hell）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步任务：依次发送7次网络请求，拿到服务器数据</span><br><span class="hljs-comment">*/</span><br>asyncConnect(<span class="hljs-string">&quot;地址1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp1</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// to do something</span><br>  asyncConnect(<span class="hljs-string">&quot;地址2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp2</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    asyncConnect(<span class="hljs-string">&quot;地址3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp3</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// to do something</span><br>      asyncConnect(<span class="hljs-string">&quot;地址4&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp4</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// to do something</span><br>        asyncConnect(<span class="hljs-string">&quot;地址5&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp5</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// to do something</span><br>          asyncConnect(<span class="hljs-string">&quot;地址6&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp6</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// to do something</span><br>            asyncConnect(<span class="hljs-string">&quot;地址7&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp7</span>) =&gt;</span> &#123;<br>              <span class="hljs-comment">// to do something</span><br>            &#125;);<br>          &#125;);<br>        &#125;);<br>      &#125;);<br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>后来，JS 社区提出了<code>Promise A+</code>规范，希望把异步规范化，并消除回调地狱<br>再后来，ES6 官方标准中提出了 <code>Promise API</code> 来处理异步，它满足<code>Promise A+</code>规范<br>由于异步处理变得标准了，就给 ES 官方提供了进一步改进的空间，于是在 ES7 中出现了新的语法<code>async await</code>，它更加完美的解决了异步处理问题</p><h1 id="Promise-的概念"><a href="#Promise-的概念" class="headerlink" title="Promise 的概念"></a>Promise 的概念</h1><p><strong>一个 promise 就是一个对象，它表示一个异步任务</strong><br>异步任务内部保存了它的进展状态，规范中约定有<strong>三种状态</strong>，不同的状态属于不同的<strong>阶段</strong></p><h3 id="状态的转换"><a href="#状态的转换" class="headerlink" title="状态的转换"></a>状态的转换</h3><p><strong>任务开始时，始终处于未决阶段的挂起状态</strong><br>任务在未决阶段的时候，有能力将其<strong>推向</strong>已决。比如，当从服务器拿到数据后，我们就从未决阶段推向已决的 resolved 状态，如果网络不好，导致出错了，我们就从未决阶段推向已决的 rejected 状态<br>我们把<strong>从未决推向已决的 resolved 状态的过程，叫做 resolve</strong>，<strong>从未决推向已决的 rejected 状态的过程，叫做 reject</strong></p><p><strong>这种状态和阶段的变化是不可逆的</strong>，也就是说，一旦推向了已决，就无法重新改变状态</p><h3 id="任务完成后附带的数据"><a href="#任务完成后附带的数据" class="headerlink" title="任务完成后附带的数据"></a>任务完成后附带的数据</h3><p>任务从未决到已决时，可能附带一些数据，比如：跑步完成后的用时、网络请求后从服务器拿到的数据</p><p>任务已决后（有了结果），可能需要进一步做后续处理<br>针对 resolved 的后续处理，称之为 thenable，针对 rejected 的后续处理，称之为 catchable</p><h1 id="Promise-的基本使用"><a href="#Promise-的基本使用" class="headerlink" title="Promise 的基本使用"></a>Promise 的基本使用</h1><p>ES6 提供了一套 API 来适配上面提到的异步模型，这个 API 即<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//未决阶段的代码，这些代码将立即同步执行，表示任务启动后要做的事情</span><br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-comment">//在合适的时候，将任务推向已决</span><br>  <span class="hljs-comment">//resolve(数据)：将任务推向resovled状态，并附加一些数据</span><br>  <span class="hljs-comment">//reject(数据)：将任务推向rejected状态，并附加一些数据</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>应用：Promise A+规范：必须有 then,可以有多个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开始计时&quot;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;结束计时&quot;</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>        resolve(<span class="hljs-number">123</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reject(<span class="hljs-number">233</span>);<br>      &#125;<br>    &#125;, duration);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">var</span> pro = delay(<span class="hljs-number">1000</span>);<br>pro.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;任务完成了&quot;</span>, data); <span class="hljs-comment">// undefined</span><br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;任务失败了&quot;</span>, reason);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>Promise A+规范没有规定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;任务完成了&quot;</span>, data); <span class="hljs-comment">// undefined</span><br>&#125;);<br>pro.catch(<span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;任务失败了&quot;</span>, reason);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>任务一旦进入已决后，所有企图改变任务状态的代码都将失效</li><li>以下代码可以让任务到达 rejected 状态<ol><li>调用 reject</li><li>代码执行报错</li><li>抛出错误</li></ol></li></ol><p>拿到 Promise 对象后，可以通过 then 方法指定后续处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pro.then(thenable, catchable);<br><span class="hljs-comment">//或</span><br>pro.then(thenable);<br>pro.catch(catchable);<br></code></pre></td></tr></table></figure><p>无论是 thenable 还是 catchable，均是下面格式的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-comment">//data为状态数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：后续处理函数一定是异步函数，并且放到微队列中</strong></p><h1 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h1><ol><li>下面代码输出什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  resolve(<span class="hljs-string">&quot;a&quot;</span>);<br>  resolve(<span class="hljs-string">&quot;b&quot;</span>);<br>  reject(<span class="hljs-string">&quot;c&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;);<br>promise.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">resean</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;<br>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 1 2 4 a</span><br></code></pre></td></tr></table></figure><ol start="2"><li>下面的代码输出什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">var</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  resolve(<span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// 状态不能变，但是依旧执行此代码，即报错，导致后面代码不走了</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>); <span class="hljs-comment">// 不走了</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>pro.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;<br>);<br><span class="hljs-comment">// 2 4 7 3 1</span><br></code></pre></td></tr></table></figure><h1 id="更多知识"><a href="#更多知识" class="headerlink" title="更多知识"></a>更多知识</h1><p><strong>Promise 是可以链式调用的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pro1 = ...; <span class="hljs-comment">// pro1 是一个异步任务，它完成后会得到一个数字3</span><br>pro1<br>  .then(<span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(n); <span class="hljs-comment">// 输出：3</span><br>  <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span>;<br>&#125;)<br>  .then(<span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(n); <span class="hljs-comment">// 输出：6</span><br>  <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span>;<br>&#125;)<br>  .then(<span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(n); <span class="hljs-comment">// 输出：12</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br>pro<br>  .then(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这个d取决于上一个的返回结果</span><br>    <span class="hljs-built_in">console</span>.log(d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(d);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>如果上一个返回的是一个 Promise 呢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br>pro<br>  .then(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      resolve(<span class="hljs-number">5</span>);<br>    &#125;); <span class="hljs-comment">//相当于返回的此Promise</span><br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(d);<br>  &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步任务：依次发送7次网络请求，拿到服务器数据</span><br><span class="hljs-comment">*/</span><br>asyncConnect(<span class="hljs-string">&quot;地址1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp1</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// to do something</span><br>  asyncConnect(<span class="hljs-string">&quot;地址2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp2</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    asyncConnect(<span class="hljs-string">&quot;地址3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp3</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// to do something</span><br>      asyncConnect(<span class="hljs-string">&quot;地址4&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp4</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// to do something</span><br>        asyncConnect(<span class="hljs-string">&quot;地址5&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp5</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// to do something</span><br>          asyncConnect(<span class="hljs-string">&quot;地址6&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp6</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// to do something</span><br>            asyncConnect(<span class="hljs-string">&quot;地址7&quot;</span>, <span class="hljs-function">(<span class="hljs-params">resp7</span>) =&gt;</span> &#123;<br>              <span class="hljs-comment">// to do something</span><br>            &#125;);<br>          &#125;);<br>        &#125;);<br>      &#125;);<br>    &#125;);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步任务：依次发送7次网络请求，拿到服务器数据</span><br><span class="hljs-comment">*/</span><br>asyncConnect(<span class="hljs-string">&quot;地址1&quot;</span>)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    <span class="hljs-keyword">return</span> asyncConnect(<span class="hljs-string">&quot;地址2&quot;</span>); <span class="hljs-comment">// 返回新的Promise</span><br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    <span class="hljs-keyword">return</span> asyncConnect(<span class="hljs-string">&quot;地址3&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    <span class="hljs-keyword">return</span> asyncConnect(<span class="hljs-string">&quot;地址4&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    <span class="hljs-keyword">return</span> asyncConnect(<span class="hljs-string">&quot;地址5&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    <span class="hljs-keyword">return</span> asyncConnect(<span class="hljs-string">&quot;地址6&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>    <span class="hljs-keyword">return</span> asyncConnect(<span class="hljs-string">&quot;地址7&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to do something</span><br>  &#125;);<br></code></pre></td></tr></table></figure><p>如果使用<code>ES7</code>的<code>async</code>和<code>await</code>，代码会更加优雅，消除了回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步任务：依次发送7次网络请求，拿到服务器数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doRequest</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> resp1 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址1&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>  <span class="hljs-keyword">var</span> resp2 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址2&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>  <span class="hljs-keyword">var</span> resp3 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址3&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>  <span class="hljs-keyword">var</span> resp4 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址4&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>  <span class="hljs-keyword">var</span> resp5 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址5&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>  <span class="hljs-keyword">var</span> resp6 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址6&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>  <span class="hljs-keyword">var</span> resp7 = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;地址7&quot;</span>);<br>  <span class="hljs-comment">// to do something</span><br>&#125;<br></code></pre></td></tr></table></figure><p>简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncConnect</span>(<span class="hljs-params">url</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      resolve(<span class="hljs-built_in">Math</span>.random());<br>    &#125;, <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">3000</span>));<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doRequest</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> urls = [<span class="hljs-string">&quot;地址1&quot;</span>, <span class="hljs-string">&quot;地址2&quot;</span>, <span class="hljs-string">&quot;地址3&quot;</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> url <span class="hljs-keyword">of</span> urls) &#123;<br>    <span class="hljs-keyword">var</span> resp = <span class="hljs-keyword">await</span> asyncConnect(url);<br>    <span class="hljs-built_in">console</span>.log(resp);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快手试题"><a href="#快手试题" class="headerlink" title="快手试题"></a>快手试题</h2><ol><li>下面的代码输出什么</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a;<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(); <span class="hljs-comment">//1000ms后推向成功</span><br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise3&quot;</span>);<br>  &#125;)<br>  .then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise4&quot;</span>);<br>  &#125;);<br>a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>  <span class="hljs-keyword">await</span> b; <span class="hljs-comment">//等待b，a的赋值不会被卡住  这个代码相当于b.then(()=&gt;&#123;下面一驼&#125;)，后面变成异步了</span><br>  <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//pending等待着</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;after1&quot;</span>);<br>  <span class="hljs-keyword">await</span> a;<br>  resolve(<span class="hljs-literal">true</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;after2&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;end&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">a undefined</span><br><span class="hljs-comment">b 是所有then调用完返回的Promise .promise234放入微队列，b是pending</span><br><span class="hljs-comment">开始a赋值，因为赋值给a的Promise还没运行，输出a:undefined,等待b，a运行结束.此时a变成Promise:pending</span><br><span class="hljs-comment">输出end, 输出微队列内容，promise234, b完成，a里面的await结束了，输出a，a还是pending,后after1, a永远完不成了（因为要等a完成后才能完成的悖论）</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol start="2"><li>下面的代码输出什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>);<br>  <span class="hljs-keyword">await</span> async2();<span class="hljs-comment">//等待</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>);<span class="hljs-comment">//进入微队列</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//有async 返回的一定是promsie</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 两个函数没有执行先不看</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>)<br><br>async1();<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>);<br>  resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>);<br>Script start<br>Async1 start<br>Async2<br>Promise1<br>Script end<br><br>宏队列：<span class="hljs-built_in">setTimeout</span><br>微队列：async1end promise2<br></code></pre></td></tr></table></figure><p>高仿 setTimeout</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      resolve();<br>    &#125;, duration);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">await</span> delay(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">await</span> delay(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>高仿 setInterval</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      resolve();<br>    &#125;, duration);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">await</span> delay(<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">console</span>.log(count++);<br>  &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  resolve(<span class="hljs-string">&quot;a&quot;</span>);<br>  resolve(<span class="hljs-string">&quot;b&quot;</span>);<br>  reject(<span class="hljs-string">&quot;c&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;);<br>promise.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">resean</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;<br>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">var</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  resolve(<span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// 相当于  reject(5)， 但是throw会中断当前函数的执行</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br><br>pro.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2020/04/01/ES6/"/>
    <url>/2020/04/01/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><ol><li>ECMAScript、JavaScript、NodeJs，它们的区别是什么？<br>ECMAScript：简称 ES，是一个语言标准（循环、判断、变量、数组等数据类型）<br>JavaScript：运行在浏览器端的语言，该语言使用 ES 标准。 ES + web api = JavaScript<br>NodeJs：运行在服务器端的语言，该语言使用 ES 标准。 ES + node api = JavaScript<br>无论 JavaScript，还是 NodeJs，它们都是 ES 的超集（super set 即包含但是还有自己的东西）</li><li>ECMAScript 有哪些关键的版本？<br>ES3.0： 1999<br>ES5.0: 2009<br>ES6.0: 2015, 从该版本开始，不再使用数字作为编号，而使用年份<br>ES7.0: 2016</li><li>为什么 ES6 如此重要？<br>ES6 解决 JS 无法开发大型应用的语言层面的问题。</li><li>如何应对兼容性问题？</li></ol><h1 id="2-块级绑定"><a href="#2-块级绑定" class="headerlink" title="2.块级绑定"></a>2.块级绑定</h1><h2 id="2-1-声明变量的问题"><a href="#2-1-声明变量的问题" class="headerlink" title="2-1 声明变量的问题"></a>2-1 声明变量的问题</h2><p>使用 var 声明变量</p><ol><li>允许重复的变量声明：导致数据被覆盖</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-comment">//假设这里有一千行代码</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>print();<br></code></pre></td></tr></table></figure><ol start="2"><li>变量提升：怪异的数据访问、闭包问题<br>怪异数据访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;abc&quot;</span>;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;divButtons&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;button&quot;</span>);<br>  btn.innerHTML = <span class="hljs-string">&quot;按钮&quot;</span> + i;<br>  div.appendChild(btn);<br>  btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//输出11</span><br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 循环结束后，i：11</span><br></code></pre></td></tr></table></figure><p>解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;divButtons&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;button&quot;</span>);<br>  btn.innerHTML = <span class="hljs-string">&quot;按钮&quot;</span> + i;<br>  div.appendChild(btn);<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;<br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//输出11</span><br>    &#125;;<br>  &#125;)(i);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>全局变量挂载到全局对象：全局对象成员污染问题，即容易覆盖 window 已有成员</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abc = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.abc);<br><span class="hljs-comment">// var console = &quot;abc&quot;;</span><br><span class="hljs-comment">// console.log(console)</span><br><span class="hljs-comment">// var name = &quot;abc&quot;;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-使用-let-声明变量"><a href="#2-2-使用-let-声明变量" class="headerlink" title="2-2 使用 let 声明变量"></a>2-2 使用 let 声明变量</h2><p>ES6 不仅引入 let 关键字用于解决变量声明的问题，同时引入了块级作用域的概念<br>块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域<br>声明变量的问题</p><ol><li>全局变量挂载到全局对象：全局对象成员污染问题<br>let 声明的变量不会挂载到全局对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a);<br></code></pre></td></tr></table></figure><ol start="2"><li>允许重复的变量声明：导致数据被覆盖<br>let 声明的变量，不允许当前作用域范围内重复声明</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">345</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>允许在不同作用域使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">46</span>;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><ol start="4"><li>变量提升：怪异的数据访问、闭包问题<br>使用 let 不会有变量提升，因此，不能在定义 let 变量之前使用它</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>底层实现上，let 声明的变量实际上也会有提升，但是，提升后会将其放入到“暂时性死区”，如果访问的变量位于暂时性死区，则会报错：“Cannot access ‘a’ before initialization”。当代码运行到该变量的声明语句时，会将其从暂时性死区中移除。<br>在循环中，用 let 声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环，使用的是一个全新的循环变量）<br>在循环中使用 let 声明的循环变量，在循环结束后会销毁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;divButtons&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> button = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;button&quot;</span>);<br>  button.innerHTML = <span class="hljs-string">&quot;按钮&quot;</span> + i;<br>  button.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//使用的是当前作用域中的i</span><br>  &#125;;<br>  div.appendChild(button);<br>&#125;<br></code></pre></td></tr></table></figure><p>块级作用域演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">//全局作用域定义a</span><br>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">456</span>; <span class="hljs-comment">//块级作用域定义a</span><br>  <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//使用的是块级作用域中的a</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-comment">//在块级作用域中用let定义的变量，在作用域外不能访问。(里面能用外面,外面不能用里面)</span><br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">//定义在当前块级作用域</span><br>  <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//当前块级作用域中的a</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">//这是另外一个块级作用域，该作用域中找不到a</span><br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//外面不能访问里面</span><br></code></pre></td></tr></table></figure><h2 id="2-3-使用-const-声明变量"><a href="#2-3-使用-const-声明变量" class="headerlink" title="2-3 使用 const 声明变量"></a>2-3 使用 const 声明变量</h2><p>const 和 let 完全相同，仅在于用 const 声明的变量，必须在声明时赋值，而且不可以重新赋值(赋相同的值也不行),即常量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br>a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>实际上，在开发中，应该尽量使用 const 来声明变量，以保证变量的值不会随意篡改，原因如下：</p><ol><li>根据经验，开发中的很多变量，都是不会更改，也不应该更改的。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;game&quot;</span>);<br><span class="hljs-comment">//一般来说，div 变量是不会更改的</span><br></code></pre></td></tr></table></figure><ol start="2"><li>后续的很多框架或者是第三方 JS 库，都要求数据不可变，使用常量可以一定程度上保证这一点。</li></ol><p>注意的细节：</p><ol><li>常量不可变，是指声明的常量的内存空间不可变，并不保证内存空间中的地址指向的其他空间不可变。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">123</span>,<br>&#125;;<br>a.name = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-comment">//a 不能变，a 里面能变</span><br></code></pre></td></tr></table></figure><ol start="2"><li>常量的命名 1.特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率、月地距地或其他一些绝不可能变化的配置。通常，该常量的名称<strong>全部使用大写</strong>，多个单词之间用下划线分割</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">const</span> MOON_EARTH_DISTANCE = <span class="hljs-number">3245563424</span>; <span class="hljs-comment">//月地距离</span><br></code></pre></td></tr></table></figure><ol><li>普通的常量：使用和之前一样的命名即可</li><li>在 for 循环中，循环变量不可以使用常量,for in 循环可以用常量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;fzq&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-built_in">console</span>.log(prop);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-字符串和正则表达式"><a href="#3-字符串和正则表达式" class="headerlink" title="3.字符串和正则表达式"></a>3.字符串和正则表达式</h1><h2 id="3-1-更好的-Unicode-支持"><a href="#3-1-更好的-Unicode-支持" class="headerlink" title="3-1 更好的 Unicode 支持"></a>3-1 更好的 Unicode 支持</h2><p>早期，由于存储空间宝贵，Unicode 使用 16 位二进制来存储文字。我们将一个 16 位的二进制编码叫做一个码元（Code Unit）。<br>后来，由于技术的发展，Unicode 对文字编码进行了扩展，将某些文字扩展到了 32 位（占用两个码元），并且，将某个文字对应的二进制数字叫做码点（Code Point）。<br>ES6 为了解决这个困扰，为字符串提供了方法：codePointAt，根据字符串码元的位置得到其码点。<br>同时，ES6 为正则表达式添加了一个 flag: u，如果添加了该配置，则匹配时，使用码点匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&quot;𠮷&quot;</span>; <span class="hljs-comment">//占用了2个码元（32位）</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;字符串长度：&quot;</span>, text.length); <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;使用正则测试：&quot;</span>, <span class="hljs-regexp">/^.$/</span>.test(text)); <span class="hljs-comment">//false正则不能匹配</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;使用正则测试：&quot;</span>, <span class="hljs-regexp">/^.$/u</span>.test(text)); <span class="hljs-comment">//true匹配码点</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;得到第一个码元：&quot;</span>, text.charCodeAt(<span class="hljs-number">0</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;得到第二个码元：&quot;</span>, text.charCodeAt(<span class="hljs-number">1</span>));<br><br><span class="hljs-comment">//𠮷：\ud842\udfb7</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;得到第一个码点：&quot;</span>, text.codePointAt(<span class="hljs-number">0</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;得到第二个码点：&quot;</span>, text.codePointAt(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>判断字符串 char，是 32 位，还是 16 位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is32bit</span>(<span class="hljs-params">char, i</span>) </span>&#123;<br>  <span class="hljs-comment">//如果码点大于了16位二进制的最大值，则其是32位的</span><br>  <span class="hljs-keyword">return</span> char.codePointAt(i) &gt; <span class="hljs-number">0xffff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到一个字符串码点的真实长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLengthOfCodePoint</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    <span class="hljs-comment">//i在索引码元</span><br>    <span class="hljs-keyword">if</span> (is32bit(str, i)) &#123;<br>      <span class="hljs-comment">//当前字符串，在i这个位置，占用了两个码元</span><br>      i++;<br>    &#125;<br>    len++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> len;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;𠮷是否是32位的：&quot;</span>, is32bit(<span class="hljs-string">&quot;𠮷&quot;</span>, <span class="hljs-number">0</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ab𠮷ab的码点长度：&quot;</span>, getLengthOfCodePoint(<span class="hljs-string">&quot;ab𠮷ab&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="3-2-更多的字符串-API"><a href="#3-2-更多的字符串-API" class="headerlink" title="3-2 更多的字符串 API"></a>3-2 更多的字符串 API</h2><p>以下均为字符串的实例（原型）方法<br>includes 判断字符串中是否包含指定的子字符串<br>startsWith 判断字符串中是否以指定的字符串开始<br>endsWith 判断字符串中是否以指定的字符串结尾<br>repeat 将字符串重复指定的次数，然后返回一个新字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&quot;成哥是狠人&quot;</span>;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;是否包含“狠”：&quot;</span>, text.includes(<span class="hljs-string">&quot;狠&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;是否包含“狠”：&quot;</span>, text.includes(<span class="hljs-string">&quot;狠&quot;</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">//下标3开始查找</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;是否以“成哥”开头：&quot;</span>, text.startsWith(<span class="hljs-string">&quot;成哥&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;是否以“狠人”结尾：&quot;</span>, text.endsWith(<span class="hljs-string">&quot;狠人&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;重复4次：&quot;</span>, text.repeat(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h2 id="3-3【拓展】-正则中的粘连标记"><a href="#3-3【拓展】-正则中的粘连标记" class="headerlink" title="3-3【拓展】 正则中的粘连标记"></a>3-3【拓展】 正则中的粘连标记</h2><p>标记名：y<br>含义：匹配时，完全按照正则对象中的 lastIndex 位置开始匹配，并且匹配的位置必须在 lastIndex 位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&quot;Hello World!!!&quot;</span>;<br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/W\w+/y</span>; <span class="hljs-comment">//W开头，任意单词字符一次或多次</span><br>reg.lastIndex = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;reg.lastIndex:&quot;</span>, reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.test(text));<br></code></pre></td></tr></table></figure><h2 id="3-4-模板字符串"><a href="#3-4-模板字符串" class="headerlink" title="3-4 模板字符串"></a>3-4 模板字符串</h2><p>ES6 之前处理字符串繁琐的两个方面：</p><ol><li>多行字符串</li></ol><p>写法一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test =<br>  <span class="hljs-string">&quot;邓哥喜欢秋葵\</span><br><span class="hljs-string">邓哥也喜欢韭菜&quot;</span>;<br></code></pre></td></tr></table></figure><p>写法二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test = [<span class="hljs-string">&quot;邓哥喜欢秋葵&quot;</span>, <span class="hljs-string">&quot;邓哥也喜欢韭菜&quot;</span>].join(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上，多行字符串的处理比较繁琐</p><ol start="2"><li>字符串拼接</li></ol><p>在 ES6 中，提供了<strong>模板字符串</strong>的书写，可以非常方便的换行和拼接，要做的，仅仅是将字符串的开始或结尾改为 `符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test = <span class="hljs-string">`邓哥喜欢秋葵</span><br><span class="hljs-string">邓哥喜欢韭菜`</span>;<br></code></pre></td></tr></table></figure><p>如果要在字符串中拼接 js 表达式，只需要在模板字符串中使用`${JS 表达式}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> love1 = <span class="hljs-string">&quot;秋葵&quot;</span>;<br><span class="hljs-keyword">var</span> love2 = <span class="hljs-string">&quot;香菜&quot;</span>;<br><span class="hljs-keyword">var</span> text = <span class="hljs-string">`邓哥喜欢<span class="hljs-subst">$&#123;love1&#125;</span></span><br><span class="hljs-string">邓哥也喜欢<span class="hljs-subst">$&#123;love2&#125;</span></span><br><span class="hljs-string">表达式可以是任何有意义的数据<span class="hljs-subst">$&#123;<span class="hljs-number">1</span> + (<span class="hljs-number">3</span> * <span class="hljs-number">2</span>) / <span class="hljs-number">0.5</span>&#125;</span></span><br><span class="hljs-string">表达式是可以嵌套的：<span class="hljs-subst">$&#123;<span class="hljs-string">`表达式中的模板字符串<span class="hljs-subst">$&#123;love1 + love2&#125;</span>`</span>&#125;</span></span><br><span class="hljs-string">\n\n</span><br><span class="hljs-string">奥布瓦的发顺丰</span><br><span class="hljs-string">在模板字符串中使用\$&#123; JS表达式 &#125; 可以进行插值</span><br><span class="hljs-string">`</span>;<br><span class="hljs-built_in">console</span>.log(text);<br></code></pre></td></tr></table></figure><h2 id="3-5【拓展】模板字符串标记"><a href="#3-5【拓展】模板字符串标记" class="headerlink" title="3-5【拓展】模板字符串标记"></a>3-5【拓展】模板字符串标记</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> love1 = <span class="hljs-string">&quot;秋葵&quot;</span>;<br><span class="hljs-keyword">var</span> love2 = <span class="hljs-string">&quot;香菜&quot;</span>;<br><span class="hljs-keyword">var</span> text = myTag<span class="hljs-string">`邓哥喜欢<span class="hljs-subst">$&#123;love1&#125;</span>，邓哥也喜欢<span class="hljs-subst">$&#123;love2&#125;</span>。`</span>;<br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">text = myTag([<span class="hljs-string">&quot;邓哥喜欢&quot;</span>, <span class="hljs-string">&quot;，邓哥也喜欢&quot;</span>, <span class="hljs-string">&quot;。&quot;</span>], <span class="hljs-string">&quot;秋葵&quot;</span>, <span class="hljs-string">&quot;香菜&quot;</span>);<br></code></pre></td></tr></table></figure><p>模拟模板字符串功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">function myTag(parts) &#123;<br>    const values = Array.prototype.slice.apply(arguments).slice(1);<br>    // parts.length = value.length + 1<br>    let str = &quot;&quot;;<br>    for (let i = 0; i &lt; values.length; i++) &#123;<br>        str += `$&#123;parts[i]&#125;：$&#123;values[i]&#125;`;<br>        if (i === values.length - 1) &#123;<br>            str += parts[i + 1];<br>        &#125;<br>    &#125;<br>    return str;<br>&#125;<br>console.log(text);<br></code></pre></td></tr></table></figure><p>String.raw</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">var text = String.raw`abc\t\nbcd`;//告诉他没有特殊字符，完全打印<br>console.log(text);<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>多行文本框<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>设置div的内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> txt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;txt&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">      btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        container.innerHTML = safe<span class="hljs-string">`&lt;p&gt;</span></span><br><span class="hljs-string"><span class="javascript"><span class="hljs-subst">$&#123;txt.value&#125;</span></span></span><br><span class="hljs-string"><span class="javascript">&lt;!--这里的safe是为了防止用户传入恶意的代码--&gt;</span></span><br><span class="hljs-string"><span class="javascript">            &lt;/p&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;h1&gt;</span></span><br><span class="hljs-string"><span class="javascript"><span class="hljs-subst">$&#123;txt.value&#125;</span></span></span><br><span class="hljs-string"><span class="javascript">            &lt;/h1&gt;</span></span><br><span class="hljs-string"><span class="javascript">`</span>;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params">parts</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> values = <span class="hljs-built_in">Array</span>.prototype.slice.apply(<span class="hljs-built_in">arguments</span>).slice(<span class="hljs-number">1</span>);</span><br><span class="javascript">        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> v = values[i].replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&quot;&amp;lt;&quot;</span>).replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&quot;&amp;gt;&quot;</span>);</span><br><span class="javascript">          str += parts[i] + v;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (i === values.length - <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">            str += parts[i + <span class="hljs-number">1</span>];</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> str;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结</p><p>在模板字符串书写之前，可以加上标记:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">标记名`模板字符串`;<br></code></pre></td></tr></table></figure><p>标记是一个函数，函数参数如下：</p><ol><li>参数 1：被插值分割的字符串数组</li><li>后续参数：所有的插值</li></ol><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h1><h2 id="4-1-参数默认值"><a href="#4-1-参数默认值" class="headerlink" title="4-1 参数默认值"></a>4-1 参数默认值</h2><p>使用<br>原来的写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">function sum()&#123;<br>    b = b === undefined &amp;&amp; 1;<br>    c = c === undefined &amp;&amp; 2;<br>    return a+b+c;<br>&#125;<br>console.log(sum(10));<br></code></pre></td></tr></table></figure><p>在书写形参时，直接给形参赋值，附的值即为默认值</p><p>这样一来，当调用函数时，如果没有给对应的参数赋值（给它的值是 undefined），则会自动使用默认值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">function sum(a,b=1,c=2)&#123;<br>    return a+b+c;<br>&#125;<br>console.log(sum(10));//相当于console.log(sum(10,undefined,undefined))<br>console.log(sum(11,null,undefined));//就不对了，null为0<br>console.log(sum(1,undefined,5))//1+1+5=7<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 面试题<br>function getContainer() &#123;<br>    console.log(&quot;abc&quot;);//问abc运行几次-------------------2次，因为两次都用了默认值<br>    return document.getElementById(&quot;container&quot;);<br>&#125;<br><br>/**<br> * 创建一个元素<br> * @param &#123;*&#125; name 元素的名称<br> * @param &#123;*&#125; container 元素的父元素<br> * @param &#123;*&#125; content 元素的内容<br> */<br>function createElement(name = &quot;div&quot;, container = getContainer(), content = &quot;&quot;) &#123;<br>    const ele = document.createElement(name)<br>    if (content) &#123;<br>        ele.innerHTML = content;<br>    &#125;<br>    container.appendChild(ele);<br>&#125;<br>createElement(undefined, undefined, &quot;手动阀手动阀十分&quot;)//调用一次<br>createElement(undefined, undefined, &quot;234242342424&quot;)//调用一次<br>createElement(undefined, document.getElementById(&quot;container&quot;), &quot;234242342424&quot;)//传值了，不调用了<br></code></pre></td></tr></table></figure><p>[扩展]对 arguments 的影响<br>只要给函数加上参数默认值，该函数会自动变量<strong>严格模式下的规则：arguments 和形参脱离</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">function test(a, b) &#123;<br>console.log(&quot;arugments&quot;, arguments[0], arguments[1]);//两个形参 1 2<br>console.log(&quot;a:&quot;, a, &quot;b:&quot;, b);//1 2<br>a = 3;<br>console.log(&quot;arugments&quot;, arguments[0], arguments[1]);// 3 2<br>console.log(&quot;a:&quot;, a, &quot;b:&quot;, b);// 3 2<br>&#125;<br>test(1, 2);<br>// 当加上参数默认值<br>function test(a, b=1) &#123;<br>console.log(&quot;arugments&quot;, arguments[0], arguments[1]);//两个形参 1 2<br>console.log(&quot;a:&quot;, a, &quot;b:&quot;, b);//1 2<br>a = 3;<br>console.log(&quot;arugments&quot;, arguments[0], arguments[1]);// 3 2<br>console.log(&quot;a:&quot;, a, &quot;b:&quot;, b);// 3 2<br>&#125;<br>test(1, 2);<br></code></pre></td></tr></table></figure><p>[扩展]留意暂时性死区</p><p>形参和 ES6 中的 let 或 const 声明一样，具有作用域，并且根据参数的声明顺序，存在暂时性死区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">function test(a, b=a) &#123;<br>    console.log(a, b);//都有值，不会用参数默认值，1,2<br>&#125;<br>test(1, 2);<br><br>function test(a, b=a) &#123;<br>    console.log(a, b);//参数默认值：1,1<br>&#125;<br>test(1);<br><br>function test(a = b, b) &#123;<br>    console.log(a, b);/没有使用参数默认值：1,2<br>&#125;<br>test(1, 2);<br><br>function test(a = b, b) &#123;<br>    console.log(a, b);//Cannot access &#x27;b&#x27; before initialization<br>&#125;<br>test(undefined, 2);<br></code></pre></td></tr></table></figure><h2 id="4-2-剩余参数"><a href="#4-2-剩余参数" class="headerlink" title="4-2 剩余参数"></a>4-2 剩余参数</h2><p>旧方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">function sum(args)&#123;<br>    let sum = 0;<br>    for(let i = 0; i &lt; args.length; i++)&#123;<br>        sum += args[i];<br>    &#125;<br>    return sum;<br>&#125;<br>console.log(sum([1]));//必须传数组<br></code></pre></td></tr></table></figure><p>升级</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    sum += <span class="hljs-built_in">arguments</span>[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>)); <span class="hljs-comment">//必须传数组</span><br></code></pre></td></tr></table></figure><p>arguments 的缺陷：</p><ol><li>如果和形参配合使用，容易导致混乱</li><li>从语义上，使用 arguments 获取参数，由于形参缺失，无法从函数定义上理解函数的真实意图</li></ol><p>ES6 的剩余参数专门用于收集末尾的所有参数，将其放置到一个形参数组中。</p><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...形参名</span>)</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>细节</strong></p><ol><li>一个函数，仅能出现一个剩余参数</li><li>一个函数，如果有剩余参数，剩余参数必须是最后一个参数</li></ol><p>演示 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>  <span class="hljs-comment">//args收集了所有的参数，形成的一个数组</span><br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>    sum += args[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-built_in">console</span>.log(sum());<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>));<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><p>演示 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">...args1, ...args2</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(args1)<br>    <span class="hljs-built_in">console</span>.log(args2)<br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">46</span>, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>);<br></code></pre></td></tr></table></figure><p>演示 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b, ...args</span>) </span>&#123;&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">46</span>, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>);<br></code></pre></td></tr></table></figure><h2 id="4-3-展开运算符"><a href="#4-3-展开运算符" class="headerlink" title="4-3 展开运算符"></a>4-3 展开运算符</h2><p>使用方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">...要展开的东西<br></code></pre></td></tr></table></figure><p>对所有数字求和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>    sum += args[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取一个指定长度的随机数组成的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomNumbers</span>(<span class="hljs-params">length</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    arr.push(<span class="hljs-built_in">Math</span>.random());<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">const</span> numbers = getRandomNumbers(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//希望将数组的每一项展开，依次作为参数传递，而不是把整个数组作为一个参数传递</span><br><span class="hljs-comment">// 这就要用到展开运算符</span><br><span class="hljs-comment">// sum(numbers) 这是传了一个参数</span><br><span class="hljs-built_in">console</span>.log(sum(...numbers)); <span class="hljs-comment">//相当于传递了10个参数</span><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, ...numbers, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><p>展开数组：克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">3</span>, <span class="hljs-number">67</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//克隆arr1数组到arr2</span><br><br><span class="hljs-comment">// const arr2 = [0, ...arr1, 1];相加别的数</span><br><span class="hljs-keyword">const</span> arr2 = [...arr1];<br><br><span class="hljs-built_in">console</span>.log(arr2, arr1 === arr2); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>展开对象：浅克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;成哥&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">love</span>: <span class="hljs-string">&quot;邓嫂&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">country</span>: <span class="hljs-string">&quot;中国&quot;</span>,<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;黑龙江&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;哈尔滨&quot;</span>,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 浅克隆到obj2</span><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  ...obj1,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;邓哥&quot;</span>, <span class="hljs-comment">//邓哥可以覆盖</span><br>&#125;;<br><span class="hljs-built_in">console</span>.log(obj2);<br><span class="hljs-built_in">console</span>.log(obj1.address === obj2.address); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>深克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;成哥&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">loves</span>: [<span class="hljs-string">&quot;邓嫂&quot;</span>, <span class="hljs-string">&quot;成嫂1&quot;</span>, <span class="hljs-string">&quot;成嫂2&quot;</span>],<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">country</span>: <span class="hljs-string">&quot;中国&quot;</span>,<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;黑龙江&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;哈尔滨&quot;</span>,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 深克隆到obj2</span><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  ...obj1,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;邓哥&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-comment">//address深克隆</span><br>    ...obj1.address,<br>  &#125;,<br>  <span class="hljs-attr">loves</span>: [...obj1.loves, <span class="hljs-string">&quot;成嫂3&quot;</span>], <span class="hljs-comment">//浅克隆</span><br>&#125;;<br><span class="hljs-built_in">console</span>.log(obj2);<br><span class="hljs-built_in">console</span>.log(obj1.loves === obj2.loves);<br><span class="hljs-built_in">console</span>.log(obj1.address === obj2.address);<br></code></pre></td></tr></table></figure><h2 id="4-4-剩余参数和展开运算符练习"><a href="#4-4-剩余参数和展开运算符练习" class="headerlink" title="4-4 剩余参数和展开运算符练习"></a>4-4 剩余参数和展开运算符练习</h2><p>maxmin</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>计算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>最大值：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;spanmax&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>最小值：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;spanmin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValues</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">const</span> numbers = [];</span><br><span class="javascript">            <span class="hljs-keyword">const</span> inps = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;input&quot;</span>)</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; inps.length; i++) &#123;</span><br><span class="javascript">                numbers.push(+inps[i].value)<span class="hljs-comment">//+表示转换成数字</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> numbers;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>)</span><br><span class="javascript"></span><br><span class="javascript">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">const</span> numbers = getValues(); <span class="hljs-comment">//得到文本框中的所有数字形成的数组</span></span><br><span class="javascript">            spanmax.innerText = <span class="hljs-built_in">Math</span>.max(...numbers)</span><br><span class="javascript">            spanmin.innerText = <span class="hljs-built_in">Math</span>.min(...numbers)</span><br><span class="javascript">            <span class="hljs-comment">//老方法spanmax.innerText =Math.max.apply(null,numbers);this绑定null</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>curry</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal</span>(<span class="hljs-params">a, b, c, d</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> a + b * c - d;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-comment">//curry：柯里化，用户固定某个函数的前面的参数，得到一个新的函数，新的函数调用时，接收剩余的参数</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">func, ...args</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//后面不管几个</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...subArgs</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">//新的函数也不知道几个</span></span><br><span class="javascript">          <span class="hljs-keyword">const</span> allArgs = [...args, ...subArgs];</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (allArgs.length &gt;= func.length) &#123;</span><br><span class="javascript">            <span class="hljs-comment">//参数够了</span></span><br><span class="javascript">            <span class="hljs-keyword">return</span> func(...allArgs);</span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">//参数不够，继续固定</span></span><br><span class="javascript">            <span class="hljs-keyword">return</span> curry(func, ...allArgs);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> newCal = curry(cal, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(newCal(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// 1+2*3-4</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(newCal(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// 1+2*4-5</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(newCal(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)); <span class="hljs-comment">// 1+2*5-6</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(newCal(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>)); <span class="hljs-comment">// 1+2*6-7</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> newCal2 = newCal(<span class="hljs-number">8</span>);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(newCal2(<span class="hljs-number">9</span>)); <span class="hljs-comment">// 1+2*8-9</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a, b, c);<br>&#125;<br>test(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>);<br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&quot;asf&quot;</span>, <span class="hljs-string">&quot;Gfh&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>];<br><span class="hljs-comment">//以前apply</span><br>test(...arr);<br></code></pre></td></tr></table></figure><h2 id="4-5-明确函数的双重用途"><a href="#4-5-明确函数的双重用途" class="headerlink" title="4-5 明确函数的双重用途"></a>4-5 明确函数的双重用途</h2><p>ES6 提供了一个特殊的 API，可以使用该 API 在函数内部，判断该函数是否使用了 new 来调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span>.target<br><span class="hljs-comment">//该表达式，得到的是：如果没有使用new来调用函数，则返回undefined</span><br><span class="hljs-comment">//如果使用new调用函数，则得到的是new关键字后面的函数本身</span><br></code></pre></td></tr></table></figure><p>普通函数与构造函数的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">firstName, lastName</span>) </span>&#123;<br>  <span class="hljs-comment">// 判断是否是使用new的方式来调用的函数</span><br>  <span class="hljs-comment">// 过去的判断方式</span><br>  <span class="hljs-comment">// if (!(this instanceof Person)) &#123;</span><br>  <span class="hljs-comment">//     throw new Error(&quot;该函数没有使用new来调用&quot;)</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span>.target === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;该函数没有使用new来调用&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">this</span>.firstName = firstName;<br>  <span class="hljs-built_in">this</span>.lastName = lastName;<br>  <span class="hljs-built_in">this</span>.fullName = <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName&#125;</span> <span class="hljs-subst">$&#123;lastName&#125;</span>`</span>;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;袁&quot;</span>, <span class="hljs-string">&quot;进&quot;</span>); <span class="hljs-comment">//构造函数 有效</span><br><span class="hljs-built_in">console</span>.log(p1);<br><br><span class="hljs-keyword">const</span> p2 = Person(<span class="hljs-string">&quot;袁&quot;</span>, <span class="hljs-string">&quot;进&quot;</span>); <span class="hljs-comment">//直接调用 无效</span><br><span class="hljs-built_in">console</span>.log(p2);<br><span class="hljs-comment">// 强行绑定this会绕开过去的判断方式</span><br><span class="hljs-keyword">const</span> p3 = Person.call(p1, <span class="hljs-string">&quot;袁&quot;</span>, <span class="hljs-string">&quot;进&quot;</span>);<br><span class="hljs-built_in">console</span>.log(p3);<br></code></pre></td></tr></table></figure><h2 id="4-6-箭头函数"><a href="#4-6-箭头函数" class="headerlink" title="4-6 箭头函数"></a>4-6 箭头函数</h2><p>回顾：this 指向</p><ol><li>通过对象调用函数，this 指向对象</li><li>直接调用函数，this 指向全局对象</li><li>如果通过 new 调用函数，this 指向新创建的对象</li><li>如果通过 apply、call、bind 调用函数，this 指向指定的数据</li><li>如果是 DOM 事件函数，this 指向事件源</li></ol><p>常见问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">      <span class="hljs-attr">start</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// obj调用的，所以this-&gt;obj</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<span class="hljs-comment">// obj对象，这里this没问题</span></span><br><span class="javascript">        <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//这里的this出了问题，JS引擎内部调用，直接调用的，this全局window</span></span><br><span class="javascript">          <span class="hljs-comment">// this.count++;undefined++==NAN</span></span><br><span class="javascript">          <span class="hljs-comment">// console.log(this.count);</span></span><br><span class="javascript">        &#125;,<span class="hljs-number">1000</span>)</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">regEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<span class="hljs-comment">//事件，this指向事件源window</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    obj.start();</span><br><span class="javascript">    obj.regEvent();</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决方案：闭包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="javascript">            <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">            <span class="hljs-attr">start</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// this-&gt;obj</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">                <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">                    _this.count++;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(_this.count);</span><br><span class="javascript">                &#125;,<span class="hljs-number">1000</span>)</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">regEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">                <span class="hljs-built_in">window</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(_this.count);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">        &#125;</span><br><span class="javascript">        obj.start();</span><br><span class="javascript">        obj.regEvent();</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用语法</p><p>箭头函数是一个<strong>函数表达式</strong>，理论上，任何使用函数表达式的场景都可以使用箭头函数</p><p>完整语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, ...)=&gt;&#123;<br>    <span class="hljs-comment">//函数体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码简化成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">start</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.count++;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;,<br>  <span class="hljs-attr">regEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.onclick = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">print</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// obj.start();</span><br><span class="hljs-comment">// obj.regEvent();</span><br>obj.print();<br><span class="hljs-comment">//不过，问题也随之解决了</span><br><span class="hljs-comment">//原因：箭头函数的函数体中的 this，取决于箭头函数定义的位置的 this 指向，而与如何调用无关</span><br></code></pre></td></tr></table></figure><p>如果参数只有一个，可以省略小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(参数) =&gt; &#123;&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> print = <span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;给我的数字是：&quot;</span>, num);<br>&#125;;<br>print(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>如果箭头函数只有一条返回语句，可以省略大括号，和 return 关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(参数) =&gt; 返回值;<br></code></pre></td></tr></table></figure><blockquote><p>判断一个数是不是奇数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> isOdd = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> isOdd = <span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> isOdd = <span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">console</span>.log(isOdd(<span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(isOdd(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><p>注意细节</p><p>-箭头函数的函数体中的 this，<strong>取决于箭头函数定义的位置的 this 指向</strong>，而与如何调用无关</p><ul><li>箭头函数中，不存在 this、arguments、new.target，如果使用了，则使用的是函数外层的对应的 this、arguments、new.target</li></ul><p>箭头函数没有原型，所以箭头函数不能作用构造函数使用</p><p>应用场景</p><ol><li>临时性使用的函数，并不会刻意调用它，比如：<ol><li>事件处理函数</li><li>异步处理函数(定时器函数)</li><li>其他临时性的函数</li></ol></li><li>为了绑定外层 this 的函数</li><li>在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数</li></ol><p>小现象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">print</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>  &#125;,<br>  <span class="hljs-comment">// 相当于</span><br>  <span class="hljs-comment">// print : this,</span><br>  <span class="hljs-comment">// this没有在函数里面，就是window;</span><br>&#125;;<br><span class="hljs-keyword">const</span> print = obj.print;<br>print(); <span class="hljs-comment">//window undefined</span><br></code></pre></td></tr></table></figure><p>箭头函数能解决吗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">print</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> print = obj.print;<br><span class="hljs-comment">// console.log(print());//还是undefined</span><br></code></pre></td></tr></table></figure><p>这种问题通常不解决，开发中都是遇到函数里面套函数出现 this 指向问题，没有这种问题</p><p><strong>对象的属性不用箭头函数</strong></p><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">a</span>: a,<br>    <span class="hljs-attr">b</span>: b,<br>    <span class="hljs-attr">sum</span>: a + b,<br>  &#125;;<br>&#125;;<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (&#123;<br>  <span class="hljs-attr">a</span>: a,<br>  <span class="hljs-attr">b</span>: b,<br>  <span class="hljs-attr">sum</span>: a + b,<br>&#125;);<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> func = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//window</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> func = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//自己没有this,只能从外面找，是window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//也没有arguments</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">method</span>: func,<br>&#125;;<br>obj.method(<span class="hljs-number">234</span>);<br></code></pre></td></tr></table></figure><p>演示：面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> func = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> func = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//箭头函数没有this，往外看，function的this，this由obj调用，就是obj</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//箭头函数没有arguments,往外看，传的是234</span><br>    &#125;;<br>    func();<br>  &#125;,<br>&#125;;<br>obj.method(<span class="hljs-number">234</span>);<br></code></pre></td></tr></table></figure><p>演示   在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">78</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">345</span>];<br><span class="hljs-comment">//以前的方法const result = numbers.map(function(num)&#123;return num*2&#125;)</span><br><span class="hljs-keyword">const</span> result = numbers<br>  .filter(<span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>)<br>  .map(<span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num * <span class="hljs-number">2</span>)<br>  .reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><h1 id="5-对象"><a href="#5-对象" class="headerlink" title="5.对象"></a>5.对象</h1><h2 id="5-1-新增的对象字面量语法"><a href="#5-1-新增的对象字面量语法" class="headerlink" title="5-1 新增的对象字面量语法"></a>5-1 新增的对象字面量语法</h2><ol><li>成员速写<br>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createUser</span>(<span class="hljs-params">loginId, loginPwd, nickName</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">loginId</span>: loginId,<br>    <span class="hljs-attr">loginPwd</span>: loginPwd,<br>    <span class="hljs-attr">nickName</span>: nickName,<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">Math</span>.random(),<br>  &#125;;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createUser(<span class="hljs-string">&quot;abc&quot;</span>), <span class="hljs-string">&quot;13&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br></code></pre></td></tr></table></figure><ol><li>成员速写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">function createUser(loginId, loginPwd, nickName)&#123; return &#123; loginId, loginPwd,<br>nickName, id : Math.random() &#125; &#125; console.log(createUser(&quot;abc&quot;),&quot;13&quot;,&quot;aaa&quot;)<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createUser</span>(<span class="hljs-params">loginId, loginPwd, nickName</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//这里不能用箭头函数，没有this，就调用外面的window了</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;loginId&quot;</span>, <span class="hljs-built_in">this</span>.loginId, <span class="hljs-string">&quot;nickname&quot;</span>, <span class="hljs-built_in">this</span>.nickName);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    loginId,<br>    loginPwd,<br>    nickName,<br>    sayHello,<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">Math</span>.random(),<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> u = createUser(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>u.sayHello();<br></code></pre></td></tr></table></figure><ol start="2"><li>方法速写<br>对象字面初始化时，方法可以省略冒号和 function 关键字</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;姬成&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">sayHello</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name, <span class="hljs-built_in">this</span>.age);<br>  &#125;,<br>&#125;;<br>user.sayHello();<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">const user = &#123; name: &quot;姬成&quot;, age: 100, sayHello()&#123; console.log(this.name,<br>this.age) &#125; &#125; user.sayHello();<br></code></pre></td></tr></table></figure><ol start="3"><li>计算属性名<br>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在 ES6，可以使用中括号来表示该属性名是通过计算得到的。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> prop1 = <span class="hljs-string">&quot;name2&quot;</span>;<br><span class="hljs-keyword">const</span> prop2 = <span class="hljs-string">&quot;age2&quot;</span>;<br><span class="hljs-keyword">const</span> prop3 = <span class="hljs-string">&quot;sayHello2&quot;</span>;<br><span class="hljs-comment">// 以前必须user[prop1] = &#x27;姬成&#x27;</span><br><span class="hljs-keyword">const</span> user = &#123;<br>  [prop1]: <span class="hljs-string">&quot;姬成&quot;</span>,<br>  [prop2]: <span class="hljs-number">100</span>,<br>  [prop3]() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>[prop1], <span class="hljs-built_in">this</span>[prop2]);<br>  &#125;,<br>&#125;;<br>user[prop3]();<br></code></pre></td></tr></table></figure><h2 id="5-2Object-的新增-API"><a href="#5-2Object-的新增-API" class="headerlink" title="5-2Object 的新增 API"></a>5-2Object 的新增 API</h2><blockquote><p>Object 是函数（构造函数）</p></blockquote><ol><li><p>Object.is<br>用于判断两个数据是否相等，基本上跟严格相等（===）是一致的，除了以下两点：</p><p>(1)NaN 和 NaN 相等<br>(2)+0 和-0 不相等</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log(NaN === NaN); // false console.log(+0 === -0); // true<br>console.log(Object.is(NaN, NaN))// true console.log(Object.is(+0, -0))// false<br></code></pre></td></tr></table></figure><ol start="2"><li>Object.assign 后面覆盖前面<br>用于混合对象</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">const obj1 = &#123; a: 123, b: 456, c: &quot;abc&quot; &#125; const obj2 = &#123; a: 789, d: &quot;kkk&quot; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">想这样</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    a: 789,</span><br><span class="hljs-comment">    b: 456,</span><br><span class="hljs-comment">    c: &quot;abc&quot;,</span><br><span class="hljs-comment">    d: &quot;kkk&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>ES7 做法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">const obj = &#123; ...obj1, ...obj2 //后面覆盖前面 &#125; console.log(obj);<br></code></pre></td></tr></table></figure><p>Object.assign 做法：</p><p>将 obj2 的数据，覆盖到 obj1，并且会对 obj1 产生改动，然后返回 obj1。对 obj1 改动了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">const obj = Object.assign(obj1, obj2);<br></code></pre></td></tr></table></figure><p>防止产生影响</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">const obj = Object.assign(&#123;&#125;, obj1, obj2);// 只改动了&#123;&#125;，没有改动obj1,obj2<br></code></pre></td></tr></table></figure><ol start="3"><li>Object.getOwnPropertyNames 的枚举顺序<br>Object.getOwnPropertyNames 方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。</li></ol><p>ES6 规定了该方法返回的数组的排序方式如下：<br>先排数字，并按照升序排序<br>再排其他，按照书写顺序排序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">const obj = &#123; d: 1, b: 2, a: 3, 0: 6, 5: 2, 4: 1 &#125; const props =<br>Object.getOwnPropertyNames(obj)//返回字符串数组 console.log(props)<br></code></pre></td></tr></table></figure><ol start="4"><li>Object.setPrototypeOf</li></ol><p>该函数用于设置某个对象的隐式原型<br>比如： Object.setPrototypeOf(obj1, obj2)，<br>相当于： <code>obj1.__proto__ = obj2</code><br>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><br><span class="hljs-comment">// obj1.__proto__ = obj2</span><br><br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj1, obj2);<br><br><span class="hljs-built_in">console</span>.log(obj1);<br></code></pre></td></tr></table></figure><h2 id="5-3-面向对象简介"><a href="#5-3-面向对象简介" class="headerlink" title="5-3 面向对象简介"></a>5-3 面向对象简介</h2><p>面向对象：一种编程思想，跟具体的语言<br>对比面向过程：</p><ul><li>面向过程：思考的切入点是功能的步骤</li><li>面向对象：思考的切入点是对象的划分<br>【大象装冰箱】<br>面向过程（小工程）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">//1. 冰箱门打开 function openFrige()&#123; &#125; openFrige(); //2. 大象装进去 function<br>elephantIn()&#123; &#125; elephantIn(); //3. 冰箱门关上 function closeFrige()&#123; &#125;<br>closeFrige();<br></code></pre></td></tr></table></figure><p>面向对象（大型工程）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">/** * 大象 */ function Elephant() &#123; &#125; /** * 冰箱 */ function Frige() &#123; &#125;<br>Frige.prototype.openDoor = function () &#123; &#125; Frige.prototype.closeDoor = function<br>() &#123; &#125; Frige.prototype.join = function(something)&#123; this.openDoor(); //装东西<br>this.closeDoor(); &#125; //1. 冰箱门打开 // var frig = new Frige(); //<br>frig.openDoor(); // //2. 大象装进去 // var ele = new Elephant(); //<br>frig.join(ele); // //3. 冰箱门关上 // frig.closeDoor(); var frig = new Frige();<br>frig.join(new Elephant());<br></code></pre></td></tr></table></figure><h2 id="5-4-类：构造函数的语法糖"><a href="#5-4-类：构造函数的语法糖" class="headerlink" title="5-4 类：构造函数的语法糖"></a>5-4 类：构造函数的语法糖</h2><p><strong>传统的构造函数的问题</strong></p><ol><li>属性和原型方法定义分离，降低了可读性</li><li>原型成员可以被枚举，但是不希望枚举</li><li>默认情况下，构造函数仍然可以被当作普通函数使用</li></ol><p>面向对象中，将下面对一个对象的所有成员的定义，统称为类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数  构造器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">type, name, age, sex</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.type = type;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>  <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-comment">// 中间存在1万行代码</span><br><span class="hljs-comment">//定义实例方法（原型方法）</span><br>Animal.prototype.print = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&quot;狗&quot;</span>, <span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>a.print();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> a) &#123;<br>  <span class="hljs-comment">//枚举</span><br>  <span class="hljs-built_in">console</span>.log(prop); <span class="hljs-comment">// 也把print（原型上的东西也遍历出来了，这是不希望的）</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类的特点</strong></p><ol><li>类声明不会被提升，与 let 和 const 一样，存在暂时性死区</li><li>类中的所有代码均在严格模式下执行</li><li>类的所有方法都是不可枚举的</li><li>类的所有方法都无法被当作构造函数使用</li><li>类的构造器必须使用 new 来调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, name, age, sex</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&quot;狗&quot;</span>, <span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><span class="hljs-keyword">const</span> a = Animal(<span class="hljs-string">&quot;狗&quot;</span>, <span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>); <span class="hljs-comment">//error不能当普通函数调用</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> a.print(); <span class="hljs-comment">//error   类的所有方法都无法被当作构造函数使用</span><br>a.print();<br><span class="hljs-built_in">console</span>.log(a);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> a) &#123;<br>  <span class="hljs-built_in">console</span>.log(prop); <span class="hljs-comment">//不会遍历原形了</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-5-类的其他书写方式"><a href="#5-5-类的其他书写方式" class="headerlink" title="5-5 类的其他书写方式"></a>5-5 类的其他书写方式</h2><ol><li>可计算的成员名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> printName = <span class="hljs-string">&quot;print&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, name, age, sex</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>  &#125;<br><br>  [printName]() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&quot;狗&quot;</span>, <span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>a[printName]();<br></code></pre></td></tr></table></figure><ol start="2"><li>getter 和 setter<br>Object.defineProperty 可定义某个对象成员属性的读取和设置<br>使用 getter 和 setter 控制的属性，不在原型上</li></ol><p>对年龄限制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> printName = <span class="hljs-string">&quot;print&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">age</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setAge(age);<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._age + <span class="hljs-string">&quot;岁&quot;</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">setAge</span>(<span class="hljs-params">age</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span>) &#123;<br>      age = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">1000</span>) &#123;<br>      age = <span class="hljs-number">1000</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>._age = age;<br>  &#125;<br><br>  [printName]() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&quot;狗&quot;</span>, <span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br></code></pre></td></tr></table></figure><p>升级</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> printName = <span class="hljs-string">&quot;print&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, name, age, sex</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>  &#125;<br>  <span class="hljs-comment">//创建一个age属性，并给它加上getter，读取该属性时，会运行该函数</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">age</span>() &#123;<br>    <span class="hljs-comment">// 不能给参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._age + <span class="hljs-string">&quot;岁&quot;</span>;<br>  &#125;<br>  <span class="hljs-comment">//创建一个age属性，并给它加上setter，给该属性赋值时，会运行该函数</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-title">age</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> age !== <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;age property must be a number&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span>) &#123;<br>      age = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">1000</span>) &#123;<br>      age = <span class="hljs-number">1000</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>._age = age;<br>  &#125;<br><br>  [printName]() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&quot;狗&quot;</span>, <span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>静态成员<br>构造函数本身的成员。Animal.abc<br>使用 static 关键字定义的成员即静态成员</li></ol><p>象棋 demo：不需要创建旗子也知道宽高。宽高不应该作为实例属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chess</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>  &#125;<br>  <span class="hljs-keyword">static</span> width = <span class="hljs-number">50</span>;<br>  <span class="hljs-keyword">static</span> height = <span class="hljs-number">50</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(Chess.width);<br><span class="hljs-built_in">console</span>.log(Chess.height);<br>Chess.method();<br></code></pre></td></tr></table></figure><ol start="4"><li>字段初始化器（ES7）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> a = <span class="hljs-number">1</span>; <span class="hljs-comment">// a在Test.a里面</span><br>  <span class="hljs-comment">// a = 1;</span><br>  b = <span class="hljs-number">2</span>; <span class="hljs-comment">//实例成员</span><br>  c = <span class="hljs-number">3</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 相当于</span><br>    <span class="hljs-comment">// b = 2;</span><br>    <span class="hljs-comment">// c = 3;</span><br>    <span class="hljs-built_in">this</span>.d = <span class="hljs-built_in">this</span>.b + <span class="hljs-built_in">this</span>.c;<br>    <span class="hljs-comment">// d=5</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> Test();<br><span class="hljs-built_in">console</span>.log(t);<br></code></pre></td></tr></table></figure><p>注意：<br><strong>1). 使用 static 的字段初始化器，添加的是静态成员</strong><br>** 2). 没有使用 static 的字段初始化器，添加的成员位于对象上**<br><strong>3). 箭头函数在字段初始化器位置上，指向当前对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-comment">// 这里相当于a = 123;</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">123</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> Test();<br>t.print(); <span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><p>为了绑定方法里面的 this，让 this 始终指向当前对象，防止有人这样做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">123</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a); <span class="hljs-comment">// 严格模式this-&gt;undefined</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> Test();<br><span class="hljs-keyword">const</span> p = t.print();<br>p(); <span class="hljs-comment">// this--&gt; undefiend</span><br></code></pre></td></tr></table></figure><p>利用字段初始化器，print 赋值为一个箭头函数。<strong>箭头函数在字段初始化器位置上，指向当前对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">123</span>;<br>  &#125;<br>  print = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a); <span class="hljs-comment">// this指向当前对象。因为字段初始化器相当于在构造函数前写上this.print=()=&gt;&#123;console.log(this.a)&#125;</span><br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> Test();<br><span class="hljs-keyword">const</span> p = t.print;<br>p(); <span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><p>现在的 print 不在原形上了，现在在对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">123</span>;<br>  &#125;<br>  print = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> t1 = <span class="hljs-keyword">new</span> Test();<br><span class="hljs-keyword">const</span> t2 = <span class="hljs-keyword">new</span> Test();<br><span class="hljs-built_in">console</span>.log(t1.print === t2.print); <span class="hljs-comment">// false 每一个对象有一个自己的print</span><br></code></pre></td></tr></table></figure><ol start="5"><li>类表达式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> A = <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>  <span class="hljs-comment">//匿名类，类表达式</span><br>  a = <span class="hljs-number">1</span>;<br>  b = <span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> A();<br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><ol start="5"><li>[扩展]装饰器（ES7）(Decorator)</li></ol><p>还没成为正式标准，浏览器不支持<br>横切关注点<br>装饰器的本质是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  @Obsolete <span class="hljs-comment">// 标记已过期</span><br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;print方法&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Obsolete</span>(<span class="hljs-params">target, methodName, descriptor</span>) </span>&#123;<br>  <span class="hljs-comment">// 装饰器的本质是一个函数</span><br>  <span class="hljs-comment">// 分别会输出：</span><br>  <span class="hljs-comment">// function Test</span><br>  <span class="hljs-comment">// print</span><br>  <span class="hljs-comment">// &#123; value: function print()&#123;&#125;, ... &#125;</span><br>  <span class="hljs-comment">// console.log(target, methodName, descriptor);</span><br>  <span class="hljs-keyword">const</span> oldFunc = descriptor.value;<br>  descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">`<span class="hljs-subst">$&#123;methodName&#125;</span>方法已过时`</span>);<br>    oldFunc.apply(<span class="hljs-built_in">this</span>, args);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-6-类的继承"><a href="#5-6-类的继承" class="headerlink" title="5-6 类的继承"></a>5-6 类的继承</h2><p>如果两个类 A 和 B，如果可以描述为：B 是 A，则，A 和 B 形成继承关系<br>如果 B 是 A，则：</p><ol><li>B 继承自 A</li><li>A 派生 B</li><li>B 是 A 的子类</li><li>A 是 B 的父类</li></ol><p><strong>如果 A 是 B 的父类，则 B 会自动拥有 A 中的所有实例成员。</strong></p><p>这样狗里面没有 print，要实现继承，必须 Dog_prototype—&gt;Animal prototype<br>老方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">type, name, age, sex</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.type = type;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>  <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br>Animal.prototype.print = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-comment">// 以前</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>  <span class="hljs-comment">//借用父类的构造函数</span><br>  Animal.call(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;犬类&quot;</span>, name, age, sex);<br>&#125;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(Dog.prototype, Animal.prototype);<br><span class="hljs-comment">// 把Dog.prototype的隐式原形设置成Animal.prototype的</span><br><span class="hljs-keyword">const</span> d = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;公&quot;</span>);<br>d.print();<br><span class="hljs-built_in">console</span>.log(d);<br></code></pre></td></tr></table></figure><p>新的关键字：</p><ul><li>extends：继承，用于类的定义</li><li>super</li><li>直接当作函数调用，表示父类构造函数</li><li>如果当作对象使用，则表示父类的原型<br>注意：ES6 要求，如果定义了 constructor，并且该类是子类，则必须在 constructor 的第一行手动调用父类的构造函数<br>如果子类不写 constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, name, age, sex</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">jiao</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;动物怎么叫的？&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-comment">//翻译:狗继承自animal</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, sex</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;犬类&quot;</span>, name, age, sex); <span class="hljs-comment">// Animal，就不用Animal.call了</span><br>    <span class="hljs-built_in">this</span>.loves = <span class="hljs-string">&quot;吃骨头&quot;</span>; <span class="hljs-comment">// 子类特有的属性，父类不知道</span><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>.print(); <span class="hljs-comment">//其他模块想调用父类的print</span><br>    <span class="hljs-comment">//自己特有的代码</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【爱好】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.loves&#125;</span>`</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">jiao</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//同名方法，会覆盖父类</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;旺旺！&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> d = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;公&quot;</span>);<br>d.print();<br><span class="hljs-built_in">console</span>.log(d); <span class="hljs-comment">// 原形</span><br>d.jiao();<br></code></pre></td></tr></table></figure><p>【冷知识】</p><ul><li>用 JS 制作抽象类</li><li>抽象类：一般是父类，不能通过该类创建对象</li><li>正常情况下，this 的指向，this 始终指向具体的类的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, name, age, sex</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span>.target === Animal) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;你不能直接创建Animal的对象，应该通过子类创建&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【种类】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.type&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【名字】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【年龄】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【性别】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.sex&#125;</span>`</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">jiao</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;动物怎么叫的？&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, sex</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;犬类&quot;</span>, name, age, sex);<br>    <span class="hljs-comment">// 子类特有的属性</span><br>    <span class="hljs-built_in">this</span>.loves = <span class="hljs-string">&quot;吃骨头&quot;</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//调用父类的print</span><br>    <span class="hljs-built_in">super</span>.print();<br>    <span class="hljs-comment">//自己特有的代码</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`【爱好】：<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.loves&#125;</span>`</span>);<br>  &#125;<br>  <span class="hljs-comment">//同名方法，会覆盖父类</span><br>  <span class="hljs-function"><span class="hljs-title">jiao</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;旺旺！&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">//下面的代码逻辑有误</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;公&quot;</span>);<br>a.print();<br></code></pre></td></tr></table></figure><p>es5 和 es6 继承方式的区别<br>ES5 的继承实质上是先创建子类的实例对象，然后再将父类的方法添加<br>到 this.上(Parent.apply(this)) .<br>ES6 的继承机制完全不同，实质上是先创建父类的实例对象 this (所以必<br>须先调用父类的 super()方法)，然后再用子类的构造函数修改 this。<br>ES5 的继承时通过原型或构造函数机制来实现。<br>ES6 通过 class 关键字定义类，里面有构造方法，类之间通过 extends 关<br>键字实现继承。<br>子类必须在 constructor 方法中调用 super 方法，否则新建实例报错。因<br>为子类没有自己的 this 对象，而是继承了父类的 this 对象,然后对其进行加工。<br>如果不调用 supe<br>per<br>方法，子类得不到 this 对象。<br>注意 super<br>关键字指代父类的实例，即父类的 this 对象。<br>注意:在子类构造函数中，调用 super 后，才可使用 this 关键字，否则<br>报错。</p><h1 id="6-解构"><a href="#6-解构" class="headerlink" title="6.解构"></a>6.解构</h1><h2 id="6-1-对象解构"><a href="#6-1-对象解构" class="headerlink" title="6-1 对象解构"></a>6-1 对象解构</h2><p><strong>什么是解构</strong><br>使用 ES6 的一种语法规则，将一个对象或数组的某个属性提取到某个变量中<br>解构不会对被解构的目标造成任何影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-attr">address</span>: &#123;<br>        <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>        <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;成都&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 以前</span><br><span class="hljs-comment">// let name, age, sex, address;</span><br><span class="hljs-comment">// name = user.name;</span><br><span class="hljs-comment">// age = user.age;</span><br><span class="hljs-comment">// sex = user.sex;</span><br><span class="hljs-comment">// address = user.address;</span><br><span class="hljs-comment">// 有了解构</span><br>写法<span class="hljs-number">1</span>：<br><span class="hljs-keyword">let</span> name, age, sex, address, abc;<br>(&#123; name, age, sex, address &#125; = user);<br>写法<span class="hljs-number">2</span>：<br><span class="hljs-keyword">let</span> &#123;name,age,sex,address&#125; = user;<br></code></pre></td></tr></table></figure><p><strong>在解构中使用默认值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  同名变量 = 默认值; <span class="hljs-comment">//赋值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义5个变量，然后从对象中读取同名属性，放到变量中</span><br><span class="hljs-keyword">let</span> &#123; name, age, sex, address, abc = <span class="hljs-number">123</span> &#125; = user;<br><span class="hljs-built_in">console</span>.log(name, age, sex, address, abc); <span class="hljs-comment">// 如果abc不赋值，就是undefined</span><br></code></pre></td></tr></table></figure><p><strong>非同名属性解构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  属性名: 变量名;<br>&#125;<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;成都&quot;</span>,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 先定义4个变量：name、age、gender、address</span><br><span class="hljs-comment">// 再从对象user中读取同名属性赋值（其中gender读取的是sex属性）</span><br><span class="hljs-keyword">let</span> &#123; name, age, <span class="hljs-attr">sex</span>: gender = <span class="hljs-number">123</span>, address &#125; = user;<br><br><span class="hljs-built_in">console</span>.log(name, age, gender, address);<br></code></pre></td></tr></table></figure><p>深入解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;成都&quot;</span>,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">//解构出user中的name、province</span><br><span class="hljs-comment">//定义两个变量name、province</span><br><span class="hljs-comment">//再解构</span><br><span class="hljs-keyword">const</span> &#123;<br>  name,<br>  <span class="hljs-attr">address</span>: &#123; province &#125;,<br>&#125; = user;<br><span class="hljs-built_in">console</span>.log(name, address, province); <span class="hljs-comment">// address is not defined。对address进一步解构，不会当变量</span><br></code></pre></td></tr></table></figure><h2 id="6-2-数组解构"><a href="#6-2-数组解构" class="headerlink" title="6-2 数组解构"></a>6-2 数组解构</h2><p><strong>数组本质是对象</strong><br>对象大括号解构，数组中括号<br>演示 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>];<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-number">0</span>: n1, <span class="hljs-number">1</span>: n2 &#125; = numbers;<br><span class="hljs-built_in">console</span>.log(n1, n2);<br></code></pre></td></tr></table></figure><p>继续简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n1, n2;<br>[n1, n2] = numbers;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [n1, n2] = numbers;<br></code></pre></td></tr></table></figure><p>按需取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>];<br><span class="hljs-keyword">const</span> [n1, , , n4, n5 = <span class="hljs-number">123</span>] = numbers;<br><span class="hljs-built_in">console</span>.log(n1, n4, n5);<br></code></pre></td></tr></table></figure><p>带有嵌套:得到 numbers 下标为 4 的数组中的下标为 2 的数据，放到变量 n 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]];<br><span class="hljs-keyword">const</span> [, , , , [, , n]] = numbers;<br><span class="hljs-built_in">console</span>.log(n);<br></code></pre></td></tr></table></figure><p>得到 numbers 下标为 4 的数组的属性 a，赋值给变量 A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;b&quot;</span>,<br>  <span class="hljs-string">&quot;c&quot;</span>,<br>  <span class="hljs-string">&quot;d&quot;</span>,<br>  &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>];<br><span class="hljs-comment">// const [,,,,&#123;a&#125;] = numbers;</span><br><span class="hljs-comment">// const [, , , , &#123; a: A &#125;] = numbers;</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">a</span>: A &#125; = numbers[<span class="hljs-number">4</span>]; <span class="hljs-comment">//把对象单独拿出来</span><br><span class="hljs-built_in">console</span>.log(A);<br></code></pre></td></tr></table></figure><p>解构出 name，然后，剩余的所有属性，放到一个新的对象中，变量名为 obj</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;成都&quot;</span>,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// name: kevin</span><br><span class="hljs-comment">// obj : &#123;age:11, sex:&quot;男&quot;, address:&#123;...&#125;&#125;</span><br><span class="hljs-keyword">const</span> &#123; name, ...obj &#125; = user;<br><span class="hljs-built_in">console</span>.log(name, obj);<br></code></pre></td></tr></table></figure><p>得到数组前两项，分别放到变量 a 和 b 中，然后剩余的所有数据放到数组 nums</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">324</span>, <span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3243</span>];<br><span class="hljs-keyword">const</span> [a, b, ...nums] = numbers;<br><span class="hljs-comment">// 以前：const a = numbers[0], b = numbers[1], nums = numbers.slice(2);</span><br><span class="hljs-built_in">console</span>.log(a, b, nums);<br></code></pre></td></tr></table></figure><p>交换两个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>,<br>  b = <span class="hljs-number">2</span>;<br>[b, a] = [a, b]; <span class="hljs-comment">//右边数组，赋值，[1,2]; 左边解构</span><br><span class="hljs-built_in">console</span>.log(a, b);<br></code></pre></td></tr></table></figure><p>试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> article = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;文章标题&quot;</span>,<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;文章内容&quot;</span>,<br>  <span class="hljs-attr">comments</span>: [<br>    &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;评论1&quot;</span>,<br>      <span class="hljs-attr">user</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;用户名1&quot;</span>,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;评论2&quot;</span>,<br>      <span class="hljs-attr">user</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;用户名2&quot;</span>,<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>解构出第二条评论的用户名和评论内容</p><p>name:”用户名 2” content:”评论 2”</p><p>写法 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-attr">comments</span>: [<br>    ,<br>    &#123;<br>      content,<br>      <span class="hljs-attr">user</span>: &#123; name &#125;,<br>    &#125;,<br>  ],<br>&#125; = article;<br><span class="hljs-built_in">console</span>.log(content, name);<br></code></pre></td></tr></table></figure><p>写法 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [<br>  ,<br>  &#123;<br>    content,<br>    <span class="hljs-attr">user</span>: &#123; name &#125;,<br>  &#125;,<br>] = article.comments; <span class="hljs-comment">//先把数组项取出来</span><br><span class="hljs-built_in">console</span>.log(content, name);<br></code></pre></td></tr></table></figure><p>写法 3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;<br>  content,<br>  <span class="hljs-attr">user</span>: &#123; name &#125;,<br>&#125; = article.comments[<span class="hljs-number">1</span>];<br><br><span class="hljs-built_in">console</span>.log(content, name);<br></code></pre></td></tr></table></figure><h2 id="6-3-参数解构"><a href="#6-3-参数解构" class="headerlink" title="6-3 参数解构"></a>6-3 参数解构</h2><p>目前的问题：要写无数的 user . 太麻烦</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params">user</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;user.name&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`年龄：<span class="hljs-subst">$&#123;user.age&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`性别：<span class="hljs-subst">$&#123;user.sex&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`身份：<span class="hljs-subst">$&#123;user.address.province&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`城市：<span class="hljs-subst">$&#123;user.address.city&#125;</span>`</span>);<br>&#125;<br><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;成都&quot;</span>,<br>  &#125;,<br>&#125;;<br>print(user);<br></code></pre></td></tr></table></figure><p>直接解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params">&#123; name, age, sex, address: &#123; province, city &#125; &#125;</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`年龄：<span class="hljs-subst">$&#123;age&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`性别：<span class="hljs-subst">$&#123;sex&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`身份：<span class="hljs-subst">$&#123;province&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`城市：<span class="hljs-subst">$&#123;city&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kevin&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">province</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&quot;成都&quot;</span>,<br>  &#125;,<br>&#125;;<br>print(user);<br></code></pre></td></tr></table></figure><p>ajax 默认值配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">options</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> defaultOptions = &#123;<br>    <span class="hljs-comment">//默认配置</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-comment">//默认值</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">const</span> opt = &#123;<br>    ...defaultOptions,<br>    ...options,<br>  &#125;;<br>  <span class="hljs-built_in">console</span>.log(opt);<br>&#125;<br>ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/abc&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-comment">//不传的话默认get</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>解构简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">&#123; method = <span class="hljs-string">&quot;get&quot;</span>, url = <span class="hljs-string">&quot;/&quot;</span> &#125; = &#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-comment">// 需要加上=&#123;&#125;，参数默认值</span><br>  <span class="hljs-built_in">console</span>.log(method, url);<br>&#125;<br>ajax(); <span class="hljs-comment">//不传递则undefined无法解构，so需要加上=&#123;&#125;，参数默认值</span><br>ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/abc&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="7-符号"><a href="#7-符号" class="headerlink" title="7.符号"></a>7.符号</h1><h2 id="7-1-普通符号"><a href="#7-1-普通符号" class="headerlink" title="7-1 普通符号"></a>7-1 普通符号</h2><p>符号是 ES6 新增的一个数据类型，它通过使用函数 <code>Symbol(符号描述)</code> 来创建</p><blockquote><p>全新的数据类型</p></blockquote><p>创建一个符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> syb1 = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-keyword">const</span> syb2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">//描述信息</span><br><span class="hljs-built_in">console</span>.log(syb1, syb2);<br></code></pre></td></tr></table></figure><p>英雄攻击实例：里面的随机数没必要展示在外面：大道至简</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> hero = &#123;<br>  <span class="hljs-attr">attack</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-attr">hp</span>: <span class="hljs-number">300</span>,<br>  <span class="hljs-attr">defence</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-function"><span class="hljs-title">gongji</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//攻击</span><br>    <span class="hljs-comment">//伤害：攻击力*随机数（0.8~1.1)</span><br>    <span class="hljs-keyword">const</span> dmg = <span class="hljs-built_in">this</span>.attack * <span class="hljs-built_in">this</span>.getRandom(<span class="hljs-number">0.8</span>, <span class="hljs-number">1.1</span>);<br>    <span class="hljs-built_in">console</span>.log(dmg);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>)</span> &#123;<br>    <span class="hljs-comment">//根据最小值和最大值产生一个随机数,这个方法没必要展示</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">attack, hp, defence</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.attack = attack;<br>    <span class="hljs-built_in">this</span>.hp = hp;<br>    <span class="hljs-built_in">this</span>.defence = defence;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">gongji</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//伤害：攻击力*随机数（0.8~1.1)</span><br>    <span class="hljs-keyword">const</span> dmg = <span class="hljs-built_in">this</span>.attack * <span class="hljs-built_in">this</span>.getRandom(<span class="hljs-number">0.8</span>, <span class="hljs-number">1.1</span>);<br>    <span class="hljs-built_in">console</span>.log(dmg);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>)</span> &#123;<br>    <span class="hljs-comment">//根据最小值和最大值产生一个随机数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>符号设计的初衷，是为了给对象设置<strong>私有</strong>属性<br>私有属性：只能在对象内部使用，外面无法使用<br>符号具有以下特点：</p><ul><li>没有字面量:（字面量是直接书写出来）</li><li>使用 typeof 得到的类型是 symbol</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个符号</span><br><span class="hljs-keyword">const</span> syb1 = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-keyword">const</span> syb2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-built_in">console</span>.log(syb1, syb2);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> syb1 === <span class="hljs-string">&quot;symbol&quot;</span>, <span class="hljs-keyword">typeof</span> syb2 === <span class="hljs-string">&quot;symbol&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个符号</span><br><br><span class="hljs-keyword">const</span> syb1 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;这是随便写的一个符号&quot;</span>); <span class="hljs-comment">//描述信息</span><br><span class="hljs-keyword">const</span> syb2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;这是随便写的一个符号&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(syb1, syb2);<br><span class="hljs-built_in">console</span>.log(syb1 === syb2); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>在符号之前，所有的属性名一定是字符串。符号可以作为对象的属性名存在，这种属性称之为符号属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> syb1 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;这是用于对象的一个属性&quot;</span>);<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  [syb1]: <span class="hljs-number">3</span>, <span class="hljs-comment">//符号属性</span><br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></td></tr></table></figure><ol><li>开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> hero = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> getRandom = <span class="hljs-built_in">Symbol</span>();<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">attack</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-attr">hp</span>: <span class="hljs-number">300</span>,<br>    <span class="hljs-attr">defence</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-function"><span class="hljs-title">gongji</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">//攻击</span><br>      <span class="hljs-comment">//伤害：攻击力*随机数（0.8~1.1)</span><br>      <span class="hljs-keyword">const</span> dmg = <span class="hljs-built_in">this</span>.attack * <span class="hljs-built_in">this</span>[getRandom](<span class="hljs-number">0.8</span>, <span class="hljs-number">1.1</span>);<br>      <span class="hljs-built_in">console</span>.log(dmg);<br>    &#125;,<br>    [getRandom](min, max) &#123;<br>      <span class="hljs-comment">//根据最小值和最大值产生一个随机数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>    &#125;,<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-built_in">console</span>.log(hero);<br></code></pre></td></tr></table></figure><p>类的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Hero = (<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> getRandom = <span class="hljs-built_in">Symbol</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">attack, hp, defence</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.attack = attack;<br>      <span class="hljs-built_in">this</span>.hp = hp;<br>      <span class="hljs-built_in">this</span>.defence = defence;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">gongji</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">//伤害：攻击力*随机数（0.8~1.1)</span><br>      <span class="hljs-keyword">const</span> dmg = <span class="hljs-built_in">this</span>.attack * <span class="hljs-built_in">this</span>[getRandom](<span class="hljs-number">0.8</span>, <span class="hljs-number">1.1</span>);<br>      <span class="hljs-built_in">console</span>.log(dmg);<br>    &#125;<br><br>    [getRandom](min, max) &#123;<br>      <span class="hljs-comment">//根据最小值和最大值产生一个随机数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>    &#125;<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-keyword">const</span> h = <span class="hljs-keyword">new</span> Hero(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(h);<br></code></pre></td></tr></table></figure><ol start="2"><li>符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> syb = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-keyword">const</span> obj = &#123;<br>  [syb]: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-built_in">console</span>.log(prop); <span class="hljs-comment">//只能输出a,b</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(obj));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj));<br><span class="hljs-comment">//得到的是一个符号属性的数组</span><br><span class="hljs-keyword">const</span> sybs = <span class="hljs-built_in">Object</span>.getOwnPropertySymbols(obj);<br><span class="hljs-built_in">console</span>.log(sybs, sybs[<span class="hljs-number">0</span>] === syb);<br></code></pre></td></tr></table></figure><ol start="3"><li>Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性</li><li>ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号</li></ol><p>非常规方式读取符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Hero = (<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> getRandom = <span class="hljs-built_in">Symbol</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">attack, hp, defence</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.attack = attack;<br>      <span class="hljs-built_in">this</span>.hp = hp;<br>      <span class="hljs-built_in">this</span>.defence = defence;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">gongji</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">//伤害：攻击力*随机数（0.8~1.1)</span><br>      <span class="hljs-keyword">const</span> dmg = <span class="hljs-built_in">this</span>.attack * <span class="hljs-built_in">this</span>[getRandom](<span class="hljs-number">0.8</span>, <span class="hljs-number">1.1</span>);<br>      <span class="hljs-built_in">console</span>.log(dmg);<br>    &#125;<br><br>    [getRandom](min, max) &#123;<br>      <span class="hljs-comment">//根据最小值和最大值产生一个随机数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>    &#125;<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-keyword">const</span> h = <span class="hljs-keyword">new</span> Hero(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">const</span> sybs = <span class="hljs-built_in">Object</span>.getOwnPropertySymbols(Hero.prototype);<br><span class="hljs-keyword">const</span> prop = sybs[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.log(h[prop](<span class="hljs-number">3</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><ul><li>符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> syb = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-built_in">console</span>.log(syb * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(syb + <span class="hljs-string">&quot;2&quot;</span>);<br></code></pre></td></tr></table></figure><p>显示转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> syb = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-keyword">const</span> str = <span class="hljs-built_in">String</span>(syb);<br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h2 id="7-2-共享符号"><a href="#7-2-共享符号" class="headerlink" title="7-2 共享符号"></a>7-2 共享符号</h2><p>根据某个符号名称（符号描述）能够得到同一个符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;符号名/符号描述&quot;</span>); <span class="hljs-comment">//获取共享符号</span><br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> syb1 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">const</span> syb2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;abc&quot;</span>);<br>都不填符号或都填一样的都是<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">console</span>.log(syb1 === syb2);<br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  [syb1]: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>  [syb2]: <span class="hljs-string">&quot;c&quot;</span>,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(obj1, obj2);<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  [<span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;c&quot;</span>)]: <span class="hljs-number">3</span>,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;c&quot;</span>)]);<br></code></pre></td></tr></table></figure><p>实现共享符号底层原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> SymbolFor = (<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">global</span> = &#123;&#125;; <span class="hljs-comment">//用于记录有哪些共享符号</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">global</span>[name]) &#123;<br>      <span class="hljs-built_in">global</span>[name] = <span class="hljs-built_in">Symbol</span>(name);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">global</span>[name];<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-keyword">const</span> syb1 = SymbolFor(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><span class="hljs-keyword">const</span> syb2 = SymbolFor(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(syb1 === syb2);<br></code></pre></td></tr></table></figure><h2 id="7-3-知名（公共、具名）符号"><a href="#7-3-知名（公共、具名）符号" class="headerlink" title="7-3 知名（公共、具名）符号"></a>7-3 知名<strong>（公共、具名）</strong>符号</h2><p>知名符号是一些具有特殊含义的共享符号，通过 Symbol 的静态属性得到</p><p>ES6 延续了 ES5 的思想：减少魔法，暴露内部实现！</p><p>因此，ES6 用知名符号暴露了某些场景的内部实现</p><ol><li>Symbol.hasInstance</li></ol><p>该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj <span class="hljs-keyword">instanceof</span> A;<br><span class="hljs-comment">//等效于</span><br>A[<span class="hljs-built_in">Symbol</span>.hasInstance](obj); <span class="hljs-comment">// Function.prototype[Symbol.hasInstance]</span><br></code></pre></td></tr></table></figure><p>演示参与改动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-built_in">Object</span>.defineProperty(A, <span class="hljs-built_in">Symbol</span>.hasInstance, &#123;<br>  <span class="hljs-comment">//更改A的Symbol.hasInstance属性</span><br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> A();<br><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> A);<br><span class="hljs-comment">//内部实现 console.log(A[Symbol.hasInstance](obj));</span><br></code></pre></td></tr></table></figure><ol start="2"><li>[扩展] Symbol.isConcatSpreadable</li></ol><p>该知名符号会影响数组的 concat 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> result = arr.concat(<span class="hljs-number">56</span>, arr2);<br><span class="hljs-comment">/*两种可能*/</span><br><span class="hljs-comment">//  [3, 56, [5,6,7,8]]</span><br><span class="hljs-comment">//  [3, 56, 5, 6, 7, 8]结果是分割处理</span><br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><p>要想不分割</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>];<br>arr2[<span class="hljs-built_in">Symbol</span>.isConcatSpreadable] = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">const</span> result = arr.concat(<span class="hljs-number">56</span>, arr2);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><p>以此，也可以应用到对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>];<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">2</span>,<br>  [<span class="hljs-built_in">Symbol</span>.isConcatSpreadable]: <span class="hljs-literal">true</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> result = arr.concat(<span class="hljs-number">2</span>, obj);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><ol start="3"><li>[扩展] Symbol.toPrimitive</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-comment">// 先调用valueOf后toString</span><br><span class="hljs-built_in">console</span>.log(obj.valueOf()); <span class="hljs-comment">//拿不到基本类型</span><br><span class="hljs-built_in">console</span>.log(obj.toString()); <span class="hljs-comment">//可以拿到基本类型</span><br><span class="hljs-built_in">console</span>.log(obj + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>更改内部实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br>obj[<span class="hljs-built_in">Symbol</span>.toPrimitive] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;;<br><span class="hljs-built_in">console</span>.log(obj + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>该知名符号会影响类型转换的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Temperature</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">degree</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.degree = degree;<br>  &#125;<br><br>  [<span class="hljs-built_in">Symbol</span>.toPrimitive](type) &#123;<br>    <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;default&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.degree + <span class="hljs-string">&quot;摄氏度&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.degree;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.degree + <span class="hljs-string">&quot;℃&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> Temperature(<span class="hljs-number">30</span>);<br><br><span class="hljs-built_in">console</span>.log(t + <span class="hljs-string">&quot;!&quot;</span>);<br><span class="hljs-built_in">console</span>.log(t / <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(t));<br></code></pre></td></tr></table></figure><ol start="4"><li>[扩展] Symbol.toStringTag</li></ol><p>该知名符号会影响 Object.prototype.toString 的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  [<span class="hljs-built_in">Symbol</span>.toStringTag] = <span class="hljs-string">&quot;Person&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person();<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">32424</span>, <span class="hljs-number">45654</span>, <span class="hljs-number">32</span>];<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.apply(p));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.apply(arr));<br></code></pre></td></tr></table></figure><ol start="5"><li>其他知名符号</li></ol><h1 id="8-异步处理"><a href="#8-异步处理" class="headerlink" title="8.异步处理"></a>8.异步处理</h1><h2 id="8-0【回顾】事件循环-eventLoop"><a href="#8-0【回顾】事件循环-eventLoop" class="headerlink" title="8.0【回顾】事件循环 eventLoop"></a>8.0【回顾】事件循环 eventLoop</h2><p>案例 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-comment">//a   c    b</span><br><span class="hljs-comment">//53min有讲解</span><br></code></pre></td></tr></table></figure><p>案例 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);<br>&#125;<br><span class="hljs-comment">// a</span><br><span class="hljs-comment">// 1000个c</span><br><span class="hljs-comment">// b</span><br></code></pre></td></tr></table></figure><p><strong>事件循环</strong><br>JS 运行的环境称之为宿主环境。<br>JS 语言不只运行在浏览器<br>执行栈：call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。<br>JS 引擎永远执行的是执行栈的最顶部。<br>演示 1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);</span><br><span class="javascript">    b();</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);</span><br><span class="javascript">    c();</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;global&quot;</span>);</span><br><span class="javascript">  a();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>异步函数：某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。<br>浏览器宿主环境中包含 5 个线程：</p><ol><li>JS 引擎：负责执行执行栈的最顶部代码</li><li>GUI 线程：负责渲染页面</li><li>事件监听线程：负责监听各种事件</li><li>计时线程：负责计时</li><li>网络线程：负责网络通信<br>当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当 JS 引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。<br>JS 引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</li></ol><p>举例：异步处理演示 3</p><p>事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：</p><ul><li>宏任务（队列）：macroTask，计时器结束的回调、事件回调、http 回调等等绝大部分异步函数进入宏队列</li><li>微任务（队列）：MutationObserver，Promise 产生的回调进入微队列——vip</li></ul><blockquote><p>MutationObserver 用于监听某个 DOM 对象的变化<br>当执行栈清空时，JS 引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。</p></blockquote><p>演示 2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 1  1  2  3  5  8  13</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//求斐波拉契数列第n位的值</span></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFeibo</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span> || n === <span class="hljs-number">2</span>) &#123;</span><br><span class="javascript">      <span class="hljs-comment">//避免无限递归</span></span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> getFeibo(n - <span class="hljs-number">1</span>) + getFeibo(n - <span class="hljs-number">2</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(getFeibo(<span class="hljs-number">4</span>));</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>异步处理演示 3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;按钮被点击了&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为什么先执行宏队列了：点击按钮的额时候还没有往 ul 里面加 li，所以微队列也不执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">    li.innerText = count++;</span><br><span class="javascript">    ul.appendChild(li);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;添加了一个li&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//监听ul</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//当监听的dom元素发生变化时运行的回调函数</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ul元素发生了变化&quot;</span>);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-comment">//监听ul</span></span><br><span class="javascript">  observer.observe(ul, &#123;</span><br><span class="javascript">    <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听属性的变化</span></span><br><span class="javascript">    <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听子元素的变化</span></span><br><span class="javascript">    <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听子树的变化</span></span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>宏队列演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">C</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;添加了一个li&quot;</span>);</span><br><span class="javascript">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">    li.innerText = count++;</span><br><span class="javascript">    ul.appendChild(li);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//监听ul</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//当监听的dom元素发生变化时运行的回调函数</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ul元素发生了变化&quot;</span>);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-comment">//监听ul</span></span><br><span class="javascript">  observer.observe(ul, &#123;</span><br><span class="javascript">    <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听属性的变化</span></span><br><span class="javascript">    <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听子元素的变化</span></span><br><span class="javascript">    <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听子树的变化</span></span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-comment">//取消监听</span></span><br><span class="javascript">  <span class="hljs-comment">// observer.disconnect();</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-1-事件和回调函数缺陷"><a href="#8-1-事件和回调函数缺陷" class="headerlink" title="8.1 事件和回调函数缺陷"></a>8.1 事件和回调函数缺陷</h2><p>我们习惯于使用传统的回调或事件处理来解决异步问题<br>事件：某个对象的属性是一个函数，当发生某一件事时，运行该函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br></code></pre></td></tr></table></figure><p>回调：运行某个函数以实现某个功能的时候，传入一个函数作为参数，当发生某件事的时候，会运行该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dom.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></td></tr></table></figure><p>本质上，事件和回调并没有本质的区别，只是把函数放置的位置不同而已。<br>一直以来，该模式都运作良好。<br>直到前端工程越来越复杂…<br>目前，该模式主要面临以下两个问题：</p><ol><li>回调地狱：某个异步操作需要等待之前的异步操作完成，无论用回调还是事件，都会陷入不断的嵌套</li><li>异步之间的联系：某个异步操作要等待多个异步操作的结果，对这种联系的处理，会让代码的复杂度剧增</li></ol><p>演示 demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>按钮1：给按钮2注册点击事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>按钮2：给按钮3注册点击事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>按钮3：点击后弹出hello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> btn1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn1&quot;</span>),</span><br><span class="javascript">    btn2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn2&quot;</span>),</span><br><span class="javascript">    btn3 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn3&quot;</span>);</span><br><span class="javascript">  btn1.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//按钮1的其他事情</span></span><br><span class="javascript">    btn2.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//按钮2的其他事情</span></span><br><span class="javascript">      btn3.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-异步处理的通用模型"><a href="#8-2-异步处理的通用模型" class="headerlink" title="8-2 异步处理的通用模型"></a>8-2 异步处理的通用模型</h2><p>ES 官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。<br>值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该 API，会让异步处理更加的简洁优雅。<br>理解该 API，最重要的，是理解它的异步模型</p><ol><li>ES6 将某一件可能发生异步操作的事情，分为两个阶段：<strong>unsettled</strong> 和 <strong>settled</strong></li></ol><ul><li>unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事</li><li>settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转</li></ul><p>事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。</p><ol start="2"><li>ES6 将事情划分为三种状态： pending、resolved、rejected</li></ol><ul><li>pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）</li><li>resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果</li><li>rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误</li></ul><p>既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！</p><p>我们将 把事情变为 resolved 状态的过程叫做：<strong>resolve</strong>，推向该状态时，可能会传递一些数据</p><p>我们将 把事情变为 rejected 状态的过程叫做：<strong>reject</strong>，推向该状态时，同样可能会传递一些数据，通常为错误信息</p><p><strong>始终记住，无论是阶段，还是状态，是不可逆的！</strong></p><p><img src="/img/5-1.png" alt="image.png"></p><ol start="3"><li>当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。</li></ol><ul><li>resolved 状态：这是一个正常的已决状态，后续处理表示为 thenable</li><li>rejected 状态：这是一个非正常的已决状态，后续处理表示为 catchable</li></ul><p>后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行</p><p><img src="/img/5-2.png" alt="image.png"></p><ol start="4"><li>整件事称之为 Promise</li></ol><p><img src="/img/5-3.png" alt="image.png"></p><p><strong>理解上面的概念，对学习 Promise 至关重要！</strong></p><h2 id="8-3Promise-的基本使用"><a href="#8-3Promise-的基本使用" class="headerlink" title="8-3Promise 的基本使用"></a>8-3Promise 的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 未决阶段的处理</span><br>  <span class="hljs-comment">// 通过调用resolve函数将Promise推向已决阶段的resolved状态</span><br>  <span class="hljs-comment">// 通过调用reject函数将Promise推向已决阶段的rejected状态</span><br>  <span class="hljs-comment">// resolve和reject均可以传递最多一个参数，表示推向状态的数据</span><br>  <span class="hljs-comment">// 立即执行</span><br>&#125;);<br><br>pro.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行</span><br>    <span class="hljs-comment">//如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行</span><br>    <span class="hljs-comment">//data为状态数据</span><br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行</span><br>    <span class="hljs-comment">//如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行</span><br>    <span class="hljs-comment">//err为状态数据</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p><strong>细节</strong></p><ol><li>未决阶段的处理函数是同步的，会立即执行</li><li>thenable 和 catchable 函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</li><li>pro.then 可以只添加 thenable 函数，pro.catch 可以单独添加 catchable 函数</li><li>在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向 rejected，并会被 catchable 捕获</li><li>一旦状态推向了已决阶段，无法再对状态做任何更改</li><li>Promise 并没有消除回调，只是让回调变得可控</li></ol><p>创建 promise 演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`邓哥向女神1发出来了表白短信`</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.1</span>) &#123;<br>      <span class="hljs-comment">//女神同意</span><br>      resolve(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 辅助函数,把传进来的对象拼接成url的字符串</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toData</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj;<br>  &#125;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">let</span> str = i + <span class="hljs-string">&quot;=&quot;</span> + obj[i];<br>    arr.push(str);<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 封装Ajax</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//指定提交方式的默认值</span><br>    obj.type = obj.type || <span class="hljs-string">&quot;get&quot;</span>;<br>    <span class="hljs-comment">//设置是否异步，默认为true(异步)</span><br>    obj.async = obj.async || <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//设置数据的默认值</span><br>    obj.data = obj.data || <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 根据不同的浏览器创建XHR对象</span><br>    <span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>      <span class="hljs-comment">// 非IE浏览器</span><br>      xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// IE浏览器</span><br>      xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 区分get和post,发送HTTP请求</span><br>    <span class="hljs-keyword">if</span> (obj.type === <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>      xhr.open(obj.type, obj.url, obj.async);<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>      <span class="hljs-keyword">let</span> data = toData(obj.data);<br>      xhr.send(data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> url = obj.url + <span class="hljs-string">&quot;?&quot;</span> + toData(obj.data);<br>      xhr.open(obj.type, url, obj.async);<br>      xhr.send();<br>    &#125;<br>    <span class="hljs-comment">// 接收返回过来的数据</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status == <span class="hljs-number">304</span>) &#123;<br>          resolve(<span class="hljs-built_in">JSON</span>.parse(xhr.responseText));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject(xhr.status);<br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> pro = <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  ajax(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./data/students.json?name=李华&quot;</span>,<br>    <span class="hljs-comment">// success: function(data) &#123;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 速写</span><br>    <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params">data</span>)</span> &#123;<br>      resolve(data);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params">err</span>)</span> &#123;<br>      reject(error);<br>    &#125;,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果当前的 Promise 已经是 resolved 状态，该函数会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;未决阶段&quot;</span>);<br>  resolve(<span class="hljs-number">123</span>);<br>&#125;);<br>pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//pro的状态是resloved</span><br>  <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// 123</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果当前是未决阶段，则会加入到作业队列，等待到达 resolved 状态后执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;未决阶段&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">123</span>);<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br>pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//pro的状态是pending</span><br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;);<br><span class="hljs-comment">// 可以注册多个then用来表示已决做什么</span><br></code></pre></td></tr></table></figure><p>catchable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;未决阶段&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>      resolve(<span class="hljs-number">123</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;sanjs&quot;</span>));<br>    &#125;<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br>pro.then(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>封装初级演示 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">biaobai</span>(<span class="hljs-params">god</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`邓哥向<span class="hljs-subst">$&#123;god&#125;</span>发出了表白短信`</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.1</span>) &#123;<br>        <span class="hljs-comment">//女神同意拉</span><br>        resolve(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 一定resolve成功</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//resolve</span><br>        resolve(<span class="hljs-literal">false</span>); <span class="hljs-comment">//  一定resolve成功</span><br>      &#125;<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-comment">//一定成功，失败指的是短信发不出去</span><br><span class="hljs-keyword">const</span> pro = biaobai(<span class="hljs-string">&quot;女神1&quot;</span>);<br>pro.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;);<br></code></pre></td></tr></table></figure><p>pro 去掉简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">biaobai(<span class="hljs-string">&quot;女神1&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;);<br></code></pre></td></tr></table></figure><p>演示 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 辅助函数,把传进来的对象拼接成url的字符串</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toData</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj;<br>  &#125;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">let</span> str = i + <span class="hljs-string">&quot;=&quot;</span> + obj[i];<br>    arr.push(str);<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 封装Ajax</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 改动处</span><br>    <span class="hljs-comment">//指定提交方式的默认值</span><br>    obj.type = obj.type || <span class="hljs-string">&quot;get&quot;</span>;<br>    <span class="hljs-comment">//设置是否异步，默认为true(异步)</span><br>    obj.async = obj.async || <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//设置数据的默认值</span><br>    obj.data = obj.data || <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 根据不同的浏览器创建XHR对象</span><br>    <span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>      <span class="hljs-comment">// 非IE浏览器</span><br>      xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// IE浏览器</span><br>      xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 区分get和post,发送HTTP请求</span><br>    <span class="hljs-keyword">if</span> (obj.type === <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>      xhr.open(obj.type, obj.url, obj.async);<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>      <span class="hljs-keyword">let</span> data = toData(obj.data);<br>      xhr.send(data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> url = obj.url + <span class="hljs-string">&quot;?&quot;</span> + toData(obj.data);<br>      xhr.open(obj.type, url, obj.async);<br>      xhr.send();<br>    &#125;<br>    <span class="hljs-comment">// 接收返回过来的数据</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status == <span class="hljs-number">304</span>) &#123;<br>          resolve(<span class="hljs-built_in">JSON</span>.parse(xhr.responseText)); <span class="hljs-comment">// 改动处</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject(xhr.status); <span class="hljs-comment">// 改动处</span><br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br>ajax(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./data/students.json?name=李华&quot;</span> &#125;).then(<br>  <span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(resp);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>演示 3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// const pro = new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     console.log(&quot;未决阶段&quot;)</span></span><br><span class="javascript">  <span class="hljs-comment">//     resolve(123);</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript">  <span class="hljs-comment">// pro.then(data =&gt; &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     // pro的状态是resolved</span></span><br><span class="javascript">  <span class="hljs-comment">//     console.log(data);</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;未决阶段&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      resolve(<span class="hljs-number">123</span>);</span><br><span class="javascript">    &#125;, <span class="hljs-number">3000</span>);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// pro的状态是pending</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// pro的状态是pending</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// pro的状态是pending</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>演示 4</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;未决阶段&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random &lt; <span class="hljs-number">0.5</span>) &#123;</span><br><span class="javascript">        resolve(<span class="hljs-number">123</span>);</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;asdfasdf&quot;</span>));</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;, <span class="hljs-number">3000</span>);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.then(</span><br><span class="javascript">    <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  );</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>演示 5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);</span><br><span class="javascript">    resolve(<span class="hljs-number">1</span>);</span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);</span><br><span class="javascript">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-comment">//pro: resolved</span></span><br><span class="javascript">  pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向 rejected，并会被 catchable 捕获</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;123&quot;</span>); <span class="hljs-comment">// 导致pro变成rejected</span></span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一旦状态推向了已决阶段，无法再对状态做任何更改。（未捕获的错误）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>); <span class="hljs-comment">//一定是resolved</span><br>  reject(<span class="hljs-number">2</span>); <span class="hljs-comment">//无效</span><br>  resolve(<span class="hljs-number">3</span>); <span class="hljs-comment">//无效</span><br>  reject(<span class="hljs-number">4</span>); <span class="hljs-comment">//无效</span><br>&#125;);<br>pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;);<br>pro.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;abc&quot;</span>);</span><br><span class="javascript">    resolve(<span class="hljs-number">1</span>); <span class="hljs-comment">//已经有了Error,无效</span></span><br><span class="javascript">    reject(<span class="hljs-number">2</span>); <span class="hljs-comment">//无效</span></span><br><span class="javascript">    resolve(<span class="hljs-number">3</span>); <span class="hljs-comment">//无效</span></span><br><span class="javascript">    reject(<span class="hljs-number">4</span>); <span class="hljs-comment">//无效</span></span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  pro.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上说的是未捕获的错误，如果已经捕获了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> &#123;<br>    &#125;<br>    resolve(<span class="hljs-number">1</span>); <span class="hljs-comment">//错误被捕获，有效了</span><br>    reject(<span class="hljs-number">2</span>); <span class="hljs-comment">//无效</span><br>    resolve(<span class="hljs-number">3</span>); <span class="hljs-comment">//无效</span><br>    reject(<span class="hljs-number">4</span>); <span class="hljs-comment">//无效</span><br>&#125;)<br>pro.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data)<br>&#125;)<br>pro.catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;<br></code></pre></td></tr></table></figure><p>未决阶段的处理函数是同步的，会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-comment">//先输出a后b</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;aaa&quot;</span>);<br>  &#125;, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;aa&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-comment">// a aa b aaa promise里面可以异步，两个模块同步</span><br></code></pre></td></tr></table></figure><p>thenable 和 catchable 函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  resolve(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br>  <span class="hljs-comment">// 状态推向resolved</span><br>&#125;);<br><span class="hljs-comment">//pro resolved</span><br>pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;); <span class="hljs-comment">//then里面放的是异步函数</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-comment">// a b c 1</span><br></code></pre></td></tr></table></figure><p>面试题:<br>知识：thenable 和 catchable 函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  resolve(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br>  &#125;, <span class="hljs-number">0</span>);<br>&#125;);<br>pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-comment">// 创建promise同步代码先出a,状态推向resolved,宏队列b,data立即微队列,同步代码c</span><br><span class="hljs-comment">// a c 1 b</span><br></code></pre></td></tr></table></figure><h2 id="8-4Promise-的串联"><a href="#8-4Promise-的串联" class="headerlink" title="8-4Promise 的串联"></a>8-4Promise 的串联</h2><p>当后续的 Promise 需要用到之前的 Promise 的处理结果时，需要 Promise 的串联<br>Promise 对象中，无论是 then 方法还是 catch 方法，它们都具有返回值，返回的是一个全新的 Promise 对象，它的状态满足下面的规则：</p><ol><li>如果当前的 Promise 是未决的，得到的新的 Promise 是挂起状态</li><li>如果当前的 Promise 是已决的，会运行响应的后续处理函数，并将后续处理函数的结果（返回值）作为 resolved 状态数据，应用到新的 Promise 中；如果后续处理函数发生错误，则把返回值作为 rejected 状态数据，应用到新的 Promise 中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./data/students.json&quot;</span>,<br>&#125;);<br><span class="hljs-keyword">const</span> pro2 = pro.then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这里面要运行完pro2才已决</span><br>  <span class="hljs-comment">// throw new Error(&#x27;错误&#x27;)// reject</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; resp.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (resp[i].name === <span class="hljs-string">&quot;李华&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> cid = resp[i].classId;<br>    &#125;<br>  &#125;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(pro2);<br></code></pre></td></tr></table></figure><p>面试题：<strong>后续的 Promise 一定会等到前面的 Promise 有了后续处理结果后，才会变成已决状态</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(pro1); <span class="hljs-comment">//fulfilled</span><br><span class="hljs-keyword">const</span> pro2 = pro1.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result * <span class="hljs-number">2</span>);<br><span class="hljs-comment">// pro2是一个Promise对象</span><br><span class="hljs-built_in">console</span>.log(pro2); <span class="hljs-comment">//pending</span><br><span class="hljs-comment">// 因为then是异步的，运行到打印pro2的时候函数还没调用(同步代码)</span><br></code></pre></td></tr></table></figure><p>面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> pro2 = pro1.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result * <span class="hljs-number">2</span>); <span class="hljs-comment">//这里变成状态数据:2，pro2变成了已决</span><br>pro2.then(<br>  <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(result),<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(err)<br>);<br></code></pre></td></tr></table></figure><p><strong>面试题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 推向rejected,导致pro2的err运行</span><br>&#125;)<br><span class="hljs-keyword">const</span> pro2 = pro1.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> result * <span class="hljs-number">2</span>;<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> err * <span class="hljs-number">3</span>);<span class="hljs-comment">// 3, 此时pro2已决了</span><br>pro2.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(result * <span class="hljs-number">2</span>), <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(err * <span class="hljs-number">3</span>))<span class="hljs-comment">//这里主要看上述处理有没有错误，pro2没有错误，执行result</span><br>结果：<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-keyword">const</span> pro2 = pro1.then(<br>  <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> result * <span class="hljs-number">2</span>;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> err;<br>  &#125;<br>);<br>pro2.then(<br>  <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(result * <span class="hljs-number">2</span>),<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(err * <span class="hljs-number">3</span>)<br>); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>思考：then 函数返回的 Promise 对象一开始一定是挂起状态：因为 then 的后序处理是异步的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-keyword">const</span> pro2 = pro1.then(<br>  <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 这里是第一个调用then的，只看这里的处理函数</span><br>    <span class="hljs-keyword">return</span> result * <span class="hljs-number">2</span>;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> err * <span class="hljs-number">3</span>; <span class="hljs-comment">//3</span><br>  &#125;<br>);<br><span class="hljs-keyword">const</span> pro3 = pro1.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这里得到的是一个新的Promise</span><br>  <span class="hljs-keyword">throw</span> err * <span class="hljs-number">2</span>; <span class="hljs-comment">//1*2</span><br>&#125;);<br>pro2.then(<br>  <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(result * <span class="hljs-number">2</span>),<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(err * <span class="hljs-number">3</span>)<br>); <span class="hljs-comment">// 输出6，调用的是result</span><br>pro3.then(<br>  <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(result * <span class="hljs-number">2</span>),<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(err * <span class="hljs-number">3</span>)<br>); <span class="hljs-comment">// 输出6，调用的是err</span><br></code></pre></td></tr></table></figure><p>如果前面的 Promise 的后续处理，返回的是一个 Promise，则返回的新的 Promise 状态和后续处理返回的 Promise 状态保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> pro2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">2</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> pro3 = pro1<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> pro2;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 2</span><br>  &#125;);<br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> pro2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">2</span>);<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> pro3 = pro1<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;结果出来了，得到的是一个Promise&quot;</span>); <span class="hljs-comment">//一开始Pro1已决了，所以这个一开始就执行</span><br>    <span class="hljs-keyword">return</span> pro2; <span class="hljs-comment">// Pro3要跟pro2状态保持一致，pro2还没运行出来，pro3得等着</span><br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 2；所以这里要等3s后才输出</span><br>  &#125;);<br></code></pre></td></tr></table></figure><p>简化为链式编程：便于阅读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pro1<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;结果出来了，得到的是一个Promise&quot;</span>);<br>    <span class="hljs-keyword">return</span> pro2;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 这只是打印结果，对后续有影响的是函数的返回值</span><br>    <span class="hljs-comment">// 不写，默认return undefined</span><br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// undefined</span><br>  &#125;);<br></code></pre></td></tr></table></figure><p>解决实战问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 辅助函数,把传进来的对象拼接成url的字符串</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toData</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj;<br>  &#125;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">let</span> str = i + <span class="hljs-string">&quot;=&quot;</span> + obj[i];<br>    arr.push(str);<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 封装Ajax</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//指定提交方式的默认值</span><br>    obj.type = obj.type || <span class="hljs-string">&quot;get&quot;</span>;<br>    <span class="hljs-comment">//设置是否异步，默认为true(异步)</span><br>    obj.async = obj.async || <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//设置数据的默认值</span><br>    obj.data = obj.data || <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 根据不同的浏览器创建XHR对象</span><br>    <span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>      <span class="hljs-comment">// 非IE浏览器</span><br>      xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// IE浏览器</span><br>      xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 区分get和post,发送HTTP请求</span><br>    <span class="hljs-keyword">if</span> (obj.type === <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>      xhr.open(obj.type, obj.url, obj.async);<br>      xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>      <span class="hljs-keyword">let</span> data = toData(obj.data);<br>      xhr.send(data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> url = obj.url + <span class="hljs-string">&quot;?&quot;</span> + toData(obj.data);<br>      xhr.open(obj.type, url, obj.async);<br>      xhr.send();<br>    &#125;<br>    <span class="hljs-comment">// 接收返回过来的数据</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) || xhr.status == <span class="hljs-number">304</span>) &#123;<br>          resolve(<span class="hljs-built_in">JSON</span>.parse(xhr.responseText));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject(xhr.status);<br>        &#125;<br>      &#125;<br>    &#125;;<br>  &#125;);<br>&#125;<br><span class="hljs-comment">//获取李华所在班级的老师的信息</span><br><span class="hljs-comment">//1. 获取李华的班级id   Promise</span><br><span class="hljs-comment">//2. 根据班级id获取李华所在班级的老师id   Promise</span><br><span class="hljs-comment">//3. 根据老师的id查询老师信息   Promise</span><br><span class="hljs-keyword">const</span> pro = ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./data/students.json&quot;</span>,<br>&#125;);<br>pro<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; resp.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (resp[i].name === <span class="hljs-string">&quot;李华&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> resp[i].classId; <span class="hljs-comment">//班级id</span><br>      &#125;<br>    &#125;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">cid</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> ajax(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./data/classes.json?cid=&quot;</span> + cid,<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">cls</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cls.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (cls[i].id === cid) &#123;<br>          <span class="hljs-keyword">return</span> cls[i].teacherId;<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">tid</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> ajax(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;./data/teachers.json&quot;</span>,<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">ts</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; ts.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (ts[i].id === tid) &#123;<br>          <span class="hljs-keyword">return</span> ts[i];<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">teacher</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(teacher);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>实战案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">biaobai</span>(<span class="hljs-params">god</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`邓哥向<span class="hljs-subst">$&#123;god&#125;</span>发出了表白短信`</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.3</span>) &#123;<br>        resolve(<span class="hljs-literal">true</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        resolve(<span class="hljs-literal">false</span>);<br>      &#125;<br>    &#125;, <span class="hljs-number">500</span>);<br>  &#125;);<br>&#125;<br>biaobai(<span class="hljs-string">&quot;女神1&quot;</span>)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (resp) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;女神1同意了&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> biaobai(<span class="hljs-string">&quot;女神2&quot;</span>);<br>    &#125;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (resp === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resp) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;女神2同意了&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> biaobai(<span class="hljs-string">&quot;女神3&quot;</span>);<br>    &#125;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (resp === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resp) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;女神3同意了&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;都被拒绝了！&quot;</span>);<br>    &#125;<br>  &#125;);<br><span class="hljs-comment">// 切记：上一个处理的结果就是下一个处理的状态数据</span><br></code></pre></td></tr></table></figure><p>优化：增加了初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> gods = [<span class="hljs-string">&quot;女神1&quot;</span>, <span class="hljs-string">&quot;女神2&quot;</span>, <span class="hljs-string">&quot;女神3&quot;</span>, <span class="hljs-string">&quot;女神4&quot;</span>, <span class="hljs-string">&quot;女神5&quot;</span>];<br><span class="hljs-keyword">let</span> pro;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; gods.length; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;<br>    pro = biaobai(gods[i]);<br>  &#125;<br>  pro = pro.then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (resp === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resp) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;gods[i]&#125;</span>同意了`</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;gods[i]&#125;</span>拒绝了`</span>);<br>      <span class="hljs-keyword">if</span> (i &lt; gods.length - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> biaobai(gods[i + <span class="hljs-number">1</span>]);<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-5-Promise-的其他-API"><a href="#8-5-Promise-的其他-API" class="headerlink" title="8-5 Promise 的其他 API"></a>8-5 Promise 的其他 API</h2><h3 id="原型成员-实例成员"><a href="#原型成员-实例成员" class="headerlink" title="原型成员 (实例成员)"></a>原型成员 (实例成员)</h3><ul><li>then：注册一个后续处理函数，当 Promise 为 resolved 状态时运行该函数</li><li>catch：注册一个后续处理函数，当 Promise 为 rejected 状态时运行该函数</li><li>finally：[ES2018]注册一个后续处理函数（无参），当 Promise 为已决时运行该函数<blockquote><p>一个 Promise 不可能 then，catch 都执行</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  reject(<span class="hljs-number">1</span>);<br>&#125;);<br>pro.finally(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;finally1&quot;</span>));<br>pro.finally(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;finally2&quot;</span>));<br>pro.then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;then1&quot;</span>, resp * <span class="hljs-number">1</span>));<br>pro.then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;then2&quot;</span>, resp * <span class="hljs-number">2</span>));<br>pro.catch(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;catch1&quot;</span>, resp * <span class="hljs-number">1</span>));<br>pro.catch(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;catch2&quot;</span>, resp * <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h3 id="构造函数成员-（静态成员）"><a href="#构造函数成员-（静态成员）" class="headerlink" title="构造函数成员 （静态成员）"></a>构造函数成员 （静态成员）</h3><ul><li>resolve(数据)：该方法返回一个 resolved 状态的 Promise，传递的数据作为状态数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-comment">// 等效于：</span><br><span class="hljs-keyword">const</span> pro = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>特殊情况：如果传递的数据是 Promise，则直接返回传递的 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-number">3</span>);<br>&#125;);<br><span class="hljs-comment">// const pro = Promise.resolve(p);</span><br><span class="hljs-comment">//等效于</span><br><span class="hljs-keyword">const</span> pro = p;<br><span class="hljs-built_in">console</span>.log(pro === p); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>reject(数据)：该方法返回一个 rejected 状态的 Promise，传递的数据作为状态数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  reject(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-comment">// 等效于：</span><br><span class="hljs-keyword">const</span> pro = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li>all(iterable)：这个方法返回一个新的 promise 对象，该 promise 对象在 iterable 参数对象里所有的 promise 对象都成功的时候才会触发成功，一旦有任何一个 iterable 里面的 promise 对象失败则立即触发该 promise 对象的失败。这个新的 promise 对象在触发成功状态以后，会把一个包含 iterable 里所有 promise 返回值的数组作为成功回调的返回值，顺序跟 iterable 的顺序保持一致；如果这个新的 promise 对象触发了失败状态，它会把 iterable 里第一个触发失败的 promise 对象的错误信息作为它的失败错误信息。Promise.all 方法常被用于处理多个 promise 对象的状态集合。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min;<br>&#125;<br><span class="hljs-keyword">const</span> proms = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  proms.push(<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>          <span class="hljs-built_in">console</span>.log(i, <span class="hljs-string">&quot;完成&quot;</span>);<br>          resolve(i);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(i, <span class="hljs-string">&quot;失败&quot;</span>);<br>          reject(i);<br>        &#125;<br>      &#125;, getRandom(<span class="hljs-number">1000</span>, <span class="hljs-number">5000</span>));<br>    &#125;)<br>  );<br>&#125;<br><span class="hljs-comment">//等到所有的promise变成resolved状态后输出: 全部完成</span><br><span class="hljs-keyword">const</span> pro = <span class="hljs-built_in">Promise</span>.all(proms); <span class="hljs-comment">// 把proms数组传进去，返回新的promise对象，必须等到所有promise都变成resolve后才变成resolve</span><br>pro.then(<span class="hljs-function">(<span class="hljs-params">datas</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;全部完成&quot;</span>, datas);<br>&#125;);<br>pro.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;有失败的&quot;</span>, err);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(proms); <span class="hljs-comment">// 为什么这里直接输出promise数组？因为这是同步代码，同步创建的Promise,只是promise状态需要等待</span><br></code></pre></td></tr></table></figure><ul><li>race(iterable)：当 iterable 参数里的任意一个子 promise 被成功或失败后，父 promise 马上也会用子 promise 的成功返回值或失败详情作为参数调用父 promise 绑定的相应句柄，并返回该 promise 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min;<br>&#125;<br><span class="hljs-keyword">const</span> proms = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  proms.push(<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>          <span class="hljs-built_in">console</span>.log(i, <span class="hljs-string">&quot;完成&quot;</span>);<br>          resolve(i);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(i, <span class="hljs-string">&quot;失败&quot;</span>);<br>          reject(i);<br>        &#125;<br>      &#125;, getRandom(<span class="hljs-number">1000</span>, <span class="hljs-number">5000</span>));<br>    &#125;)<br>  );<br>&#125;<br><span class="hljs-comment">//等到所有的promise变成resolved状态后输出: 全部完成</span><br><span class="hljs-comment">// const pro = Promise.all(proms)</span><br><span class="hljs-comment">//  pro.then(data =&gt; &#123;</span><br><span class="hljs-comment">//    console.log(&quot;全部完成了&quot;, data);</span><br><span class="hljs-comment">//  &#125;)</span><br><span class="hljs-comment">//  pro.catch(err =&gt; &#123;</span><br><span class="hljs-comment">//    console.log(&quot;有人失败了&quot;, err);</span><br><span class="hljs-comment">//  &#125;)</span><br><span class="hljs-keyword">const</span> pro = <span class="hljs-built_in">Promise</span>.race(proms);<br>pro.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;有人完成了&quot;</span>, data);<br>&#125;);<br>pro.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;有人失败了&quot;</span>, err);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(proms);<br></code></pre></td></tr></table></figure><p>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">biaobai</span>(<span class="hljs-params">god</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`邓哥向女神【<span class="hljs-subst">$&#123;god&#125;</span>】发出了表白短信`</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.05</span>) &#123;<br>        <span class="hljs-comment">//女神同意拉</span><br>        <span class="hljs-built_in">console</span>.log(god, <span class="hljs-string">&quot;同意&quot;</span>);<br>        resolve(<span class="hljs-literal">true</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(god, <span class="hljs-string">&quot;拒绝&quot;</span>);<br>        resolve(<span class="hljs-literal">false</span>);<br>      &#125;<br>    &#125;, <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (<span class="hljs-number">3000</span> - <span class="hljs-number">1000</span>) + <span class="hljs-number">1000</span>));<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">const</span> proms = [];<br><span class="hljs-keyword">let</span> hasAgree = <span class="hljs-literal">false</span>; <span class="hljs-comment">//是否有女神同意</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>  <span class="hljs-keyword">const</span> pro = biaobai(<span class="hljs-string">`女神<span class="hljs-subst">$&#123;i&#125;</span>`</span>).then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (resp) &#123;<br>      <span class="hljs-keyword">if</span> (hasAgree) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发错了短信，邓哥很机智的拒绝了&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        hasAgree = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;邓哥很开心，终于成功了！&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resp;<br>  &#125;);<br>  proms.push(pro);<br>&#125;<br><span class="hljs-built_in">Promise</span>.all(proms).then(<span class="hljs-function">(<span class="hljs-params">results</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;日志记录&quot;</span>, results);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="8-6-手写-Promise"><a href="#8-6-手写-Promise" class="headerlink" title="8-6 手写 Promise"></a>8-6 手写 Promise</h2><h2 id="8-7-async-和-await"><a href="#8-7-async-和-await" class="headerlink" title="8-7 async 和 await"></a>8-7 async 和 await</h2><p>async 和 await 是 ES2016 新增两个关键字，它们借鉴了 ES2015 中生成器在实际开发中的应用，目的是简化 Promise api 的使用，并非是替代 Promise。</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>目的是简化在函数的返回值中对 Promise 的创建<br>async 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 Promise 对象。<br>存在 setTimeout 就不能用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 完成时候的数据</span><br>  <span class="hljs-comment">// throw 2;</span><br>&#125;<br><span class="hljs-comment">//等效于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    resolve(<span class="hljs-number">2</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果里面返回 Promise 就会返回这个 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">1</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p><strong>await 关键字必须出现在 async 函数中！！！！</strong><br>await 用在某个表达式之前，如果表达式是一个 Promise，则得到的是 thenable 中的状态数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> test1();<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br>test2();<br></code></pre></td></tr></table></figure><p>等效于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    resolve(<span class="hljs-number">2</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    test1().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> result = data;<br>      <span class="hljs-built_in">console</span>.log(result);<br>      resolve();<br>    &#125;);<br>  &#125;);<br>&#125;<br>test2();<br></code></pre></td></tr></table></figure><p>如果 await 的表达式不是 Promise，则会将其使用 Promise.resolve 包装后按照规则运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//1不是promise</span><br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br><span class="hljs-comment">//等价于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>).then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> result = data;<br>      <span class="hljs-built_in">console</span>.log(result);<br>      resolve();<br>    &#125;);<br>  &#125;);<br>&#125;<br>test();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br><span class="hljs-comment">// 先123 1 返回的是promise 不会阻塞</span><br></code></pre></td></tr></table></figure><p>演示 4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPromise</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> getPromise();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正常状态&quot;</span>, result);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;错误状态&quot;</span>, err);<br>  &#125;<br>&#125;<br><br>test();<br></code></pre></td></tr></table></figure><p>改造计时器函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      resolve();<br>    &#125;, duration);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">biaobai</span>(<span class="hljs-params">god</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`邓哥向<span class="hljs-subst">$&#123;god&#125;</span>发出了表白短信`</span>);<br>  <span class="hljs-keyword">await</span> delay(<span class="hljs-number">500</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-FetchApi"><a href="#9-FetchApi" class="headerlink" title="9.FetchApi"></a>9.FetchApi</h1><h2 id="9-1-Fetch-Api-概述"><a href="#9-1-Fetch-Api-概述" class="headerlink" title="9-1. Fetch Api 概述"></a>9-1. Fetch Api 概述</h2><p>XMLHttpRequest 的问题</p><ol><li>所有的功能全部集中在同一个对象上，容易书写出混乱不易维护的代码</li><li>采用传统的事件驱动模式，无法适配新的 Promise Api</li></ol><p>Fetch Api 的特点</p><ol><li>并非取代 AJAX，而是对 AJAX 传统 API 的改进</li><li>精细的功能分割：头部信息、请求信息、响应信息等均分布到不同的对象，更利于处理各种复杂的 AJAX 场景</li><li>使用 Promise Api，更利于异步代码的书写</li><li>Fetch Api 并非 ES6 的内容，属于 HTML5 新增的 Web Api</li><li>需要掌握网络通信的知识</li></ol><h2 id="9-2-基本使用"><a href="#9-2-基本使用" class="headerlink" title="9-2 基本使用"></a>9-2 基本使用</h2><p>请求测试地址：<a href="http://101.132.72.36:5100/api/local">http://101.132.72.36:5100/api/local</a><br>使用 <code>fetch</code> 函数即可立即向服务器发送网络请求<br>参数<br>该函数有两个参数：</p><ol><li>必填，字符串，请求地址</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProvince</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;<br>  fetch(url);<br>&#125;<br>getProvince();<br></code></pre></td></tr></table></figure><ol start="2"><li>选填，对象，请求配置<br>请求配置对象</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>得到所有的省份数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProvinces</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(url);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> resp.json();</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    getProvinces();</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>• method：字符串，请求方法，默认值 GET<br>• headers：对象，请求头信息<br>• body: 请求体的内容，必须匹配请求头中的 Content-Type<br>• mode：字符串，请求模式<br>• cors：默认值，配置为该值，会在请求头中加入 origin 和 referer。默认允许跨域<br>• no-cors：配置为该值，不会在请求头中加入 origin 和 referer，跨域的时候可能会出现问题<br>• same-origin：指示请求必须在同一个域中发生，如果请求其他域，则会报错<br>• credentials: 如何携带凭据（cookie）<br>• omit：默认值，不携带 cookie<br>• same-origin：请求同源地址时携带 cookie<br>• include：请求任何地址都携带 cookie<br>• cache：配置缓存模式<br>• default: 表示 fetch 请求之前将检查下 http 的缓存.<br>• no-store: 表示 fetch 请求将完全忽略 http 缓存的存在. 这意味着请求之前将不再检查下 http 的缓存, 拿到响应后, 它也不会更新 http 缓存.<br>• no-cache: 如果存在缓存, 那么 fetch 将发送一个条件查询 request 和一个正常的 request, 拿到响应后, 它会更新 http 缓存.<br>• reload: 表示 fetch 请求之前将忽略 http 缓存的存在, 但是请求拿到响应后, 它将主动更新 http 缓存.<br>• force-cache: 表示 fetch 请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的 request.<br>• only-if-cached: 表示 fetch 请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在 mode 为”same-origin”时有效).<br>返回值<br>ajax 是靠回调函数；xhr 是靠 readStateChange<br>fetch 函数返回一个 Promise 对象<br>• 当收到服务器的返回结果后（只要是有结果就行，不管成功还是失败），Promise 进入 resolved 状态，状态数据为 Response 对象<br>• 当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息<br>拿到所有省份数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPromises</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;<br>  <span class="hljs-comment">//GET请求数据在地址栏里面，POST请求数据在请求体里面</span><br>  <span class="hljs-keyword">const</span> config = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>     <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><span class="hljs-comment">//这里写了json格式，body里面就要用json格式(HTTP协议规定)</span><br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>，<span class="hljs-comment">//也可以自定义</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(url, config)<br>    <span class="hljs-comment">// console.log(resp)</span><br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> resp.text()<span class="hljs-comment">// 解析成文本</span><br>    <span class="hljs-built_in">console</span>.log(result)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>  &#125;<br>&#125;<br>getPromises()<br></code></pre></td></tr></table></figure><p>简化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPromises</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;<br>  <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(url);<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> resp.text();<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br>getPromises();<br></code></pre></td></tr></table></figure><p>• ok：boolean，当响应消息码在 200~299 之间时为 true，其他为 false<br>• status：number，响应的状态码<br>• text()：用于处理文本格式的 Ajax 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 string 对象的 Promise。（异步的）<br>• blob()：用于处理二进制文件格式（比如图片或者电子表格）的 Ajax 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 blob 对象的 Promise。<br>• json()：用于处理 JSON 格式的 Ajax 的响应。它将 JSON 数据流转换为一个被解决为 JavaScript 对象的 promise。<br>• redirect()：可以用于重定向到另一个 URL。它会创建一个新的 Promise，以解决来自重定向的 URL 的响应。</p><h2 id="9-3Request-对象"><a href="#9-3Request-对象" class="headerlink" title="9-3Request 对象"></a>9-3Request 对象</h2><p>除了使用基本的 fetch 方法，还可以通过创建一个 Request 对象来完成请求（实际上，fetch 的内部会帮你创建一个 Request 对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Request(url地址, 配置);<br></code></pre></td></tr></table></figure><p>注意点：尽量保证每次请求都是一个新的 Request 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> req;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestInfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//得到request对象</span><br>  <span class="hljs-keyword">if</span> (!req) &#123;<br>    <span class="hljs-comment">//没有的话，创建一个</span><br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;<br>    req = <span class="hljs-keyword">new</span> Request(url, &#123;&#125;);<br>    <span class="hljs-built_in">console</span>.log(req);<br>  &#125;<br>  <span class="hljs-comment">// 尽量保证每次请求都是一个新的Request对象</span><br>  <span class="hljs-keyword">return</span> req.clone(); <span class="hljs-comment">//克隆一个全新的request对象，配置一致</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProvinces</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(getRequestInfo());<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> resp.json();<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-4-Response-对象"><a href="#9-4-Response-对象" class="headerlink" title="9-4 Response 对象"></a>9-4 Response 对象</h2><blockquote><p>模拟服务器相应结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> req;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestInfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!req) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;<br>    req = <span class="hljs-keyword">new</span> Request(url, &#123;&#125;);<br>    <span class="hljs-built_in">console</span>.log(req);<br>  &#125;<br>  <span class="hljs-keyword">return</span> req.clone(); <span class="hljs-comment">//克隆一个全新的request对象，配置一致</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProvinces</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// const resp = await fetch(getRequestInfo()) 请求服务器</span><br>  <span class="hljs-comment">// 模拟服务器相应结果：测试用的数据用Response构建</span><br>  <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">new</span> Response(<br>    <span class="hljs-string">`[</span><br><span class="hljs-string">&#123;&quot;id&quot;:1, &quot;name&quot;:&quot;北京&quot;&#125;,</span><br><span class="hljs-string">&#123;&quot;id&quot;:2, &quot;name&quot;:&quot;天津&quot;&#125;</span><br><span class="hljs-string">]`</span>,<br>    &#123;<br>      <span class="hljs-comment">// 配置</span><br>      <span class="hljs-attr">ok</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>    &#125;<br>  );<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> getJSON(resp);<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getJSON</span>(<span class="hljs-params">resp</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> resp.json();<br>  <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-5-Headers-对象"><a href="#9-5-Headers-对象" class="headerlink" title="9-5 Headers 对象"></a>9-5 Headers 对象</h2><p>在 Request 和 Response 对象内部，会将传递的请求头对象，转换为 Headers<br>Headers 对象中的方法：</p><ul><li>has(key)：检查请求头中是否存在指定的 key 值</li><li>get(key): 得到请求头中对应的 key 值</li><li>set(key, value)：修改对应的键值对。不存在就会新增</li><li>append(key, value)：添加对应的键值对。如果添加的一样，就会逗号分隔成两个值</li><li>keys(): 得到所有的请求头键的集合</li><li>values(): 得到所有的请求头中的值的集合</li><li>entries(): 得到所有请求头中的键值对的集合</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> req;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCommonHeaders</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Headers(&#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printHeaders</span>(<span class="hljs-params">headers</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> datas = headers.entries();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> pair <span class="hljs-keyword">of</span> datas) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`key: <span class="hljs-subst">$&#123;pair[<span class="hljs-number">0</span>]&#125;</span>，value: <span class="hljs-subst">$&#123;pair[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestInfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!req) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>;<br>    <span class="hljs-keyword">const</span> headers = getCommonHeaders();<br>    headers.set(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">3</span>);<br>    req = <span class="hljs-keyword">new</span> Request(url, &#123;<br>      headers,<br>    &#125;);<br>    printHeaders(headers);<br>  &#125;<br>  <span class="hljs-keyword">return</span> req.clone();<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProvinces</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(getRequestInfo());<br>  printHeaders(resp.headers);<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> getJSON(resp);<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getJSON</span>(<span class="hljs-params">resp</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> resp.json();<br>  <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-6-文件上传"><a href="#9-6-文件上传" class="headerlink" title="9-6 文件上传"></a>9-6 文件上传</h2><p>流程：</p><ol><li>客户端将文件数据发送给服务器</li><li>服务器保存上传的文件数据到服务器端</li><li>服务器响应给客户端一个文件访问地址</li></ol><p>测试地址：<a href="http://101.132.72.36:5100/api/upload">http://101.132.72.36:5100/api/upload</a><br>键的名称（表单域名称）：imagefile<br>请求方法：POST<br>请求的表单格式：multipart/form-data<br>请求体中必须包含一个键值对，键的名称是服务器要求的名称，值是文件数据<br>HTML5 中，JS 仍然无法随意的获取文件数据，但是可以获取到 input 元素中，被用户选中的文件数据<br>自己创建请求体很麻烦，所以可以利用 HTML5 提供的 FormData 构造函数来创建请求体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;imgAvatar&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>上传<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> inp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;avatar&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (inp.files.length === <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">      alert(<span class="hljs-string">&quot;请选择要上传的文件&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">return</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData(); <span class="hljs-comment">//构建请求体</span></span><br><span class="javascript">    formData.append(<span class="hljs-string">&quot;imagefile&quot;</span>, inp.files[<span class="hljs-number">0</span>]);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://101.132.72.36:5100/api/upload&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(url, &#123;</span><br><span class="javascript">      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">body</span>: formData, <span class="hljs-comment">//自动修改请求头，自动完成了headers:&#123;&quot;Content-Type&quot;:&quot;multipart/form-data&quot;&#125;</span></span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> resp.json();</span><br><span class="javascript">    <span class="hljs-keyword">return</span> result;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>).onclick = <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> upload();</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;imgAvatar&quot;</span>);</span><br><span class="javascript">    img.src = result.path;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="10-迭代器和生成器"><a href="#10-迭代器和生成器" class="headerlink" title="10.迭代器和生成器"></a>10.迭代器和生成器</h1><h2 id="10-1-迭代器"><a href="#10-1-迭代器" class="headerlink" title="10-1 迭代器"></a>10-1 迭代器</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><ol><li>什么是迭代？</li></ol><p>从一个数据集合中按照一定的顺序，不断取出数据的过程</p><ol start="2"><li>迭代和遍历的区别？</li></ol><p>迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完<br>遍历强调的是要把整个数据依次全部取出</p><ol start="3"><li>迭代器</li></ol><p>对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象</p><ol start="4"><li>迭代模式</li></ol><p>一种设计模式，用于统一迭代过程，并规范了迭代器规格：</p><ul><li>迭代器应该具有得到下一个数据的能力</li><li>迭代器应该具有判断是否还有后续数据的能力</li></ul><h3 id="JS-中的迭代器"><a href="#JS-中的迭代器" class="headerlink" title="JS 中的迭代器"></a>JS 中的迭代器</h3><p>JS 规定，如果一个对象具有 next 方法，并且该方法返回一个对象，该对象的格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-attr">value</span>: 值, <span class="hljs-attr">done</span>: 是否迭代完成&#125;<br></code></pre></td></tr></table></figure><p>模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">value</span>: xxx,<br>      <span class="hljs-attr">done</span>: xx,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>则认为该对象 obj 是一个迭代器<br>含义：</p><ul><li>next 方法：用于得到下一个数据</li><li>返回的对象<ul><li>value：下一个数据的值</li><li>done：boolean，是否迭代完成</li></ul></li></ul><p>演示 demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">//迭代数组arr</span><br><span class="hljs-keyword">const</span> iterator = &#123;<br>  <span class="hljs-attr">i</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//当前的数组下标</span><br>  <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> result = &#123;<br>      <span class="hljs-attr">value</span>: arr[<span class="hljs-built_in">this</span>.i],<br>      <span class="hljs-attr">done</span>: <span class="hljs-built_in">this</span>.i &gt;= arr.length, <span class="hljs-comment">//下标越界了</span><br>    &#125;;<br>    <span class="hljs-built_in">this</span>.i++;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">//让迭代器不断的取出下一个数据，直到没有数据为止</span><br><span class="hljs-keyword">let</span> data = iterator.next();<br><span class="hljs-keyword">while</span> (!data.done) &#123;<br>  <span class="hljs-comment">//只要没有迭代完成，则取出数据</span><br>  <span class="hljs-built_in">console</span>.log(data.value);<br>  <span class="hljs-comment">//进行下一次迭代</span><br>  data = iterator.next();<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;迭代完成&quot;</span>);<br></code></pre></td></tr></table></figure><p>演示 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><span class="hljs-comment">// 迭代器创建函数  iterator creator</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createIterator</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">//当前的数组下标</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">var</span> result = &#123;<br>        <span class="hljs-attr">value</span>: arr[i],<br>        <span class="hljs-attr">done</span>: i &gt;= arr.length,<br>      &#125;;<br>      i++;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;,<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> iter1 = createIterator(arr1);<br>iter1.next();<br><span class="hljs-keyword">const</span> iter2 = createIterator(arr2);<br>iter2.next();<br></code></pre></td></tr></table></figure><p>演示 3:无限延伸功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 依次得到斐波拉契数列前面n位的值</span><br><span class="hljs-comment">// 1 1 2 3 5 8 13 .....</span><br><span class="hljs-comment">//创建一个斐波拉契数列的迭代器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createFeiboIterator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prev1 = <span class="hljs-number">1</span>,<br>    prev2 = <span class="hljs-number">1</span>, <span class="hljs-comment">//当前位置的前1位和前2位</span><br>    n = <span class="hljs-number">1</span>; <span class="hljs-comment">//当前是第几位</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">let</span> value;<br>      <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) &#123;<br>        value = <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        value = prev1 + prev2;<br>      &#125;<br>      <span class="hljs-keyword">const</span> result = &#123;<br>        value,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//这个数列无限延伸</span><br>      &#125;;<br>      prev2 = prev1;<br>      prev1 = result.value;<br>      n++;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;,<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> iterator = createFeiboIterator();<br>iterator.next();<br></code></pre></td></tr></table></figure><h2 id="10-2-可迭代协议与-for-of-循环"><a href="#10-2-可迭代协议与-for-of-循环" class="headerlink" title="10-2. 可迭代协议与 for-of 循环"></a>10-2. 可迭代协议与 for-of 循环</h2><h3 id="可迭代协议"><a href="#可迭代协议" class="headerlink" title="可迭代协议"></a>可迭代协议</h3><p><strong>概念回顾</strong></p><ul><li>迭代器(iterator)：一个具有 next 方法的对象，next 方法返回下一个数据并且能指示是否迭代完成</li><li>迭代器创建函数（iterator creator）：一个返回迭代器的函数</li></ul><p><strong>可迭代协议</strong><br>ES6 规定，如果一个对象具有知名符号属性<code>Symbol.iterator</code>，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）<br>数组就是个可迭代对象</p><blockquote><p>思考：如何知晓一个对象是否是可迭代的？数组、类数组、自己写的对象都可以做成可迭代对象<br>思考：如何遍历一个可迭代对象？for-of 循环</p></blockquote><h3 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for-of 循环"></a>for-of 循环</h3><p>for-of 循环用于遍历可迭代对象，格式如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//迭代完成后循环结束</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">in</span> iterable) &#123;<br>  <span class="hljs-comment">//iterable：可迭代对象</span><br>  <span class="hljs-comment">//item：每次迭代得到的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p>演示：数组就是个可迭代对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>];<br><span class="hljs-comment">// const iterator = arr[Symbol.iterator]();</span><br><span class="hljs-comment">// let result = iterator.next();</span><br><span class="hljs-comment">// while (!result.done) &#123;</span><br><span class="hljs-comment">//     const item = result.value; //取出数据</span><br><span class="hljs-comment">//     console.log(item);</span><br><span class="hljs-comment">//     //下一次迭代</span><br><span class="hljs-comment">//     result = iterator.next();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br></code></pre></td></tr></table></figure><p>演示 3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="javascript">  <span class="hljs-comment">// const iterator = divs[Symbol.iterator]()</span></span><br><span class="javascript">  <span class="hljs-comment">// let result = iterator.next();</span></span><br><span class="javascript">  <span class="hljs-comment">// while (!result.done) &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     const item = result.value; //取出数据</span></span><br><span class="javascript">  <span class="hljs-comment">//     console.log(item);</span></span><br><span class="javascript">  <span class="hljs-comment">//     //下一次迭代</span></span><br><span class="javascript">  <span class="hljs-comment">//     result = iterator.next();</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">  <span class="hljs-comment">// 等价于</span></span><br><span class="javascript">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> divs) &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(item);</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>演示：自定义可迭代对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可迭代对象</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  [<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>    <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//得到对象this里面所有属性名的一个数组</span><br>    <span class="hljs-comment">// console.log(keys)</span><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> propName = keys[i];<br>        <span class="hljs-keyword">const</span> propValue = <span class="hljs-built_in">this</span>[propName];<br>        <span class="hljs-keyword">const</span> result = &#123;<br>          <span class="hljs-attr">value</span>: &#123;<br>            propName,<br>            propValue,<br>          &#125;,<br>          <span class="hljs-attr">done</span>: i &gt;= keys.length,<br>        &#125;;<br>        i++;<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> obj) &#123;<br>  <span class="hljs-built_in">console</span>.log(item); <span class="hljs-comment">// &#123;propName:&quot;a&quot;, propValue:1&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="展开运算符与可迭代对象"><a href="#展开运算符与可迭代对象" class="headerlink" title="展开运算符与可迭代对象"></a>展开运算符与可迭代对象</h3><p>展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组。<br>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  [<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>    <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> propName = keys[i];<br>        <span class="hljs-keyword">const</span> propValue = <span class="hljs-built_in">this</span>[propName];<br>        <span class="hljs-keyword">const</span> result = &#123;<br>          <span class="hljs-attr">value</span>: &#123;<br>            propName,<br>            propValue,<br>          &#125;,<br>          <span class="hljs-attr">done</span>: i &gt;= keys.length,<br>        &#125;;<br>        i++;<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> arr = [...obj];<br><span class="hljs-built_in">console</span>.log(arr);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a, b);<br>&#125;<br><br>test(...obj);<br></code></pre></td></tr></table></figure><h2 id="10-3-生成器"><a href="#10-3-生成器" class="headerlink" title="10-3 生成器"></a>10-3 生成器</h2><h3 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器 (Generator)"></a>生成器 (Generator)</h3><ol><li>什么是生成器？</li></ol><p>生成器是一个通过构造函数 Generator 创建的对象，生成器既是一个迭代器（有 next 方法），同时又是一个可迭代对象（有知名符号），可以用于 for of 循环</p><ol start="2"><li>如何创建生成器</li></ol><p>生成器的创建，必须使用生成器函数（Generator Function）</p><ol start="3"><li>如何书写一个生成器函数呢？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这是一个生成器函数，该函数一定返回一个生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">method</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>生成器函数内部是如何执行的？</li></ol><p>第一次调用只是生成了生成器，并没有调用里面<br>生成器函数内部是为了给生成器的每次迭代提供的数据<br>每次调用生成器的 next 方法，将导致生成器函数运行到下一个 yield 关键字位置<br>yield 是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。</p><ol start="5"><li>有哪些需要注意的细节？</li></ol><p>1). 生成器函数可以有返回值，返回值出现在第一次 done 为 true 时的 value 属性中<br>2). 调用生成器的 next 方法时，可以传递参数，传递的参数会交给 yield 表达式的返回值<br>3). 第一次调用 next 方法时，传参没有任何意义<br>4). 在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号</p><ol start="6"><li>生成器的其他 API</li></ol><ul><li>return 方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">generator.return(); <span class="hljs-comment">//结束了，done为true</span><br>generator.return(<span class="hljs-number">3</span>); <span class="hljs-comment">//value=3</span><br></code></pre></td></tr></table></figure><ul><li>throw 方法：调用该方法，可以在生成器中产生一个错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">generator.throw(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;sdbjjas&quot;</span>));<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第1次运行&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第2次运行&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第3次运行&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> generator = test();<br></code></pre></td></tr></table></figure><p>优化演示：数组的迭代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><br><span class="hljs-comment">// 迭代器创建函数  iterator creator</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createIterator</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-keyword">yield</span> item;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> iter1 = createIterator(arr1);<br><span class="hljs-keyword">const</span> iter2 = createIterator(arr2);<br></code></pre></td></tr></table></figure><p>创建一个斐波拉契数列的迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createFeiboIterator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> prev1 = <span class="hljs-number">1</span>,<br>    prev2 = <span class="hljs-number">1</span>, <span class="hljs-comment">//当前位置的前1位和前2位</span><br>    n = <span class="hljs-number">1</span>; <span class="hljs-comment">//当前是第几位</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> newValue = prev1 + prev2;<br>      <span class="hljs-keyword">yield</span> newValue;<br>      prev2 = prev1;<br>      prev1 = newValue;<br>    &#125;<br>    n++;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> iterator = createFeiboIterator();<br></code></pre></td></tr></table></figure><p>演示：生成器函数可以有返回值，返回值出现在第一次 done 为 true 时的 value 属性中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第1次运行&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第2次运行&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第3次运行&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> generator = test();<br></code></pre></td></tr></table></figure><p>演示：调用生成器的 next 方法时，可以传递参数，传递的参数会交给 yield 表达式的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;函数开始&quot;</span>)<br>  <span class="hljs-keyword">let</span> info = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//这里info不是1，这里根据参数动态变化</span><br>  <span class="hljs-built_in">console</span>.log(info)<br>  info = <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span> + info;<br>  <span class="hljs-built_in">console</span>.log(info)<br>&#125;<br><span class="hljs-keyword">const</span> generator = test();<br>控制台<br>generator.next()<br>demo.js:<span class="hljs-number">2</span> 函数开始<br>&#123;<span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br>generator.next(<span class="hljs-number">5</span>)<br>&#123;<span class="hljs-attr">value</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure><p>演示:在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">t1</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;b&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  两种错误的调用方式：<br>  <span class="hljs-number">1.</span> t1()<span class="hljs-comment">// 调用生成器函数不会导致里面的代码执行</span><br>  <span class="hljs-number">2.</span> <span class="hljs-keyword">yield</span> t1();<span class="hljs-comment">// 将生成器对象给了yield执行</span><br>  <span class="hljs-keyword">yield</span>* t1();<span class="hljs-comment">//相当于把t1里面代码直接copy过来了</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">const</span> generator = test();<br></code></pre></td></tr></table></figure><p>生成器<br>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// generator.next === generator[Symbol.iterator]().next()</span><br><span class="hljs-comment">//下面的函数是一个生成器函数，用于创建生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createGenerator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 开始&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// &#123;value:1, done:false&#125;</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行1&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行2&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行3&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;结束&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createGenerator(); <span class="hljs-comment">//调用后，一定得到一个生成器</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createArrayIterator</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> item = arr[i];<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">$&#123;i&#125;</span>次迭代`</span>);<br>    <span class="hljs-keyword">yield</span> item;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;函数结束&quot;</span>); <span class="hljs-comment">//迭代完成后运行</span><br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createArrayIterator([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下面的函数是一个生成器函数，用于创建生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createGenerator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 开始&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// &#123;value:1, done:false&#125;</span><br>  <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 后面不会运行了</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行1&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行2&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行3&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;结束&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createGenerator(); <span class="hljs-comment">//调用后，一定得到一个生成器</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncGetData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      resolve(<span class="hljs-string">&quot;成哥&quot;</span>);<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">task</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开始获取数据....&quot;</span>);<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">yield</span> asyncGetData();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取到数据：&quot;</span>, data);<br>  <span class="hljs-keyword">const</span> data2 = <span class="hljs-keyword">yield</span> asyncGetData();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;又获取到了数据：&quot;</span>, data2);<br>  <span class="hljs-keyword">const</span> data3 = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;又获取到了数据：&quot;</span>, data3);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用函数：运行一个生成器任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">generatorFunction</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> generator = generatorFunction(); <span class="hljs-comment">//得到一个生成器</span><br>  next();<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 封装了generator的next方法，进行下一次迭代</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params">nextValue</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> result = generator.next(nextValue);<br>    <span class="hljs-keyword">if</span> (result.done) &#123;<br>      <span class="hljs-comment">//迭代结束了</span><br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> value = result.value; <span class="hljs-comment">//拿到迭代的数据</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value.then === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-comment">//迭代的数据是一个Promise</span><br>      value.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> next(data));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      next(result.value);<br>    &#125;<br>  &#125;<br>&#125;<br><br>run(task);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下面的函数是一个生成器函数，用于创建生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createGenerator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 开始&quot;</span>);<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//将1作为第一次的迭代的值,还没有完成赋值 绝不是把1赋值给result,result是外部给他的</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行1&quot;</span>, result);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//将2作为第二次迭代的值</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行2&quot;</span>, result);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行3&quot;</span>, result);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;结束&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createGenerator(); <span class="hljs-comment">//调用后，一定得到一个生成器</span><br><br><span class="hljs-keyword">var</span> result = generator.next(); <span class="hljs-comment">//&#123;value:1, done:false&#125;</span><br><span class="hljs-keyword">while</span> (!result.done) &#123;<br>  <span class="hljs-comment">//有迭代的值</span><br>  result = generator.next(result.value); <span class="hljs-comment">//如果想把yield返回的值交给result</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下面的函数是一个生成器函数，用于创建生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createGenerator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 开始&quot;</span>);<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//将1作为第一次的迭代的值.</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行1&quot;</span>, result);<br>    result = <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//将2作为第二次迭代的值</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行2&quot;</span>, result);<br>    result = <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行3&quot;</span>, result);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;结束&quot;</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;报错了&quot;</span>);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Abc&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createGenerator(); <span class="hljs-comment">//调用后，一定得到一个生成器</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下面的函数是一个生成器函数，用于创建生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createGenerator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 开始&quot;</span>);<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//将1作为第一次的迭代的值</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行1&quot;</span>, result);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//将2作为第二次迭代的值</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行2&quot;</span>, result);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行3&quot;</span>, result);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;结束&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createGenerator(); <span class="hljs-comment">//调用后，一定得到一个生成器</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">g2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;g2-开始&quot;</span>);<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;g1&quot;</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;g2-运行1&quot;</span>);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;g2&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>&#125;<br><span class="hljs-comment">//下面的函数是一个生成器函数，用于创建生成器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">createGenerator</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 开始&quot;</span>);<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//将1作为第一次的迭代的值</span><br>  result = <span class="hljs-keyword">yield</span>* g2(); <span class="hljs-comment">//result为g2函数的返回值</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行1&quot;</span>, result);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//将2作为第二次迭代的值</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行2&quot;</span>, result);<br>  result = <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;生成器函数的函数体 - 运行3&quot;</span>, result);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;结束&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = createGenerator(); <span class="hljs-comment">//调用后，一定得到一个生成器</span><br></code></pre></td></tr></table></figure><h2 id="10-4-生成器应用-异步任务控制"><a href="#10-4-生成器应用-异步任务控制" class="headerlink" title="10-4. 生成器应用-异步任务控制"></a>10-4. 生成器应用-异步任务控制</h2><p>高仿 await</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">task</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> d = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(d);<br>  <span class="hljs-comment">// //d : 1</span><br>  <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">yield</span> fetch(<span class="hljs-string">&quot;http://101.132.72.36:5100/api/local&quot;</span>);<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">yield</span> resp.json();<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;<br>run(task);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">generatorFunc</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> generator = generatorFunc();<br>  <span class="hljs-keyword">let</span> result = generator.next(); <span class="hljs-comment">//启动任务（开始迭代）, 得到迭代数据</span><br>  handleResult();<br>  <span class="hljs-comment">//对result进行处理</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleResult</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (result.done) &#123;<br>      <span class="hljs-keyword">return</span>; <span class="hljs-comment">//迭代完成，不处理</span><br>    &#125;<br>    <span class="hljs-comment">//迭代没有完成，分为两种情况</span><br>    <span class="hljs-comment">//1. 迭代的数据是一个Promise</span><br>    <span class="hljs-comment">//2. 迭代的数据是其他数据</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> result.value.then === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-comment">//promise里面有个then方法</span><br>      <span class="hljs-comment">//1. 迭代的数据是一个Promise</span><br>      <span class="hljs-comment">//等待Promise完成后，再进行下一次迭代</span><br>      result.value.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        result = generator.next(data);<br>        handleResult();<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//2. 迭代的数据是其他数据，直接进行下一次迭代</span><br>      result = generator.next(result.value);<br>      handleResult();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="React-复习迭代器生成器"><a href="#React-复习迭代器生成器" class="headerlink" title="React 复习迭代器生成器"></a>React 复习迭代器生成器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//   iterator是一个迭代器;</span><br><span class="hljs-keyword">var</span> iterator = &#123;<br>  <span class="hljs-attr">total</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">//可迭代3次</span><br>  <span class="hljs-attr">i</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//当前的迭代次数</span><br>  <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>      <span class="hljs-comment">//当前这一次迭代到的数据</span><br>      <span class="hljs-attr">value</span>: <span class="hljs-built_in">this</span>.i &gt; <span class="hljs-built_in">this</span>.total ? <span class="hljs-literal">undefined</span> : <span class="hljs-built_in">Math</span>.random(),<br>      <span class="hljs-attr">done</span>: <span class="hljs-built_in">this</span>.i &gt; <span class="hljs-built_in">this</span>.total,<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.i++;<br>    <span class="hljs-keyword">return</span> obj;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可无限迭代的随机数</span><br><span class="hljs-keyword">var</span> iterator = &#123;<br>  <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">//当前这一次迭代到的数据</span><br>      <span class="hljs-attr">value</span>: <span class="hljs-built_in">Math</span>.random(),<br>      <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//要输出斐波拉契数列的前N位</span><br><br><span class="hljs-comment">//一个无限的斐波拉契数列 1 1 2 3 5 8 13 21</span><br><span class="hljs-keyword">var</span> iterator = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">curIndex</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//当前取到斐波拉契的第几位了，从1开始</span><br>  <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.curIndex === <span class="hljs-number">1</span> || <span class="hljs-built_in">this</span>.curIndex === <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-built_in">this</span>.curIndex++;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;;<br>    &#125;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-built_in">this</span>.a + <span class="hljs-built_in">this</span>.b;<br>    <span class="hljs-built_in">this</span>.curIndex++;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-built_in">this</span>.b;<br>    <span class="hljs-built_in">this</span>.b = c;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">value</span>: c,<br>      <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(iterator.next().value);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//iterator是一个迭代器</span><br><span class="hljs-keyword">var</span> iterator = &#123;<br>  <span class="hljs-attr">total</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">//可迭代3次</span><br>  <span class="hljs-attr">i</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//当前的迭代次数</span><br>  <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>      <span class="hljs-comment">//当前这一次迭代到的数据</span><br>      <span class="hljs-attr">value</span>: <span class="hljs-built_in">this</span>.i &gt; <span class="hljs-built_in">this</span>.total ? <span class="hljs-literal">undefined</span> : <span class="hljs-built_in">Math</span>.random(),<br>      <span class="hljs-attr">done</span>: <span class="hljs-built_in">this</span>.i &gt; <span class="hljs-built_in">this</span>.total,<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.i++;<br>    <span class="hljs-keyword">return</span> obj;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">//一个一个迭代，直到不能迭代为止</span><br><span class="hljs-keyword">var</span> next = iterator.next();<br><span class="hljs-keyword">while</span> (!next.done) &#123;<br>  <span class="hljs-comment">//若当前迭代的数据不是迭代器的结束</span><br>  <span class="hljs-comment">//如果当前还有数据</span><br>  <span class="hljs-built_in">console</span>.log(next.value);<br>  next = iterator.next();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个用户迭代数组的迭代器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArrayIterator</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">//下标 从0开始迭代</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">value</span>: arr[i++],<br>        <span class="hljs-attr">done</span>: i &gt; arr.length,<br>      &#125;;<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> iterator = createArrayIterator([<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><p>迭代器创建函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createIterator</span>(<span class="hljs-params">total</span>) </span>&#123;<br>  i = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">var</span> obj = &#123;<br>        <span class="hljs-comment">//当前这一次迭代到的数据</span><br>        <span class="hljs-attr">value</span>: i &gt; total ? <span class="hljs-literal">undefined</span> : <span class="hljs-built_in">Math</span>.random(),<br>        <span class="hljs-attr">done</span>: i &gt; total,<br>      &#125;;<br>      i++;<br>      <span class="hljs-keyword">return</span> obj;<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> iterator = createIterator(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">var</span> next = iterator.next();<br><span class="hljs-keyword">while</span> (!next.done) &#123;<br>  <span class="hljs-comment">//若当前迭代的数据不是迭代器的结束</span><br>  <span class="hljs-comment">//如果当前还有数据</span><br>  <span class="hljs-built_in">console</span>.log(next.value);<br>  next = iterator.next();<br>&#125;<br></code></pre></td></tr></table></figure><p>可迭代协议</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//obj满足可迭代协议</span><br><span class="hljs-comment">//obj可被迭代</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  [<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> total = <span class="hljs-number">3</span>;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">var</span> obj = &#123;<br>          <span class="hljs-comment">//当前这一次迭代到的数据</span><br>          <span class="hljs-attr">value</span>: i &gt; total ? <span class="hljs-literal">undefined</span> : <span class="hljs-built_in">Math</span>.random(),<br>          <span class="hljs-attr">done</span>: i &gt; total,<br>        &#125;;<br>        i++;<br>        <span class="hljs-keyword">return</span> obj;<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">//模拟for-of循环</span><br><span class="hljs-keyword">var</span> iterator = obj[<span class="hljs-built_in">Symbol</span>.iterator]();<br><span class="hljs-keyword">var</span> result = iterator.next();<br><span class="hljs-keyword">while</span> (!result.done) &#123;<br>  <span class="hljs-comment">//有数据</span><br>  <span class="hljs-keyword">const</span> item = result.value;<br>  <span class="hljs-built_in">console</span>.log(item); <span class="hljs-comment">//执行循环体</span><br>  result = iterator.next();<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> obj) &#123;<br>  <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11-更多的集合类型"><a href="#11-更多的集合类型" class="headerlink" title="11.更多的集合类型"></a>11.更多的集合类型</h1><h2 id="11-1-set-集合"><a href="#11-1-set-集合" class="headerlink" title="11-1. set 集合"></a>11-1. set 集合</h2><blockquote><p>一直以来，JS 只能使用数组和对象来保存多个数据，缺乏像其他语言那样拥有丰富的集合类型。因此，ES6 新增了两种集合类型（set 和 map），用于在不同的场景中发挥作用。</p></blockquote><p><strong>set 用于存放不重复的数据</strong></p><ol><li>如何创建 set 集合</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(); <span class="hljs-comment">//创建一个没有任何内容的set集合</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(iterable); <span class="hljs-comment">//创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果</span><br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><span class="hljs-built_in">console</span>.log(set1);<br><span class="hljs-keyword">const</span> set2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]); <span class="hljs-comment">//简单的数组去重</span><br><span class="hljs-built_in">console</span>.log(set2);<br><span class="hljs-keyword">const</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(<span class="hljs-string">&quot;asdfasfasf&quot;</span>); <span class="hljs-comment">//会把字符串转成string对象，string对象可迭代</span><br><span class="hljs-built_in">console</span>.log(s2);<br></code></pre></td></tr></table></figure><ol start="2"><li>如何对 set 集合进行后续操作</li></ol><ul><li>add(数据): 添加一个数据到 set 集合末尾，如果数据已存在，则不进行任何操作<ul><li>set 使用 Object.is 的方式判断两个数据是否相同，但是，针对+0 和-0，set 认为是相等</li><li>Object.is(+0,-0)—-false</li></ul></li><li>has(数据): 判断 set 中是否存在对应的数据</li><li>delete(数据)：删除匹配的数据，返回是否删除成功</li><li>clear()：清空整个 set 集合</li><li>size: 获取 set 集合中的元素数量，只读属性，无法重新赋值</li></ul><ol start="3"><li>如何与数组进行相互转换</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([x, x, x, x, x]);<br><span class="hljs-comment">// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值</span><br><span class="hljs-keyword">const</span> arr = [...s];<br></code></pre></td></tr></table></figure><p>数组去重、字符串去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">45</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">34</span>, <span class="hljs-number">46</span>, <span class="hljs-number">6</span>, <span class="hljs-number">57</span>, <span class="hljs-number">8</span>, <span class="hljs-number">55</span>, <span class="hljs-number">6</span>, <span class="hljs-number">46</span>];<br><span class="hljs-keyword">const</span> result = [...new <span class="hljs-built_in">Set</span>(arr)];<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;asf23sdfgsdgfsafasdfasfasfasfsafsagfdsfg&quot;</span>;<br><span class="hljs-keyword">const</span> s = [...new <span class="hljs-built_in">Set</span>(str)].join(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 转成数组后转成字符串</span><br><span class="hljs-built_in">console</span>.log(s);<br></code></pre></td></tr></table></figure><blockquote><p>现有字符串”aaabbbcccdddeefggaa”，转换成连续不重复的字符串例如：abcdefga。（用正则写满分，其他方法酌情给分）（10 分）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1*/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaabbbcccdddeefggaa&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-string">&quot;$1&quot;</span>));<br></code></pre></td></tr></table></figure><ol start="4"><li>如何遍历</li></ol><p>1). 使用 for-of 循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> s1) &#123;<br>  <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br></code></pre></td></tr></table></figure><p>2). 使用 set 中的实例方法 forEach</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s1.forEach(<span class="hljs-function">(<span class="hljs-params">item, index, s</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(item, index, s);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(s1);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;总数为：&quot;</span>, s1.size);<br></code></pre></td></tr></table></figure><p>注意：set 集合中不存在下标，因此 forEach 中的回调的第二个参数和第一个参数是一致的，均表示 set 中的每一项</p><h2 id="11-2-set-应用"><a href="#11-2-set-应用" class="headerlink" title="11-2. set 应用"></a>11-2. set 应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 两个数组的并集、交集、差集 （不能出现重复项），得到的结果是一个新数组</span><br><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">33</span>, <span class="hljs-number">22</span>, <span class="hljs-number">55</span>, <span class="hljs-number">33</span>, <span class="hljs-number">11</span>, <span class="hljs-number">33</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">22</span>, <span class="hljs-number">55</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>, <span class="hljs-number">88</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>];<br></code></pre></td></tr></table></figure><p>并集<br>         去掉各自里面重复的和他们合起来重复的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 写法1</span><br><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr1.concat(arr2)); <span class="hljs-comment">// 连起来在去重</span><br><span class="hljs-keyword">const</span> result = [...s];<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-comment">// 写法2</span><br><span class="hljs-keyword">const</span> result = [...new <span class="hljs-built_in">Set</span>(arr1.concat(arr2))];<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;并集&quot;</span>, result);<br><span class="hljs-comment">// 写法3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;并集&quot;</span>, [...new <span class="hljs-built_in">Set</span>([...arr1, ...arr2])]);<br></code></pre></td></tr></table></figure><p>交集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr1);<br><span class="hljs-keyword">const</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr2);<br><span class="hljs-comment">// 方法1</span><br><span class="hljs-comment">// [...s1].filter(item =&gt; &#123;</span><br><span class="hljs-comment">//     return s2.has(item);</span><br><span class="hljs-comment">// &#125;)</span><br><span class="hljs-comment">// 方法2</span><br><span class="hljs-comment">// [...s1].filter(item =&gt; &#123;</span><br><span class="hljs-comment">//     return arr2.indexOf(item) &gt;= 0</span><br><span class="hljs-comment">// &#125;)</span><br><span class="hljs-comment">// 方法3</span><br><span class="hljs-comment">// const cross = [...new Set(arr1)].filter(item =&gt; arr2.indexOf(item) &gt;= 0);</span><br><span class="hljs-comment">// console.log(&quot;交集&quot;, cross)</span><br></code></pre></td></tr></table></figure><p>差集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// console.log(&quot;差集&quot;, [...new Set([...arr1, ...arr2])].filter(item =&gt; arr1.indexOf(item) &gt;= 0 &amp;&amp; arr2.indexOf(item) &lt; 0 || arr2.indexOf(item) &gt;= 0 &amp;&amp; arr1.indexOf(item) &lt; 0))</span><br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;差集&quot;</span>,<br>  [...new <span class="hljs-built_in">Set</span>([...arr1, ...arr2])].filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> cross.indexOf(item) &lt; <span class="hljs-number">0</span>)<br>); <span class="hljs-comment">//交集里面没有的</span><br></code></pre></td></tr></table></figure><h2 id="11-3-扩展-手写-set"><a href="#11-3-扩展-手写-set" class="headerlink" title="11-3. [扩展]手写 set"></a>11-3. [扩展]手写 set</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySet</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">iterator = []</span>)</span> &#123;<br>    <span class="hljs-comment">//不传默认空数组</span><br>    <span class="hljs-comment">//验证是否是可迭代的对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> iterator[<span class="hljs-built_in">Symbol</span>.iterator] !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">`你提供的<span class="hljs-subst">$&#123;iterator&#125;</span>不是一个可迭代的对象`</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>._datas = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> iterator) &#123;<br>      <span class="hljs-built_in">this</span>.add(item);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">size</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._datas.length;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">data</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.has(data)) &#123;<br>      <span class="hljs-comment">// 不包含data,才加入</span><br>      <span class="hljs-built_in">this</span>._datas.push(data);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">has</span>(<span class="hljs-params">data</span>)</span> &#123;<br>    <span class="hljs-comment">// 是否有data</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>._datas) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEqual(data, item)) &#123;<br>        <span class="hljs-comment">// isEqual判断两个数据是否相等</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">delete</span>(<span class="hljs-params">data</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>._datas.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">this</span>._datas[i];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEqual(element, data)) &#123;<br>        <span class="hljs-comment">//删除</span><br>        <span class="hljs-built_in">this</span>._datas.splice(i, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>._datas.length = <span class="hljs-number">0</span>;<br>  &#125;<br>  *[<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>    <span class="hljs-comment">// 遍历效果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>._datas) &#123;<br>      <span class="hljs-keyword">yield</span> item;<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">forEach</span>(<span class="hljs-params">callback</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>._datas) &#123;<br>      callback(item, item, <span class="hljs-built_in">this</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断两个数据是否相等</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">data1</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">data2</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">isEqual</span>(<span class="hljs-params">data1, data2</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (data1 === <span class="hljs-number">0</span> &amp;&amp; data2 === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.is(data1, data2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> MySet([<span class="hljs-number">35</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">35</span>]);</span><br><span class="javascript">  s.add(<span class="hljs-number">66</span>);</span><br><span class="javascript">  s.add(<span class="hljs-number">7</span>);</span><br><span class="javascript">  s.delete(<span class="hljs-number">6</span>);</span><br><span class="javascript">  <span class="hljs-comment">// for (const item of s) &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     console.log(item)</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;</span></span><br><span class="javascript"></span><br><span class="javascript">  s.forEach(<span class="hljs-function">(<span class="hljs-params">a1, a2, a3</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(a1, a2, a3);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11-4-map-集合"><a href="#11-4-map-集合" class="headerlink" title="11-4. map 集合"></a>11-4. map 集合</h2><p>键值对（key value pair）数据集合的特点：键不可重复<br>map 集合专门用于存储多个键值对数据。<br>在 map 出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。<br>使用对象存储有以下问题：</p><ol><li>键名只能是字符串（或符号）</li><li>获取数据的数量不方便</li><li>键名容易跟原型上的名称冲突</li><li>如何创建 map</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(); <span class="hljs-comment">//创建一个空的map</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(iterable); <span class="hljs-comment">//创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([<br>  [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">3</span>],<br>  [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">4</span>],<br>  [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">5</span>],<br>]);<br></code></pre></td></tr></table></figure><ol start="2"><li>如何进行后续操作</li></ol><ul><li>size：只读属性，获取当前 map 中键的数量</li><li>set(键, 值)：设置一个键值对，键和值可以是任何类型<ul><li>如果键不存在，则添加一项</li><li>如果键已存在，则修改它的值,覆盖</li><li>比较键的方式和 set 相同</li></ul></li><li>get(键): 根据一个键得到对应的值</li><li>has(键)：判断某个键是否存在</li><li>delete(键)：删除指定的键</li><li>clear(): 清空 map</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([<br>  [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">3</span>],<br>  [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">4</span>],<br>  [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">5</span>],<br>]);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;总数：&quot;</span>, mp1.size);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;get(&#x27;a&#x27;)&quot;</span>, mp1.get(<span class="hljs-string">&quot;a&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;has(&#x27;a&#x27;)&quot;</span>, mp1.has(<span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">这是两个，因为对象-地址<br>mp1.set(&#123;&#125;, <span class="hljs-number">232</span>);<br>mp1.set(&#123;&#125;, <span class="hljs-number">111</span>);<br>要想是一个<br><span class="hljs-keyword">var</span> obj = &#123;&#125;<br>mp1.set(obj, <span class="hljs-number">6456</span>);<br>mp1.set(obj, <span class="hljs-number">111</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>和数组互相转换</li></ol><p>和 set 一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([<br>  [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">3</span>],<br>  [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">10</span>],<br>  [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">4</span>],<br>  [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">5</span>],<br>]);<br><span class="hljs-keyword">const</span> result = [...mp];<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><ol start="4"><li>遍历</li></ol><ul><li>for-of，每次迭代得到的是一个长度为 2 的数组</li><li>forEach，通过回调函数遍历<ul><li>参数 1：每一项的值</li><li>参数 2：每一项的键</li><li>参数 3：map 本身</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// for (const [key, value] of mp) &#123;</span><br><span class="hljs-comment">//     console.log(key, value)</span><br><span class="hljs-comment">// &#125;</span><br>mp.forEach(<span class="hljs-function">(<span class="hljs-params">value, key, mp</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value, key, mp);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="11-5-扩展-手写-map"><a href="#11-5-扩展-手写-map" class="headerlink" title="11-5. [扩展]手写 map"></a>11-5. [扩展]手写 map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">iterable = []</span>)</span> &#123;<br>    <span class="hljs-comment">//验证是否是可迭代的对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> iterable[<span class="hljs-built_in">Symbol</span>.iterator] !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">`你提供的<span class="hljs-subst">$&#123;iterable&#125;</span>不是一个可迭代的对象`</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>._datas = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> iterable) &#123;<br>      <span class="hljs-comment">// item 也得是一个可迭代对象</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> item[<span class="hljs-built_in">Symbol</span>.iterator] !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">`你提供的<span class="hljs-subst">$&#123;item&#125;</span>不是一个可迭代的对象`</span>);<br>      &#125;<br>      <span class="hljs-keyword">const</span> iterator = item[<span class="hljs-built_in">Symbol</span>.iterator]();<br>      <span class="hljs-comment">//不一定是数组，所以用这种方式</span><br>      <span class="hljs-keyword">const</span> key = iterator.next().value;<br>      <span class="hljs-keyword">const</span> value = iterator.next().value;<br>      <span class="hljs-built_in">this</span>.set(key, value);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">key, value</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> obj = <span class="hljs-built_in">this</span>._getObj(key);<br>    <span class="hljs-keyword">if</span> (obj) &#123;<br>      <span class="hljs-comment">//已经有了就是要修改</span><br>      <span class="hljs-comment">//修改</span><br>      obj.value = value;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//没有的话添加</span><br>      <span class="hljs-built_in">this</span>._datas.push(&#123;<br>        key,<br>        value,<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> item = <span class="hljs-built_in">this</span>._getObj(key);<br>    <span class="hljs-keyword">if</span> (item) &#123;<br>      <span class="hljs-keyword">return</span> item.value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 找不到</span><br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">size</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._datas.length;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">delete</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>._datas.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">this</span>._datas[i];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEqual(element.key, key)) &#123;<br>        <span class="hljs-built_in">this</span>._datas.splice(i, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>._datas.length = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据key值从内部数组中，找到对应的数组项</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">key</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">_getObj</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>._datas) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEqual(item.key, key)) &#123;<br>        <span class="hljs-keyword">return</span> item;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">has</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._getObj(key) !== <span class="hljs-literal">undefined</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断两个数据是否相等</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">data1</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">data2</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">isEqual</span>(<span class="hljs-params">data1, data2</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (data1 === <span class="hljs-number">0</span> &amp;&amp; data2 === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.is(data1, data2);<br>  &#125;<br><br>  *[<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>    <span class="hljs-comment">//迭代器创建函数本身就是生成器函数  *</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>._datas) &#123;<br>      <span class="hljs-keyword">yield</span> [item.key, item.value];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">forEach</span>(<span class="hljs-params">callback</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>._datas) &#123;<br>      callback(item.value, item.key, <span class="hljs-built_in">this</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> mp1 = <span class="hljs-keyword">new</span> MyMap([</span><br><span class="javascript">    [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">3</span>],</span><br><span class="javascript">    [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">4</span>],</span><br><span class="javascript">    [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">5</span>],</span><br><span class="javascript">  ]);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="javascript">  mp1.set(obj, <span class="hljs-number">6456</span>);</span><br><span class="javascript">  mp1.set(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);</span><br><span class="javascript">  mp1.set(obj, <span class="hljs-number">111</span>);</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// for (const item of mp1) &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     console.log(item)</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// const result = [...mp1];</span></span><br><span class="javascript">  <span class="hljs-comment">// console.log(result)</span></span><br><span class="javascript">  mp1.forEach(<span class="hljs-function">(<span class="hljs-params">a1, a2, a3</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(a1, a2, a3);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11-6-扩展-WeakSet-和-WeakMap"><a href="#11-6-扩展-WeakSet-和-WeakMap" class="headerlink" title="11-6. [扩展]WeakSet 和 WeakMap"></a>11-6. [扩展]WeakSet 和 WeakMap</h2><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yj&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>set.add(obj);<br>obj = <span class="hljs-literal">null</span>; <span class="hljs-comment">//请问此时set里面的对象还在吗？？在。</span><br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></td></tr></table></figure><p>JS 垃圾回收</p><p>使用该集合，可以实现和 set 一样的功能，不同的是：</p><ol><li><strong>它内部存储的对象地址不会影响垃圾回收</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yj&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakSet</span>();<br>set.add(obj);<br>obj = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.log(set);<br></code></pre></td></tr></table></figure><ol start="2"><li>只能添加对象</li><li>不能遍历（不是可迭代的对象）、没有 size 属性、没有 forEach 方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yj&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> obj2 = obj;<br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakSet</span>();<br>set.add(obj);<br><br>obj = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//obj2 = null;</span><br><span class="hljs-built_in">console</span>.log(set);<br></code></pre></td></tr></table></figure><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &#123; id:&quot;1&quot;, name:&quot;姓名1&quot; &#125; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &#123; id:&quot;2&quot;, name:&quot;姓名2&quot; &#125; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &#123; id:&quot;3&quot;, name:&quot;姓名3&quot; &#125; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> wmap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>();</span><br><span class="javascript">  <span class="hljs-keyword">let</span> lis = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> li <span class="hljs-keyword">of</span> lis) &#123;</span><br><span class="javascript">    wmap.set(li, &#123;</span><br><span class="javascript">      <span class="hljs-attr">id</span>: li.innerHTML,</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">`姓名<span class="hljs-subst">$&#123;li.innerHTML&#125;</span>`</span>,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  lis[<span class="hljs-number">0</span>].remove();</span><br><span class="javascript">  lis = <span class="hljs-literal">null</span>;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(wmap);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>类似于 map 的集合，不同的是：</p><ol><li><strong>它的键存储的地址不会影响垃圾回收</strong></li><li>它的键只能是对象</li><li>不能遍历（不是可迭代的对象）、没有 size 属性、没有 forEach 方法</li></ol><h1 id="12-代理与反射"><a href="#12-代理与反射" class="headerlink" title="12. 代理与反射"></a>12. 代理与反射</h1><h2 id="12-1-回顾-属性描述符"><a href="#12-1-回顾-属性描述符" class="headerlink" title="12-1. [回顾]属性描述符"></a>12-1. [回顾]属性描述符</h2><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>Property Descriptor 属性描述符 是一个普通对象，用于描述一个属性的相关信息<br>通过<code>Object.getOwnPropertyDescriptor(对象, 属性名)</code>可以得到一个对象的某个属性的属性描述符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-built_in">console</span>.log(desc);<br></code></pre></td></tr></table></figure><ul><li>value：属性值</li><li>configurable：该属性的描述符是否可以修改</li><li>enumerable：该属性是否可以被枚举</li><li>writable：该属性是否可以被重新赋值<blockquote><p><code>Object.getOwnPropertyDescriptors(对象)</code>可以得到某个对象的所有属性描述符</p></blockquote></li></ul><p>如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:<br>Object.defineProperty(对象, 属性名, 描述符);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;a&quot;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//描述符不可以修改</span><br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//不可枚举</span><br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//不可写</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-built_in">console</span>.log(prop); <span class="hljs-comment">//只有b,没有a了</span><br>&#125;<br>obj.a = <span class="hljs-number">10</span>; <span class="hljs-comment">//不可写</span><br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-keyword">const</span> props = <span class="hljs-built_in">Object</span>.keys(obj); <span class="hljs-comment">//得到对象的所有属性</span><br><span class="hljs-built_in">console</span>.log(props);<br><span class="hljs-keyword">const</span> values = <span class="hljs-built_in">Object</span>.values(obj); <span class="hljs-comment">//得到对象的所有值</span><br><span class="hljs-built_in">console</span>.log(values);<br></code></pre></td></tr></table></figure><p>Object.defineProperties(对象, 多个属性的描述符)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperties(obj, &#123;<br>  <span class="hljs-attr">a</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="存取器属性"><a href="#存取器属性" class="headerlink" title="存取器属性"></a>存取器属性</h3><p>属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。<br>get 和 set 配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行 get 方法，将 get 方法得到的返回值作为属性值；如果给该属性赋值，则会运行 set 方法。<br>属性已经不再内存里面了，而是 get 和 set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;a&quot;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;运行了属性a的get函数&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;运行了属性a的set函数&quot;</span>, val);<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">// obj.a的时候运行get函数</span><br><span class="hljs-comment">// obj.a赋值的时候运行set函数</span><br><span class="hljs-comment">// 所以console.log(obj.a)//undefined,因为get函数没有返回结果</span><br>obj.a = <span class="hljs-number">1</span>; <span class="hljs-comment">//相当于set(20)</span><br><span class="hljs-built_in">console</span>.log(obj.a); <span class="hljs-comment">// 相当于console.log(get())</span><br>运行set;<br>运行get;<br><span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 演示1</span><br><span class="hljs-comment">// obj.a = 20 + 10; // set(20 + 10) 相当于运行set()</span><br><span class="hljs-comment">// console.log(obj.a); // console.log(get()) 读取属性a，相当于运行get()</span><br><span class="hljs-comment">// 演示2</span><br><span class="hljs-comment">// obj.a = obj.a + 1; // set(obj.a + 1) 相当于读取 set(get() + 1)  undefined+1=NaN</span><br><span class="hljs-comment">// console.log(obj.a);//读取属性一定运行get  undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;a&quot;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;运行了属性a的get函数&quot;</span>);<br>    <span class="hljs-keyword">return</span> obj._a;<br>    <span class="hljs-comment">// 错误的思路：return obj.a</span><br>    <span class="hljs-comment">// 这里就成了无限递归，无限读取，导致浏览器卡死，同理set</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;运行了属性a的set函数&quot;</span>, val);<br>    obj._a = val;<br>  &#125;,<br>&#125;);<br>obj.a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(obj.a);<br></code></pre></td></tr></table></figure><p>存取器属性最大的意义，在于可以控制属性的读取和赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;adsf&quot;</span>,<br>&#125;;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;age&quot;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> obj._age;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val !== <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;年龄必须是一个数字&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">0</span>) &#123;<br>      val = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">200</span>) &#123;<br>      val = <span class="hljs-number">200</span>;<br>    &#125;<br>    obj._age = val;<br>  &#125;,<br>&#125;);<br>obj.age = <span class="hljs-string">&quot;Asdfasasdf&quot;</span>;<br><span class="hljs-built_in">console</span>.log(obj.age);<br></code></pre></td></tr></table></figure><p>应用：将对象的属性和元素关联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>年龄：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> spanName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> spanAge = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;age&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> user = &#123;&#125;;</span><br><span class="javascript">      <span class="hljs-built_in">Object</span>.defineProperties(user, &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: &#123;</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> spanName.innerText;</span><br><span class="javascript">            <span class="hljs-comment">//获取页面窗口中对应的元素内容</span></span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;</span><br><span class="javascript">            spanName.innerText = val;</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: &#123;</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> +spanAge.innerText;</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val !== <span class="hljs-string">&quot;number&quot;</span>) &#123;</span><br><span class="javascript">              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;年龄必须是一个数字&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">              val = <span class="hljs-number">0</span>;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">200</span>) &#123;</span><br><span class="javascript">              val = <span class="hljs-number">200</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            spanAge.innerText = val;</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="12-2-Reflect"><a href="#12-2-Reflect" class="headerlink" title="12-2. Reflect"></a>12-2. Reflect</h2><ol><li>Reflect 是什么？</li></ol><p>Reflect 是一个内置的 JS 对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些 JS 底层功能<br>由于它类似于其他语言的<strong>反射</strong>，因此取名为 Reflect</p><ol start="2"><li>它可以做什么？</li></ol><p>使用 Reflect 可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中   等等功能</p><ol start="3"><li>这些功能不是已经存在了吗？为什么还需要用 Reflect 实现一次？</li></ol><p>有一个重要的理念，在 ES5 就被提出：减少魔法、让代码更加纯粹<br>这种理念很大程度上是受到函数式编程的影响<br>ES6 进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的 API，并高度聚合到某个对象中，于是，就造就了 Reflect 对象<br>因此，你可以看到 Reflect 对象中有很多的 API 都可以使用过去的某种语法或其他 API 实现。</p><ol start="4"><li>它里面到底提供了哪些 API 呢？</li></ol><ul><li>Reflect.set(target, propertyKey, value): 设置对象 target 的属性 propertyKey 的值为 value，等同于给对象的属性赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-comment">// obj.a = 10;</span><br><span class="hljs-built_in">Reflect</span>.set(obj, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">//给obj的a赋值为10</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Reflect</span>.get(obj, <span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li>Reflect.get(target, propertyKey): 读取对象 target 的属性 propertyKey，等同于读取对象的属性值</li><li>Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定 this 和参数列表。等同于函数调用</li><li>Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性</li><li>Reflect.defineProperty(target, propertyKey, attributes)：类似于 Object.defineProperty，不同的是如果配置出现问题，返回 false 而不是报错</li><li>Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象</li><li>Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性</li><li>其他 API：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// function method(a, b)&#123;</span><br><span class="hljs-comment">//     console.log(&quot;method&quot;, a, b);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// // method(3, 4);</span><br><span class="hljs-comment">// Reflect.apply(method, null, [3, 4])</span><br><br><span class="hljs-comment">// const obj = &#123;</span><br><span class="hljs-comment">//     a: 1,</span><br><span class="hljs-comment">//     b: 2</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// // delete obj.a;</span><br><span class="hljs-comment">// Reflect.deleteProperty(obj, &quot;a&quot;);</span><br><span class="hljs-comment">// console.log(obj);</span><br><br><span class="hljs-comment">// function Test(a, b) &#123;</span><br><span class="hljs-comment">//     this.a = a;</span><br><span class="hljs-comment">//     this.b = b;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// // const t = new Test(1, 3);</span><br><span class="hljs-comment">// const t = Reflect.construct(Test, [1, 3]);</span><br><span class="hljs-comment">// console.log(t)</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><br><span class="hljs-comment">// console.log(&quot;a&quot; in obj);</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Reflect</span>.has(obj, <span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="12-3-Proxy"><a href="#12-3-Proxy" class="headerlink" title="12-3. Proxy"></a>12-3. Proxy</h2><h3 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h3><p>代理：提供了修改底层实现的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//代理一个目标对象</span><br><span class="hljs-comment">//target：目标对象</span><br><span class="hljs-comment">//handler：是一个普通对象，其中可以重写底层实现(可以重写反射里面所有的api)</span><br><span class="hljs-comment">//返回一个代理对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, propertyKey, value</span>)</span> &#123;<br>    <span class="hljs-comment">// console.log(target, propertyKey, value);</span><br>    <span class="hljs-comment">// target[propertyKey] = value;修改属性的值。重写了底层实现</span><br><br>    <span class="hljs-comment">// 等价于</span><br>    <span class="hljs-built_in">Reflect</span>.set(target, propertyKey, value);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, propertyKey</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Reflect</span>.has(target, propertyKey)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, propertyKey);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">has</span>(<span class="hljs-params">target, propertyKey</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//代理说没有就没有</span><br>  &#125;,<br>&#125;);<br><span class="hljs-comment">// console.log(proxy);</span><br><span class="hljs-comment">// proxy.a = 10;</span><br><span class="hljs-comment">// console.log(proxy.a);</span><br><br><span class="hljs-built_in">console</span>.log(proxy.d); <span class="hljs-comment">//运行get</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">in</span> proxy);<br></code></pre></td></tr></table></figure><h2 id="12-4-应用-观察者模式"><a href="#12-4-应用-观察者模式" class="headerlink" title="12-4. 应用-观察者模式"></a>12-4. 应用-观察者模式</h2><p>有一个对象，是观察者，它用于观察另外一个对象的属性值变化，当属性值变化后会收到一个通知，可能会做一些事。<br>​</p><blockquote><p>vue2</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//创建一个观察者</span></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observer</span>(<span class="hljs-params">target</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//通过观察目标元素的变化，把这些属性渲染到页面上</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> ob = &#123;&#125;;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> props = <span class="hljs-built_in">Object</span>.keys(target); <span class="hljs-comment">// 拿到所有属性名</span></span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">of</span> props) &#123;</span><br><span class="javascript">      <span class="hljs-built_in">Object</span>.defineProperty(ob, prop, &#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 获取的时候</span></span><br><span class="javascript">          <span class="hljs-keyword">return</span> target[prop];</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 设置的时候</span></span><br><span class="javascript">          target[prop] = val;</span><br><span class="javascript">          render();</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//这两个属性默认不能被枚举</span></span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    render();</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> html = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(ob)) &#123;</span><br><span class="javascript">        <span class="hljs-comment">//拼接属性名属性值</span></span><br><span class="javascript">        html += <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">&lt;p&gt;&lt;span&gt;<span class="hljs-subst">$&#123;prop&#125;</span>：&lt;/span&gt;&lt;span&gt;<span class="hljs-subst">$&#123;ob[prop]&#125;</span>&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="javascript">`</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      div.innerHTML = html;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> ob;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> target = &#123;</span><br><span class="javascript">    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> obj = observer(target);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺陷：搞出来了两个对象，占用了内存，代理不占用内存</p><blockquote><p>vue3</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//创建一个观察者</span></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observer</span>(<span class="hljs-params">target</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, prop, value</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 重写底层实现</span></span><br><span class="javascript">        <span class="hljs-built_in">Reflect</span>.set(target, prop, value);</span><br><span class="javascript">        render();</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, prop</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    render();</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> html = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(target)) &#123;</span><br><span class="javascript">        html += <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">&lt;p&gt;&lt;span&gt;<span class="hljs-subst">$&#123;prop&#125;</span>：&lt;/span&gt;&lt;span&gt;<span class="hljs-subst">$&#123;target[prop]&#125;</span>&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="javascript">`</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      div.innerHTML = html;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> proxy;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> target = &#123;</span><br><span class="javascript">    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> obj = observer(target);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="12-5-应用-偷懒的构造函数"><a href="#12-5-应用-偷懒的构造函数" class="headerlink" title="12-5. 应用-偷懒的构造函数"></a>12-5. 应用-偷懒的构造函数</h2><p>恶心的类创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>()</span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">firstName, lastName, age</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.firstName = firstName;<br>    <span class="hljs-built_in">this</span>.lastName = lastName;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ConstructorProxy</span>(<span class="hljs-params">Class, ...propNames</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(Class, &#123;<br>    <span class="hljs-function"><span class="hljs-title">construct</span>(<span class="hljs-params">target, argumentsList</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> obj = <span class="hljs-built_in">Reflect</span>.construct(target, argumentsList);<br>      propNames.forEach(<span class="hljs-function">(<span class="hljs-params">name, i</span>) =&gt;</span> &#123;<br>        obj[name] = argumentsList[i];<br>      &#125;);<br>      <span class="hljs-keyword">return</span> obj;<br>    &#125;,<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">const</span> UserProxy = ConstructorProxy(User, <span class="hljs-string">&quot;firstName&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>);<br><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> UserProxy(<span class="hljs-string">&quot;袁&quot;</span>, <span class="hljs-string">&quot;进&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(obj);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Monster</span> </span>&#123;&#125;<br><span class="hljs-keyword">const</span> MonsterProxy = ConstructorProxy(<br>  Monster,<br>  <span class="hljs-string">&quot;attack&quot;</span>,<br>  <span class="hljs-string">&quot;defence&quot;</span>,<br>  <span class="hljs-string">&quot;hp&quot;</span>,<br>  <span class="hljs-string">&quot;rate&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span><br>);<br><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> MonsterProxy(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">100</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;怪物&quot;</span>);<br><span class="hljs-built_in">console</span>.log(m);<br></code></pre></td></tr></table></figure><h2 id="12-6-应用-可验证的函数参数"><a href="#12-6-应用-可验证的函数参数" class="headerlink" title="12-6. 应用-可验证的函数参数"></a>12-6. 应用-可验证的函数参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validatorFunction</span>(<span class="hljs-params">func, ...types</span>) </span>&#123;<br>  <span class="hljs-comment">//并不占据内存空间，只是个代理</span><br>  <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(func, &#123;<br>    <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">target, thisArgument, argumentsList</span>)</span> &#123;<br>      types.forEach(<span class="hljs-function">(<span class="hljs-params">t, i</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 进行验证</span><br>        <span class="hljs-keyword">const</span> arg = argumentsList[i];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> arg !== t) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<br>            <span class="hljs-string">`第<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>个参数<span class="hljs-subst">$&#123;argumentsList[i]&#125;</span>不满足类型<span class="hljs-subst">$&#123;t&#125;</span>`</span><br>          );<br>        &#125;<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.apply(target, thisArgument, argumentsList);<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> proxy;<br>&#125;<br><br><span class="hljs-keyword">const</span> sumProxy = validatorFunction(sum, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>);<br><span class="hljs-built_in">console</span>.log(sumProxy(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>以前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validatorFunction</span>(<span class="hljs-params">func, ...types</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...argumentsList</span>) </span>&#123;<br>    <span class="hljs-comment">// 新的函数占用内存</span><br>    types.forEach(<span class="hljs-function">(<span class="hljs-params">t, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> arg = argumentsList[i];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> arg !== t) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<br>          <span class="hljs-string">`第<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>个参数<span class="hljs-subst">$&#123;argumentsList[i]&#125;</span>不满足类型<span class="hljs-subst">$&#123;t&#125;</span>`</span><br>        );<br>      &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> func(...argumentsList); <span class="hljs-comment">//运行这个函数</span><br>  &#125;;<br>  <span class="hljs-keyword">return</span> proxy;<br>&#125;<br><br><span class="hljs-keyword">const</span> sumProxy = validatorFunction(sum, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>);<br><span class="hljs-built_in">console</span>.log(sumProxy(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h1 id="13-增强的数组功能"><a href="#13-增强的数组功能" class="headerlink" title="13. 增强的数组功能"></a>13. 增强的数组功能</h1><h2 id="13-1-新增的数组-API"><a href="#13-1-新增的数组-API" class="headerlink" title="13-1. 新增的数组 API"></a>13-1. 新增的数组 API</h2><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>Array.of(…args): 使用指定的数组项创建一个新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 作用一样为什么要出新的API呢？主要为了解决只有一个参数的时候</span><br></code></pre></td></tr></table></figure><ul><li>Array.from(arg): 通过给定的类数组 或 可迭代对象 创建一个新的数组。</li></ul><p>之前类数组转换成数组：Array.prototype.slice.call(divs, 0)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;div&quot;</span>); <span class="hljs-comment">// 类数组，原形不是Array，不是Array构造出来的</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Array</span>.from(divs);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul><li>find(callback): 用于查找满足条件的第一个元素</li><li>findIndex(callback)：用于查找满足条件的第一个元素的下标</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;d&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;e&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;g&quot;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>,<br>  &#125;,<br>];<br><br><span class="hljs-comment">//找到id为5的对象</span><br><span class="hljs-keyword">const</span> result = arr.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (item.id === <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br>简写;<br><span class="hljs-keyword">const</span> result = arr.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.id === <span class="hljs-number">5</span>);<br><span class="hljs-keyword">const</span> resultIndex = arr.findIndex(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.id === <span class="hljs-number">5</span>);<br><br><span class="hljs-built_in">console</span>.log(result, resultIndex);<br></code></pre></td></tr></table></figure><ul><li>fill(data)：用指定的数据填充满数组所有的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建了一个长度为100的数组，数组的每一项是&quot;abc&quot;</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">100</span>);<br>arr.fill(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>copyWithin(target, start?, end?): 在数组内部完成复制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-comment">//从下标2开始，改变数组的数据，数据来自于下标0位置开始</span><br><span class="hljs-comment">// arr.copyWithin(2); // [1, 2, 1, 2, 3, 4]</span><br><span class="hljs-comment">// arr.copyWithin(2, 1); // [1, 2, 2, 3, 4, 5]第二个参数：从哪个位置复制数据</span><br><span class="hljs-comment">// arr.copyWithin(2, 1, 3); // [1, 2, 2, 3, 5, 6]第三个参数在哪个位置复制停止</span><br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><ul><li>includes(data)：判断数组中是否包含某个值，使用 Object.is 匹配</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">45</span>, <span class="hljs-number">21</span>, <span class="hljs-number">356</span>, <span class="hljs-number">66</span>, <span class="hljs-number">6</span>, <span class="hljs-literal">NaN</span>, <span class="hljs-number">723</span>, <span class="hljs-number">54</span>];<br><br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">66</span>) &gt;= <span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-literal">NaN</span>));<br></code></pre></td></tr></table></figure><h2 id="13-2-扩展-类型化数组"><a href="#13-2-扩展-类型化数组" class="headerlink" title="13-2. [扩展]类型化数组"></a>13-2. [扩展]类型化数组</h2><h3 id="数字存储的前置知识"><a href="#数字存储的前置知识" class="headerlink" title="数字存储的前置知识"></a>数字存储的前置知识</h3><ol><li>计算机必须使用固定的位数来存储数字，无论存储的数字是大是小，在内存中占用的空间是固定的。</li><li>n 位的无符号整数能表示的数字是 2^n 个，取值范围是：0 ~ 2^n - 1</li><li>n 位的有符号整数能表示的数字是 2n 个，取值范围是：-2(n-1) ~ 2^(n-1) - 1</li><li>浮点数表示法可以用于表示整数和小数，目前分为两种标准：<ol><li>32 位浮点数：又称为单精度浮点数，它用 1 位表示符号，8 位表示阶码，23 位表示尾数</li><li>64 位浮点数：又称为双精度浮点数，它用 1 位表示符号，11 位表示阶码，52 位表示尾数</li></ol></li><li>JS 中的所有数字，均使用双精度浮点数保存</li></ol><h3 id="类型化数组"><a href="#类型化数组" class="headerlink" title="类型化数组"></a>类型化数组</h3><p>类型化数组：用于优化多个数字的存储<br>具体分为：</p><ul><li>Int8Array： 8 位有符号整数（-128 ~ 127）</li><li>Uint8Array： 8 位无符号整数（0 ~ 255）</li><li>Int16Array: …</li><li>Uint16Array: …</li><li>Int32Array: …</li><li>Uint32Array: …</li><li>Float32Array:</li><li>Float64Array</li></ul><ol><li>如何创建数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> 数组构造函数(长度)<br><br>数组构造函数.of(元素...)<br><br>数组构造函数.from(可迭代对象)<br><br><span class="hljs-keyword">new</span> 数组构造函数(其他类型化数组)<br></code></pre></td></tr></table></figure><ol start="2"><li>得到长度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">数组.length; <span class="hljs-comment">//得到元素数量</span><br>数组.byteLength; <span class="hljs-comment">//得到占用的字节数</span><br></code></pre></td></tr></table></figure><ol start="3"><li>其他的用法跟普通数组一致，但是：</li></ol><ul><li>不能增加和删除数据，类型化数组的长度固定</li><li>一些返回数组的方法，返回的数组是同类型化的新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// const arr = new Int32Array(10);</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">Uint8Array</span>.of(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">// console.log(arr.length);</span><br><span class="hljs-comment">// console.log(arr.byteLength);</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = <span class="hljs-built_in">Int32Array</span>.of(<span class="hljs-number">35111</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>);<br><br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int8Array</span>(arr1);<br><br><span class="hljs-built_in">console</span>.log(arr1 === arr2);<br><span class="hljs-built_in">console</span>.log(arr1, arr2);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">Int8Array</span>.of(<span class="hljs-number">125</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>);<br><span class="hljs-keyword">const</span> arr2 = arr.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(arr2);<br><br><span class="hljs-comment">// arr[1] = 100;</span><br><span class="hljs-comment">// console.log(arr);</span><br><span class="hljs-comment">// console.log(arr[1])</span><br><span class="hljs-comment">// for (const item of arr) &#123;</span><br><span class="hljs-comment">//     console.log(item)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// arr[4] = 1000; //增加无效</span><br><span class="hljs-comment">// delete arr[0]; //删除无效</span><br><span class="hljs-comment">// console.log(arr)</span><br></code></pre></td></tr></table></figure><h2 id="13-3-扩展-ArrayBuffer"><a href="#13-3-扩展-ArrayBuffer" class="headerlink" title="13-3. [扩展]ArrayBuffer"></a>13-3. [扩展]ArrayBuffer</h2><h3 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h3><p>ArrayBuffer：一个对象，用于存储一块固定内存大小的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(字节数);<br></code></pre></td></tr></table></figure><p>可以通过属性<code>byteLength</code>得到字节数，可以通过方法<code>slice</code>得到新的 ArrayBuffer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建了一个用于存储10个字节的内存空间</span><br><span class="hljs-keyword">const</span> bf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">const</span> bf2 = bf.slice(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">//起始的字节数，结束的字节数，不填默认赋值旧数组</span><br><span class="hljs-built_in">console</span>.log(bf, bf2);<br></code></pre></td></tr></table></figure><h3 id="读写-ArrayBuffer"><a href="#读写-ArrayBuffer" class="headerlink" title="读写 ArrayBuffer"></a>读写 ArrayBuffer</h3><ol><li>使用 DataView</li></ol><p>通常会在需要混用多种存储格式时使用 DataView</p><ol start="2"><li>使用类型化数组</li></ol><p>实际上，每一个类型化数组都对应一个 ArrayBuffer，如果没有手动指定 ArrayBuffer，类型化数组创建时，会新建一个 ArrayBuffer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建了一个用于存储10个字节的内存空间</span><br><span class="hljs-keyword">const</span> bf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">const</span> view = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(bf, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 偏移量3，操作4</span><br><span class="hljs-comment">// console.log(view);</span><br>view.setInt16(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 设置</span><br><span class="hljs-built_in">console</span>.log(view);<br><span class="hljs-built_in">console</span>.log(view.getInt16(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 读取数据</span><br></code></pre></td></tr></table></figure><p>类型化数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//10个字节的内存</span><br><span class="hljs-keyword">const</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int8Array</span>(bf);<br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int16Array</span>(bf);<br><span class="hljs-built_in">console</span>.log(arr1 === arr2); <span class="hljs-comment">// 类型化数组不一样</span><br><span class="hljs-built_in">console</span>.log(arr1.buffer === arr2.buffer); <span class="hljs-comment">// 操作的内存空间一样</span><br><span class="hljs-comment">// 操作</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(arr1);<br><span class="hljs-built_in">console</span>.log(arr2);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//10个字节的内存</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int16Array</span>(bf);<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">2344</span>; <span class="hljs-comment">//操作了两个字节</span><br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><h2 id="13-4-扩展-制作黑白图片"><a href="#13-4-扩展-制作黑白图片" class="headerlink" title="13-4. [扩展]制作黑白图片"></a>13-4. [扩展]制作黑白图片</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/2020/03/20/HTML5/"/>
    <url>/2020/03/20/HTML5/</url>
    
    <content type="html"><![CDATA[<h1 id="1-内容大纲"><a href="#1-内容大纲" class="headerlink" title="1.内容大纲"></a>1.内容大纲</h1><p>1.新增的属性</p><ul><li><p>placeholder</p></li><li><p>Calendar, date, time, email, url, search</p></li><li><p>ContentEditable</p></li><li><p>Draggable</p></li><li><p>Hidden</p></li><li><p>Content-menu</p></li><li><p>Data-Val(自定义属性)</p><p>2.新增的标签</p></li><li><p>语义化标签</p></li><li><p>canvas</p></li><li><p>svg</p></li><li><p>Audio(声音播放)</p></li><li><p>Video(视频播放)</p><p>3.API</p></li><li><p>移动端网页开发一般指的是 h5</p></li><li><p>定位（需要地理位置的功能）</p></li><li><p>重力感应（手机里面的陀螺仪（微信摇一摇，赛车转弯））</p></li><li><p>request-animation-frame（动画优化）</p></li><li><p>History 历史界面（控制当前页面的历史记录）</p></li><li><p>LocalStorage（本地存储，电脑/浏览器关闭都会保留）；SessionStorage，（会话存储：窗口关闭就消失）。 都是存储信息（比如历史最高记录）</p></li><li><p>WebSocket（在线聊天，聊天室）</p></li><li><p>FileReader(文件读取，预览图)</p></li><li><p>WebWoker（文件的异步，提升性能，提升交互体验）</p></li><li><p>Fetch（传说中要替代 AJAX 的东西）</p></li></ul><h1 id="2-属性篇-input-新增-type"><a href="#2-属性篇-input-新增-type" class="headerlink" title="2.属性篇_input 新增 type"></a>2.属性篇_input 新增 type</h1><h2 id="1-placeholder"><a href="#1-placeholder" class="headerlink" title="1.placeholder"></a>1.placeholder</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名/手机/邮箱&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-input-新增-type"><a href="#2-input-新增-type" class="headerlink" title="2.input 新增 type"></a>2.input 新增 type</h2><p>以前学的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>input 新增 type</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Calendar类 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 不常用原因之一：chrome支持，Safari,IE不支持 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 不常用原因之一：chrome支持，Safari,IE不支持 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;week&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- 第几周  不常用原因之一：chrome支持，Safari,IE不支持 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime-local&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- 不常用原因之一：chrome支持，Safari,IE不支持 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- 限制输入，仅数字可以。不常用原因之一：chrome支持，Safari,IE不支持--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- 邮箱格式 不常用原因之一：chrome，火狐支持，Safari,IE不支持--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- 颜色选择器 不常用原因之一：chrome支持，Safari,IE不支持--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;range&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- chrome,Safar支持 ，火狐，IE不支持--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><span class="hljs-comment">&lt;!-- 自动提示历史搜索.chrome支持,Safar支持一点,IE不支持 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- chrome，火狐支持,Safar,IE不支持 --&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-ContentEditable"><a href="#3-ContentEditable" class="headerlink" title="3.ContentEditable"></a>3.ContentEditable</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Panda<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>想修改内容<br>原生方法：增加点击事件修改<br>新方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>Panda<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认值 false,没有兼容性问题,可以继承(包裹的子元素),可以覆盖(后来设置的覆盖前面设置的)<br>常见误区：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>Panda<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>姓别：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 会导致删除br等标签 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：实战开发可用属性:contenteditable, placeholder</p><h1 id="4-Drag-被拖拽元素"><a href="#4-Drag-被拖拽元素" class="headerlink" title="4.Drag 被拖拽元素"></a>4.Drag 被拖拽元素</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 谷歌，safari可以，火狐，Ie不支持 --&gt;</span><br></code></pre></td></tr></table></figure><p>默认值 false</p><p>默认值为 true 的标签(默认带有拖拽功能的标签)：a 标签和 img 标签</p><p>拖拽生命周期 1.拖拽开始，拖拽进行中，拖拽结束 2.组成：被拖拽的物体，目标区域<br>拖拽事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oDragDiv = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;a&quot;</span>)[<span class="hljs-number">0</span>];<br>oDragDiv.ondragstart = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(e);<br>&#125;; <span class="hljs-comment">// 按下物体的瞬间不触发事件，只有拖动才会触发开始事件</span><br>oDragDiv.ondrag = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">//移动事件</span><br>  <span class="hljs-built_in">console</span>.log(e);<br>&#125;;<br>oDragDiv.ondragend = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(e);<br>&#125;;<br><span class="hljs-comment">// 从而得出移动多少点</span><br></code></pre></td></tr></table></figure><p>小功能：.a{position:absolute}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDragDiv = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;a&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> beginX = <span class="hljs-number">0</span>;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> beginY = <span class="hljs-number">0</span>;</span><br><span class="javascript">  oDragDiv.ondragstart = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    beginX = e.clientX;</span><br><span class="javascript">    beginY = e.clientY;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  oDragDiv.ondragend = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> x = e.clientX - beginX;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> y = e.clientY - beginY;</span><br><span class="javascript">    oDragDiv.style.left = oDragDiv.offsetLeft + x + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">    oDragDiv.style.top = oDragDiv.offsetTop + y + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-Drag-目标元素（目标区域）"><a href="#5-Drag-目标元素（目标区域）" class="headerlink" title="5.Drag 目标元素（目标区域）"></a>5.Drag 目标元素（目标区域）</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br><span class="hljs-selector-class">.target</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">600px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDragDiv = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;a&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  oDragDiv.ondragstart = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;&#125;;</span><br><span class="javascript">  oDragDiv.ondrag = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//只要移动就不停的触发</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  oDragDiv.ondragend = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;&#125;;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDragTarget = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;target&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  oDragTarget.ondragenter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//不是元素图形进入就触发的而是拖拽的鼠标进入才触发的</span></span><br><span class="javascript">    <span class="hljs-comment">// console.log(e);</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  oDragTarget.ondragover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//类似于ondrag，只要在区域内移动，就不停的触发</span></span><br><span class="javascript">    <span class="hljs-comment">// console.log(e);</span></span><br><span class="javascript">    <span class="hljs-comment">// ondragover--回到原处 / 执行drop事件</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  oDragTarget.ondragleave = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e);</span><br><span class="javascript">    <span class="hljs-comment">// 离开就触发</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  oDragTarget.ondrop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e);</span><br><span class="javascript">    <span class="hljs-comment">// 所有标签元素，当拖拽周期结束时，默认事件是回到原处，要想执行ondrop，必须在ondragover里面加上e.preventDefault();</span></span><br><span class="javascript">    <span class="hljs-comment">// 事件是由行为触发，一个行为可以不只触发一个事件</span></span><br><span class="javascript">    <span class="hljs-comment">// 抬起的时候，有ondragover默认回到原处的事件，只要阻止回到原处，就可以执行drop事件</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// A -&gt; B(阻止) -&gt; C             想阻止c,只能在B上阻止  责任链模式</span></span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-拖拽-demo"><a href="#6-拖拽-demo" class="headerlink" title="6.拖拽 demo"></a>6.拖拽 demo</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#abcdef</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto <span class="hljs-number">0px</span> auto;</span><br><span class="css">        <span class="hljs-comment">/* 居中，上下10px */</span></span><br><span class="css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> dragDom;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> liList = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; liList.length; i++) &#123;</span><br><span class="javascript">        liList[i].setAttribute(<span class="hljs-string">&quot;draggable&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">//赋予class</span></span><br><span class="javascript">        liList[i].ondragstart = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(e.target);</span><br><span class="javascript">          dragDom = e.target;</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> box2 = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;box2&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      box2.ondragover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        e.preventDefault();</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      box2.ondrop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(dragDom);</span></span><br><span class="javascript">        box2.appendChild(dragDom);</span><br><span class="javascript">        dragDom = <span class="hljs-literal">null</span>;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 拖回去</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> box1 = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;box1&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      box1.ondragover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        e.preventDefault();</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      box1.ondrop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(dragDom);</span></span><br><span class="javascript">        box1.appendChild(dragDom);</span><br><span class="javascript">        dragDom = <span class="hljs-literal">null</span>;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7-dataTransfer-补充属性"><a href="#7-dataTransfer-补充属性" class="headerlink" title="7.dataTransfer 补充属性"></a>7.dataTransfer 补充属性</h1><p>effectAllowed</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">oDragDiv.ondragstart = function (e) &#123; e.dataTransfer.effectAllowed =<br>&quot;link&quot;;//指针是什么样子，只能在ondragstart里面设置 &#125; /其他光标：link copy move<br>copyMove linkMove all<br></code></pre></td></tr></table></figure><p>dropEffect</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">oDragTarget.ondrop = function (e) &#123; e.dataTransfer.dropEffect =<br>&quot;link&quot;;//放下时候的效果，只在drop里面设置 &#125;<br></code></pre></td></tr></table></figure><p>试验不通过？？</p><h1 id="8-标签篇-语义化标签"><a href="#8-标签篇-语义化标签" class="headerlink" title="8.标签篇_语义化标签"></a>8.标签篇_语义化标签</h1><p>全是 div，只是语义化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-comment">&lt;!--文章，可以直接被引用拿走的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-comment">&lt;!--段落结构，一般section放在article里面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-comment">&lt;!--侧边栏--&gt;</span><br></code></pre></td></tr></table></figure><h1 id="9-canvas-画线"><a href="#9-canvas-画线" class="headerlink" title="9.canvas 画线"></a>9.canvas 画线</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;can&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：只能在行间样式设置大小，不能通过 css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span><br><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//起点</span><br>ctx.lineTo(<span class="hljs-number">200</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//终点</span><br>ctx.stroke(); <span class="hljs-comment">//画上去</span><br>ctx.closePath(); <span class="hljs-comment">// 连续线，形成闭合</span><br>ctx.fill(); <span class="hljs-comment">//填充</span><br>ctx.lineWidth = <span class="hljs-number">10</span>; <span class="hljs-comment">// 设置线的粗细   写在哪，都相当于写在moveto的后面？？？？咋不管用</span><br></code></pre></td></tr></table></figure><p>想实现一个细，一个粗</p><p>一个图形，一笔画出来的，只能一个粗细，想实现，必须开启新图像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.beginPath();<br></code></pre></td></tr></table></figure><p>closePath()是图形闭合，不是一个图，不能闭合</p><h1 id="10canvas-画矩形"><a href="#10canvas-画矩形" class="headerlink" title="10canvas 画矩形"></a>10canvas 画矩形</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.rect(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>);<br>ctx.stroke();<br>ctx.fill();<br></code></pre></td></tr></table></figure><p>简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.strokeRect(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//矩形</span><br>ctx.fillRect(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//填充矩形</span><br></code></pre></td></tr></table></figure><h1 id="11-小方块下落"><a href="#11-小方块下落" class="headerlink" title="11. 小方块下落"></a>11. 小方块下落</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">canvas</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;can&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> height = <span class="hljs-number">100</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">500</span>, <span class="hljs-number">300</span>); <span class="hljs-comment">//橡皮擦功能，清屏</span></span><br><span class="javascript">        ctx.strokeRect(<span class="hljs-number">100</span>, height, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);</span><br><span class="javascript">        height += <span class="hljs-number">5</span>; <span class="hljs-comment">//每次画的新的，但是旧的没删除，所以要加上清屏</span></span><br><span class="javascript">      &#125;, <span class="hljs-number">1000</span> / <span class="hljs-number">30</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作业：自由落体</p><h1 id="12-canvas-画圆"><a href="#12-canvas-画圆" class="headerlink" title="12.canvas 画圆"></a>12.canvas 画圆</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">  <span class="hljs-comment">// 圆心(x,y)，半径(r)，弧度(起始弧度，结束弧度),方向</span></span><br><span class="javascript">  ctx.arc(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.PI * <span class="hljs-number">1.8</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//顺时针0;逆时针1</span></span><br><span class="javascript">  ctx.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  ctx.closePath();</span><br><span class="javascript">  ctx.stroke();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="13-画圆角矩形"><a href="#13-画圆角矩形" class="headerlink" title="13.画圆角矩形"></a>13.画圆角矩形</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">  <span class="hljs-comment">// ABC为矩形端点</span></span><br><span class="javascript">  <span class="hljs-comment">// B(x,y),C(x,y),圆角大小(相当于border-radius)</span></span><br><span class="javascript">  ctx.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">110</span>);</span><br><span class="javascript">  ctx.arcTo(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">  ctx.arcTo(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">  ctx.arcTo(<span class="hljs-number">200</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">  ctx.arcTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">  ctx.stroke();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="14-canvas-贝塞尔曲线"><a href="#14-canvas-贝塞尔曲线" class="headerlink" title="14.canvas 贝塞尔曲线"></a>14.canvas 贝塞尔曲线</h1><p>贝塞尔曲线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span><br><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span><br>ctx.beginPath();<br>ctx.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-comment">// ctx.quadraticCurveTo(200, 200, 300, 100);二次</span><br><span class="hljs-comment">// ctx.quadraticCurveTo(200, 200, 300, 100, 400 200); 三次</span><br>ctx.stroke();<br></code></pre></td></tr></table></figure><p>波浪</p><p>注意：初始化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">ctx.beginPath();<br></code></pre></td></tr></table></figure><p>波浪 demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">canvas</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;can&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> width = <span class="hljs-number">500</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> height = <span class="hljs-number">300</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">      <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">500</span>, <span class="hljs-number">300</span>);</span><br><span class="javascript">        ctx.beginPath();</span><br><span class="javascript">        ctx.moveTo(<span class="hljs-number">0</span> + offset - <span class="hljs-number">500</span>, height / <span class="hljs-number">2</span>);</span><br><span class="javascript">        ctx.quadraticCurveTo(</span><br><span class="javascript">          width / <span class="hljs-number">4</span> + offset - <span class="hljs-number">500</span>,</span><br><span class="javascript">          height / <span class="hljs-number">2</span> + <span class="hljs-built_in">Math</span>.sin(num) * <span class="hljs-number">120</span>,</span><br><span class="javascript">          width / <span class="hljs-number">2</span> + offset - <span class="hljs-number">500</span>,</span><br><span class="javascript">          height / <span class="hljs-number">2</span></span><br><span class="javascript">        );</span><br><span class="javascript">        ctx.quadraticCurveTo(</span><br><span class="javascript">          (width / <span class="hljs-number">4</span>) * <span class="hljs-number">3</span> + offset - <span class="hljs-number">500</span>,</span><br><span class="javascript">          height / <span class="hljs-number">2</span> - <span class="hljs-built_in">Math</span>.sin(num) * <span class="hljs-number">120</span>,</span><br><span class="javascript">          width + offset - <span class="hljs-number">500</span>,</span><br><span class="javascript">          height / <span class="hljs-number">2</span></span><br><span class="javascript">        );</span><br><span class="javascript">        <span class="hljs-comment">// 整体向左平移整个宽度形成完整的衔接</span></span><br><span class="javascript">        ctx.moveTo(<span class="hljs-number">0</span> + offset, height / <span class="hljs-number">2</span>);</span><br><span class="javascript">        ctx.quadraticCurveTo(</span><br><span class="javascript">          width / <span class="hljs-number">4</span> + offset,</span><br><span class="javascript">          height / <span class="hljs-number">2</span> + <span class="hljs-built_in">Math</span>.sin(num) * <span class="hljs-number">120</span>,</span><br><span class="javascript">          width / <span class="hljs-number">2</span> + offset,</span><br><span class="javascript">          height / <span class="hljs-number">2</span></span><br><span class="javascript">        );</span><br><span class="javascript">        ctx.quadraticCurveTo(</span><br><span class="javascript">          (width / <span class="hljs-number">4</span>) * <span class="hljs-number">3</span> + offset,</span><br><span class="javascript">          height / <span class="hljs-number">2</span> - <span class="hljs-built_in">Math</span>.sin(num) * <span class="hljs-number">120</span>,</span><br><span class="javascript">          width + offset,</span><br><span class="javascript">          height / <span class="hljs-number">2</span></span><br><span class="javascript">        );</span><br><span class="javascript">        ctx.stroke();</span><br><span class="javascript">        offset += <span class="hljs-number">5</span>;</span><br><span class="javascript">        offset %= <span class="hljs-number">500</span>;</span><br><span class="javascript">        num += <span class="hljs-number">0.02</span>;</span><br><span class="javascript">      &#125;, <span class="hljs-number">1000</span> / <span class="hljs-number">30</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="15-坐标平移旋转与缩放"><a href="#15-坐标平移旋转与缩放" class="headerlink" title="15.坐标平移旋转与缩放"></a>15.坐标平移旋转与缩放</h1><p>旋转平移</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.rotate(<span class="hljs-built_in">Math</span>.PI / <span class="hljs-number">6</span>); <span class="hljs-comment">//根据画布的原点进行旋转</span></span><br><span class="javascript">  <span class="hljs-comment">// 要想不根据画布原点,则translate坐标系平移</span></span><br><span class="javascript">  <span class="hljs-comment">// ctx.translate(100, 100);坐标原点在(100,100),此时配套旋转</span></span><br><span class="javascript">  ctx.moveTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">  ctx.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  ctx.stroke();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缩放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.scale(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//x乘以他的系数,y乘以他的系数</span></span><br><span class="javascript">  ctx.strokeRect(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="16-canvas-的-save-和-restore"><a href="#16-canvas-的-save-和-restore" class="headerlink" title="16.canvas 的 save 和 restore"></a>16.canvas 的 save 和 restore</h1><p>不想让其他的受到之前设置的影响</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">  ctx.save(); <span class="hljs-comment">//保存坐标系的平移数据，缩放数据，旋转数据</span></span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.translate(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  ctx.rotate(<span class="hljs-built_in">Math</span>.PI / <span class="hljs-number">4</span>);</span><br><span class="javascript">  ctx.strokeRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>);</span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.restore(); <span class="hljs-comment">//一旦restore，就恢复save时候的状态</span></span><br><span class="javascript">  ctx.fillRect(<span class="hljs-number">100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="17-canvas-背景填充"><a href="#17-canvas-背景填充" class="headerlink" title="17.canvas 背景填充"></a>17.canvas 背景填充</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>); <span class="hljs-comment">//画布</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">//画笔</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();</span><br><span class="javascript">  img.src = <span class="hljs-string">&quot;file:///C:/Users/f1981/Desktop/source/pic3.jpeg&quot;</span>;</span><br><span class="javascript">  img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//因为图片异步加载</span></span><br><span class="javascript">    ctx.beginPath();</span><br><span class="javascript">    ctx.translate(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//改变坐标系的位置</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> bg = ctx.createPattern(img, <span class="hljs-string">&quot;no-repeat&quot;</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 图片填充，是以坐标系原点开始填充的</span></span><br><span class="javascript">    <span class="hljs-comment">// ctx.fillStyle = &quot;blue&quot;;</span></span><br><span class="javascript">    ctx.fillStyle = <span class="hljs-string">&quot;bg&quot;</span>;</span><br><span class="javascript">    ctx.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>图片疑难问题<br>探索<br>open in live server 只能打开同目录下的 img</p><h1 id="18-线性渐变"><a href="#18-线性渐变" class="headerlink" title="18.线性渐变"></a>18.线性渐变</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  <span class="hljs-keyword">var</span> bg = ctx.createLinearGradient(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);</span><br><span class="javascript">  bg.addColorStop(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;white&quot;</span>); <span class="hljs-comment">//数字为0-1之间</span></span><br><span class="javascript">  <span class="hljs-comment">// bg.addColorStop(0.5, &quot;blue&quot;);</span></span><br><span class="javascript">  bg.addColorStop(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;black&quot;</span>);</span><br><span class="javascript">  ctx.fillStyle = bg;</span><br><span class="javascript">  ctx.translate(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//起始点依旧是坐标系原点</span></span><br><span class="javascript">  ctx.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="19-canvas-辐射渐变"><a href="#19-canvas-辐射渐变" class="headerlink" title="19.canvas 辐射渐变"></a>19.canvas 辐射渐变</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  <span class="hljs-comment">// var bg = ctx.createRadialGradient(x1,y1,r1,x2,y2,r2);起始圆，结束圆</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> bg = ctx.createRadialGradient(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  <span class="hljs-comment">// var bg = ctx.createRadialGradient(100, 100, 100, 100, 100, 100);起始圆里面的颜色全是开始的颜色</span></span><br><span class="javascript">  bg.addColorStop(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">  bg.addColorStop(<span class="hljs-number">0.5</span>, <span class="hljs-string">&quot;green&quot;</span>);</span><br><span class="javascript">  bg.addColorStop(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;blue&quot;</span>);</span><br><span class="javascript">  ctx.fillStyle = bg;</span><br><span class="javascript">  ctx.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="20-canvas-阴影"><a href="#20-canvas-阴影" class="headerlink" title="20.canvas 阴影"></a>20.canvas 阴影</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.shadowColor = <span class="hljs-string">&quot;blue&quot;</span>;</span><br><span class="javascript">  ctx.shadowBlur = <span class="hljs-number">20</span>;</span><br><span class="javascript">  ctx.shadowOffsetX = <span class="hljs-number">15</span>;</span><br><span class="javascript">  ctx.shadowOffsetY = <span class="hljs-number">15</span>;</span><br><span class="javascript">  ctx.strokeRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="21-canvas-渲染文字"><a href="#21-canvas-渲染文字" class="headerlink" title="21.canvas 渲染文字"></a>21.canvas 渲染文字</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.strokeRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><br><span class="javascript">  ctx.fillStyle = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">  ctx.font = <span class="hljs-string">&quot;30px Georgia&quot;</span>; <span class="hljs-comment">//对stroke和fill都起作用</span></span><br><span class="javascript">  ctx.strokeText(<span class="hljs-string">&quot;panda&quot;</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//文字描边</span></span><br><span class="javascript">  ctx.fillText(<span class="hljs-string">&quot;monkey&quot;</span>, <span class="hljs-number">200</span>, <span class="hljs-number">250</span>); <span class="hljs-comment">//文字填充</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="22-canvas-线端样式"><a href="#22-canvas-线端样式" class="headerlink" title="22.canvas 线端样式"></a>22.canvas 线端样式</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;can&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="javascript">  ctx.beginPath();</span><br><span class="javascript">  ctx.lineWidth = <span class="hljs-number">15</span>;</span><br><span class="javascript">  ctx.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  ctx.lineTo(<span class="hljs-number">200</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">  ctx.lineTo(<span class="hljs-number">100</span>, <span class="hljs-number">130</span>);</span><br><span class="javascript">  ctx.lineCap = <span class="hljs-string">&quot;square&quot;</span>; <span class="hljs-comment">//butt round</span></span><br><span class="javascript">  ctx.lineJoin = <span class="hljs-string">&quot;miter&quot;</span>; <span class="hljs-comment">//线接触时候// round bevel miter(miterLimit)</span></span><br><span class="javascript">  ctx.miterLimit = <span class="hljs-number">5</span>;</span><br><span class="javascript">  ctx.stroke();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="23-SVG-画线与矩形"><a href="#23-SVG-画线与矩形" class="headerlink" title="23.SVG 画线与矩形"></a>23.SVG 画线与矩形</h1><blockquote><p>svg 滤镜 <a href="https://www.runoob.com/svg/svg-fegaussianblur.html">https://www.runoob.com/svg/svg-fegaussianblur.html</a> h5 考试题最后一题</p></blockquote><h2 id="svg-与-canvas-区别"><a href="#svg-与-canvas-区别" class="headerlink" title="svg 与 canvas 区别"></a>svg 与 canvas 区别</h2><p>svg:矢量图，放大不会失真，适合大面积的贴图，通常动画较少或者较简单，标签和 css 画</p><p>Canvas:适合用于小面积绘图，适合动画，js 画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.line1</span> &#123;</span><br><span class="css">        stroke: black;</span><br><span class="css">        stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">3px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.line2</span> &#123;</span><br><span class="css">        stroke: red;</span><br><span class="css">        stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">line</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">line</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 所有闭合的图形，在svg中，默认都是天生充满并且画出来的 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="24-svg-画圈，椭圆，直线"><a href="#24-svg-画圈，椭圆，直线" class="headerlink" title="24.svg 画圈，椭圆，直线"></a>24.svg 画圈，椭圆，直线</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>polyline &#123;<br>    fill: transparent;<br>    stroke: blueviolet;<br>    stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;220&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--圆--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 椭圆 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">polyline</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;0 0, 50 50, 50 100,100 100,100 50&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polyline</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 曲线:默认填充 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="25-svg-画多边形和文本"><a href="#25-svg-画多边形和文本" class="headerlink" title="25.svg 画多边形和文本"></a>25.svg 画多边形和文本</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">polygon</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;0 0, 50 50, 50 100,100 100,100 50&quot;</span>&gt;</span> &lt;/polygon<br>&gt;<span class="hljs-comment">&lt;!-- 与polylkine区别：多边形会自动首位相连 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>邓哥身体好<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">polygon &#123;<br>  fill: transparent;<br>  stroke: black;<br>  stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><br>text &#123;<br>  stroke: blue;<br>  stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="26-SVG-透明度与线条样式"><a href="#26-SVG-透明度与线条样式" class="headerlink" title="26.SVG 透明度与线条样式"></a>26.SVG 透明度与线条样式</h1><p>透明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">stroke-<span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>; <span class="hljs-comment">/* 边框半透明  */</span><br>fill-<span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.3</span>; <span class="hljs-comment">/* 填充半透明 */</span><br></code></pre></td></tr></table></figure><p>线条样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">stroke-linecap: butt; <span class="hljs-comment">/* （帽子）round square 都是额外加的长度*/</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">stroke-linejoin: ; <span class="hljs-comment">/* 两个线相交的时候 bevel round miter */</span><br></code></pre></td></tr></table></figure><h1 id="27-SVG-的-path-标签"><a href="#27-SVG-的-path-标签" class="headerlink" title="27.SVG 的 path 标签"></a>27.SVG 的 path 标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M 100 100 L 200 100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M 100 100 L 200 100 L 200 200&quot;</span>&gt;</span>&lt;/path<br>&gt;<span class="hljs-comment">&lt;!-- 默认有填充 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M 100 100 L 200 100 l 100 100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上：大写字母代表绝对位置，小写字母表示相对位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M 100 100 H 200 V 200&quot;</span>&gt;</span>&lt;/path<br>&gt;<span class="hljs-comment">&lt;!-- H水平  V竖直 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M 100 100 H 200 V 200 z&quot;</span>&gt;</span>&lt;/path<br>&gt;<span class="hljs-comment">&lt;!-- z表示闭合区间，不区分大小写 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">path &#123;<br>  stroke: red;<br>  fill: transparent;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="28-path-画弧"><a href="#28-path-画弧" class="headerlink" title="28.path 画弧"></a>28.path 画弧</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M 100 100 A 100 50 0 1 1 150 200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-comment">&lt;!-- A代表圆弧指令，以M100 100为起点，150 200为终点 ，半径100，短半径50 ，旋转角度为0，1大圆弧，1顺时针 --&gt;</span><br></code></pre></td></tr></table></figure><h1 id="29-svg-线性渐变"><a href="#29-svg-线性渐变" class="headerlink" title="29.svg 线性渐变"></a>29.svg 线性渐变</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">defs</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 定义一个渐变 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">linearGradient</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bg1&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">stop</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;stop-color:rgb(255,255,0)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">stop</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">stop</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;stop-color:rgb(255,0,0)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">stop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">linearGradient</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">defs</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;fill:url(#bg1)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="30-svg-高斯模糊"><a href="#30-svg-高斯模糊" class="headerlink" title="30.svg 高斯模糊"></a>30.svg 高斯模糊</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">defs</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 定义一个渐变 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">linearGradient</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bg1&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">stop</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;stop-color:rgb(255,255,0)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">stop</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">stop</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;stop-color:rgb(255,0,0)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">stop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">linearGradient</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Gaussian&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">feGaussianBlur</span> <span class="hljs-attr">in</span>=<span class="hljs-string">&quot;SourceGraphic&quot;</span> <span class="hljs-attr">stdDeviation</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">feGaussianBlur</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">defs</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span></span><br><span class="hljs-tag">    <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;fill:url(#bg1);filter:url(#Gaussian)&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="31-SVG-虚线及简单动画"><a href="#31-SVG-虚线及简单动画" class="headerlink" title="31.SVG 虚线及简单动画"></a>31.SVG 虚线及简单动画</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.line1</span> &#123;</span><br><span class="css">        stroke: black;</span><br><span class="css">        stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">        <span class="hljs-comment">/* stroke-dasharray: 10px; */</span></span><br><span class="css">        <span class="hljs-comment">/* stroke-dasharray: 10px 20px;1,2,3,依次取两个值(数组) */</span></span><br><span class="css">        <span class="hljs-comment">/* stroke-dasharray: 10px 20px 30px;1,2,3,依次取两个值 */</span></span><br><span class="css">        <span class="hljs-comment">/* stroke-dashoffset: 10px;偏移 */</span></span><br><span class="css">        <span class="hljs-comment">/* stroke-dashoffset: 200px---&gt;0;可以实现谈满又情空 */</span></span><br><span class="css">        stroke-dashoffset: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">animation</span>: move <span class="hljs-number">2s</span> linear infinite alternate-reverse;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> move &#123;</span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          stroke-dashoffset: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          stroke-dashoffset: <span class="hljs-number">0px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">line</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="32-svg-的-viewbox-比例尺"><a href="#32-svg-的-viewbox-比例尺" class="headerlink" title="32.svg 的 viewbox(比例尺)"></a>32.svg 的 viewbox(比例尺)</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span><br><span class="hljs-tag">  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">viewbox</span>=<span class="hljs-string">&quot;0,0,250,150&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-comment">&lt;!-- viewbox是宽高的一半 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">line</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：SVG 开发中不太用</p><h1 id="33-audio-与-video-播放器"><a href="#33-audio-与-video-播放器" class="headerlink" title="33.audio 与 video 播放器"></a>33.audio 与 video 播放器</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上：太丑，不同浏览器不统一</p><h1 id="34-视频播放器"><a href="#34-视频播放器" class="headerlink" title="34.视频播放器"></a>34.视频播放器</h1><p>加载不出来<a href="https://blog.csdn.net/qq_40340478/article/details/108309492">https://blog.csdn.net/qq_40340478/article/details/108309492</a><br>​</p><p>只有 http 协议中视频资源带有 Content-Range 属性，才能设置时间进行跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">var express = require(&quot;express&quot;); var app = new express();<br>app.use(express.static(&#x27;./&#x27;)); app.listen(12306); // 如果不能改变进度条<br>就用第36节的黑科技 访问127.0.0.1：12306/test.html<br></code></pre></td></tr></table></figure><h1 id="H5-进阶"><a href="#H5-进阶" class="headerlink" title="H5 进阶"></a>H5 进阶</h1><h1 id="1-geolocation"><a href="#1-geolocation" class="headerlink" title="1.geolocation"></a>1.geolocation</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 获取地理信息</span></span><br><span class="javascript">  <span class="hljs-comment">// 一些系统，不支持这个功能</span></span><br><span class="javascript">  <span class="hljs-comment">// GPS定位。台式机几乎都没有GPS，笔记本大多数没有GPS，智能手机几乎都有GPS</span></span><br><span class="javascript">  <span class="hljs-comment">// 网络定位 来粗略估计地理位置</span></span><br><span class="javascript">  <span class="hljs-built_in">window</span>.navigator.geolocation.getCurrentPosition(</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;======&quot;</span>); <span class="hljs-comment">//成功的回调函数</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(position);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//失败的回调函数</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;++++++&quot;</span>);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  );</span><br><span class="javascript">  <span class="hljs-comment">//可以访问的方式：https协议，file协议，http协议下不能获取</span></span><br><span class="javascript">  <span class="hljs-comment">// 经度最大值180，纬度最大值90</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>https 还是不能访问：</p><ol><li>谷歌浏览器打开谷歌地图，无法定位</li><li>利用翻墙可以实现</li></ol><h1 id="2-四行写个服务器"><a href="#2-四行写个服务器" class="headerlink" title="2.四行写个服务器"></a>2.四行写个服务器</h1><p>手机访问电脑<br>sever.js<br>npm init<br>npm i express</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">var</span> express = require(&#x27;express&#x27;);<br><span class="hljs-selector-tag">var</span> app = new express();<br>app<span class="hljs-selector-class">.use</span>(express<span class="hljs-selector-class">.static</span>(&quot;./page&quot;));<br>app<span class="hljs-selector-class">.listen</span>(<span class="hljs-number">12306</span>);//端口号大于<span class="hljs-number">8000</span>或者等于<span class="hljs-number">80</span><br>// 默认访问<span class="hljs-number">80</span>端口，express默认访问index<span class="hljs-selector-class">.html</span><br>想访问里面的hello<span class="hljs-selector-class">.html</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">12306</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">12306</span>/hello.html<br></code></pre></td></tr></table></figure><p><a href="https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1617067665261-d6d3b643-13da-4ef6-a025-83d4c05424f1.7z?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1617067665261-d6d3b643-13da-4ef6-a025-83d4c05424f1.7z%22,%22name%22:%22test.7z%22,%22size%22:343473,%22type%22:%22%22,%22ext%22:%227z%22,%22status%22:%22done%22,%22uid%22:%221617067631734-0%22,%22progress%22:%7B%22percent%22:99%7D,%22percent%22:0,%22id%22:%22LT1aO%22,%22card%22:%22file%22%7D">test.7z</a><br>命令框或者 vscode 客户端，进入项目路径，node server.js</p><h1 id="3-deviceorientation"><a href="#3-deviceorientation" class="headerlink" title="3.deviceorientation"></a>3.deviceorientation</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 陀螺仪,只有支持陀螺仪的设备才支持体感</span></span><br><span class="javascript">      <span class="hljs-comment">// 苹果设备的页面只有在https协议下，才能使用这些接口</span></span><br><span class="javascript">      <span class="hljs-comment">// 11.1.X以及之前，可以使用。微信的浏览器</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// alpha:指北(指南针) [0,360) 当为0的时候指北。180指南</span></span><br><span class="javascript">      <span class="hljs-comment">// beta:平放的时候beta值为0。当手机立起来(短边接触桌面)，直立的时候beta为90；</span></span><br><span class="javascript">      <span class="hljs-comment">// gamma:平放的时候gamma值为零。手机立起来(长边接触桌面)，直立的时候gamma值为90</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;deviceorientation&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(event);</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;main&quot;</span>).innerHTML =</span><br><span class="javascript">          <span class="hljs-string">&quot;alpha:&quot;</span> +</span><br><span class="javascript">          event.alpha +</span><br><span class="javascript">          <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="javascript">          <span class="hljs-string">&quot;beta:&quot;</span> +</span><br><span class="javascript">          event.beta +</span><br><span class="javascript">          <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="javascript">          <span class="hljs-string">&quot;gamma:&quot;</span> +</span><br><span class="javascript">          event.gamma;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-手机访问电脑"><a href="#4-手机访问电脑" class="headerlink" title="4.手机访问电脑"></a>4.手机访问电脑</h1><p>1.手机和电脑在同一个局域网下 2.获取电脑的 IP 地址<br>windows 获取 ip：终端输入 ipconfig 3.在手机上输入相应的 IP 和端口进行访问</p><h1 id="5-devicemotion"><a href="#5-devicemotion" class="headerlink" title="5.devicemotion"></a>5.devicemotion</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 摇一摇</span></span><br><span class="javascript">  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;devicemotion&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;main&quot;</span>).innerHTML =</span><br><span class="javascript">      event.accelertion.x +</span><br><span class="javascript">      <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="javascript">      event.accelertion.y +</span><br><span class="javascript">      <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +</span><br><span class="javascript">      event.accelertion.z;</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (</span><br><span class="javascript">      <span class="hljs-built_in">Math</span>.abs(event.accelertion.x) &gt; <span class="hljs-number">9</span> ||</span><br><span class="javascript">      <span class="hljs-built_in">Math</span>.abs(event.accelertion.y) &gt; <span class="hljs-number">9</span> ||</span><br><span class="javascript">      <span class="hljs-built_in">Math</span>.abs(event.accelertion.z) &gt; <span class="hljs-number">9</span></span><br><span class="javascript">    ) &#123;</span><br><span class="javascript">      alert(<span class="hljs-string">&quot;在晃&quot;</span>);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-requestAnimationFrame"><a href="#6-requestAnimationFrame" class="headerlink" title="6.requestAnimationFrame"></a>6.requestAnimationFrame</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    function move()&#123;</span><br><span class="hljs-comment">    var square = document.getElementById(&quot;main&quot;);</span><br><span class="hljs-comment">    if(square.offsetLeft &gt; 700)&#123;</span><br><span class="hljs-comment">    return;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    square.style.left = square.offsetLeft + 20 +&quot;px&quot;;  </span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    setInterval(move, 10);</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">// 屏幕刷新频率：每秒60次</span><br><span class="hljs-comment">// 如果变化一秒超过60次，就会有动画针会被丢掉</span><br><br><span class="hljs-comment">// 实现均匀移动,用requestAnimationFrame,是每秒60针</span><br><span class="hljs-comment">// 将计就计setInterval(move, 1000/60);会实现同样效果吗</span><br><span class="hljs-comment">// 1针少于1/60秒，requestAnimationFrame可以准时执行每一帧的</span><br><span class="hljs-comment">// requestAnimationFrame(move);//移动一次</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> square = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;main&quot;</span>);<br>  <span class="hljs-keyword">if</span> (square.offsetLeft &gt; <span class="hljs-number">700</span>) &#123;<br>    cancelAnimationFrame(timer);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  square.style.left = square.offsetLeft + <span class="hljs-number">20</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>  timer = requestAnimationFrame(move);<br>&#125;<br>move();<br><span class="hljs-comment">// cancelAnimationFrame基本相当于clearTimeout</span><br><span class="hljs-comment">// requestAnimationFrame兼容性极差</span><br></code></pre></td></tr></table></figure><p>兼容性极差还想使用咋办？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.cancelAnimationFrame = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-built_in">window</span>.cancelAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.webkitCancelAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.mozCancelAnimationFrame ||<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) </span>&#123;<br>      <span class="hljs-built_in">window</span>.clearTimeOut(id);<br>    &#125;<br>  );<br>&#125;)();<br><br><span class="hljs-built_in">window</span>.requestAnimationFrame = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-built_in">window</span>.requestAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.webkitRequestAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.mozRequestAnimationFrame ||<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) </span>&#123;<br>      <span class="hljs-built_in">window</span>.setTimeOut(id, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>);<br>    &#125;<br>  );<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="7-localStrorage"><a href="#7-localStrorage" class="headerlink" title="7.localStrorage"></a>7.localStrorage</h1><p>cookie:每次请求都有可能传送许多无用的信息到后端<br>localStroage:长期存放在浏览器，无论窗口是否关闭</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.name = <span class="hljs-string">&quot;panda&quot;</span>;<br><span class="hljs-comment">// localStroage.arr = [1, 2, 3];</span><br><span class="hljs-comment">// console.log(localStroage.arr);</span><br><span class="hljs-comment">// localStroage只能存储字符串，</span><br><br>要想存储数组;<br><span class="hljs-built_in">localStorage</span>.arr = <span class="hljs-built_in">JSON</span>.stringify([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// console.log(localStorage.arr);</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.arr));<br><br><span class="hljs-built_in">localStorage</span>.obj = <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;panda&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.obj));<br></code></pre></td></tr></table></figure><p>sessionStroage:这次回话临时需要存储时的变量。每次窗口关闭的时候，seccionStroage 自动清空</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">sessionStorage.name = &quot;panda&quot;;<br></code></pre></td></tr></table></figure><p>localStorage 与 cookie</p><p>1.localStorage 在发送请求的时候不会把数据发出去，cookie 会把所有数据带出去<br>   2.cookie 存储的内容比较(4k) ，localStroage 可以存放较多内容(5M)</p><p>另一种写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">localStorage.setItem(&quot;name&quot;, &quot;monkey&quot;); localStorage.getItem(&quot;name&quot;);<br>localStorage.removeItem(&quot;name&quot;);<br></code></pre></td></tr></table></figure><p>相同协议，相同域名，相同端口称为一个域</p><p>注意：</p><p><a href="http://www.baidu.com不是一个域./">www.baidu.com不是一个域。</a><br><a href="http://www.baidu.com/">http://www.baidu.com</a>  <a href="https://www.baidu.com/">https://www.baidu.com</a>,是域。这是不同域</p><h1 id="8-history"><a href="#8-history" class="headerlink" title="8.history"></a>8.history</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// A -&gt; B - C</span></span><br><span class="javascript">      <span class="hljs-comment">// 为了网页的性能，单页面操作</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> data = [</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HTML&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;CSS&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;JS&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;panda&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;dengge&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      ];</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;search&quot;</span>).value;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> result = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (obj.name.indexOf(value) &gt; -<span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> obj;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        render(result);</span><br><span class="javascript">        history.pushState(&#123; <span class="hljs-attr">inpVal</span>: value &#125;, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;#&quot;</span> + value);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">renderData</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> content = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; renderData.length; i++) &#123;</span><br><span class="javascript">          content += <span class="hljs-string">&quot;&lt;div&gt;&quot;</span> + renderData[i].name + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;main&quot;</span>).innerHTML = content;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;popstate&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(e);</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;search&quot;</span>).value = e.state.inpVal</span><br><span class="javascript">          ? e.state.inpVal</span><br><span class="javascript">          : <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;search&quot;</span>).value;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> result = data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (obj.name.indexOf(value) &gt; -<span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> obj;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        render(result);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      <span class="hljs-comment">// 关于popstate和hashchange</span></span><br><span class="javascript">      <span class="hljs-comment">// 只要url变了，就会触发popstate</span></span><br><span class="javascript">      <span class="hljs-comment">// 锚点变了(hash值变了)，就会触发hashchange</span></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;hashchange&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;search()&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      render(data);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="9-worker"><a href="#9-worker" class="headerlink" title="9.worker"></a>9.worker</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// js都是单线程的</span></span><br><span class="javascript">  <span class="hljs-comment">// worker是多线程的, 真的多线程, 不是伪多线程</span></span><br><span class="javascript">  <span class="hljs-comment">// worker不能操作DOM,没有window对象,不能读取本地文件。可以发ajax,可以计算</span></span><br><span class="javascript">  <span class="hljs-comment">// 在worker中可以创建worker吗？</span></span><br><span class="javascript">  <span class="hljs-comment">// 在理论上可以，但是没有一款浏览器支持</span></span><br><span class="javascript">  <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">        console.log(&quot;=======&quot;);</span></span><br><span class="hljs-comment"><span class="javascript">        console.log(&quot;=======&quot;);</span></span><br><span class="hljs-comment"><span class="javascript">        var a = 1000;</span></span><br><span class="hljs-comment"><span class="javascript">        var result = 0;</span></span><br><span class="hljs-comment"><span class="javascript">        for (var i = 0; i &lt; a; i++) &#123;</span></span><br><span class="hljs-comment"><span class="javascript">            result += i;</span></span><br><span class="hljs-comment"><span class="javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="javascript">        console.log(result);</span></span><br><span class="hljs-comment"><span class="javascript">        console.log(&quot;=======&quot;);</span></span><br><span class="hljs-comment"><span class="javascript">        console.log(&quot;=======&quot;);</span></span><br><span class="hljs-comment"><span class="javascript">        */</span></span><br><span class="javascript">  <span class="hljs-comment">// 后两个等号只有等待算完才执行</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> beginTime = Data.now();</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=======&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=======&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1000</span>;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">&quot;./worker.js&quot;</span>);</span><br><span class="javascript">  worker.postMessage(&#123;</span><br><span class="javascript">    <span class="hljs-attr">num</span>: a,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  worker.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e.data);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=======&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=======&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> endTime = Data.now();</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(endTime - beginTime);</span><br><span class="javascript">  worker.terminate(); <span class="hljs-comment">//停止</span></span><br><span class="javascript">  <span class="hljs-built_in">this</span>.close(); <span class="hljs-comment">//自己停止</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>worker.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">//接受消息</span><br>  <span class="hljs-comment">// console.log(e);</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; e.data.num; i++) &#123;<br>    result += i;<br>  &#125;<br>  <span class="hljs-built_in">this</span>.postMessage(result);<br>&#125;;<br></code></pre></td></tr></table></figure><p>worker.js 里面可以通过 importScripts(“./index.js”)引入外部 js 文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS3</title>
    <link href="/2020/03/10/CSS3/"/>
    <url>/2020/03/10/CSS3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、introduction"><a href="#一、introduction" class="headerlink" title="一、introduction"></a>一、introduction</h1><blockquote><p>兼容性前缀</p></blockquote><table><thead><tr><th>prefix（前缀）</th><th>browser</th></tr></thead><tbody><tr><td>-webkit</td><td>chrome/safari</td></tr><tr><td>-moz</td><td>firefox</td></tr><tr><td>-ms</td><td>IE</td></tr><tr><td>-o</td><td>opera</td></tr></tbody></table><h2 id="1-历史"><a href="#1-历史" class="headerlink" title="1.历史"></a>1.历史</h2><p>更新迭代，兼容性 —- 加不加前缀</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: ;<br>  -webkit-<span class="hljs-attribute">border-radius</span>: ;<br>  -o-<span class="hljs-attribute">border-radius</span>: ;<br>  -moz-<span class="hljs-attribute">border-radius</span>: ;<br>&#125;<br></code></pre></td></tr></table></figure><p>兼容性手册网站</p><p><a href="http://css.doyoe.com/">http://css.doyoe.com</a></p><p><a href="http://caniuse.com/">http://caniuse.com</a></p><h2 id="2-处理器"><a href="#2-处理器" class="headerlink" title="2.处理器"></a>2.处理器</h2><p>预处理器：<strong>pre-processor</strong></p><p><strong>less/sass cssNext 插件</strong></p><p>利用 sass 工具编辑（遵循人家的语法）：减少人工时间</p><p>sass 演示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-selector-tag">span</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">$<span class="hljs-attribute">font</span>-stack: arial, ...;<br><span class="hljs-selector-id">#mysituation-color</span>: <span class="hljs-number">#444</span>;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">color</span>: #mysituation-color;<br>  &#125;<br>  <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font</span>: <span class="hljs-number">100%</span> $font-stack;<br>  &#125;<br>&#125;<br><span class="hljs-selector-id">#only</span> &#123;<br>  &amp;<span class="hljs-selector-class">.demo</span> &#123;<br>    <span class="hljs-attribute">color</span>: $mysituation-color;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后处理器：<strong>post-processor</strong></p><p>CSS 自动补足前缀插件(基于 caniuse 网站)<strong>autoprefixer</strong><br><strong>后处理器需要在其环境内编写</strong><br><strong>​</strong></p><p><strong>优点：如果有一天，属性可以再各大浏览器应用，不需要加前缀，那么我们写的代码本身就符合规范了。可维护性好。而 sass less 不能。</strong></p><h2 id="3-怎么用"><a href="#3-怎么用" class="headerlink" title="3.怎么用"></a>3.怎么用</h2><p>postCss + 插件(充分体现扩展性，200 多个)</p><p>postCss 并不能划分成什么处理器，要加上插件才能变成相应的处理器</p><p>用 js 实现 css 抽象的语法树，AST(abstract Syntax Tree)，剩下的事情留给后人来做</p><p>后处理器好处：</p><p>如果浏览器都实现兼容了，用不到兼容了，就可以不用后处理器了，利于维护代码，升级。预处理器办不到。</p><h2 id="4-CSS3-进化到编程化：cssNext"><a href="#4-CSS3-进化到编程化：cssNext" class="headerlink" title="4.CSS3 进化到编程化：cssNext"></a>4.CSS3 进化到编程化：cssNext</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  --headline-<span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><span class="hljs-keyword">@custom-selector</span>: --headline h1,h2,h3,h4,h5,h6<br>    : --headline &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--headline-color);<br>&#125;<br></code></pre></td></tr></table></figure><p>cssNext 用来实现一些未来的标准的（未完全在各大浏览器）</p><h1 id="二、选择器"><a href="#二、选择器" class="headerlink" title="二、选择器"></a>二、选择器</h1><blockquote><p>打开格局视野，不要故步自封，不要排斥知识，充分包容各种知识</p></blockquote><h2 id="1-关系型选择器模式-不常用"><a href="#1-关系型选择器模式-不常用" class="headerlink" title="1.关系型选择器模式(不常用)"></a>1.关系型选择器模式(不常用)</h2><blockquote><p>E+F:下一个满足条件的兄弟元素节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> + <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-comment">/*选择div兄弟下一个兄弟节点，叫p*/</span><br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>E~F:下一堆满足条件的兄弟元素节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> ~ <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-属性选择器-不常用"><a href="#2-属性选择器-不常用" class="headerlink" title="2.属性选择器(不常用)"></a>2.属性选择器(不常用)</h2><p>复习属性选择器：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;demo&quot; data=&quot;<span class="hljs-selector-tag">a</span>&quot; &gt; data&lt;/<span class="hljs-selector-tag">div</span> &gt; &lt;<span class="hljs-selector-tag">div</span> &gt; &lt;/<span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[data]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-小破浪"><a href="#1-小破浪" class="headerlink" title="1.小破浪"></a>1.小破浪</h3><p>属性名是 data，属性值里面有独立 a 的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;a b&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;aa b c&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[data~=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-comment">/*1,3变色*/</span><br></code></pre></td></tr></table></figure><h3 id="2-小竖线"><a href="#2-小竖线" class="headerlink" title="2.小竖线"></a>2.小竖线</h3><p>以 a 开头或者以 a-开头</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class|=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a-test&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b-test&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-以…开头，-以…结尾，-存在"><a href="#3-以…开头，-以…结尾，-存在" class="headerlink" title="3.^以…开头，$以…结尾，*存在"></a>3.^以…开头，$以…结尾，*存在</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class$=<span class="hljs-string">&quot;a&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a-test&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b-test&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-伪元素选择器-不常用"><a href="#3-伪元素选择器-不常用" class="headerlink" title="3.伪元素选择器(不常用)"></a>3.伪元素选择器(不常用)</h2><p>before,after 一个两个冒号都可，但是接下来的两个必须两个冒号</p><h3 id="1-placeholder"><a href="#1-placeholder" class="headerlink" title="1.placeholder"></a>1.placeholder</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">input</span> type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; &gt; <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: green; <span class="hljs-comment">/*只能改变字体颜色*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-selection"><a href="#2-selection" class="headerlink" title="2.selection"></a>2.selection</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>成哥很帅<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>邓哥也很帅<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)<span class="hljs-selector-pseudo">::selection</span> &#123;<br>  <span class="hljs-comment">/*只能用这三种属性*/</span><br>  <span class="hljs-comment">/*color*/</span><br>  <span class="hljs-comment">/*background-color: */</span><br>  <span class="hljs-comment">/*text-shadow: 阴影*/</span><br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> black;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcc</span>;<br>  <span class="hljs-comment">/*实现选中变色*/</span><br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>)<span class="hljs-selector-pseudo">::selection</span> &#123;<br>  <span class="hljs-attribute">color</span>: yellow;<br>  <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">user-select: none 不让选中;<br></code></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::selection</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">      <span class="hljs-attribute">color</span>: yellow;</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    名下痴汉tid梦，也从大家的视线中消失了。<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>老<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>dengxu是一位非Two将打败过dengxu作为自己的主要战绩吹了很久。<br>    后来dengxu海归追梦，也从大家的视线中消失了。<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>邓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>dengxu是一位非常有实大家的视线中消失了。<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>虚<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>dengxu是一位非常有实<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>弱<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>名下痴汉tidesof<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-letter</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>沙拉酱擦参考手册是空的充电口穿梭在考虑到开始做看大V南京市的计算机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">readonly</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>dg<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">read-write</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ds<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-伪类选择器"><a href="#4-伪类选择器" class="headerlink" title="4.伪类选择器"></a>4.伪类选择器</h2><h3 id="1-not-s"><a href="#1-not-s" class="headerlink" title="1.not(s)"></a>1.not(s)</h3><p>案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-attr">[class]</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际开发类似需求—-移动端列表页：除了最后一个都要加上一条横线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;<br>    <span class="hljs-comment">/*border-bottom: 1px solid black;*/</span><br>&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:last-of-type</span>)&#123;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-attribute">content</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="2-root-和-html-地位相等"><a href="#2-root-和-html-地位相等" class="headerlink" title="2.root 和 html 地位相等"></a>2.root 和 html 地位相等</h3><p>区別：</p><p>1.root:根标签选择器   html xml</p><p>2.html：根标签</p><p>3.root 包含 html</p><p>用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span>&#123;<span class="hljs-attribute">background-color</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-target"><a href="#3-target" class="headerlink" title="3.target"></a>3.target</h3><p>含义</p><p>被标记成锚点之后–location.hash=×××</p><p>案例：可点击创造锚点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#box1&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#box2&quot;</span>&gt;</span>box2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:target</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>finish js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">2000px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">                <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.item</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">top</span>:<span class="hljs-number">1000px</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-id">#item1</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">top</span>:<span class="hljs-number">500px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-id">#item2</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">top</span>:<span class="hljs-number">1000px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-id">#item3</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">top</span>:<span class="hljs-number">1500px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:target</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#item1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left:200px&quot;</span>&gt;</span>click1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#item2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left:300px&quot;</span>&gt;</span>click2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#item3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left:400px&quot;</span>&gt;</span>click3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>&lt;/html<br></code></pre></td></tr></table></figure><blockquote><p>小项目：三个 a 标签控制页面背景颜色</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-comment">/*实现div=屏幕的高度*/</span></span><br><span class="css">      <span class="hljs-selector-pseudo">:root</span>,</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#red</span>,</span><br><span class="css">      <span class="hljs-selector-id">#green</span>,</span><br><span class="css">      <span class="hljs-selector-id">#gray</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#red</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f20</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#green</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#gray</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[id]</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:target</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.button-wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.button-wrapper</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcc</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button-wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#red&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bgred&quot;</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#green&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bggreen&quot;</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#gray&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bggray&quot;</span>&gt;</span>gray<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gray&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-其他伪类选择器（此部分都考虑其他元素的影响）"><a href="#4-其他伪类选择器（此部分都考虑其他元素的影响）" class="headerlink" title="4.其他伪类选择器（此部分都考虑其他元素的影响）"></a>4.其他伪类选择器（此部分都考虑其他元素的影响）</h2><p>受其他元素的影响，父子级，不出常用</p><h3 id="1-first-child"><a href="#1-first-child" class="headerlink" title="1.first-child"></a>1.first-child</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*伪类选择器是被选择元素的状态*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>是不是 first-child，不只看是 p 里面的第一个，要看父级下面的第一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-last-child"><a href="#2-last-child" class="headerlink" title="2.last-child"></a>2.last-child</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- last-child:只要是最后一个儿子，就可，即14 --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-only-child"><a href="#3-only-child" class="headerlink" title="3.only-child"></a>3.only-child</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:only-child</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:only-child</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: blueviolet;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html">nth-child(n)<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-comment">/*实现div=屏幕的高度*/</span></span><br><span class="css">      <span class="hljs-selector-pseudo">:root</span>,</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#red</span>,</span><br><span class="css">      <span class="hljs-selector-id">#green</span>,</span><br><span class="css">      <span class="hljs-selector-id">#gray</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#red</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f20</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#green</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#gray</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[id]</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:target</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.button-wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.button-wrapper</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcc</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button-wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#red&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bgred&quot;</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#green&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bggreen&quot;</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#gray&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bggray&quot;</span>&gt;</span>gray<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gray&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-nth-child"><a href="#4-nth-child" class="headerlink" title="4.nth-child()"></a>4.nth-child()</h3><p>CSS 从 1 开始,n 是从 0 开始   odd 奇数 even 偶数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>  <span class="hljs-attribute">background-color</span>: blueviolet;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-nth-last-child-n"><a href="#5-nth-last-child-n" class="headerlink" title="5.nth-last-child(n)"></a>5.nth-last-child(n)</h3><p>倒着数</p><h2 id="5-其他伪类选择器（不受其他影响）"><a href="#5-其他伪类选择器（不受其他影响）" class="headerlink" title="5.其他伪类选择器（不受其他影响）"></a>5.其他伪类选择器（不受其他影响）</h2><p>不受其他影响,常用</p><h3 id="1-first-of-type"><a href="#1-first-of-type" class="headerlink" title="1.first-of-type"></a>1.first-of-type</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;<br>  <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一类型里面是的第一个</p><h3 id="2-last-of-type"><a href="#2-last-of-type" class="headerlink" title="2.last-of-type"></a>2.last-of-type</h3><h3 id="3-only-of-type"><a href="#3-only-of-type" class="headerlink" title="3.only-of-type"></a>3.only-of-type</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;p&gt;2&lt;/p&gt;不是特有的了 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:only-of-type</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-nth-of-type-n-常用"><a href="#4-nth-of-type-n-常用" class="headerlink" title="4.nth-of-type(n)常用"></a>4.nth-of-type(n)常用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0&lt;/span<br>  &gt;<span class="hljs-comment">&lt;!-- 注意这一行 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;p&gt;2&lt;/p&gt;不是特有的了 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(n+<span class="hljs-number">2</span>)&#123;从第二个开始查<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-nth-of-last-type-n"><a href="#5-nth-of-last-type-n" class="headerlink" title="5.nth-of-last-type(n)"></a>5.nth-of-last-type(n)</h3><p>与前一个相反</p><h2 id="6-剩下的伪类选择器"><a href="#6-剩下的伪类选择器" class="headerlink" title="6.剩下的伪类选择器"></a>6.剩下的伪类选择器</h2><h3 id="1-empty-必须元素是空的，才叫-empty"><a href="#1-empty-必须元素是空的，才叫-empty" class="headerlink" title="1.empty:必须元素是空的，才叫 empty"></a>1.empty:必须元素是空的，才叫 empty</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--sda--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--注释也算节点--&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:empty</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-checked"><a href="#2-checked" class="headerlink" title="2.checked"></a>2.checked</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span> 一个小惊喜<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>DEMO 处理简单交互</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;隔壁老王 电话xxx，请务必小心刑事&quot;</span>;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>  一个小惊喜<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-enable"><a href="#3-enable" class="headerlink" title="3.enable"></a>3.enable</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">disabled</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:enabled</span> &#123;<br>  <span class="hljs-attribute">background</span>: green;<br>&#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:disabled</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#f20</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcc</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> <span class="hljs-number">#f20</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-disable"><a href="#4-disable" class="headerlink" title="4.disable"></a>4.disable</h3><h3 id="5-read-only"><a href="#5-read-only" class="headerlink" title="5.read-only"></a>5.read-only</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:read-only</span>&#123;<br>    <span class="hljs-attribute">color</span>:chartreuse;<br>&#125;<br>&lt;<span class="hljs-selector-tag">input</span> type=&quot;text&quot;&gt;<br>&lt;<span class="hljs-selector-tag">input</span> type=&quot;text&quot; readonly value=&quot;你只能瞅着，干不了别的&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="6-read-write"><a href="#6-read-write" class="headerlink" title="6.read-write"></a>6.read-write</h3><p>选项卡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <span class="hljs-comment">/*居中*/</span></span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-comment">/*.wrapper div和.wrapper实现三个小圆点在一行展示，块级元素。*/</span></span><br><span class="css">      <span class="hljs-comment">/*.wrapper div相对于.wrapper定位：top,left*/</span></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">370px</span>;</span><br><span class="css">        <span class="hljs-attribute">display</span>: none; <span class="hljs-comment">/*先都是none,选中那个那个变成block*/</span></span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">370px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-comment">/*input:checked + div&#123;     不要有空格，否则错误*/</span></span><br><span class="css">        <span class="hljs-attribute">display</span>: block;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">checked</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>手风琴</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>原生js手风琴特效<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span>,</span><br><span class="css">      <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1050px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.accordion</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;accordion&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #f99;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #9ff;&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #f9f;&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #9f9;&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: blue;&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:450px;background: yellow;&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accordion</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> oBox = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> accordion = oBox.querySelector(<span class="hljs-string">&quot;.accordion&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> oList = accordion.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">        <span class="hljs-comment">//console.log(oList.length);</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oList.length; i++) &#123;</span><br><span class="javascript">          oList[i].index = i;</span><br><span class="javascript">          oList[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.index;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="javascript">              <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">              <span class="hljs-keyword">var</span> iWidth = oBox.offsetWidth; <span class="hljs-comment">//盒子的总宽度</span></span><br><span class="javascript">              <span class="hljs-comment">//console.log(iWidth); 1050</span></span><br><span class="javascript">              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oList.length; i++) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (index != oList[i].index) &#123;</span><br><span class="javascript">                  <span class="hljs-comment">//设定速度</span></span><br><span class="javascript">                  <span class="hljs-keyword">var</span> speed = (<span class="hljs-number">100</span> - oList[i].offsetWidth) / <span class="hljs-number">5</span>;</span><br><span class="javascript">                  speed = speed &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.ceil(speed) : <span class="hljs-built_in">Math</span>.floor(speed);</span><br><span class="javascript">                  oList[i].style.width = oList[i].offsetWidth + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                  iWidth -= oList[i].offsetWidth;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                oList[index].style.width = iWidth + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;, <span class="hljs-number">30</span>);</span><br><span class="javascript">          &#125;;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      accordion();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.menu</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">210px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="css">        <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">        <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;</span><br><span class="css">        <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> menu = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;menu&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> ps = menu.getElementsByTagName(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> uls = menu.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> ps) &#123;</span><br><span class="javascript">          ps[i].id = i;</span><br><span class="javascript">          ps[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> u = uls[<span class="hljs-built_in">this</span>.id];</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (u.style.display == <span class="hljs-string">&quot;block&quot;</span>) &#123;</span><br><span class="javascript">              u.style.display = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">              u.style.display = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Web前端<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:block&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>DIV+CSS<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>JQuary<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>后台脚本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ASP.net<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>JSP<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前端框架<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Extjs<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Esspress<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>YUI<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、border"><a href="#三、border" class="headerlink" title="三、border"></a>三、border</h1><h2 id="1-border"><a href="#1-border" class="headerlink" title="1.border"></a>1.border</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.demo1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>; <span class="hljs-comment">/*圆角：相对于宽而言的*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>border-radius</code>拆分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>;<br><span class="hljs-comment">/*左上-右上-右下-左下*/</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">40px</span>;<br><span class="hljs-comment">/*左上右下--右上左下*/</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;<br><span class="hljs-comment">/*中间代表两个方向：右上左下*/</span><br></code></pre></td></tr></table></figure><p>继续拆分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">30px</span>;<br><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-comment">/*等价*/</span><br><span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">30px</span> <span class="hljs-number">30px</span>;<br><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">40px</span> <span class="hljs-number">40px</span>;<br></code></pre></td></tr></table></figure><p>1/4 圆</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*必须正方形的width=border-top-left-radius:100px 100px*/</span><br></code></pre></td></tr></table></figure><p>半圆</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*长方形宽大一倍*/</span><br><span class="hljs-selector-class">.demo2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>叶子模型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.demo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>新写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span> / <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>;<br></code></pre></td></tr></table></figure><h2 id="2-box-shallow"><a href="#2-box-shallow" class="headerlink" title="2.box-shallow"></a>2.box-shallow</h2><p>外阴影&amp;&amp;内阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fff</span>;<br><br>  不写就是外阴影<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#0ff</span>;<span class="hljs-comment">/*水平偏移量 垂直偏移量 模糊范围(基于原来边框位置向边框两边同时模糊) 传播距离(水平垂直同时增加10) 阴影颜色 */</span><br><br>  内阴影<br>  <span class="hljs-comment">/*box-shadow: inset 1px 0px 5px 0px #fff;*/</span><br><br>  内外阴影<br>  <span class="hljs-comment">/*box-shadow: 0px 0px 10px #fff,inset 0px 0px 10px #fff;*/</span><br><br><br>  <span class="hljs-comment">/*四边不同颜色模糊实现*/</span><br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#fff</span>,<br>    <span class="hljs-number">3px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#f0f</span>,<br>    <span class="hljs-number">0px</span> -<span class="hljs-number">3px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#0ff</span>,<br>    -<span class="hljs-number">3px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#00f</span>,<br>    <span class="hljs-number">0px</span> <span class="hljs-number">3px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#ff0</span>;<br>  <span class="hljs-comment">/*关于Z轴覆盖,哪个阴影先设置,谁就在上*/</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3 个 demo</p></blockquote><p>DEMO1</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">150px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">150px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">50px</span> <span class="hljs-number">#fff</span>, inset <span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">80px</span> <span class="hljs-number">#f0f</span>,<br>    inset -<span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">80px</span> <span class="hljs-number">#0ff</span>, inset <span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">300px</span> <span class="hljs-number">#f0f</span>,<br>    inset -<span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">300px</span> <span class="hljs-number">#0ff</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">50px</span> <span class="hljs-number">#fff</span>, -<span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">80px</span> <span class="hljs-number">#f0f</span>, <span class="hljs-number">10px</span> <span class="hljs-number">0px</span><br>      <span class="hljs-number">80px</span> <span class="hljs-number">#0ff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>太阳</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">25px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">25px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">100px</span> <span class="hljs-number">50px</span> <span class="hljs-number">#fff</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">250px</span> <span class="hljs-number">125px</span> <span class="hljs-number">#ff0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>DEMO3</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.25</span>, <span class="hljs-number">1.25</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：背景颜色在阴影下面，文字在阴影上面</p></blockquote><h2 id="3-border-image"><a href="#3-border-image" class="headerlink" title="3.border-image"></a>3.border-image</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>  <span class="hljs-comment">/*支持渐变色*/</span><br>  <span class="hljs-attribute">border-color</span>: lightpink;<br>  <span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">linear-gradient</span>(red, yellow);<br>  <span class="hljs-comment">/* 实现背景颜色渐变 */</span><br>  <span class="hljs-comment">/* border-image-source: url(.//border.png); </span><br><span class="hljs-comment">    实现边框用背景图片渐变渲染</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关于 slice(截取)</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid black;<br>  <span class="hljs-attribute">border-color</span>: lightpink;<br>  <span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//border.png</span>);<br>  <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">100</span>;<br>  <span class="hljs-comment">/* border-image-slice: 100 50 100 100; */</span><br>  <span class="hljs-comment">/* 上右下左 */</span><br>  <span class="hljs-comment">/*slice不填的话，默认100%*/</span><br>  <span class="hljs-attribute">border-image-repeat</span>: stretch;<br>&#125;<br></code></pre></td></tr></table></figure><p>几个附加值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid black;<br>  <span class="hljs-attribute">border-color</span>: lightpink;<br>  <span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//border.png</span>);<br>  <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">100</span>;<br>  <span class="hljs-comment">/* 让背景图片往外延伸 */</span><br>  <span class="hljs-attribute">border-image-outset</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border-image-width</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* border里面能显示图片背景的宽度 */</span><br>  <span class="hljs-comment">/* 默认为1,不同于 border-width */</span><br>  <span class="hljs-attribute">border-image-width</span>: auto; <span class="hljs-comment">/* 相当于slice + px  */</span><br>  <span class="hljs-comment">/* border-image-slice: 100 100 fill; */</span><br>  <span class="hljs-comment">/* fill填充内容区 */</span><br>  <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">100</span> <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>repeat</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid black;<br>  <span class="hljs-attribute">border-color</span>: lightpink;<br>  <span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//border.png</span>);<br>  <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">100</span> <span class="hljs-number">100</span> fill;<br>  <span class="hljs-attribute">border-image-repeat</span>: round;<br>  <span class="hljs-comment">/* stretch默认值:拉伸</span><br><span class="hljs-comment">    round:平铺</span><br><span class="hljs-comment">    repeat:平铺</span><br><span class="hljs-comment">    space:平铺</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-attribute">border-image-repeat</span>: round stretch;<br>  <span class="hljs-comment">/*也可以两个:水平垂直*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>另一种写法：border-image:source slice repeat;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">source/red.png</span>) <span class="hljs-number">100</span> repeat;<br></code></pre></td></tr></table></figure><h1 id="四、background"><a href="#四、background" class="headerlink" title="四、background"></a>四、background</h1><p>渐变颜色生成器:linear-gradient();  radial-gradient();</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-comment">/* background-image: linear-gradient(#0f0, #f00); */</span><br>  <span class="hljs-comment">/* linear-gradient只能当成背景图片来使用,background-color不好使 */</span><br><br>  <span class="hljs-comment">/*两张图片在一个容器中展示*/</span><br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>() <span class="hljs-built_in">url</span>(); <span class="hljs-comment">/* 可以添加多个背景图片 */</span><br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100px</span> <span class="hljs-number">200px</span>, <span class="hljs-number">100px</span> <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>, <span class="hljs-number">100px</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>容错机制:容错背景图片展示</p><h2 id="1-background-origin"><a href="#1-background-origin" class="headerlink" title="1.background-origin:"></a>1.background-origin:</h2><p>图片从哪里起始<br>没规定在哪结束，就开始重复图片 repeat，这就是为什么看起来像是 border-box 开始的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> solid transparent;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//source/pic1.jpeg</span>);<br><br>  <span class="hljs-attribute">background-origin</span>: padding-box;<br>  <span class="hljs-comment">/* border-box padding-box(默认值) content-box */</span><br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>&#125;<br></code></pre></td></tr></table></figure><p>background-position 由 background-origin 决定的。position 相对于 origin 定位。</p><h2 id="2-background-clip"><a href="#2-background-clip" class="headerlink" title="2.background-clip"></a>2.background-clip</h2><p>背景图片从哪块开始截断，从哪块以外的部分都不显示背景图片，即从哪块结束</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-clip</span>: border-box;<br><span class="hljs-comment">/* border-box(默认,废弃值) padding-box content-box text */</span><br></code></pre></td></tr></table></figure><p>text 精解：文字内容区反切背景图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: center center;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">200px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//source/pic2.jpeg</span>);<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>  <span class="hljs-comment">/* 固定写法三件套，配合background-clip */</span><br>  <span class="hljs-attribute">background-clip</span>: text;<br>  -webkit-text-fill-<span class="hljs-attribute">color</span>: transparent;<br>  text-fill-<span class="hljs-attribute">color</span>: transparent;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-background-repeat"><a href="#3-background-repeat" class="headerlink" title="3.background-repeat"></a>3.background-repeat</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//source/pic4.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">50px</span> <span class="hljs-number">50px</span>;<br>  <span class="hljs-comment">/* background-repeat: no-repeat; */</span><br>  <span class="hljs-comment">/* background-repeat: repeat-x; */</span><br>  <span class="hljs-comment">/* background-repeat: repeat-y; */</span><br>  <span class="hljs-comment">/* background-repeat: round;深到一定程度蹦进来一张图 */</span><br>  <span class="hljs-comment">/* background-repeat: space;空白填充，冲到一定程度填充一张图片 */</span><br>  <span class="hljs-comment">/* background-repeat: round space;分别是x,y */</span><br>  <span class="hljs-comment">/* background-repeat:repeat-x相当于repeat-x no-repeat; */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-background-attachment"><a href="#4-background-attachment" class="headerlink" title="4.background-attachment"></a>4.background-attachment</h2><p>改变定位属性的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">700px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-comment">/* overflow: hidden; */</span><br>  <span class="hljs-attribute">overflow</span>: scroll;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//source/pic6.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* background-attachment: local; */</span><br>  <span class="hljs-comment">/* 相对于内容区定位 */</span><br>  <span class="hljs-comment">/* background-attachment: scroll;默认 */</span><br>  <span class="hljs-comment">/* 默认scroll:相对于容器定位 */</span><br>  <span class="hljs-comment">/* background-attachment: fixed; */</span><br>  <span class="hljs-comment">/* 相对于真正的可视区视口定位 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-background-size"><a href="#5-background-size" class="headerlink" title="5.background-size"></a>5.background-size</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">700px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">overflow</span>: scroll;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//source/pic6.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-comment">/* contain不改变宽高比，让容器包含一张完整图片，即便会出现repeat</span><br><span class="hljs-comment">    cover填充满容器，不改变宽高比 */</span><br>  <span class="hljs-attribute">background-attachment</span>: scroll;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果</p><p>contain（可能 repeat）：一条边对齐，另一条小于等于容器另一条</p><p>cover（可能超出）：一条边对齐，另一条大于等于容器另一条</p><blockquote><p>渐变生成器</p></blockquote><p>linear-gradient</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* background-image: linear-gradient(red, white);</span><br><span class="hljs-comment">    background-image: linear-gradient(to right, red, green);</span><br><span class="hljs-comment">    background-image: linear-gradient(to left, red, green);</span><br><span class="hljs-comment">    background-image: linear-gradient(to bottom, red, green);</span><br><span class="hljs-comment">    background-image: linear-gradient(to top, red, green);</span><br><span class="hljs-comment">    background-image: linear-gradient(to top right, red, green); */</span><br>  <span class="hljs-comment">/* background-image: linear-gradient(0deg, red, green);90deg 180deg */</span><br>  <span class="hljs-comment">/* background-image: linear-gradient(90deg, red, 20px, green);颜色的终止位置 */</span><br>  <span class="hljs-comment">/* background-image: linear-gradient(90deg, red 20px, green 60px); */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>镜像放射 radial-gradient()</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* background-image: radial-gradient(red, green, #0ff); */</span><br>  <span class="hljs-comment">/* background-image: radial-gradient(red 20%, green 50px, #0ff 40%); */</span><br>  <span class="hljs-comment">/* background-image: radial-gradient(circle at 100px 0px, red, green, #0ff); */</span><br>  <span class="hljs-comment">/* background-image: radial-gradient(ellipse at 20px 30px, red, green, #0ff); */</span><br>  <span class="hljs-comment">/* 放射半径 */</span><br>  <span class="hljs-comment">/* closest-corner</span><br><span class="hljs-comment">    closest-side</span><br><span class="hljs-comment">    farthest-corner</span><br><span class="hljs-comment">    farthest-side */</span><br>  <span class="hljs-comment">/* background-image: radial-gradient(ellipse farthest-corner at 50px 50px, red, green, #0ff); */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>颜色</p><p>HSL</p><p>HSLA</p><p>currentColor 中转颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">color</span>: red; <span class="hljs-comment">/*border竟然颜色改变了。一旦不设置border-color的时候，会继承color，currentColor作为中转*/</span><br>  <span class="hljs-comment">/* css1 css2 border-color:color currentColor*/</span><br>  <span class="hljs-attribute">border-color</span>: currentColor;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、text"><a href="#五、text" class="headerlink" title="五、text"></a>五、text</h1><h2 id="1-text-shadow"><a href="#1-text-shadow" class="headerlink" title="1.text-shadow"></a>1.text-shadow</h2><p>x, y, blur, color</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">#000</span>, -<span class="hljs-number">10px</span> -<span class="hljs-number">10px</span> <span class="hljs-number">3px</span> <span class="hljs-number">#30f</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>demo</p><p>浮雕效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0ff</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#000</span>, -<span class="hljs-number">1px</span> -<span class="hljs-number">1px</span> <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>镂刻效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0ff</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">text-shadow</span>: -<span class="hljs-number">1px</span> -<span class="hljs-number">1px</span> <span class="hljs-number">#000</span>, <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>阴影加强</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#0f0</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#0f0</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">30px</span> <span class="hljs-number">#0f0</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#f00</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#f10</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">30px</span> <span class="hljs-number">#f20</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;NO &quot;</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#f00</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#f10</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">30px</span> <span class="hljs-number">#f20</span>, <span class="hljs-number">0px</span> -<span class="hljs-number">5px</span><br>      <span class="hljs-number">20px</span> <span class="hljs-number">#f10</span>, <span class="hljs-number">0px</span> -<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#f20</span>, <span class="hljs-number">0px</span> -<span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-number">#f10</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">3s</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>死神来了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-comment">/* background-color: #000; */</span><br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">400px</span> -<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.//source/eye.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">300px</span>;<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>  <span class="hljs-attribute">background-clip</span>: text;<br>  -webkit-text-fill-<span class="hljs-attribute">color</span>: transparent;<br>  text-fill-<span class="hljs-attribute">color</span>: transparent;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">3s</span>;<br>  <span class="hljs-comment">/* text-shadow: 10px 10px 3px #000; </span><br><span class="hljs-comment">   这个不能展现效果？阴影跑到了文字内容上面，因为background-clip:text,文字就变成了背景的一部分</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> -<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分身</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f10</span>;<br><br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#f10</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#f20</span>, <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">15px</span> <span class="hljs-number">#f30</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1.5s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">10px</span> -<span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#f00</span>, <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">15px</span> <span class="hljs-number">#ff0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>描边效果 stroke</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  -webkit-text-stroke: <span class="hljs-number">2px</span> red;<br>&#125;<br></code></pre></td></tr></table></figure><p>字体描边效果 stroke</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">350px</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">color</span>: transparent;<br>  <span class="hljs-attribute">font-family</span>: simsun;<br>  -webkit-text-stroke: <span class="hljs-number">1px</span> red;<br>&#125;<br></code></pre></td></tr></table></figure><p>font-face 字体包使用方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;abc&#x27;</span>;字体包名字<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>();<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;abc&#x27;</span>;引入字体包<br>&#125;<br></code></pre></td></tr></table></figure><p>引入很多图片格式的原因：<br>字体格式</p><ol><li> TureType 微软 苹果 .ttf</li><li> opentype 微软 adobe 。opt</li><li> woff .woff</li><li><pre><code>     ie  .eat</code></pre></li><li><pre><code>     h5 svg</code></pre></li></ol><p>MIME 协议（.ttf .txt .pdf）<br>如果不认识，format 让浏览器加强对字体格式的认识。format 产生映射</p><h2 id="2-text-系列"><a href="#2-text-系列" class="headerlink" title="2.   text 系列"></a>2.   text 系列</h2><p>white-space</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">white-space</span>:pre;原封不动的保留你输入时的状态，空格、换行都会保留，并且当文字超出边界时不换行<br>    <span class="hljs-attribute">white-space</span>:nowarp:强制所有文本在同一行内显示。<br>&#125;<br></code></pre></td></tr></table></figure><p>word-break</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-comment">/* word-break: keep-all; */</span><br>  <span class="hljs-comment">/* 不换行 */</span><br>  <span class="hljs-comment">/* word-break: break-all; */</span><br>  <span class="hljs-comment">/* 强制换行 */</span><br>  <span class="hljs-comment">/* word-break: break-word; */</span><br>  <span class="hljs-comment">/* 尽可能保留英文单词完整性 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>columns 报纸布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/* columns: column-width||column-count;; */</span><br>    <span class="hljs-comment">/* columns: 300px 4; */</span><br>    <span class="hljs-attribute">column-count</span>: <span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-comment">/* 空隙 */</span><br>    <span class="hljs-attribute">column-rule</span>: <span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-comment">/* 空隙分割线 */</span><br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">column-span</span>: all;默认<span class="hljs-number">1</span><br>    <span class="hljs-comment">/* 横穿整个列 */</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">-webkit-column-<span class="hljs-attribute">break-before</span>: always;<br><span class="hljs-comment">/* 前面断列，另起一列 */</span><br>-webkit-column-<span class="hljs-attribute">break-after</span>: always;<br><span class="hljs-comment">/* 后面断列，另起一列 */</span><br></code></pre></td></tr></table></figure><p>column-with</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* column-count: 3;自适应 */</span><br><span class="hljs-attribute">column-width</span>: <span class="hljs-number">300px</span>;<br><span class="hljs-comment">/* 不太准，会自适应 */</span><br></code></pre></td></tr></table></figure><p>瀑布流布局 ：他尽量让高的成为多数的。一个一个试试就试出来了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-comment">/*内部机制不适宜瀑布流布局 */</span><br>  <span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;<br>  <span class="hljs-attribute">column-rule-style</span>: solid;<br>&#125;<br></code></pre></td></tr></table></figure><p>column 应用：小说阅读</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">column-width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: none;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">320px</span>);</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        红星资本局从国家药监局官网获悉，1月<br>        14日，国家药监局发布《关于注销酚酞片和酚酞含片药品注册证书的公告（2021年<br>        第6号）》，公告称，根据《中华人民共和国<br>        药品管理法》第八十三条规定，国家药品监督管理局<br>        组织对酚酞片和酚酞含片进行上市后评价，评价认为酚<br>        酞片和酚酞含片存在严重不良反应，在我国使用风险大于<br>        益，决定自即日起停止酚酞片和酚酞含片在我国的生产、销<br>        售和使用，注销药品注册证书（药品批准文号）。<br>        红星资本局从国家药监局官网获悉，1月<br>        14日，国家药监局发布《关于注销酚酞片和酚酞含片药品注册证书的公告（2021年<br>        第6号）》，公告称，根据《中华人民共和国<br>        药品管理法》第八十三条规定，国家药品监督管理局<br>        组织对酚酞片和酚酞含片进行上市后评价，评价认为酚<br>        酞片和酚酞含片存在严重不良反应，在我国使用风险大于<br>        益，决定自即日起停止酚酞片和酚酞含片在我国的生产、销<br>        售和使用，注销药品注册证书（药品批准文号）红星资本局从国家药监局官网获悉，1月<br>        14日，国家药监局发布《关于注销酚酞片和酚酞含片药品注册证书的公告（2021年<br>        第6号）》，公告称，根据《中华人民共和国<br>        药品管理法》第八十三条规定，国家药品监督管理局<br>        组织对酚酞片和酚酞含片进行上市后评价，评价认为酚<br>        红星资本局从国家药监局官网获悉，1月<br>        14日，国家药监局发布《关于注销酚酞片和酚酞含片药品注册证书的公告（2021年<br>        第6号）》，公告称，根据《中华人民共和国<br>        药品管理法》第八十三条规定，国家药品监督管理局<br>        组织对酚酞片和酚酞含片进行上市后评价，评价认为酚<br>        酞片和酚酞含片存在严重不良反应，在我国使用风险大于<br>        益，决定自即日起停止酚酞片和酚酞含片在我国的生产、销<br>        售和使用，注销药品注册证书（药品批准文号）红星资本局从国家药监局官网获悉，1月<br>        14日，国家药监局发布《关于注销酚酞片和酚酞含片药品注册证书的公告（2021年<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>jQuery 实现左右<strong>滑</strong>屏，（按钮），之前所讲知识完美融合</p><p>滑动——slide 插件</p><h1 id="六、box"><a href="#六、box" class="headerlink" title="六、box"></a>六、box</h1><h2 id="1-IE6-混杂模式盒子"><a href="#1-IE6-混杂模式盒子" class="headerlink" title="1.IE6 混杂模式盒子"></a>1.IE6 混杂模式盒子</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-comment">/* 触发 */</span><br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-comment">/*默认content-box*/</span><br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">原来：boxWidth=width+border*2+padding*2;</span><br><span class="hljs-comment">怪异：boxWidth=width </span><br><span class="hljs-comment"> contentWidth=width - border*2 - padding*2 </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>宽度不固定，内边距 padding 固定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;</span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输入框宽度不固定，内边距固定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-comment">/* input天生带2px的border,解决就用怪异盒子 */</span></span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>产品需求接受形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>宽度用户自定，后端传的，padding border 固定</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>两个值</p><p>1.overflow</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-comment">/* overflow: scroll; */</span><br>  <span class="hljs-comment">/* 除了当overflow-x,overflow-y之一设置了非 visible时，另一个属性会自动将默认值visible设置为auto */</span><br>  <span class="hljs-attribute">overflow-x</span>: scroll; <span class="hljs-comment">/* 就会overflow-y:auto */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>移动端</p><p>明星左右滑动模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">overflow-x</span>: scroll;</span><br><span class="css">        <span class="hljs-attribute">overflow-y</span>: auto;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-comment">/* 最外层溢出部分隐藏，里面盒子=图片总体宽度 */</span></span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.resize 调节元素大小 :会导致重排和重绘，性能消耗</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-comment">/* resize: both; */</span><br>  <span class="hljs-comment">/* resize: vertical;竖直 */</span><br>  <span class="hljs-attribute">overflow</span>: scroll;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-flex-弹性盒子"><a href="#2-flex-弹性盒子" class="headerlink" title="2.flex 弹性盒子"></a>2.flex 弹性盒子</h2><p><a href="https://note.youdao.com/ynoteshare1/index.html?id=34a5c74103899550601b58d9d10141de&type=note">https://note.youdao.com/ynoteshare1/index.html?id=34a5c74103899550601b58d9d10141de&amp;type=note</a><br><a href="https://note.youdao.com/ynoteshare1/index.html?id=4be5892bd2084821fe6671d7a4e09e1a&type=note">https://note.youdao.com/ynoteshare1/index.html?id=4be5892bd2084821fe6671d7a4e09e1a&amp;type=note</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-comment">/* display: inline-flex; */</span></span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: row;</span><br><span class="css">        <span class="hljs-comment">/* 默认主轴水平方向，自左向右 */</span></span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="css">        <span class="hljs-comment">/* 垂直 */</span></span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: row-reverse;</span><br><span class="css">        <span class="hljs-comment">/* 逆反 */</span></span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: column-reverse;</span><br><span class="css">        <span class="hljs-comment">/* 垂直逆反 */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>换行实现：</p><p>flex-wrap</p><p>justify-content：基于主轴对齐方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: nowrap;</span><br><span class="css">        <span class="hljs-comment">/* justify-content: flex-start;默认 */</span></span><br><span class="css">        <span class="hljs-comment">/* justify-content: flex-end; 主轴向右*/</span></span><br><span class="css">        <span class="hljs-comment">/* justify-content: center; */</span></span><br><span class="css">        <span class="hljs-comment">/* justify-content: space-between; */</span></span><br><span class="css">        <span class="hljs-comment">/* 两边站住，中间自适应 */</span></span><br><span class="css">        <span class="hljs-comment">/* justify-content: space-around; */</span></span><br><span class="css">        <span class="hljs-comment">/* 元素元素之间间距相等 */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>align-items 垂直方向</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: nowrap;</span><br><span class="css">        <span class="hljs-comment">/* align-items: baseline; */</span></span><br><span class="css">        <span class="hljs-comment">/* 基于文字对齐 */</span></span><br><span class="css">        <span class="hljs-comment">/* align-items: stretch默认; */</span></span><br><span class="css">        <span class="hljs-comment">/* 未设置内容区高度的话，实现拉伸；如果设置了，就不好使了 */</span></span><br><span class="css">        <span class="hljs-comment">/* align-items: flex-start; */</span></span><br><span class="css">        <span class="hljs-comment">/* align-items: flex-end; */</span></span><br><span class="css">        <span class="hljs-comment">/* align-items: center; */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-comment">/* height: 100px; */</span></span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;</span><br><span class="css">        <span class="hljs-comment">/* margin-top: 10px; 验证baseline*/</span></span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单行居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: wrap;</span><br><span class="css">        <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 主要针对单行元素来处理对齐方式的 */</span></span><br><span class="css"></span><br><span class="css">        <span class="hljs-attribute">align-content</span>: center; <span class="hljs-comment">/* 必须作用于多行元素 */</span></span><br><span class="css">        <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>align-content 看官方文档自学</p><p><strong>以上都是设置在父级上的</strong></p><p>以下是子级</p><p>order 相当于 z-index,默认 0，最好添负值；小的在前</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: nowrap;<br>  <span class="hljs-attribute">align-items</span>: stretch;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;<br>  <span class="hljs-attribute">order</span>: -<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">order</span>: -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>align-self</p><p>听从自己</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: nowrap;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;<br>  <span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br></code></pre></td></tr></table></figure><p>强于 align-items（父级），弱于 align-content（父级）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: nowrap;<br>  <span class="hljs-attribute">align-content</span>: center;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;<br>  <span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br></code></pre></td></tr></table></figure><p>弹性盒子之弹性</p><p>flex-grow</p><p>当这一行还有剩余空间的时候，按照比例<strong>分配剩余空间</strong>，最终调整大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-comment">/* */</span></span><br><span class="css">        <span class="hljs-comment">/* flex-grow: 1; */</span></span><br><span class="css">        <span class="hljs-comment">/* 默认0 伸展开了 */</span></span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;</span><br><span class="css">        <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">2</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>flex-shrink   默认 1</p><p>超出，不换行，启动压缩</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-comment">/* 压缩加权算法 */</span><br><span class="hljs-comment">/* 200px * 1 + 200px * 1 + 400px * 3 = 1600px */</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">200px * 1</span><br><span class="hljs-comment">---------   * 200px  = 25px</span><br><span class="hljs-comment">1600 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">3</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>深入剖析：加边框</p><p>得出最终结论：真实内容区大小*<em>shrink + （…）=加权值</em></p><p>flex-basis 相当于 width 权重大于 width</p><p>默认 auto</p><p>basis 与 width 区别</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* 根据内容撑开 */</span><br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">/* width: 100px; 覆盖*/</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f</span>;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">    元素撑开的话，得出以下结论：</span><br><span class="hljs-comment">        只写basis或者basis&gt;width，代表元素的最小宽度           </span><br><span class="hljs-comment">        设置了width并且basis小于width </span><br><span class="hljs-comment">        basis&lt;realWidth&lt;width</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0ff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>想换行，加汉字或者设置换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-comment">/* word-break: break-word;可换行，就可以参与压缩了 */</span><br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0</span>;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0ff</span>;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上，总结</p></blockquote><p>当你设置宽的时候，如果 basis 设置有值，且小于 width，那么真实的宽的范围在 basis<br>&lt;realWidth&lt;Width<br>当你不设置 width 的时候，设置 basis，元素真实的宽 min-width 当不换行内容超过内容区<br>会撑开容易<br>无论什么情况，被不换行内容撑开的容器，不会被压缩计算</p><blockquote><p>探究 flex 应用<br>flex:0 1 auto 默认 因为设置了 flex 后会自动压缩<br>基本应用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">.wrapper &#123; width: 600px; height: 600px; border: 1px solid black; display: flex;<br>/*flex-wrap: wrap;*/ align-content: flex-start; &#125; .content &#123; background-color:<br>red; flex: 1 1 auto; width: 250px; height: 250px; &#125;<br></code></pre></td></tr></table></figure><p>1.实现居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">resize</span>: both; //配合<span class="hljs-attribute">overflow</span>使用<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.可动态增加的导航栏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> auto;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#f20</span>;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f20</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>天猫<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>聚划算<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 无论多少，都等分 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.等分布局（4 等分，2 等分，中间可加 margin）</p><p>实现中间固定，两边等比例自适应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">resize</span>: both;</span><br><span class="css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-comment">/* flex: 0 1 auto; 默认*/</span></span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> auto;</span><br><span class="css">        <span class="hljs-comment">/* margin: 0 10px; */</span></span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">200px</span>; <span class="hljs-comment">/*中间固定，不能伸不能缩，即0,0，*/</span></span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现中间固定，两边不比例自适应</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">加上 <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span> <span class="hljs-number">2</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中一个固定宽度的布局（固定一个，固定两个）</p><p>4.圣杯布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">resize</span>: both;</span><br><span class="css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="css">        //<span class="hljs-attribute">align-items</span>:stretch//默认  交叉轴如果没有设置，就拉伸</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.header</span>,</span><br><span class="css">      <span class="hljs-selector-class">.footer</span>,</span><br><span class="css">      <span class="hljs-selector-class">.left</span>,</span><br><span class="css">      <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20%</span>; <span class="hljs-comment">/*不参与伸缩，占20%*/</span></span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.contain</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> auto; //把中间内容区噔开</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.center</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> auto;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contain&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.流式布局</p><p>模拟 float 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">resize</span>: both;</span><br><span class="css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="css">        <span class="hljs-attribute">align-content</span>: flex-start; //模拟<span class="hljs-attribute">float</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作业：刘德华</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">        <span class="hljs-attribute">resize</span>: both;</span><br><span class="css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> auto;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> auto;</span><br><span class="css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">em</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;.\1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>演员演员演员演员演员演员演员<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>熟能生巧</p><h1 id="七、动画"><a href="#七、动画" class="headerlink" title="七、动画"></a>七、动画</h1><h2 id="1-transition-过渡动画"><a href="#1-transition-过渡动画" class="headerlink" title="1.transition 过渡动画"></a>1.transition 过渡动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-comment">/* transition: transition-property, transition-duration，transition-timing-function,transition-delay; */</span><br>  <span class="hljs-comment">/* transition-property: all; */</span><br>  <span class="hljs-comment">/* 第一个监听属性 */</span><br>  <span class="hljs-comment">/* transition-property: width, height; */</span><br>  <span class="hljs-comment">/* transition-duration: ; */</span><br>  <span class="hljs-comment">/* 第二个时间间隔 */</span><br>  <span class="hljs-comment">/* transition-timing-function:linear ; */</span><br>  <span class="hljs-comment">/* 第三个运动状态 */</span><br>  <span class="hljs-comment">/* transition-delay: ; */</span><br>  <span class="hljs-comment">/* 第四个延迟 */</span><br>  <span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span> linear <span class="hljs-number">1s</span>;<br>  <span class="hljs-comment">/* 总共3s，1s后开始宽度增加，增加2s */</span><br>  <span class="hljs-comment">/* 添加方式</span><br><span class="hljs-comment">    前两个必须有，后两个默认</span><br><span class="hljs-comment">    */</span><br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>动画 demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-cubic-bezier"><a href="#2-cubic-bezier" class="headerlink" title="2.cubic-bezier"></a>2.cubic-bezier</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.5</span>, -<span class="hljs-number">1.5</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">/*代表两个坐标点</span><br><span class="hljs-comment">    x:(0,1)</span><br><span class="hljs-comment">    y:都可</span><br><span class="hljs-comment">    */</span><br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-animation"><a href="#3-animation" class="headerlink" title="3.animation"></a>3.animation</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> run &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-comment">/* 0%相当于from */</span><br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/* background-color: red; */</span><br>  &#125;<br>  <span class="hljs-number">25%</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/* background-color: green; */</span><br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-comment">/* background-color: blue; */</span><br>  &#125;<br>  <span class="hljs-number">75%</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-comment">/* background-color: coral; */</span><br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-comment">/* 100%相当于to  */</span><br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> color-change &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>  &#125;<br>  <span class="hljs-number">60%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: blue;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: black;<br>  &#125;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-comment">/* animation: run 4s; */</span><br>  <span class="hljs-comment">/* animation: run 4s, color-change 4s;两个动画同时运行 */</span><br>  <span class="hljs-comment">/* animation: run 4s cubic-bezier(.5,1,1,1);其实是是每一段的运动状态 */</span><br>  <span class="hljs-comment">/* animation: run 4s cubic-bezier(.5, 1, 1, 1) 1s;延迟1s执行动画 */</span><br>  <span class="hljs-comment">/* animation: run 4s cubic-bezier(.5, 1, 1, 1) 1s 2; 执行2次动画 */</span><br>  <span class="hljs-comment">/* animation: run 4s cubic-bezier(.5, 1, 1, 1) 1s infinite; 死循环 */</span><br>  <span class="hljs-comment">/* animation: run 4s cubic-bezier(.5, 1, 1, 1) 1s reverse;倒着走 */</span><br>  <span class="hljs-comment">/* animation: run 4s cubic-bezier(.5, 1, 1, 1) 1s 2 alternate;先证者走，在倒着走，意味着次数&gt;=2（单摆） */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>animation-fill-mode:</p><p>forwards: 设置对象状态为动画结束时候的状态</p><p>backwards:设置对象状态为动画开始时候第一针的状态</p><p>both:设置对象状态为动画结束和开始的状态的综合体</p><p><strong>太阳月亮 demo——文件夹</strong></p><h2 id="4-step-跳转动画"><a href="#4-step-跳转动画" class="headerlink" title="4.step 跳转动画"></a>4.step 跳转动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> change-color &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>  &#125;<br><br>  <span class="hljs-number">25%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>  &#125;<br><br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: blue;<br>  &#125;<br><br>  <span class="hljs-number">75%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: black;<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">247</span>, <span class="hljs-number">20</span>, <span class="hljs-number">247</span>);<br>  <span class="hljs-comment">/* animation: change-color 4s steps(1, end); */</span><br>  <span class="hljs-comment">/* 不过度 一步到位 */</span><br>  <span class="hljs-comment">/* animation: change-color 4s steps(2, end); */</span><br>  <span class="hljs-comment">/* 每一段用2步实现，动画更加细腻了 */</span><br>  <span class="hljs-comment">/* animation: change-color 4s steps(1, start); */</span><br>  <span class="hljs-comment">/* start与end </span><br><span class="hljs-comment">    end保留当前帧状态，直到这个动画时间结束    忽略最后一针</span><br><span class="hljs-comment">    start保留下一针状态，直到这段动画时间结束   忽略第一针</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">/* 要想弥补时间段   想看见最后一针</span><br><span class="hljs-comment">    animation: change-color 4s steps(1, end) forwards;</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>区别 end 与 start</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> run &#123;</span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">25%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">50%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">75%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.demo1</span>,</span><br><span class="css">      <span class="hljs-selector-class">.demo2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.demo1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">animation</span>: run <span class="hljs-number">4s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">1</span>, start);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.demo2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-comment">/* animation: run 4s steps(1, end); */</span></span><br><span class="css">        <span class="hljs-attribute">animation</span>: run <span class="hljs-number">4s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">1</span>, end) forwards;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="css">            steps(1,end);===step-end</span></span><br><span class="hljs-comment"><span class="css">            steps(1,start);===step-start</span></span><br><span class="hljs-comment"><span class="css">            */</span></span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>end<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打字效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> cursor &#123;</span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">border-left-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">50%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">border-left-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">border-left-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> cover &#123;</span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-comment">/* background-color: red; */</span></span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-family</span>: monospace;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">        <span class="hljs-attribute">border-left</span>: <span class="hljs-number">2px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">        <span class="hljs-attribute">animation</span>: cursor <span class="hljs-number">1s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">1</span>, end) infinite, cover <span class="hljs-number">12s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">12</span>, end);</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>sdknajnakjna<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表盘效果——文件夹</p><p>跑马效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> run &#123;</span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">2400px</span> <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./web/horse.png</span>);</span><br><span class="css">        <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="css">        <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">animation</span>: run <span class="hljs-number">0.3s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">12</span>, end) infinite;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;horse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-rotate3D-变换"><a href="#5-rotate3D-变换" class="headerlink" title="5.rotate3D 变换"></a>5.rotate3D 变换</h2><blockquote><p>rotate：2d 变换</p></blockquote><blockquote><p>rotateX，rotateY，rotateZ：3d 变换</p></blockquote><p>旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> round &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./source/pic6.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>  <span class="hljs-comment">/* transform-origin: center center; */</span><br>  <span class="hljs-comment">/* 圆心给谁设置，参考的就是谁 */</span><br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">animation</span>: round <span class="hljs-number">2s</span> infinite;<br>&#125;<br></code></pre></td></tr></table></figure><p>3D 变换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>  <span class="hljs-attribute">perspective-origin</span>: <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./source/pic6.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* transform: rotateX(0deg); */</span><br>  <span class="hljs-comment">/* transform: rotateX(0deg) rotateY(0deg); */</span><br>  <span class="hljs-comment">/* 旋转顺序不同，结果不同 */</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>rotate3d()</p></blockquote><blockquote><p>transform: rotate3d(x, y, z, angle); <strong>矢量和</strong>作为旋转轴</p></blockquote><p>小练习图片钟摆效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>  <span class="hljs-attribute">perspective-origin</span>: <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> change &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(-<span class="hljs-number">45deg</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">90deg</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">90deg</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./source/pic6.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">animation</span>: change <span class="hljs-number">2s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>) infinite alternate;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-scale-伸缩"><a href="#6-scale-伸缩" class="headerlink" title="6.scale 伸缩"></a>6.scale 伸缩</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* transform: scale(1, 2); 2d x,y轴*/</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    transform: scaleX();</span><br><span class="hljs-comment">    transform: scaleY();</span><br><span class="hljs-comment">    transform: scalez();</span><br><span class="hljs-comment">    transform: scale3d();  就是叠加 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* scale:</span><br><span class="hljs-comment">    1.伸缩元素变化坐标轴的刻度 ,translateX,Y验证。伸缩之后，translateX（100）产生的效果是200</span><br><span class="hljs-comment">    2.设置两次，则第二次在第一次基础上叠加</span><br><span class="hljs-comment">    3.旋转伸缩在一个轴进行</span><br><span class="hljs-comment">4.雁过留声  伸缩过的影响一直保留 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* transform: scale() rotate();位置讲究  先后scale不一样*/</span><br></code></pre></td></tr></table></figure><h2 id="7-skew-倾斜"><a href="#7-skew-倾斜" class="headerlink" title="7.skew 倾斜"></a>7.skew 倾斜</h2><blockquote><p>skew(x, y);</p></blockquote><blockquote><p>skewx();</p></blockquote><blockquote><p>skewy();</p></blockquote><p>demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>  <span class="hljs-attribute">perspective-origin</span>: <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> skewchange &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">45deg</span>, <span class="hljs-number">45deg</span>);<br>  &#125;<br><br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(-<span class="hljs-number">45deg</span>, -<span class="hljs-number">45deg</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./source/pic6.jpeg</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">transform-origin</span>: center center;<br>  <span class="hljs-comment">/* transform: skew(0deg, 0deg); */</span><br>  <span class="hljs-comment">/* 倾斜的不是元素本身，而是坐标轴</span><br><span class="hljs-comment">    坐标轴倾斜，刻度被拉伸 */</span><br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">        skew(x,y);</span><br><span class="hljs-comment">        skewx()</span><br><span class="hljs-comment">        skewy() </span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-attribute">animation</span>: skewchange <span class="hljs-number">4s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) infinite alternate;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-translate-perspective"><a href="#8-translate-perspective" class="headerlink" title="8.translate+perspective"></a>8.translate+perspective</h2><blockquote><p>2d translate(x, y)<br>translatex() translatey() translatex() translate3d()</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* transform: translate(100px); */</span><br><span class="hljs-comment">/* transform: translate3d(100px, 100px 100px); */</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">transform: translatex()</span><br><span class="hljs-comment">translatez() </span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotatey</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">100px</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translatez</span>(<span class="hljs-number">100px</span>) <span class="hljs-built_in">rotatey</span>(<span class="hljs-number">90deg</span>);<br></code></pre></td></tr></table></figure><p>小应用：calc(50% - 0.5*宽高),不知道宽高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translatex</span>(-<span class="hljs-number">50%</span>) 半个身位;<br></code></pre></td></tr></table></figure><p>关于 translatez（）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">demo/u.png</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-comment">/*transform: translatez(100px) rotatey(90deg);*/</span><br>  <span class="hljs-comment">/*z没起作用？旋转晚了*/</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotatey</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-pseudo">:root</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; //需要有高度才能实现鼠标移动到哪里都能触发事件</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content1</span>,</span><br><span class="css">      <span class="hljs-selector-class">.content2</span>,</span><br><span class="css">      <span class="hljs-selector-class">.content3</span>,</span><br><span class="css">      <span class="hljs-selector-class">.content4</span>,</span><br><span class="css">      <span class="hljs-selector-class">.content5</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./source/pic3.jpeg</span>);</span><br><span class="css">        <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">45deg</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content3</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content4</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">800px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content5</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">1000px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.body.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.style.perspectiveOrigin = <span class="hljs-string">&quot;&quot;</span> + e.pageX + <span class="hljs-string">&quot;px &quot;</span> + e.pageY + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>与 perspective 类似的一个东西：<br>transform: perspective(800px) rotateY(45deg);<br>写在<strong>前面并且元素本身</strong>，眼睛就在 center 不能调<br>perspective 在父级才有效<br>景深可以叠加<br>深入理解 perspevtive<br><img src="/img/4-1.png"><br><img src="/img/4-2.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>; <span class="hljs-comment">/*移动眼睛*/</span><br>  <span class="hljs-attribute">perspective-origin</span>: <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">demo/u.png</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-comment">/*移动物体*/</span><br>  <span class="hljs-comment">/*transform: translatez(100px);*/</span><br>  <span class="hljs-comment">/*快接近800就见不到了，快后脑勺了*/</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translatez</span>(<span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>深入理解 perspective<br>​<br>transform-style</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;</span><br><span class="css">        <span class="hljs-attribute">perspective-origin</span>: <span class="hljs-number">300px</span> <span class="hljs-number">100px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">0deg</span>);</span><br><span class="css">        <span class="hljs-comment">/*父级旋转会带儿子旋转，因为浏览器渲染不了，所以z轴体现不出来，想立体，给父级(不能祖父)加上transform-style: preserve-3d;*/</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.demo</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">demo/u.png</span>);</span><br><span class="css">        <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>transform-origin</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;</span><br><span class="css">        <span class="hljs-attribute">perspective-origin</span>: <span class="hljs-number">300px</span> <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> move &#123;</span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">0deg</span>);</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>);</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">demo/u.png</span>);</span><br><span class="css">        <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="css">        <span class="hljs-attribute">animation</span>: move <span class="hljs-number">2s</span> linear infinite;</span><br><span class="css">        <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-comment">/* 可以设置空间点中心旋转 */</span></span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>照片墙</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-pseudo">:root</span>,</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">perspective</span>: <span class="hljs-number">3000px</span>;</span><br><span class="css">        <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="css">        <span class="hljs-comment">/* 一旦设置了这两个属性当中一条，他就变成了定位的参照物元素，所以这里没高度的话就导致没高度了 */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-keyword">@keyframes</span> round &#123;</span><br><span class="css">        <span class="hljs-comment">/*让父级转    简单*/</span></span><br><span class="css">        <span class="hljs-number">0%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">0deg</span>);</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-number">100%</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>);</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span>);</span><br><span class="css">        <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span>);</span><br><span class="css">        <span class="hljs-comment">/* 写了top没生效的重要原因：父级没有高度，因为body，解决就把body上面 height打开 */</span></span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="css">        <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="css">        <span class="hljs-attribute">animation</span>: round <span class="hljs-number">5s</span> linear infinite;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-comment">/* backface-visibility: hidden; */</span></span><br><span class="css">        <span class="hljs-comment">/* 图片背部 */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">800px</span>);</span><br><span class="css">        <span class="hljs-comment">/*沿着自己的z轴向外拓*/</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">        <span class="hljs-comment">/* 可以改变y值，实现层叠 */</span></span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">135deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">225deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">6</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">270deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">7</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">315deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">8</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>) <span class="hljs-built_in">translatez</span>(<span class="hljs-number">500px</span>);</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo/u.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.body.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.style.perspectiveOrigin = <span class="hljs-string">&quot;&quot;</span> + e.pageX + <span class="hljs-string">&quot;px &quot;</span> + e.pageY + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作业：3D 魔方 知识点是一样的</p><h2 id="9-matrix"><a href="#9-matrix" class="headerlink" title="9.matrix"></a>9.matrix</h2><p>矩阵就是 transform 给咱们选中的计算规则<br>矩阵函数传的参数是矩阵的前两行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">平移// translate<br>| <span class="hljs-number">1</span> <span class="hljs-number">0</span> e||x||x + e|<br>| <span class="hljs-number">0</span> <span class="hljs-number">1</span> f|   *  |y| =   |y + f|<br>| <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>|  |z||<span class="hljs-number">1</span>    |<br>matrix(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,e,f); === translate(x, y);<br>// scale<br>| <span class="hljs-selector-tag">a</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span> |     | x |      | ax |<br>| <span class="hljs-number">0</span>,d,<span class="hljs-number">0</span> |  *  | y |   =  | dy |<br>| <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span> |     | <span class="hljs-number">1</span> |      | <span class="hljs-number">1</span>  |<br>matrix(<span class="hljs-selector-tag">a</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,d,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); === scale(x, y);<br>// rotate<br>matrix(cos(θ),sin(θ),-sin(θ),cos(θ),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); === rotate(θ);<br>| cos(θ),-sin(θ),e |     | x |<br>| sin(θ),cos(θ) ,f |  *  | y |<br>| <span class="hljs-number">0</span>     ,<span class="hljs-number">0</span>      ,<span class="hljs-number">1</span> |     | <span class="hljs-number">1</span> |<br>x1 = cos(θ)x - sin(θ)y + <span class="hljs-number">0</span><br>y2 = sin(θ)x + cos(θ)y + <span class="hljs-number">0</span><br>matrix(<span class="hljs-number">1</span>,tan(θy),tan(θx),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br><br>matrix(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,x,y,z,<span class="hljs-number">1</span>) 缩放<br>matrix(x,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,y,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,z,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) 平移<br></code></pre></td></tr></table></figure><p>利用矩阵实现镜像：核心是符号取反</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">source/pic3.jpeg</span>);<br>    <span class="hljs-attribute">background-size</span>: cover;<br>    <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">matrix</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>&#125;<br>|-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>, <span class="hljs-number">0</span> |     | x |      | -x |  x取反，反推第一个矩阵表达式<br>| <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> |  *  | y |   =  | -y |<br>| <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> |     | <span class="hljs-number">1</span> |      | <span class="hljs-number">1</span>  |<br></code></pre></td></tr></table></figure><h1 id="八、性能优化"><a href="#八、性能优化" class="headerlink" title="八、性能优化"></a>八、性能优化</h1><p>CPU 中央处理器，擅长逻辑运算<br>GPU 显卡，擅长图片绘制，高精度的浮点数运算。{家用，专业}，尽量少复杂动画，即少了 GPU，烧性能。<br>区块链技术(GPU)</p><ol><li>触发 reflow:</li></ol><p>改变窗口大小<br>改变文字大小<br>内容的改变，输入框输入文字<br>激活伪类，如:hover<br>操作 class 属性<br>脚本操作 DOM<br>y 计算 offsetWidth 和 offsetHeight<br>设置 style 属性：.style….style…—–&gt;.class{}</p><p>css3 优化：<br>在 gpu 层面上操作：改变 opacity 或者 transform：translate3d()/translatez();<br>最好添加 translatez(0); 小 hack 告诉浏览器告诉浏览器另起一个层<br>​</p><p>减少重排和重绘</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">css<br><span class="hljs-number">1</span>、使用transform 替代top<br><span class="hljs-number">2</span>、使用visibility 替换display:none ，因为前者只会引起重绘，后者会引发回<br>流(改变了布局<br><span class="hljs-number">3</span>、避免使用table布局，可能很小的一个小改动会造成整个table的重新布局。<br><span class="hljs-number">4</span>、尽可能在DOM树的最末端改变<span class="hljs-class"><span class="hljs-keyword">class</span>,回流是不可避免的，但可以减少其影</span><br><span class="hljs-class">响。尽可能在<span class="hljs-title">DOM</span>树的最末端改变<span class="hljs-title">class</span>，可以限制了回流的范围，使其影响</span><br><span class="hljs-class">尽可能少的节点。</span><br><span class="hljs-class">5、避免设置多层内联样式，<span class="hljs-title">CSS</span>选择符从右往左匹配查找,避免节点层级过多。</span><br><span class="hljs-class">  <span class="hljs-title">CSS3</span>硬件加速(<span class="hljs-title">GPU</span>加速)，使用<span class="hljs-title">css3</span>硬件加速，可以让<span class="hljs-title">transform</span>、<span class="hljs-title">opacity</span>、</span><br><span class="hljs-class"><span class="hljs-title">filters</span>这些动画不会引起回流重绘。但是对于动画的其它属性，比如</span><br><span class="hljs-class"><span class="hljs-title">background</span>-<span class="hljs-title">color</span>这些，还是会引起回流重绘的，不过它还是可以提升这些动画</span><br><span class="hljs-class">的性能。</span><br><span class="hljs-class"><span class="hljs-title">js</span></span><br><span class="hljs-class">1、避免频繁操作样式,最好一次性重写<span class="hljs-title">style</span>属性,或者将样式列表定义为<span class="hljs-title">class</span></span><br><span class="hljs-class">并一次性更改<span class="hljs-title">class</span>属性。</span><br><span class="hljs-class">2、避免频繁操作<span class="hljs-title">DOM</span>,创建一个<span class="hljs-title">documentFragment</span>,在它上面应用所有<span class="hljs-title">DOM</span></span><br><span class="hljs-class">操作，最后再把它添加到文档中。</span><br><span class="hljs-class">3、避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个</span><br><span class="hljs-class">变量缓存起来。</span><br><span class="hljs-class">4、对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素</span><br><span class="hljs-class">及后续元素频繁回流。</span><br></code></pre></td></tr></table></figure><p>新方法：will-change:transform;专门处理 GPU 加速问题<br>应用：hover 上去后才告诉浏览器要开启新层，点击才触发，总之提前一刻告诉就行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hover</span> &#123;<br>  will-change: transform;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器刷新页面的频率 1s 60s<br>每 16.7mm 刷新一次<br>gpu 可以再一帧里渲染好页面，那么当你改动页面的元素或者实现动画的时候，将会非常流畅</p><ol start="2"><li>触发 repaint：</li></ol><p>repaint：如果只是改变某个元素的背景色、<br>文 字颜色、边框颜色，不影响它周围或内部布局的属性<br>repaint<br>repaint 速度快于 reflow<br>浏览器渲染过程：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">download html download css download js css rules tree(construct) domAPI domTree<br>cssrulestree cssomAPI 最终cssomTree domtree cssomTree renderTree | | layout布局<br>---- &gt; paint喷色 (reflow重构) (repaint) 逻辑图（多层矢量图） -----&gt;<br>实际绘制（栅格化） 不设置就用cpu绘制 google chrome 自动调用 gpu<br></code></pre></td></tr></table></figure><h1 id="九、显示器的成像原理"><a href="#九、显示器的成像原理" class="headerlink" title="九、显示器的成像原理"></a>九、显示器的成像原理</h1><p>空间混色法 rgb<br>实质上并排排列（验证）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.demo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n) &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;<br>  <span class="hljs-comment">/*蓝</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">  .demo:nth-of-type(2n+1)&#123;</span><br><span class="hljs-comment">  background-color: #00f;</span><br><span class="hljs-comment">  /*红*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>像素：—&gt;红绿蓝像点—–&gt;空间混色<br>最小的单位：像点。像素由 3 个像点构成。<br>空间混色法应用<br>crt 显示屏<br>lcd 液晶屏<br>点距：crt 显示屏求点距的方法的意义，是几乎所有屏幕都通用的</p><p>像素的大小：点距<br>物理像素：设备出厂时，像素的大小<br>dpi:1 英寸所能容纳的像素点数<br>1 英寸= 2.54cm<br>dpi 打印机在一英寸屏幕里面可以打印多少墨点<br>ppi 一英寸所能容纳的像素点数(点距数)<br>参照像素<br>96dpi 一臂之遥的视角去看，显示出的具体大小<br>标杆 1/96*英寸<br>css 像素=逻辑像素<br>设备像素比 dpr = 物理像素/css 像素<br>衡量屏幕好不好：不看分辨率（分辨率：固定宽高下，展示的像素点数）<br>看的是 dpi</p><h1 id="十、响应式网站开发"><a href="#十、响应式网站开发" class="headerlink" title="十、响应式网站开发"></a>十、响应式网站开发</h1><h2 id="1-思考？"><a href="#1-思考？" class="headerlink" title="1.思考？"></a>1.思考？</h2><p>用户通过什么来看页面？电脑 （pc 端）， 手机 ，平板（移动端） （大小/分辨率）<br>如何使页面在不同的设备上展示的效果相同的？<br>不同的设备 开发不同的页面<br>只需要开发一套页面 让用户在不同的设备（大小或者分辨率如何变化）上看到的页面呈现效果是完美的<br>手机上像素大，像素点的密集程度变大了<br>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1500px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline-block; //不用浮动，而是用这种方法</span><br><span class="css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="css">                换行？</span></span><br><span class="hljs-comment"><span class="css">                1.凡是带有inline-block都有文字特性，制表符=文字大小</span></span><br><span class="hljs-comment"><span class="css">                2.border</span></span><br><span class="hljs-comment"><span class="css">                */</span></span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-响应式网页设计"><a href="#2-响应式网页设计" class="headerlink" title="2.响应式网页设计"></a>2.响应式网页设计</h2><p>响应式网页设计或称自适应网页设计或称回应式网页设计/对应式网页设计，是一种网页设计的技术做法，该设计可使网站在不同的设备（从桌面计算机显示器到移动电话或其他移动产品设备）上浏览时对应不同分辨率皆有适合的呈现，减少用户进行缩放，平移和滚动等操作行为。<br>真正的响应式设计方法不仅仅是根据可视区域大小而改变网页布局，而是要从整体上颠覆当前网页的设计方法，是针对任意设备的网页内容进行完美布局的一种显示机制。<br>用一套代码解决几乎所有设备的页面展示问题<br>设计工作由产品经理或者美工来出<br>详解 meta:将页面大小 根据分辨率不同进行相应的调节   以展示给用户的大小感觉上差不多<br>1css 像素  != 设备像素 （根据屏幕分辨率 相应的调整）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-设置视口"><a href="#3-设置视口" class="headerlink" title="3.设置视口"></a>3.设置视口</h2><p>模拟移动端的 meta</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>width： 可视区宽度<br>device-width:  设备宽度<br>minimum-scale： 最小缩放比<br>maximum-scale： 最大缩放比<br>width = device-width :  iphone 或者 ipad 上横竖屏的宽度 =   竖屏时候的宽度   不能自适应的问题<br>initial-scale=1.0    :  windows phone ie 浏览器 上横竖屏的宽度 =   竖屏时候的宽度 不能自适应的问题<br>user-scalable： 是否允许用户缩放<br>Css 像素根据设备像素进行计算   1css 像素  == 1 是设备像素     根据设备的分辨率  dpi 值来计算 css 像素真正展现的大小<br>meta 功能即适配各种不同分辨率的设备</p><h2 id="4-响应式网页开发方法"><a href="#4-响应式网页开发方法" class="headerlink" title="4.响应式网页开发方法"></a>4.响应式网页开发方法</h2><ol><li>流体网格：可伸缩的网格 （大小宽高   都是可伸缩（可用 flex 或者百分比来控制大小）float）—》 布局上面 元素大小不固定可伸缩</li><li>弹性图片：图片宽高不固定（可设置 min-width: 100%）</li><li>媒体查询：让网页在不同的终端上面展示效果相同（用户体验相同 à 让用户用着更爽） 在不同的设备（大小不同 分辨率不同）上面均展示合适的页面</li><li>主要断点： 设备宽度的临界点<br>大小的区别 —》 宽度不同   —》 根据不同宽度展示不同的样式<br>响应式网页开发主要是在 css 样式(异步加载)上面进行操作<br>主要断点</li></ol><h2 id="5-媒体查询"><a href="#5-媒体查询" class="headerlink" title="5.媒体查询"></a>5.媒体查询</h2><p>媒体查询是向不同设备提供不同样式的一种方式，它为每种类型的用户提供了最佳的体验。<br>css2: media type<br>media type(媒体类型)是 css 2 中的一个非常有用的属性，通过 media type 我们可以对不同的设备指定特定的样式，从而实现更丰富的界面。<br>css3: media query<br>media query 是 CSS3 对 media type 的增强，事实上我们可以将 media query 看成是 media type+css 属性(媒体特性 Media features)判断。<br>如何使用媒体查询？<br>媒体查询的引用方法有很多种：</p><ol><li> link 标签</li><li> @import url(example.css) screen and (width:800px);</li><li> css3 新增的@media</li></ol><blockquote><p>媒体查询不占用权重</p></blockquote><p>使用方法<br>媒体类型（Media Type): all(全部)、screen(屏幕)、print(页面打印或打印预览模式)<br>媒体特性（Media features): width(渲染区宽度)、device-width(设备宽度)…<br>Media Query 是 CSS3 对 Media Type 的增强版，其实可以将 Media Query 看成 Media Type(判断条件)+CSS(符合条件的样式规则)</p><h2 id="6-媒体类型"><a href="#6-媒体类型" class="headerlink" title="6.媒体类型"></a>6.媒体类型</h2><p>逻辑操作符<br>合并多个媒体属性 and</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">600px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">100px</span>);<br></code></pre></td></tr></table></figure><p>合并多个媒体属性或合并媒体属性与媒体类型, 一个基本的媒体查询，即一个媒体属性与默认指定的 screen 媒体类型。<br>指定备用功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">@media screen and (min-width: 769px), print and (min-width: 6in)“<br></code></pre></td></tr></table></figure><p>没有 or 关键词可用于指定备用的媒体功能。相反，可以将备用功能以逗号分割列表的形式列出<br>这会将样式应用到宽度超过 769 像素的屏幕或使用至少 6 英寸宽的纸张的打印设备。<br>指定否定条件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">monochrome</span>);<br></code></pre></td></tr></table></figure><p>要指定否定条件，可以在媒体声明中添加关键字 not，不能在单个条件前使用 not。该关键字必须位于声明的开头，而且它会否定整个声明。所以，上面的示例会应用于除单色屏幕外的所有设备。<br>向早期浏览器隐藏媒体查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">media=&quot;only screen and (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">401px</span>) and (max-width: <span class="hljs-number">600px</span>)<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>媒体查询规范还提供了关键字 only，它用于向早期浏览器隐藏媒体查询。类似于 not，该关键字必须位于声明的开头。Only 指定某种特定的媒体类型   为了兼容不支持媒体查询的浏览器<br>早期浏览器应该将以下语句 media=”screen and (min-width: 401px) and (max-width: 600px)”<br>解释为 media=”screen”： 换句话说，它应该将样式规则应用于所有屏幕设备，即使它不知道媒体查询的含义。<br>无法识别媒体查询的浏览器要求获得逗号分割的媒体类型列表，规范要求，它们应该在第一个不是连字符的非数字字母字符之前截断每个值。所以，早期浏览器应该将上面的示例解释为：media=”only” <br>因为没有 only 这样的媒体类型，所以样式表被忽略。<br>Query -à css3<br>​</p><p>易混淆的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">device-<span class="hljs-attribute">width</span>/<span class="hljs-attribute">height</span>    <span class="hljs-attribute">width</span>/<span class="hljs-attribute">height</span>来做为的判定值。<br></code></pre></td></tr></table></figure><p>device-width/device-height 是设备的宽度（如电脑手机的宽度 不是浏览器的宽度）<br>width/height 使用 documentElement.clientWidth/Height 即 viewport 的值。渲染宽度/高度<br>视口宽度/</p><h2 id="7-单位值"><a href="#7-单位值" class="headerlink" title="7.单位值"></a>7.单位值</h2><p>Rem：rem 是 CSS3 新增的一个相对单位（root em，根 em）相对的只是 HTML 根元素。<br>Em：em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。<br>Px： px 像素（Pixel）。相对长度单位。像素 px 是相对于显示器屏幕分辨率而言的。<br>Vw：相对于视口的宽度。视口被均分为 100 单位的 vw<br>Vh：相对于视口的高度。视口被均分为 100 单位的 vh<br>Vmax： 相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为 100 单位的 vmax<br>Vmin：相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为 100 单位的 vmin</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">rem 相对于html元素的font-size大小 em 相对于本身的font-size大小<br>font-size属性是可以继承的 vw/ vh 相对于视口而言的 会把视口分成100份 vmax<br>区视口宽高中最大的一边分成100份 vmin 区视口宽高中最小的一边分成100份 css样式引入<br>媒体查询不占用权重<br></code></pre></td></tr></table></figure><h2 id="8-响应式设计是最佳选择吗？"><a href="#8-响应式设计是最佳选择吗？" class="headerlink" title="8.响应式设计是最佳选择吗？"></a>8.响应式设计是最佳选择吗？</h2><p>不是的，内容设计胡问题都可以通过响应式设计思路解决， 项目的预算，目标用户以及定位决定了其实现方式。<br>项目的预算，人力，物力，财力， 时间成本<br>目标用户，<br>产品定位<br>渐进增强 —》 iphone6 向上兼容   兼容最新设备   <br>优雅降级 —》  开发通用版本   再兼容老版本    向下兼容<br>先移动端  —》 pc 端<br>先 iphone6 为初始原型 开发   —》 兼容其他的设备  ====》 渐进增强</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>moment</title>
    <link href="/2020/03/01/moment/"/>
    <url>/2020/03/01/moment/</url>
    
    <content type="html"><![CDATA[<h1 id="Moment"><a href="#Moment" class="headerlink" title="Moment"></a>Moment</h1><p><a href="http://momentjs.cn/">http://momentjs.cn/</a></p><h1 id="1-解析方法"><a href="#1-解析方法" class="headerlink" title="1.解析方法"></a>1.解析方法</h1><h2 id="设置语言环境-全局"><a href="#设置语言环境-全局" class="headerlink" title="设置语言环境 (全局)"></a>设置语言环境 (全局)</h2><p>moment.locale(‘zh-cn’);<br>解析</p><h3 id="moment"><a href="#moment" class="headerlink" title="moment()"></a>moment()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment());<br></code></pre></td></tr></table></figure><h3 id="moment-String"><a href="#moment-String" class="headerlink" title="moment(String)"></a>moment(String)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2013-02-08&quot;</span>)); <span class="hljs-comment">//返回2013年2月8号的日期对象</span><br><span class="hljs-built_in">console</span>.log(<br>  moment(<span class="hljs-string">&quot;2013-039&quot;</span>), <span class="hljs-comment">//返回2013年的第39天，2013年2月8号</span><br>  moment(<span class="hljs-string">&quot;2013050&quot;</span>), <span class="hljs-comment">//返回2013年的第50天，2013年2月19号</span><br>  moment(<span class="hljs-string">&quot;2013W065&quot;</span>), <span class="hljs-comment">//返回2013年的第6个星期的第5天，2013年2月8号（W表示星期）</span><br>  moment(<span class="hljs-string">&quot;2013-02-08T09&quot;</span>) <span class="hljs-comment">//返回2013年2月8号9点（T表示时间）</span><br>);<br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;kaivon&quot;</span>)); <span class="hljs-comment">//警告，同时照样能返回那个对象，不过对象里的参数的值是不正确的</span><br></code></pre></td></tr></table></figure><h3 id="moment-String-带格式"><a href="#moment-String-带格式" class="headerlink" title="moment(String) 带格式"></a>moment(String) 带格式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;12-25-1995&quot;</span>, <span class="hljs-string">&quot;MM-DD-YYYY&quot;</span>));<br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;12/25/1995&quot;</span>, <span class="hljs-string">&quot;LL&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="moment-String-多个格式"><a href="#moment-String-多个格式" class="headerlink" title="moment(String) 多个格式"></a>moment(String) 多个格式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;29-06-1995&quot;</span>, [<span class="hljs-string">&quot;MM-DD-YYYY&quot;</span>, <span class="hljs-string">&quot;DD-MM&quot;</span>, <span class="hljs-string">&quot;DD-MM-YYYY&quot;</span>]));<br></code></pre></td></tr></table></figure><h3 id="moment-String-特殊格式"><a href="#moment-String-特殊格式" class="headerlink" title="moment(String) 特殊格式"></a>moment(String) 特殊格式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-01-01T05:06:07&quot;</span>, moment.ISO_8601));<br></code></pre></td></tr></table></figure><h3 id="moment-Object"><a href="#moment-Object" class="headerlink" title="moment(Object)"></a>moment(Object)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment(&#123;<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2010</span>,<br>    <span class="hljs-attr">month</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">day</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">hour</span>: <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">minute</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">second</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">millisecond</span>: <span class="hljs-number">123</span>,<br>  &#125;)<br>); <span class="hljs-comment">//注意：这里的月份也是从0开始，此时对应的是4月</span><br></code></pre></td></tr></table></figure><h3 id="moment-Number"><a href="#moment-Number" class="headerlink" title="moment(Number)"></a>moment(Number)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-number">1318781876406</span>)); <span class="hljs-comment">//这个参数为毫秒数</span><br></code></pre></td></tr></table></figure><h3 id="unix"><a href="#unix" class="headerlink" title="unix()"></a>unix()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment.unix(<span class="hljs-number">1318781876406</span> / <span class="hljs-number">1000</span>)); <span class="hljs-comment">//这个参数为秒数</span><br></code></pre></td></tr></table></figure><h3 id="moment-Date"><a href="#moment-Date" class="headerlink" title="moment(Date)"></a>moment(Date)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2011</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>)));<br></code></pre></td></tr></table></figure><h3 id="moment-Number-1"><a href="#moment-Number-1" class="headerlink" title="moment(Number[])"></a>moment(Number[])</h3><p>参数为一个数组  [year, month, day, hour, minute, second, millisecond]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment([<span class="hljs-number">2010</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, <span class="hljs-number">125</span>])); <span class="hljs-comment">//注意月份是从0开始的，这里对应的是2月</span><br></code></pre></td></tr></table></figure><h3 id="moment-JSONDate"><a href="#moment-JSONDate" class="headerlink" title="moment(JSONDate)"></a>moment(JSONDate)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;/Date(1198908717056-0700)/&quot;</span>)); <span class="hljs-comment">//前面一串数字为时间戳，-后面的是时区</span><br></code></pre></td></tr></table></figure><h3 id="moment-Moment"><a href="#moment-Moment" class="headerlink" title="moment(Moment)"></a>moment(Moment)</h3><p>参数为一个 moment 对象，用于克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment([<span class="hljs-number">2012</span>]);<br><span class="hljs-keyword">var</span> b = moment(a);<br><span class="hljs-built_in">console</span>.log(a.valueOf() === b.valueOf());<br></code></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>也可以使用 clone 去克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment([<span class="hljs-number">2008</span>]);<br><span class="hljs-keyword">var</span> b = a.clone();<br><span class="hljs-built_in">console</span>.log(a, b);<br></code></pre></td></tr></table></figure><p>GMT 世界时，格林尼治标准时间</p><p>UTC 协调世界时，世界统一时间、世界标准时间</p><h3 id="utc"><a href="#utc" class="headerlink" title="utc()"></a>utc()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().format()); <span class="hljs-comment">//GMT //默认为本地当前时间，东八区的时间（+08:00）</span><br><span class="hljs-built_in">console</span>.log(moment.utc().format()); <span class="hljs-comment">//UTC//UTC的时间（世界标准时间，位于0时区，时区用Z表示，它与北京时间相差8个小时）</span><br></code></pre></td></tr></table></figure><h3 id="isValid"><a href="#isValid" class="headerlink" title="isValid()"></a>isValid()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment([<span class="hljs-number">2015</span>, <span class="hljs-number">25</span>, <span class="hljs-number">35</span>]).isValid(), <span class="hljs-comment">//false</span><br>  moment([<span class="hljs-number">2015</span>, <span class="hljs-number">10</span>, <span class="hljs-number">35</span>]).invalidAt() <span class="hljs-comment">//2</span><br>);<br></code></pre></td></tr></table></figure><h1 id="2-取值，赋值方法"><a href="#2-取值，赋值方法" class="headerlink" title="2.取值，赋值方法"></a>2.取值，赋值方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().seconds() === <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getSeconds()); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(moment.utc().seconds() === <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getUTCSeconds()); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="millisecond-milliseconds"><a href="#millisecond-milliseconds" class="headerlink" title="millisecond()/milliseconds()"></a>millisecond()/milliseconds()</h3><p>获取或设置毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().millisecond());<br><span class="hljs-built_in">console</span>.log(moment().milliseconds());<br><span class="hljs-built_in">console</span>.log(moment().millisecond(<span class="hljs-number">100</span>).valueOf());<br><span class="hljs-built_in">console</span>.log(moment().milliseconds(<span class="hljs-number">100</span>).valueOf());<br></code></pre></td></tr></table></figure><h3 id="second-seconds-获取-设置秒"><a href="#second-seconds-获取-设置秒" class="headerlink" title="second()/seconds()   获取/设置秒"></a>second()/seconds()   获取/设置秒</h3><h3 id="minute-minutes-获取-设置分"><a href="#minute-minutes-获取-设置分" class="headerlink" title="minute()/minutes() 获取/设置分"></a>minute()/minutes() 获取/设置分</h3><h3 id="hour-hours-获取-设置小时"><a href="#hour-hours-获取-设置小时" class="headerlink" title="hour()/hours()   获取/设置小时"></a>hour()/hours()   获取/设置小时</h3><h3 id="date-dates-获取-设置日期"><a href="#date-dates-获取-设置日期" class="headerlink" title="date()/dates()   获取/设置日期"></a>date()/dates()   获取/设置日期</h3><h3 id="day-days-获取-设置星期"><a href="#day-days-获取-设置星期" class="headerlink" title="day()/days()       获取/设置星期"></a>day()/days()       获取/设置星期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment().day(), <span class="hljs-comment">//1</span><br>  moment().day(<span class="hljs-string">&quot;Sunday&quot;</span>) <span class="hljs-comment">//设置星期的时候可以传入一个星期的英文单词</span><br>);<br></code></pre></td></tr></table></figure><h3 id="weekday"><a href="#weekday" class="headerlink" title="weekday()"></a>weekday()</h3><p>根据语言环境获获取/设置星期，根据语言环境获取或设置星期几</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.locale(<span class="hljs-string">&quot;zh-cn&quot;</span>); <span class="hljs-comment">//把当前的语言环境设置为中文</span><br><span class="hljs-built_in">console</span>.log(<br>  moment().weekday(), <span class="hljs-comment">//0</span><br>  moment().weekday(<span class="hljs-number">0</span>) <span class="hljs-comment">//0//英文下是周日，中文下是周一</span><br>);<br></code></pre></td></tr></table></figure><h3 id="dayOfYear"><a href="#dayOfYear" class="headerlink" title="dayOfYear()"></a>dayOfYear()</h3><p>获取或设置年份的日期（今天是今年的第几天）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().dayOfYear()); <span class="hljs-comment">//111</span><br><span class="hljs-built_in">console</span>.log(moment().dayOfYear(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h3 id="week-weeks"><a href="#week-weeks" class="headerlink" title="week()/weeks()"></a>week()/weeks()</h3><p>获取或设置年份的星期（当前星期是今年的第几个星期）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().week()); <span class="hljs-comment">//17</span><br><span class="hljs-built_in">console</span>.log(moment([<span class="hljs-number">2021</span>, <span class="hljs-number">4</span>, <span class="hljs-number">20</span>]).week()); <span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><h3 id="month-months"><a href="#month-months" class="headerlink" title="month()/months()"></a>month()/months()</h3><p>获取或设置月份，设置时范围为 0-11，还支持月份名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().month()); <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(moment().month(<span class="hljs-string">&quot;July&quot;</span>)); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><h3 id="quarter-quarters"><a href="#quarter-quarters" class="headerlink" title="quarter()/quarters()"></a>quarter()/quarters()</h3><p>获取或设置季度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().quarter()); <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(moment().quarter(<span class="hljs-number">4</span>)); <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="year-years"><a href="#year-years" class="headerlink" title="year()/years()"></a>year()/years()</h3><p>获取或设置年份</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().year());<br><span class="hljs-built_in">console</span>.log(moment().year(<span class="hljs-number">2088</span>));<br></code></pre></td></tr></table></figure><h3 id="weekYear"><a href="#weekYear" class="headerlink" title="weekYear()"></a>weekYear()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment([<span class="hljs-number">2020</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]).weekYear());<br><span class="hljs-built_in">console</span>.log(moment([<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">31</span>]).weekYear());<br></code></pre></td></tr></table></figure><h3 id="weeksInYear"><a href="#weeksInYear" class="headerlink" title="weeksInYear()"></a>weeksInYear()</h3><p>根据语言环境获取当前 moment 年份的周数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().weeksInYear()); <span class="hljs-comment">//52</span><br></code></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>获取日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().get(<span class="hljs-string">&quot;year&quot;</span>));<br><span class="hljs-built_in">console</span>.log(moment().get(<span class="hljs-string">&quot;M&quot;</span>));<br><span class="hljs-built_in">console</span>.log(moment().get(<span class="hljs-string">&quot;date&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><p>设置日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment().set(<span class="hljs-string">&quot;year&quot;</span>, <span class="hljs-number">2030</span>),<br>  moment().set(<span class="hljs-string">&quot;month&quot;</span>, <span class="hljs-number">8</span>),<br>  moment().set(&#123;<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2008</span>,<br>    <span class="hljs-attr">month</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-number">8</span>,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h3 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h3><p>对比多个日期，返回最大的那个日期</p><h3 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h3><p>对比多个日期，返回最小的那个日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment(<span class="hljs-string">&quot;2019-10-15&quot;</span>);<br><span class="hljs-keyword">var</span> b = moment(&#123; <span class="hljs-attr">year</span>: <span class="hljs-number">2010</span>, <span class="hljs-attr">month</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">date</span>: <span class="hljs-number">5</span> &#125;);<br><span class="hljs-keyword">var</span> c = moment([<span class="hljs-number">2020</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]);<br><span class="hljs-built_in">console</span>.log(moment.max(a, b, c)); <span class="hljs-comment">//c</span><br><span class="hljs-built_in">console</span>.log(moment.min(a, b, c)); <span class="hljs-comment">//b</span><br></code></pre></td></tr></table></figure><h1 id="3-操作显示方法"><a href="#3-操作显示方法" class="headerlink" title="3.操作显示方法"></a>3.操作显示方法</h1><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>增加日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().add(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;days&quot;</span>)); <span class="hljs-comment">//以今天的日期往后加7天</span><br><span class="hljs-built_in">console</span>.log(moment().add(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;M&quot;</span>)); <span class="hljs-comment">//以今天的日期往后加5个月。这里第二个参数使用的是快捷键</span><br><span class="hljs-built_in">console</span>.log(moment().add(<span class="hljs-number">365</span>, <span class="hljs-string">&quot;days&quot;</span>).add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;months&quot;</span>));<br><span class="hljs-built_in">console</span>.log(moment().add(&#123; <span class="hljs-attr">days</span>: <span class="hljs-number">365</span>, <span class="hljs-attr">months</span>: <span class="hljs-number">1</span> &#125;));<br></code></pre></td></tr></table></figure><p>注意：如果原始日期中的日期大于最终月份的天数，则跳到最后一天</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment([<span class="hljs-number">2010</span>, <span class="hljs-number">0</span>, <span class="hljs-number">31</span>]).add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;months&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="subtract"><a href="#subtract" class="headerlink" title="subtract()"></a>subtract()</h3><p>减少日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().subtract(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;days&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<br>  moment().subtract(<span class="hljs-number">1.5</span>, <span class="hljs-string">&quot;months&quot;</span>).valueOf() ===<br>    moment().subtract(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;months&quot;</span>).valueOf()<br>); <span class="hljs-comment">//true 如果传小数的话，会被四舍五入</span><br></code></pre></td></tr></table></figure><h3 id="startOf"><a href="#startOf" class="headerlink" title="startOf()"></a>startOf()</h3><p>把日期设置成参数的开始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().startOf(<span class="hljs-string">&quot;year&quot;</span>)); <span class="hljs-comment">//设置成今年第一天</span><br><span class="hljs-built_in">console</span>.log(moment().startOf(<span class="hljs-string">&quot;month&quot;</span>)); <span class="hljs-comment">//设置成当月第一天</span><br><span class="hljs-built_in">console</span>.log(moment().startOf(<span class="hljs-string">&quot;hour&quot;</span>)); <span class="hljs-comment">//设置成当前小时的最开始那一秒</span><br><span class="hljs-built_in">console</span>.log(moment().minutes(<span class="hljs-number">0</span>).seconds(<span class="hljs-number">0</span>).milliseconds(<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><h3 id="endOf"><a href="#endOf" class="headerlink" title="endOf()"></a>endOf()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().endOf(<span class="hljs-string">&quot;year&quot;</span>)); <span class="hljs-comment">//置成今年的最后一天的最后一刻</span><br><span class="hljs-built_in">console</span>.log(moment().endOf(<span class="hljs-string">&quot;month&quot;</span>)); <span class="hljs-comment">//设置为当月的最后一天的最后一刻</span><br></code></pre></td></tr></table></figure><h3 id="local"><a href="#local" class="headerlink" title="local()"></a>local()</h3><p>在日期上设置个标记，以使用本地时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment.utc([<span class="hljs-number">2011</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>]);<br><span class="hljs-built_in">console</span>.log(a.hours()); <span class="hljs-comment">//8</span><br>a.local();<br><span class="hljs-built_in">console</span>.log(a.hours()); <span class="hljs-comment">//16</span><br></code></pre></td></tr></table></figure><h3 id="utcOffset"><a href="#utcOffset" class="headerlink" title="utcOffset()"></a>utcOffset()</h3><p>获取本地时间与 UTC 时间的偏移量（差值）以分钟数为单位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().utcOffset()); <span class="hljs-comment">//480</span><br><span class="hljs-built_in">console</span>.log(moment().utcOffset(<span class="hljs-number">10</span>)); <span class="hljs-comment">//把本地时间与UTC时间的偏移量设置成10，也就是本地时间比UTC时间多10个小时</span><br></code></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><h3 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h3><p>格式化时间，它的参数非常丰富</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment().format()); <span class="hljs-comment">//2020-04-21T11:38:30+08:00</span><br><span class="hljs-built_in">console</span>.log(moment().format(<span class="hljs-string">&quot;DDDo, W, MMMM Do YYYY, h:mm:ss a - ZZ&quot;</span>));<br></code></pre></td></tr></table></figure><p>本地化的格式，它定义了一些常用格式，这些格式会根据语言环境来决定显示的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.locale(<span class="hljs-string">&quot;zh-cn&quot;</span>);<br><span class="hljs-built_in">console</span>.log(moment().format(<span class="hljs-string">&quot;LLLL&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="fromNow"><a href="#fromNow" class="headerlink" title="fromNow()"></a>fromNow()</h3><p>相对于现在的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment([<span class="hljs-number">2008</span>]).fromNow(), <span class="hljs-comment">//12 年前2008年相对于今天是12年前的时间</span><br>  moment([<span class="hljs-number">2008</span>]).fromNow(<span class="hljs-literal">true</span>) <span class="hljs-comment">//12 年</span><br>);<br></code></pre></td></tr></table></figure><h3 id="from"><a href="#from" class="headerlink" title="from()"></a>from()</h3><p>一个时间相对于另一个时间的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = moment([<span class="hljs-number">2007</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>]);<br><span class="hljs-keyword">var</span> b = moment([<span class="hljs-number">2007</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>]);<br><span class="hljs-built_in">console</span>.log(<br>  a.from(b), <span class="hljs-comment">//a相对于b是14天前的时间</span><br>  a.from(b, <span class="hljs-literal">true</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="toNow"><a href="#toNow" class="headerlink" title="toNow()"></a>toNow()</h3><p>到现在的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  moment([<span class="hljs-number">2008</span>]).toNow(), <span class="hljs-comment">//12 年内</span><br>  moment([<span class="hljs-number">2008</span>]).toNow(<span class="hljs-literal">true</span>) <span class="hljs-comment">//12 年</span><br>);<br></code></pre></td></tr></table></figure><h3 id="to"><a href="#to" class="headerlink" title="to()"></a>to()</h3><p>一个时间到另一个时间的间隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = moment([<span class="hljs-number">2007</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>]);<br><span class="hljs-keyword">var</span> b = moment([<span class="hljs-number">2007</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>]);<br><span class="hljs-built_in">console</span>.log(<br>  a.to(b), <span class="hljs-comment">//14 天内a到b的时间在14天内</span><br>  a.to(b, <span class="hljs-literal">true</span>) <span class="hljs-comment">//14 天</span><br>);<br></code></pre></td></tr></table></figure><h3 id="calendar"><a href="#calendar" class="headerlink" title="calendar()"></a>calendar()</h3><p>返回一个相对于参数（默认为当前时间）的日历时间。最终的结果它会根据两个时间的接近程度来决定。一共定义了 6 个档（读一下文档）最大的范围限制在一个星期，超过一个星期就会显示为“其它”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment().calendar());<br><span class="hljs-built_in">console</span>.log(moment().calendar(moment([<span class="hljs-number">2020</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>]))); <span class="hljs-comment">//下星期二11:54 当前的日期为参数的日期的下星期2</span><br><span class="hljs-built_in">console</span>.log(moment().calendar(moment([<span class="hljs-number">2020</span>, <span class="hljs-number">3</span>, <span class="hljs-number">20</span>]))); <span class="hljs-comment">//明天11:56</span><br><span class="hljs-built_in">console</span>.log(moment().calendar(moment([<span class="hljs-number">2020</span>, <span class="hljs-number">4</span>, <span class="hljs-number">20</span>]))); <span class="hljs-comment">//2020/04/21</span><br></code></pre></td></tr></table></figure><h3 id="diff"><a href="#diff" class="headerlink" title="diff()"></a>diff()</h3><p>返回两个时间的差值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = moment([<span class="hljs-number">2007</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>]);<br><span class="hljs-keyword">var</span> b = moment([<span class="hljs-number">2007</span>, <span class="hljs-number">0</span>, <span class="hljs-number">28</span>]);<br><span class="hljs-built_in">console</span>.log(a.diff(b)); <span class="hljs-comment">//86400000 默认取两个时间差的毫秒数</span><br><span class="hljs-built_in">console</span>.log(a.diff(b, <span class="hljs-string">&quot;days&quot;</span>)); <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment().valueOf(), <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf());<br></code></pre></td></tr></table></figure><h3 id="unix-1"><a href="#unix-1" class="headerlink" title="unix()"></a>unix()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment().unix());<br></code></pre></td></tr></table></figure><h3 id="daysInMonth"><a href="#daysInMonth" class="headerlink" title="daysInMonth()"></a>daysInMonth()</h3><p>获取某月的天数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment().daysInMonth()); <span class="hljs-comment">//30</span><br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2020-02&quot;</span>).daysInMonth()); <span class="hljs-comment">//29</span><br><br><span class="hljs-built_in">console</span>.log(moment().toDate());<br><span class="hljs-built_in">console</span>.log(moment().toArray());<br><span class="hljs-built_in">console</span>.log(moment().toObject()); <span class="hljs-comment">//toObject()把日期的各个组成部分拆分成了属性，返回整个对象</span><br></code></pre></td></tr></table></figure><h1 id="4-查询方法"><a href="#4-查询方法" class="headerlink" title="4.查询方法"></a>4.查询方法</h1><h3 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore()"></a>isBefore()</h3><p>检查一个时间是否在另一个时间之前，默认是都转成毫秒数进行计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isBefore()); <span class="hljs-comment">//true没给参数默认为现在的时间</span><br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isBefore(<span class="hljs-string">&quot;2010-10-19&quot;</span>)); <span class="hljs-comment">//false第一个日期是否在第二个日期之前</span><br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2009-10-20&quot;</span>).isBefore(<span class="hljs-string">&quot;2010-10-19&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>)); <span class="hljs-comment">//false二个参数为对比的单位，可以给的有year month week isoWeek day hour minute second</span><br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isBefore(<span class="hljs-string">&quot;2008-12-31&quot;</span>, <span class="hljs-string">&quot;month&quot;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="isSame"><a href="#isSame" class="headerlink" title="isSame()"></a>isSame()</h3><p>检查两个时间是否相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isSame(<span class="hljs-string">&quot;2010-10-20&quot;</span>));<br><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isSame(<span class="hljs-string">&quot;2010-12-20&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter()"></a>isAfter()</h3><p>检查一个时间是否在另一个时间之后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isAfter(<span class="hljs-string">&quot;2010-09-19&quot;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="isSameOrBefore"><a href="#isSameOrBefore" class="headerlink" title="isSameOrBefore()"></a>isSameOrBefore()</h3><p>检查一个时间是否在另一个时间之前或者与之相同（&lt;=）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isSameOrBefore(<span class="hljs-string">&quot;2010-10-21&quot;</span>), <span class="hljs-comment">//true</span><br>  moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isSameOrBefore(<span class="hljs-string">&quot;2010-10-20&quot;</span>), <span class="hljs-comment">//true</span><br>  moment(<span class="hljs-string">&quot;2010-11-20&quot;</span>).isSameOrBefore(<span class="hljs-string">&quot;2010-10-20&quot;</span>) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h3 id="isSameOrAfter"><a href="#isSameOrAfter" class="headerlink" title="isSameOrAfter()"></a>isSameOrAfter()</h3><p>检查一个时间是否在另一个时间之后或者与之相同（&gt;=）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  moment(<span class="hljs-string">&quot;2010-11-20&quot;</span>).isSameOrAfter(<span class="hljs-string">&quot;2010-10-21&quot;</span>), <span class="hljs-comment">//true</span><br>  moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isSameOrAfter(<span class="hljs-string">&quot;2010-10-20&quot;</span>), <span class="hljs-comment">//true</span><br>  moment(<span class="hljs-string">&quot;2010-10-19&quot;</span>).isSameOrAfter(<span class="hljs-string">&quot;2010-10-20&quot;</span>) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h3 id="isBetween"><a href="#isBetween" class="headerlink" title="isBetween()"></a>isBetween()</h3><p>检查一个时间是否在其他两个时间之间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isBetween(<span class="hljs-string">&quot;2010-10-19&quot;</span>, <span class="hljs-string">&quot;2010-10-25&quot;</span>), <span class="hljs-comment">//true</span><br>  moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isBetween(<span class="hljs-string">&quot;2010-10-19&quot;</span>, <span class="hljs-literal">undefined</span>), <span class="hljs-comment">//true undefined等于moment(),就是当前的时间</span><br>  moment(<span class="hljs-string">&quot;2010-10-20&quot;</span>).isBetween(<span class="hljs-string">&quot;2009-10-19&quot;</span>, <span class="hljs-string">&quot;2012-01-01&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>), <span class="hljs-comment">//true</span><br><br>  <span class="hljs-comment">//第四个参数为包容性，第三个参数为null，表示对比单位为默认毫秒数</span><br>  moment(<span class="hljs-string">&quot;2016-10-30&quot;</span>).isBetween(<span class="hljs-string">&quot;2016-10-30&quot;</span>, <span class="hljs-string">&quot;2016-12-30&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;()&quot;</span>) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h3 id="isLeapYear"><a href="#isLeapYear" class="headerlink" title="isLeapYear()"></a>isLeapYear()</h3><p>检测是否为闰年</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment().isLeapYear(), <span class="hljs-comment">//true</span><br>  moment([<span class="hljs-number">2019</span>]).isLeapYear() <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h3 id="isMoment"><a href="#isMoment" class="headerlink" title="isMoment()"></a>isMoment()</h3><p>检测变量是否为 moment 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.isMoment(), <span class="hljs-comment">//false</span><br>  moment.isMoment(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()), <span class="hljs-comment">//false</span><br>  moment.isMoment(moment()) <span class="hljs-comment">//true</span><br>);<br></code></pre></td></tr></table></figure><h3 id="isDate"><a href="#isDate" class="headerlink" title="isDate()"></a>isDate()</h3><p>检测变量是否为原生的 Date 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.isDate(), <span class="hljs-comment">//false</span><br>  moment.isDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()), <span class="hljs-comment">//true</span><br>  moment.isDate(moment()) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h1 id="5-国际化、自定义方法"><a href="#5-国际化、自定义方法" class="headerlink" title="5.国际化、自定义方法"></a>5.国际化、自定义方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment.locale()); <span class="hljs-comment">//en //返回当前的语言环境</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment().weekday(<span class="hljs-number">0</span>), <span class="hljs-comment">//根据语言环境获取或设置（传参）星期几。英文环境为星期天，中文环境为星期一</span><br>  moment().format(<span class="hljs-string">&quot;LLLL&quot;</span>), <span class="hljs-comment">//格式化时间，参数为本地化格式。英文环境与中文环境都不同</span><br><br>  moment().month()<br>);<br></code></pre></td></tr></table></figure><h3 id="设置语言环境-局部"><a href="#设置语言环境-局部" class="headerlink" title="设置语言环境 (局部)"></a>设置语言环境 (局部)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myMoment = moment();<br>myMoment.locale(<span class="hljs-string">&quot;ar-dz&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(moment().format(<span class="hljs-string">&quot;LLLL&quot;</span>));<br><span class="hljs-built_in">console</span>.log(myMoment.format(<span class="hljs-string">&quot;LLLL&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="months-weekdays"><a href="#months-weekdays" class="headerlink" title="months()/weekdays()"></a>months()/weekdays()</h3><h3 id="moment-locale-‘ru’"><a href="#moment-locale-‘ru’" class="headerlink" title="moment.locale(‘ru’);"></a>moment.locale(‘ru’);</h3><h3 id="moment-locale-‘zh-hk’"><a href="#moment-locale-‘zh-hk’" class="headerlink" title="moment.locale(‘zh-hk’);"></a>moment.locale(‘zh-hk’);</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.months(),<br>  moment.monthsShort(),<br>  moment.weekdays(),<br>  moment.weekdaysShort(),<br>  moment.weekdaysMin()<br>);<br></code></pre></td></tr></table></figure><h3 id="localeData"><a href="#localeData" class="headerlink" title="localeData()"></a>localeData()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment.localeData(), moment.localeData().monthsShort());<br></code></pre></td></tr></table></figure><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.updateLocale(<span class="hljs-string">&quot;zh-cn&quot;</span>, &#123;<br>  <span class="hljs-comment">//设置月份名称</span><br>  <span class="hljs-attr">months</span>:<br>    <span class="hljs-string">&quot;一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月&quot;</span>.split(<br>      <span class="hljs-string">&quot;_&quot;</span><br>    ),<br><br>  <span class="hljs-comment">//设置月分名称的缩写</span><br>  <span class="hljs-attr">monthsShort</span>: <span class="hljs-string">&quot;1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>),<br><br>  <span class="hljs-comment">//设置星期名称</span><br>  <span class="hljs-attr">weekdays</span>: <span class="hljs-string">&quot;星期日_星期一_星期二_星期三_星期四_星期五_星期六&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>),<br><br>  <span class="hljs-comment">//设置星期名称的缩写</span><br>  <span class="hljs-attr">weekdaysShort</span>: <span class="hljs-string">&quot;周日_周一_周二_周三_周四_周五_周六&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>),<br><br>  <span class="hljs-comment">//设置星期名称的最小缩写</span><br>  <span class="hljs-attr">weekdaysMin</span>: <span class="hljs-string">&quot;日_一_二_三_四_五_六&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>),<br><br>  <span class="hljs-comment">//设置长日期格式，是个对象</span><br>  <span class="hljs-attr">longDateFormat</span>: &#123;<br>    <span class="hljs-attr">LT</span>: <span class="hljs-string">&quot;Ah点mm分&quot;</span>,<br>    <span class="hljs-attr">LTS</span>: <span class="hljs-string">&quot;Ah点m分s秒&quot;</span>,<br>    <span class="hljs-attr">L</span>: <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>,<br>    <span class="hljs-attr">LL</span>: <span class="hljs-string">&quot;YYYY年MMMD日&quot;</span>,<br>    <span class="hljs-attr">LLL</span>: <span class="hljs-string">&quot;YYYY年MMMD日Ah点mm分&quot;</span>,<br>    <span class="hljs-attr">LLLL</span>: <span class="hljs-string">&quot;YYYY年MMMD日ddddAh点mm分&quot;</span>,<br>    <span class="hljs-attr">l</span>: <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>,<br>    <span class="hljs-attr">ll</span>: <span class="hljs-string">&quot;YYYY年MMMD日&quot;</span>,<br>    <span class="hljs-attr">lll</span>: <span class="hljs-string">&quot;YYYY年MMMD日Ah点mm分&quot;</span>,<br>    <span class="hljs-attr">llll</span>: <span class="hljs-string">&quot;YYYY年MMMD日ddddAh点mm分&quot;</span>,<br>  &#125;,<br><br>  <span class="hljs-comment">//设置相对时间，from()与to()的方法返回的值就是从这里取的</span><br>  <span class="hljs-attr">relativeTime</span>: &#123;<br>    <span class="hljs-attr">future</span>: <span class="hljs-string">&quot;%s内&quot;</span>,<br>    <span class="hljs-attr">past</span>: <span class="hljs-string">&quot;%s前~~~&quot;</span>,<br>    <span class="hljs-attr">s</span>: <span class="hljs-string">&quot;几秒&quot;</span>,<br>    <span class="hljs-attr">m</span>: <span class="hljs-string">&quot;1 分钟&quot;</span>,<br>    <span class="hljs-attr">mm</span>: <span class="hljs-string">&quot;%d 分钟&quot;</span>,<br>    <span class="hljs-attr">h</span>: <span class="hljs-string">&quot;1 小时&quot;</span>,<br>    <span class="hljs-attr">hh</span>: <span class="hljs-string">&quot;%d 小时&quot;</span>,<br>    <span class="hljs-attr">d</span>: <span class="hljs-string">&quot;1 天&quot;</span>,<br>    <span class="hljs-attr">dd</span>: <span class="hljs-string">&quot;%d 天&quot;</span>,<br>    <span class="hljs-attr">M</span>: <span class="hljs-string">&quot;1 个月&quot;</span>,<br>    <span class="hljs-attr">MM</span>: <span class="hljs-string">&quot;%d 个月&quot;</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-string">&quot;1 年&quot;</span>,<br>    <span class="hljs-attr">yy</span>: <span class="hljs-string">&quot;%d 年&quot;</span>,<br>  &#125;,<br><br>  <span class="hljs-comment">//设置时间段，参数：小时,分钟,大小写</span><br>  <span class="hljs-attr">meridiem</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">hour, minute, isLower</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> hm = hour * <span class="hljs-number">100</span> + minute;<br>    <span class="hljs-keyword">if</span> (hm &lt; <span class="hljs-number">600</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;凌晨&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hm &lt; <span class="hljs-number">900</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;早上&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hm &lt; <span class="hljs-number">1130</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上午&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hm &lt; <span class="hljs-number">1230</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;中午&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hm &lt; <span class="hljs-number">1800</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下午@@@@&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;晚上&quot;</span>;<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">//设置日历</span><br>  <span class="hljs-attr">calendar</span>: &#123;<br>    <span class="hljs-attr">sameDay</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.minutes() === <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;[今天]Ah[点整]&quot;</span> : <span class="hljs-string">&quot;[今天]LT&quot;</span>;<br>    &#125;,<br>    <span class="hljs-attr">nextDay</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.minutes() === <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;[明天]Ah[点整]&quot;</span> : <span class="hljs-string">&quot;[明天]LT&quot;</span>;<br>    &#125;,<br>    <span class="hljs-attr">lastDay</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.minutes() === <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;[昨天]Ah[点整]&quot;</span> : <span class="hljs-string">&quot;[昨天]LT&quot;</span>;<br>    &#125;,<br>    <span class="hljs-attr">nextWeek</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> startOfWeek, prefix;<br>      startOfWeek = moment().startOf(<span class="hljs-string">&quot;week&quot;</span>);<br>      prefix = <span class="hljs-built_in">this</span>.diff(startOfWeek, <span class="hljs-string">&quot;days&quot;</span>) &gt;= <span class="hljs-number">7</span> ? <span class="hljs-string">&quot;[下]&quot;</span> : <span class="hljs-string">&quot;[本####]&quot;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.minutes() === <span class="hljs-number">0</span> ? prefix + <span class="hljs-string">&quot;dddAh点整&quot;</span> : prefix + <span class="hljs-string">&quot;dddAh点mm&quot;</span>;<br>    &#125;,<br>    <span class="hljs-attr">lastWeek</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> startOfWeek, prefix;<br>      startOfWeek = moment().startOf(<span class="hljs-string">&quot;week&quot;</span>);<br>      prefix = <span class="hljs-built_in">this</span>.unix() &lt; startOfWeek.unix() ? <span class="hljs-string">&quot;[上]&quot;</span> : <span class="hljs-string">&quot;[本]&quot;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.minutes() === <span class="hljs-number">0</span> ? prefix + <span class="hljs-string">&quot;dddAh点整&quot;</span> : prefix + <span class="hljs-string">&quot;dddAh点mm&quot;</span>;<br>    &#125;,<br>    <span class="hljs-attr">sameElse</span>: <span class="hljs-string">&quot;LL&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">week</span>: &#123;<br>    <span class="hljs-attr">dow</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//星期的第一天是周1</span><br>    <span class="hljs-attr">doy</span>: <span class="hljs-number">4</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-string">&quot;今天是：&quot;</span> + moment().format(<span class="hljs-string">&quot;MMMM&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + moment().format(<span class="hljs-string">&quot;dddd&quot;</span>)<br>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;今天是：&quot;</span> + moment().format(<span class="hljs-string">&quot;MMM&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + moment().format(<span class="hljs-string">&quot;ddd&quot;</span>));<br><br><span class="hljs-built_in">console</span>.log(moment().format(<span class="hljs-string">&quot;LLLL&quot;</span>));<br><br><span class="hljs-built_in">console</span>.log(moment([<span class="hljs-number">2008</span>]).from());<br><br><span class="hljs-built_in">console</span>.log(moment().calendar(moment([<span class="hljs-number">2020</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>])));<br></code></pre></td></tr></table></figure><h1 id="6-时长方法"><a href="#6-时长方法" class="headerlink" title="6.时长方法"></a>6.时长方法</h1><h3 id="duration"><a href="#duration" class="headerlink" title="duration()"></a>duration()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(moment.duration());<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.duration(<span class="hljs-number">100</span>), <span class="hljs-comment">//给一个参数表示为毫秒</span><br>  moment.duration(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;seconds&quot;</span>), <span class="hljs-comment">//时长为2s</span><br>  moment.duration(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;minutes&quot;</span>), <span class="hljs-comment">//时长为3min</span><br>  moment.duration(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;M&quot;</span>),<br><br>  <span class="hljs-comment">//参数也可以是一个对象</span><br>  moment.duration(&#123;<br>    <span class="hljs-attr">seconds</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">minutes</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">hours</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">days</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">weeks</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">months</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">years</span>: <span class="hljs-number">7</span>,<br>  &#125;),<br><br>  <span class="hljs-comment">//ASP.NET 风格的时间跨度</span><br>  moment.duration(<span class="hljs-string">&quot;23:59:59&quot;</span>) <span class="hljs-comment">//时:分:秒</span><br>);<br></code></pre></td></tr></table></figure><h3 id="clone-1"><a href="#clone-1" class="headerlink" title="clone()"></a>clone()</h3><p>克隆一个时长对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> d1 = moment.duration();<br><span class="hljs-keyword">var</span> d2 = d1.clone();<br>d1.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;second&quot;</span>);<br><span class="hljs-built_in">console</span>.log(d1, d2);<br></code></pre></td></tr></table></figure><h3 id="humanize"><a href="#humanize" class="headerlink" title="humanize()"></a>humanize()</h3><p>显示一段时长</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.locale(<span class="hljs-string">&quot;zh-cn&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<br>  moment.duration(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;minutes&quot;</span>).humanize(),<br>  moment.duration(<span class="hljs-number">24</span>, <span class="hljs-string">&quot;hours&quot;</span>).humanize(),<br>  moment.duration(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;minutes&quot;</span>).humanize(<span class="hljs-literal">true</span>), <span class="hljs-comment">//1 分钟内</span><br>  moment.duration(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;minutes&quot;</span>).humanize(<span class="hljs-literal">true</span>) <span class="hljs-comment">//1 分钟前</span><br>);<br></code></pre></td></tr></table></figure><h3 id="milliseconds"><a href="#milliseconds" class="headerlink" title="milliseconds()"></a>milliseconds()</h3><p>此方法会计算溢出</p><h3 id="asMilliseconds"><a href="#asMilliseconds" class="headerlink" title="asMilliseconds()"></a>asMilliseconds()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.duration(<span class="hljs-number">500</span>).milliseconds(), <span class="hljs-comment">//500</span><br>  moment.duration(<span class="hljs-number">1500</span>).milliseconds(), <span class="hljs-comment">//500</span><br>  moment.duration(<span class="hljs-number">15000</span>).milliseconds(), <span class="hljs-comment">//0</span><br>  <span class="hljs-comment">//moment.duration(1500)</span><br><br>  moment.duration(<span class="hljs-number">500</span>).asMilliseconds(), <span class="hljs-comment">//500</span><br>  moment.duration(<span class="hljs-number">1500</span>).asMilliseconds(), <span class="hljs-comment">//1500</span><br>  moment.duration(<span class="hljs-number">15000</span>).asMilliseconds() <span class="hljs-comment">//15000</span><br>);<br></code></pre></td></tr></table></figure><h3 id="seconds"><a href="#seconds" class="headerlink" title="seconds()"></a>seconds()</h3><h3 id="asSeconds"><a href="#asSeconds" class="headerlink" title="asSeconds()"></a>asSeconds()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.duration(<span class="hljs-number">500</span>).seconds(), <span class="hljs-comment">//0</span><br>  moment.duration(<span class="hljs-number">1500</span>).seconds(), <span class="hljs-comment">//1</span><br>  moment.duration(<span class="hljs-number">15000</span>).seconds(), <span class="hljs-comment">//15</span><br><br>  moment.duration(<span class="hljs-number">500</span>).asSeconds(), <span class="hljs-comment">//0.5</span><br>  moment.duration(<span class="hljs-number">1500</span>).asSeconds(), <span class="hljs-comment">//1.5</span><br>  moment.duration(<span class="hljs-number">15000</span>).asSeconds() <span class="hljs-comment">//15</span><br>);<br></code></pre></td></tr></table></figure><h3 id="add-1"><a href="#add-1" class="headerlink" title="add()"></a>add()</h3><p>增加时长，这个方法可以添加多种类型的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment.duration(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;d&quot;</span>); <span class="hljs-comment">//时长为1天</span><br><span class="hljs-keyword">var</span> b = moment.duration(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;d&quot;</span>); <span class="hljs-comment">//时长为2天</span><br><span class="hljs-built_in">console</span>.log(<br>  a.add(b).days(),<br>  moment.duration().add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;d&quot;</span>).days() <span class="hljs-comment">// 1</span><br>);<br></code></pre></td></tr></table></figure><h3 id="subtract-1"><a href="#subtract-1" class="headerlink" title="subtract()"></a>subtract()</h3><p>减少时长</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment.duration(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-keyword">var</span> b = moment.duration(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<br>  a.subtract(b).days(), <span class="hljs-comment">//1</span><br>  moment.duration(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;d&quot;</span>).subtract(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;d&quot;</span>).days() <span class="hljs-comment">//4</span><br>);<br></code></pre></td></tr></table></figure><h3 id="duration-x-diff-y"><a href="#duration-x-diff-y" class="headerlink" title="duration(x.diff(y))"></a>duration(x.diff(y))</h3><p>获取两个时长的差值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = moment([<span class="hljs-number">2018</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">05</span>]);<br><span class="hljs-keyword">var</span> b = moment([<span class="hljs-number">2018</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">06</span>]);<br><span class="hljs-built_in">console</span>.log(moment.duration(b.diff(a)));<br></code></pre></td></tr></table></figure><h3 id="as"><a href="#as" class="headerlink" title="as()"></a>as()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  moment.duration(<span class="hljs-number">1000</span>).as(<span class="hljs-string">&quot;milliseconds&quot;</span>), <span class="hljs-comment">//1000</span><br>  moment.duration(<span class="hljs-number">1000</span>).as(<span class="hljs-string">&quot;seconds&quot;</span>) <span class="hljs-comment">//1</span><br>);<br></code></pre></td></tr></table></figure><h3 id="get-1"><a href="#get-1" class="headerlink" title="get()"></a>get()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> d = moment.duration(&#123;<br>  <span class="hljs-attr">seconds</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">minutes</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">hours</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">days</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">months</span>: <span class="hljs-number">5</span>,<br>  <span class="hljs-attr">years</span>: <span class="hljs-number">6</span>,<br>&#125;);<br><span class="hljs-built_in">console</span>.log(d);<br><span class="hljs-built_in">console</span>.log(<br>  d.get(<span class="hljs-string">&quot;seconds&quot;</span>),<br>  d.get(<span class="hljs-string">&quot;minutes&quot;</span>),<br>  d.get(<span class="hljs-string">&quot;hours&quot;</span>),<br>  d.get(<span class="hljs-string">&quot;days&quot;</span>),<br>  d.get(<span class="hljs-string">&quot;months&quot;</span>),<br>  d.get(<span class="hljs-string">&quot;years&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p><a href="https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1615534595525-6063b4bd-fd3c-4589-b52d-ead797c07a01.7z?_lake_card=%7B%22uid%22:%221615534564337-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1615534595525-6063b4bd-fd3c-4589-b52d-ead797c07a01.7z%22,%22name%22:%22Moment%E5%AE%9E%E6%88%98.7z%22,%22size%22:84834,%22type%22:%22%22,%22ext%22:%227z%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%2222Bjs%22,%22card%22:%22file%22%7D">Moment 实战.7z</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MockJS</title>
    <link href="/2020/02/28/MockJS/"/>
    <url>/2020/02/28/MockJS/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">https://github.com/nuysoft/Mock/wiki/Getting-Started</a><br><a href="http://mockjs.com/">http://mockjs.com/</a></p><h1 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h1><h2 id="1-属性值是字符串-String"><a href="#1-属性值是字符串-String" class="headerlink" title="1. 属性值是字符串 String"></a>1. 属性值是字符串 String</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log( Mock.mock(&#123; &#x27;data1|1-4&#x27;: &#x27;陈学辉&#x27;, //随机重复1-4次 &#x27;data2|3&#x27;:<br>&#x27;好帅&#x27;, //固定重置3次 &#125;) );<br></code></pre></td></tr></table></figure><h2 id="2-属性值是数字-Number"><a href="#2-属性值是数字-Number" class="headerlink" title="2. 属性值是数字 Number"></a>2. 属性值是数字 Number</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  Mock.mock(&#123;<br>    <span class="hljs-string">&quot;number1|+1&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">//整数，自动加1并且初始值为100</span><br>    <span class="hljs-string">&quot;number2|1-100&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-comment">//整数，1-100之间的随机数，包括1和100（1=&lt;数字&lt;=100）12用来确定是数据为数字类型</span><br>    <span class="hljs-string">&quot;number3|1-100.5&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-comment">//小数，整数部分为为1-100间随机数，包括1和100；小数部分为固定5位随机数</span><br>    <span class="hljs-string">&quot;number4|1-100.1-10&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-comment">//小数，整数部分为为1-100间随机数，包括1和100；小数部分为1-10个随机数（位数随机，数字也随机）</span><br>    <span class="hljs-string">&quot;number5|123.1-10&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-comment">//数字123后面随机添加1-10位小数</span><br>    <span class="hljs-string">&quot;number6|123.10&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-comment">//数字123后面固定添加10位小数，但小数的值是随机的</span><br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="3-属性值是布尔型-Boolean"><a href="#3-属性值是布尔型-Boolean" class="headerlink" title="3. 属性值是布尔型 Boolean"></a>3. 属性值是布尔型 Boolean</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log( Mock.mock(&#123; &#x27;b1|1&#x27;: false,<br>//随机生成一个布尔值，true与false的概率各为一半 &#x27;b2|1-5&#x27;: true,<br>//随机生成一个布尔值，值为value的概率是min / (min + max)，值为!value的概率是max<br>/ (min + max) &#125;) );<br></code></pre></td></tr></table></figure><h2 id="4-属性值是对象-Object"><a href="#4-属性值是对象-Object" class="headerlink" title="4. 属性值是对象 Object"></a>4. 属性值是对象 Object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Mock.mock(&#123;<br>    <span class="hljs-string">&quot;num1|1-3&quot;</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">40</span> &#125;, <span class="hljs-comment">//随机选取对象里1-3个属性</span><br>    <span class="hljs-string">&quot;num2|2&quot;</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">40</span> &#125;, <span class="hljs-comment">//随机选取对象里2个属性</span><br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="5-属性值是数组-Array"><a href="#5-属性值是数组-Array" class="headerlink" title="5.属性值是数组 Array"></a>5.属性值是数组 Array</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log( Mock.mock(&#123; &#x27;arr1|1&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;],<br>//随机选取数组里1个数据 &#x27;arr2|1-3&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;],<br>//通过重复属性值生成一个新数组，min&lt;=重复次数&lt;=max &#125;) );<br></code></pre></td></tr></table></figure><h2 id="6-属性值是函数-Function"><a href="#6-属性值是函数-Function" class="headerlink" title="6. 属性值是函数 Function"></a>6. 属性值是函数 Function</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Mock.mock(&#123;<br>    <span class="hljs-attr">result</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-number">2</span>;<br>    &#125;, <span class="hljs-comment">//把函数的返回值当作属性的结果</span><br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="7-属性值是正则表达式-RegExp"><a href="#7-属性值是正则表达式-RegExp" class="headerlink" title="7. 属性值是正则表达式 RegExp"></a>7. 属性值是正则表达式 RegExp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Mock.mock(&#123;<br>    <span class="hljs-attr">reg1</span>: <span class="hljs-regexp">/[a-z][A-Z][0-9]/</span>,<br>    reg2: <span class="hljs-regexp">/\w\W\s\S\d\D/</span>,<br>    reg3: <span class="hljs-regexp">/\d&#123;5,10&#125;/</span>,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h1 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock.Random"></a>Mock.Random</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Random = Mock.Random;<br><span class="hljs-comment">// console.log(Random);</span><br></code></pre></td></tr></table></figure><h2 id="1、Basics-基础类里的方法，共-7-个"><a href="#1、Basics-基础类里的方法，共-7-个" class="headerlink" title="1、Basics   基础类里的方法，共 7 个"></a>1、Basics   基础类里的方法，共 7 个</h2><h3 id="Random-boolean"><a href="#Random-boolean" class="headerlink" title="Random.boolean()"></a>Random.boolean()</h3><p>随机一个布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.boolean(),<br>  Random.boolean(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-literal">true</span>),<br>  Random.boolean(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Random-natural"><a href="#Random-natural" class="headerlink" title="Random.natural()"></a>Random.natural()</h3><p>随机一个自然数（大于等于 0 的整数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.natural(), Random.natural(<span class="hljs-number">100</span>), Random.natural(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-integer"><a href="#Random-integer" class="headerlink" title="Random.integer()"></a>Random.integer()</h3><p>随机一个整数（包含负数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.integer(), Random.integer(-<span class="hljs-number">100</span>), Random.integer(-<span class="hljs-number">50</span>, <span class="hljs-number">50</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-float"><a href="#Random-float" class="headerlink" title="Random.float()"></a>Random.float()</h3><p>随机一个小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.float(),<br>  Random.float(<span class="hljs-number">0</span>),<br>  Random.float(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>),<br>  Random.float(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>),<br>  Random.float(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Random-character"><a href="#Random-character" class="headerlink" title="Random.character()"></a>Random.character()</h3><p>随机一个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.character(),<br>  Random.character(<span class="hljs-string">&quot;abc123&quot;</span>),<br>  Random.character(<span class="hljs-string">&quot;lower&quot;</span>),<br>  Random.character(<span class="hljs-string">&quot;symbol&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Random-string"><a href="#Random-string" class="headerlink" title="Random.string()"></a>Random.string()</h3><p>随机一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.string(),<br>  Random.string(<span class="hljs-number">5</span>),<br>  Random.string(<span class="hljs-number">7</span>, <span class="hljs-number">10</span>),<br>  Random.string(<span class="hljs-string">&quot;symbol&quot;</span>, <span class="hljs-number">5</span>),<br>  Random.string(<span class="hljs-string">&quot;abc123&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Random-range"><a href="#Random-range" class="headerlink" title="Random.range()"></a>Random.range()</h3><p>随机一个整数数据的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.range(<span class="hljs-number">7</span>), Random.range(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>), Random.range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h1 id="Random-对象"><a href="#Random-对象" class="headerlink" title="Random 对象"></a>Random 对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Random = Mock.Random;<br></code></pre></td></tr></table></figure><h2 id="2、Date-日期类里的方法，共-4-个"><a href="#2、Date-日期类里的方法，共-4-个" class="headerlink" title="2、Date 日期类里的方法，共 4 个"></a>2、Date 日期类里的方法，共 4 个</h2><h3 id="Random-date"><a href="#Random-date" class="headerlink" title="Random.date()"></a>Random.date()</h3><p>随机一个日期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.date(), Random.date(<span class="hljs-string">&quot;yyyy-MM--dd : HH-m-ss&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-time"><a href="#Random-time" class="headerlink" title="Random.time()"></a>Random.time()</h3><p>随机一个时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.time(), Random.time(<span class="hljs-string">&quot;A HH:mm:ss:SS&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-datetime"><a href="#Random-datetime" class="headerlink" title="Random.datetime()"></a>Random.datetime()</h3><p>随机一个日期+时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.datetime());<br></code></pre></td></tr></table></figure><h3 id="Random-now"><a href="#Random-now" class="headerlink" title="Random.now()"></a>Random.now()</h3><p>返回当前的日期和时间字符串</p><h3 id="week"><a href="#week" class="headerlink" title="week"></a>week</h3><p>定到这个周的第一天</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.now(), Random.now(<span class="hljs-string">&quot;minute&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="3、Image-图片类里的方法，花-2-个"><a href="#3、Image-图片类里的方法，花-2-个" class="headerlink" title="3、Image 图片类里的方法，花 2 个"></a>3、Image 图片类里的方法，花 2 个</h2><h3 id="Random-image"><a href="#Random-image" class="headerlink" title="Random.image()"></a>Random.image()</h3><p>生成一个随机的图片地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.image(),<br>  Random.image(<span class="hljs-string">&quot;200x100&quot;</span>),<br>  Random.image(<span class="hljs-string">&quot;200x100&quot;</span>, <span class="hljs-string">&quot;#ffcc33&quot;</span>, <span class="hljs-string">&quot;#FFF&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;kaivon&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Random-dataImage"><a href="#Random-dataImage" class="headerlink" title="Random.dataImage()"></a>Random.dataImage()</h3><p>生成一段随机的 Base64 图片编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-comment">//Random.dataImage(),</span><br>  Random.dataImage(<span class="hljs-string">&quot;200x100&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="Color-颜色类里的方法，共-5-个"><a href="#Color-颜色类里的方法，共-5-个" class="headerlink" title="Color   颜色类里的方法，共 5 个"></a>Color   颜色类里的方法，共 5 个</h2><h3 id="Random-color"><a href="#Random-color" class="headerlink" title="Random.color()"></a>Random.color()</h3><p>随机一个 16 进制的颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.color());<br></code></pre></td></tr></table></figure><h3 id="Random-hex"><a href="#Random-hex" class="headerlink" title="Random.hex()"></a>Random.hex()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.hex());<br></code></pre></td></tr></table></figure><h3 id="Random-rgb"><a href="#Random-rgb" class="headerlink" title="Random.rgb()"></a>Random.rgb()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.rgb() <span class="hljs-comment">//随机生成一个rgb格式的颜色</span><br>);<br></code></pre></td></tr></table></figure><h3 id="Random-rgba"><a href="#Random-rgba" class="headerlink" title="Random.rgba()"></a>Random.rgba()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.rgba() <span class="hljs-comment">//随机生成一个rgba格式的颜色</span><br>);<br></code></pre></td></tr></table></figure><h3 id="Random-hsl"><a href="#Random-hsl" class="headerlink" title="Random.hsl()"></a>Random.hsl()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Random.hsl() <span class="hljs-comment">//随机生成一个hsl格式(色相、饱和度、亮度)的颜色</span><br>);<br></code></pre></td></tr></table></figure><h2 id="5、Text-文本类里的方法，共-8-个"><a href="#5、Text-文本类里的方法，共-8-个" class="headerlink" title="5、Text 文本类里的方法，共 8 个"></a>5、Text 文本类里的方法，共 8 个</h2><h3 id="Random-paragraph"><a href="#Random-paragraph" class="headerlink" title="Random.paragraph()"></a>Random.paragraph()</h3><p>随机生成一段文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.paragraph());<br><span class="hljs-built_in">console</span>.log(Random.paragraph(<span class="hljs-number">2</span>));<br><span class="hljs-built_in">console</span>.log(Random.paragraph(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-cparagraph"><a href="#Random-cparagraph" class="headerlink" title="Random.cparagraph()"></a>Random.cparagraph()</h3><p>随机生成一段中文文本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(Random.cparagraph());<br><span class="hljs-built_in">console</span>.log(Random.cparagraph(<span class="hljs-number">2</span>));<br><span class="hljs-built_in">console</span>.log(Random.cparagraph(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-sentence"><a href="#Random-sentence" class="headerlink" title="Random.sentence()"></a>Random.sentence()</h3><p>随机生成一个句子，句子首字母大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(Random.sentence());<br><span class="hljs-built_in">console</span>.log(Random.sentence(<span class="hljs-number">5</span>));<br><span class="hljs-built_in">console</span>.log(Random.sentence(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-csentence"><a href="#Random-csentence" class="headerlink" title="Random.csentence()"></a>Random.csentence()</h3><p>随机生成一段中文文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.csentence());<br><span class="hljs-built_in">console</span>.log(Random.csentence(<span class="hljs-number">5</span>));<br><span class="hljs-built_in">console</span>.log(Random.csentence(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-word"><a href="#Random-word" class="headerlink" title="Random.word()"></a>Random.word()</h3><p>随机生成一个单词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.word());<br><span class="hljs-built_in">console</span>.log(Random.word(<span class="hljs-number">5</span>));<br><span class="hljs-built_in">console</span>.log(Random.word(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-cword"><a href="#Random-cword" class="headerlink" title="Random.cword()"></a>Random.cword()</h3><p>随机生成一个汉字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.cword());<br><span class="hljs-built_in">console</span>.log(Random.cword(<span class="hljs-number">5</span>));<br><span class="hljs-built_in">console</span>.log(Random.cword(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br><span class="hljs-built_in">console</span>.log(Random.cword(<span class="hljs-string">&quot;零一二三四五六七八九十&quot;</span>, <span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(Random.cword(<span class="hljs-string">&quot;零一二三四五六七八九十&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-title"><a href="#Random-title" class="headerlink" title="Random.title()"></a>Random.title()</h3><p>随机生成一个标题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.title());<br><span class="hljs-built_in">console</span>.log(Random.title(<span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(Random.title(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-ctitle"><a href="#Random-ctitle" class="headerlink" title="Random.ctitle()"></a>Random.ctitle()</h3><p>随机生成一句中文标题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.ctitle());<br><span class="hljs-built_in">console</span>.log(Random.ctitle(<span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(Random.ctitle(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h2 id="6、Name-名字类里的方法，共-6-个"><a href="#6、Name-名字类里的方法，共-6-个" class="headerlink" title="6、Name 名字类里的方法，共 6 个"></a>6、Name 名字类里的方法，共 6 个</h2><h3 id="Random-first"><a href="#Random-first" class="headerlink" title="Random.first()"></a>Random.first()</h3><p>随机生成一个常见的英文名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.first());<br></code></pre></td></tr></table></figure><h3 id="Random-last"><a href="#Random-last" class="headerlink" title="Random.last()"></a>Random.last()</h3><p>随机生成一个常见的英文姓</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.last());<br></code></pre></td></tr></table></figure><h3 id="Random-name"><a href="#Random-name" class="headerlink" title="Random.name()"></a>Random.name()</h3><p>随机生成一个常见的英文姓名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.name(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//是否添加一个中间值</span><br></code></pre></td></tr></table></figure><h3 id="Random-cfirst"><a href="#Random-cfirst" class="headerlink" title="Random.cfirst()"></a>Random.cfirst()</h3><p>随机生成一个常见的中文名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.cfirst());<br></code></pre></td></tr></table></figure><h3 id="Random-clast"><a href="#Random-clast" class="headerlink" title="Random.clast()"></a>Random.clast()</h3><p>随机生成一个常见的中文姓</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.clast());<br></code></pre></td></tr></table></figure><h3 id="Random-cname"><a href="#Random-cname" class="headerlink" title="Random.cname()"></a>Random.cname()</h3><p>随机生成一个常见的中文姓名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.cname());<br></code></pre></td></tr></table></figure><h2 id="7、Web-Web-类里的方法，共-6-个"><a href="#7、Web-Web-类里的方法，共-6-个" class="headerlink" title="7、Web  Web 类里的方法，共 6 个"></a>7、Web  Web 类里的方法，共 6 个</h2><h3 id="Random-url"><a href="#Random-url" class="headerlink" title="Random.url()"></a>Random.url()</h3><p>随机生成一个 URL</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.url());<br><span class="hljs-built_in">console</span>.log(Random.url(<span class="hljs-string">&quot;http&quot;</span>)); <span class="hljs-comment">//指定协议</span><br><span class="hljs-built_in">console</span>.log(Random.url(<span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;kaivon.cn&quot;</span>)); <span class="hljs-comment">//指定域名</span><br></code></pre></td></tr></table></figure><h3 id="Random-protocol"><a href="#Random-protocol" class="headerlink" title="Random.protocol()"></a>Random.protocol()</h3><p>随机生成一个 URL 协议</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.protocol());<br><span class="hljs-string">``</span>;<br></code></pre></td></tr></table></figure><h3 id="Random-domain"><a href="#Random-domain" class="headerlink" title="Random.domain()"></a>Random.domain()</h3><p>随机生成一个域名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.domain());<br></code></pre></td></tr></table></figure><h3 id="Random-tld"><a href="#Random-tld" class="headerlink" title="Random.tld()"></a>Random.tld()</h3><p>随机生成一个顶级域名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.tld());<br></code></pre></td></tr></table></figure><h3 id="Random-email"><a href="#Random-email" class="headerlink" title="Random.email()"></a>Random.email()</h3><p>随机生成一个邮件地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.email());<br><span class="hljs-built_in">console</span>.log(Random.email(<span class="hljs-string">&quot;kaivon.cn&quot;</span>)); <span class="hljs-comment">//指定@后的域名</span><br></code></pre></td></tr></table></figure><h3 id="Random-ip"><a href="#Random-ip" class="headerlink" title="Random.ip()"></a>Random.ip()</h3><p>随机生成一个 IP 地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.ip());<br></code></pre></td></tr></table></figure><h2 id="8、Address-地址类里的方法，共-5-个"><a href="#8、Address-地址类里的方法，共-5-个" class="headerlink" title="8、Address   地址类里的方法，共 5 个"></a>8、Address   地址类里的方法，共 5 个</h2><h3 id="Random-region"><a href="#Random-region" class="headerlink" title="Random.region()"></a>Random.region()</h3><p>随机生成一个（中国）大区</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.region());<br></code></pre></td></tr></table></figure><h3 id="Random-province"><a href="#Random-province" class="headerlink" title="Random.province()"></a>Random.province()</h3><p>随机生成一个（中国）省（或直辖市、自治区、特别行政区）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.province());<br></code></pre></td></tr></table></figure><h3 id="Random-city"><a href="#Random-city" class="headerlink" title="Random.city()"></a>Random.city()</h3><p>随机生成一个（中国）市</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.city());<br><span class="hljs-built_in">console</span>.log(Random.city(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//是否生成所属的省</span><br></code></pre></td></tr></table></figure><h3 id="Random-county"><a href="#Random-county" class="headerlink" title="Random.county()"></a>Random.county()</h3><p>随机生成一个（中国）县</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.county());<br><span class="hljs-built_in">console</span>.log(Random.county(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//指示是否生成所属的省、市</span><br></code></pre></td></tr></table></figure><h3 id="Random-zip"><a href="#Random-zip" class="headerlink" title="Random.zip()"></a>Random.zip()</h3><p>随机生成一个邮政编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.zip());<br></code></pre></td></tr></table></figure><h2 id="9、Helper-帮助类里的方法，共-5-个"><a href="#9、Helper-帮助类里的方法，共-5-个" class="headerlink" title="9、Helper   帮助类里的方法，共 5 个"></a>9、Helper   帮助类里的方法，共 5 个</h2><h3 id="Random-capitalize"><a href="#Random-capitalize" class="headerlink" title="Random.capitalize()"></a>Random.capitalize()</h3><p>把字符串的第一个字母转换为大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.capitalize(<span class="hljs-string">&quot;kaivon&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-upper"><a href="#Random-upper" class="headerlink" title="Random.upper()"></a>Random.upper()</h3><p>把字符串转换为大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.upper(<span class="hljs-string">&quot;kaivon&quot;</span>));<br><span class="hljs-string">``</span>;<br></code></pre></td></tr></table></figure><h3 id="Random-lower"><a href="#Random-lower" class="headerlink" title="Random.lower()"></a>Random.lower()</h3><p>把字符串转换为小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.lower(<span class="hljs-string">&quot;KAI&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="Random-pick"><a href="#Random-pick" class="headerlink" title="Random.pick()"></a>Random.pick()</h3><p>从数组中随机选取一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.pick([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]));<br></code></pre></td></tr></table></figure><h3 id="Random-shuffle"><a href="#Random-shuffle" class="headerlink" title="Random.shuffle()"></a>Random.shuffle()</h3><p>打乱数组中元素的顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.shuffle([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]));<br></code></pre></td></tr></table></figure><h2 id="10、Miscellaneous-其它类里的方法，共-3-个"><a href="#10、Miscellaneous-其它类里的方法，共-3-个" class="headerlink" title="10、Miscellaneous   其它类里的方法，共 3 个"></a>10、Miscellaneous   其它类里的方法，共 3 个</h2><h3 id="Random-guid"><a href="#Random-guid" class="headerlink" title="Random.guid()"></a>Random.guid()</h3><p>随机生成一个 GUID</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.guid());<br></code></pre></td></tr></table></figure><h3 id="Random-id"><a href="#Random-id" class="headerlink" title="Random.id()"></a>Random.id()</h3><p>随机生成一个 18 位身份证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Random.id());<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  Mock.mock(<span class="hljs-string">&quot;@EMAIL&quot;</span>),<br>  Mock.mock(<span class="hljs-string">&quot;@CITY(true)&quot;</span>),<br>  Mock.mock(<span class="hljs-string">&#x27;@cword(&quot;陈学辉好帅&quot;, 1, 3)&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">Random.extend(&#123; constellation: function (date) &#123; var constellations = [&#x27;白羊座&#x27;,<br>&#x27;金牛座&#x27;, &#x27;双子座&#x27;, &#x27;巨蟹座&#x27;, &#x27;狮子座&#x27;, &#x27;处女座&#x27;, &#x27;天秤座&#x27;, &#x27;天蝎座&#x27;, &#x27;射手座&#x27;,<br>&#x27;摩羯座&#x27;, &#x27;水瓶座&#x27;, &#x27;双鱼座&#x27;]; return this.pick(constellations) &#125; &#125;);<br>console.log(Random.constellation()); console.log(Mock.mock(&#x27;@constellation&#x27;))<br></code></pre></td></tr></table></figure><h1 id="Mock-方法"><a href="#Mock-方法" class="headerlink" title="Mock 方法"></a>Mock 方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">th</span>,</span><br><span class="css">      <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#99b0da</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#dbe3fa</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/mock.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>请求数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>学号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>生日<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>住址<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table-body&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        $.ajax(&#123;</span><br><span class="javascript">          <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;js/data.json&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">            createDom(data.data);</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createDom</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">        data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>&#123;</span><br><span class="javascript">          str += <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">&lt;tr&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.sNo&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.name&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.sex&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.email&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.birth&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.phone&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;<span class="hljs-subst">$&#123;item.address&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;button&gt;编辑&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;button&gt;删除&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="javascript">&lt;/tr&gt;</span></span><br><span class="hljs-string"><span class="javascript">`</span>;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        $(<span class="hljs-string">&quot;#table-body&quot;</span>).html(str);</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      Mock.mock(<span class="hljs-string">&quot;js/data.json&quot;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;查询成功&quot;</span>,</span><br><span class="javascript">        <span class="hljs-string">&quot;data|10&quot;</span>: [</span><br><span class="javascript">          &#123;</span><br><span class="javascript">            <span class="hljs-string">&quot;id|+1&quot;</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;@cname&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">birth</span>: <span class="hljs-string">&quot;@date&quot;</span>,</span><br><span class="javascript">            <span class="hljs-string">&quot;sex|1&quot;</span>: [<span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>],</span><br><span class="javascript">            <span class="hljs-string">&quot;sNo|+1&quot;</span>: <span class="hljs-number">11000</span>,</span><br><span class="javascript">            <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;@email&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;@natural(13000000000,19900000000)&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;@county(true) @ctitle(5,10)&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">appkey</span>: <span class="hljs-string">&quot;@string(4,7)_@date(T)&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">ctime</span>: <span class="hljs-string">&quot;@date(T)&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">utime</span>: <span class="hljs-string">&quot;@date(T)&quot;</span>,</span><br><span class="javascript">          &#125;,</span><br><span class="javascript">        ],</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      Mock.setup(&#123;</span><br><span class="javascript">        <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">//https://github.com/YMFE/yapi</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1615534293942-c8d1c9de-af56-4888-8c0c-237f82f08a1b.7z?_lake_card=%7B%22uid%22:%221615534261938-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1615534293942-c8d1c9de-af56-4888-8c0c-237f82f08a1b.7z%22,%22name%22:%2203-mock%E6%96%B9%E6%B3%95.7z%22,%22size%22:86099,%22type%22:%22%22,%22ext%22:%227z%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22GT8VF%22,%22card%22:%22file%22%7D">03-mock 方法.7z</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lodash</title>
    <link href="/2020/02/25/lodash/"/>
    <url>/2020/02/25/lodash/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/attachments/yuque/0/2021/js/758572/1615534059042-a028f54b-7519-479e-9105-24a6a16aa014.js?_lake_card=%7B%22uid%22:%221615534027081-0%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/js/758572/1615534059042-a028f54b-7519-479e-9105-24a6a16aa014.js%22,%22name%22:%22lodash.js%22,%22size%22:540512,%22type%22:%22text/javascript%22,%22ext%22:%22js%22,%22progress%22:%7B%22percent%22:99%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22UwTOe%22,%22card%22:%22file%22%7D">lodash.js</a></p><p><a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></p><h1 id="Array-方法-数组"><a href="#Array-方法-数组" class="headerlink" title="Array 方法 数组"></a>Array 方法 数组</h1><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk()"></a>chunk()</h2><p>把数组拆分成一个二维数组，拆分后的第 1 个数组的长度为第二个参数的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.chunk([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>], <span class="hljs-number">2</span>)); <span class="hljs-comment">//[[&quot;a&quot;, &quot;b&quot;],[&quot;c&quot;, &quot;d&quot;]]</span><br></code></pre></td></tr></table></figure><h2 id="compact"><a href="#compact" class="headerlink" title="compact()"></a>compact()</h2><p>过滤掉原数组里的非真（转布尔值后为 false）数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.compact([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">NaN</span>, <span class="hljs-literal">undefined</span>])); <span class="hljs-comment">//[1, 2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>合并数组，与 Array 对象的方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> other = _.concat(array, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>], [[<span class="hljs-number">4</span>]]);<br><br><span class="hljs-built_in">console</span>.log(other);<br><span class="hljs-comment">// =&gt; [1, 2, 3, [4]]</span><br><br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [1]</span><br></code></pre></td></tr></table></figure><h2 id="difference"><a href="#difference" class="headerlink" title="difference()"></a>difference()</h2><p>在第一个数组中把第二个数组里的数据都排除掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.difference([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>])); <span class="hljs-comment">// [1, 5, 9]</span><br></code></pre></td></tr></table></figure><h2 id="differenceBy"><a href="#differenceBy" class="headerlink" title="differenceBy"></a>differenceBy</h2><p>与上面的方法一样，只不过它可以再接收一个迭代器的函数做为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.differenceBy([<span class="hljs-number">3.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">1.3</span>], [<span class="hljs-number">4.4</span>, <span class="hljs-number">2.5</span>], <span class="hljs-built_in">Math</span>.floor)); <span class="hljs-comment">//[3.1, 1.3]</span><br></code></pre></td></tr></table></figure><h2 id="differenceWith"><a href="#differenceWith" class="headerlink" title="differenceWith()"></a>differenceWith()</h2><p>与上面的方法一样，只不过它可以接收一个比较器的函数做为参数，对每个数据都要比较一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objects = [<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">1</span> &#125;,<br>];<br><span class="hljs-built_in">console</span>.log(_.differenceWith(objects, [&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;], _.isEqual)); <span class="hljs-comment">//[&#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span><br></code></pre></td></tr></table></figure><h2 id="drop"><a href="#drop" class="headerlink" title="drop()"></a>drop()</h2><p>切掉数组的前 n（第二个参数，默认为 1）位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.drop([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>], <span class="hljs-number">2</span>)); <span class="hljs-comment">//[&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="dropRight"><a href="#dropRight" class="headerlink" title="dropRight()"></a>dropRight()</h2><p>切割数组，切掉数组的后 n 位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">_.dropRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; [1, 2]</span><br><br>_.dropRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [1]</span><br><br>_.dropRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">5</span>);<br><span class="hljs-comment">// =&gt; []</span><br><br>_.dropRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">0</span>);<br><span class="hljs-comment">// =&gt; [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="dropWhile"><a href="#dropWhile" class="headerlink" title="dropWhile()"></a>dropWhile()</h2><p>去掉数组中，从起点到第二个方法返回假的数据。与 Array 对象身上的 filter()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br>_.dropWhile(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !o.active;<br>&#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;pebbles&#x27;]</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.dropWhile(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;fred&#x27;, &#x27;pebbles&#x27;]</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.dropWhile(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; objects for [&#x27;pebbles&#x27;]</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.dropWhile(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;, &#x27;fred&#x27;, &#x27;pebbles&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="dropRightWhile"><a href="#dropRightWhile" class="headerlink" title="dropRightWhile()"></a>dropRightWhile()</h2><p>与上面一样，不过它是从右边开始查，查到返回假的那个数据都去除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br><br>_.dropRightWhile(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !o.active;<br>&#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;]</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.dropRightWhile(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;, &#x27;fred&#x27;]</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.dropRightWhile(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;]</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.dropRightWhile(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;, &#x27;fred&#x27;, &#x27;pebbles&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="take"><a href="#take" class="headerlink" title="take()"></a>take()</h2><p>提取数组的前 n（第二个参数，默认为 1）位。与 drop 方法相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">_.take([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; [1]</span><br><br>_.take([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [1, 2]</span><br><br>_.take([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">5</span>);<br><span class="hljs-comment">// =&gt; [1, 2, 3]</span><br><br>_.take([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">0</span>);<br><span class="hljs-comment">// =&gt; []</span><br></code></pre></td></tr></table></figure><h2 id="takeRight-takeWhile-takeRightWhile"><a href="#takeRight-takeWhile-takeRightWhile" class="headerlink" title="takeRight()/takeWhile()/takeRightWhile()"></a>takeRight()/takeWhile()/takeRightWhile()</h2><p>与上面的一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">_.takeRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; [3]</span><br><br>_.takeRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [2, 3]</span><br><br>_.takeRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">5</span>);<br><span class="hljs-comment">// =&gt; [1, 2, 3]</span><br><br>_.takeRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">0</span>);<br><span class="hljs-comment">// =&gt; []</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br>_.takeWhile(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !o.active;<br>&#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;, &#x27;fred&#x27;]</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.takeWhile(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;]</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.takeWhile(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;, &#x27;fred&#x27;]</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.takeWhile(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; []</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br><br>_.takeRightWhile(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !o.active;<br>&#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;fred&#x27;, &#x27;pebbles&#x27;]</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.takeRightWhile(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;pebbles&#x27;]</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.takeRightWhile(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; objects for [&#x27;fred&#x27;, &#x27;pebbles&#x27;]</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.takeRightWhile(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; []</span><br></code></pre></td></tr></table></figure><h2 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h2><p>填充数组，与 Array 对象身上的 fill()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>_.fill(array, <span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span><br><br>_.fill(<span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>), <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [2, 2, 2]</span><br><br>_.fill([<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>], <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// =&gt; [4, &#x27;*&#x27;, &#x27;*&#x27;, 10]</span><br></code></pre></td></tr></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h2><p>查找到第一个满足条件的数据的索引值（从左往右查），没找到返回-1。与 Array 对象身上的 findIndex()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br>_.findIndex(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> o.user == <span class="hljs-string">&quot;barney&quot;</span>;<br>&#125;);<br><span class="hljs-comment">// =&gt; 0</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.findIndex(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// =&gt; 1</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.findIndex(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; 0</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.findIndex(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; 2</span><br></code></pre></td></tr></table></figure><h2 id="findLastIndex"><a href="#findLastIndex" class="headerlink" title="findLastIndex()"></a>findLastIndex()</h2><p>这与上面的 findIndex 是一样的，区别是它是从右往左的查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br><br>_.findLastIndex(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> o.user == <span class="hljs-string">&quot;pebbles&quot;</span>;<br>&#125;);<br><span class="hljs-comment">// =&gt; 2</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.findLastIndex(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;);<br><span class="hljs-comment">// =&gt; 0</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.findLastIndex(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; 2</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.findLastIndex(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; 0</span><br></code></pre></td></tr></table></figure><h2 id="flatten"><a href="#flatten" class="headerlink" title="flatten()"></a>flatten()</h2><p>减少一级数组嵌套深度，与 Array 的 flat()这个方法相似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.flatten([<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>]], <span class="hljs-number">5</span>]]);<br><span class="hljs-comment">// =&gt; [1, 2, [3, [4]], 5]</span><br></code></pre></td></tr></table></figure><h2 id="flattenDeep"><a href="#flattenDeep" class="headerlink" title="flattenDeep()"></a>flattenDeep()</h2><p>把数组递归为一维数组。相当于[].flat(Infinity)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.flattenDeep([<span class="hljs-string">&quot;a&quot;</span>, [<span class="hljs-string">&quot;b&quot;</span>, [<span class="hljs-string">&quot;c&quot;</span>, [<span class="hljs-string">&quot;d&quot;</span>]]]])); <span class="hljs-comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="flattenDepth"><a href="#flattenDepth" class="headerlink" title="flattenDepth()"></a>flattenDepth()</h2><p>减少 n（第二个参数）层数组的嵌套。相当于[].flat(2)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>]], <span class="hljs-number">5</span>]];<br><br>_.flattenDepth(array, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// =&gt; [1, 2, [3, [4]], 5]</span><br><br>_.flattenDepth(array, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [1, 2, 3, [4], 5]</span><br></code></pre></td></tr></table></figure><h2 id="fromPairs"><a href="#fromPairs" class="headerlink" title="fromPairs()"></a>fromPairs()</h2><p>把数组转换为一个对象，与 Object.fromEntries()方法一样</p><h2 id="head-first"><a href="#head-first" class="headerlink" title="head()/first()"></a>head()/first()</h2><p>获取数组里第一个元素，就是取下标为 0 的那个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">_.head([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; 1</span><br><br>_.head([]);<br><span class="hljs-comment">// =&gt; undefined</span><br></code></pre></td></tr></table></figure><h2 id="last"><a href="#last" class="headerlink" title="last()"></a>last()</h2><p>取数组里的最后一位数据，取下标为 length-1 的那个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.last([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>查找数据，并返回数据对应的索引值，与 Array 对象身上的 indexOf()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">_.indexOf([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; 1</span><br><br><span class="hljs-comment">// Search from the `fromIndex`.</span><br>_.indexOf([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>查找数据，并返回数据对应的索引值，与 Array 对象身上的 lastIndexOf()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">_.lastIndexOf([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; 3</span><br><br><span class="hljs-comment">// Search from the `fromIndex`.</span><br>_.lastIndexOf([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; 1</span><br></code></pre></td></tr></table></figure><h2 id="initial"><a href="#initial" class="headerlink" title="initial()"></a>initial()</h2><p>获取数组里除了最后一位的所有数据。相当于删除数组里的最后一个数据，与 Array 对象身上的 pop()方法一样。区别在于 pop 方法会改变原数组，而这个方法不会改变原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.initial([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; [1, 2]</span><br></code></pre></td></tr></table></figure><h2 id="tail"><a href="#tail" class="headerlink" title="tail()"></a>tail()</h2><p>获取除了 array 数组第一个元素以外的全部元素，想当于 Array 对象身上的 shift()，与 initial()相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.tail([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; [2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="intersection"><a href="#intersection" class="headerlink" title="intersection()"></a>intersection()</h2><p>取数组的交集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.intersection([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>], [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], [<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>])); <span class="hljs-comment">//[&#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.intersection([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// =&gt; [2]</span><br></code></pre></td></tr></table></figure><h2 id="union"><a href="#union" class="headerlink" title="union()"></a>union()</h2><p>取数组的并集（合并起来，去掉重复的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.union([<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])); <span class="hljs-comment">//[2, 1]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.union([<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// =&gt; [2, 1]</span><br></code></pre></td></tr></table></figure><h2 id="xor"><a href="#xor" class="headerlink" title="xor()"></a>xor()</h2><p>删除数组的交集，留下非交集的部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.xor([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>], [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], [<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>])); <span class="hljs-comment">//[&quot;a&quot;, &quot;c&quot;, &quot;e&quot;]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.xor([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// =&gt; [1, 3]</span><br></code></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>把数组转成字符串，这个方法原生的 Array 对象也有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.join([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;~&quot;</span>);<br><span class="hljs-comment">// =&gt; &#x27;a~b~c&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="nth"><a href="#nth" class="headerlink" title="nth()"></a>nth()</h2><p>取数组里的某个数据，就是通过下标取到某个数据。只不过它的数字可以为负。表示倒着找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>];<br><span class="hljs-built_in">console</span>.log(<br>  _.nth(array, <span class="hljs-number">1</span>), <span class="hljs-comment">//b</span><br>  _.nth(array, -<span class="hljs-number">3</span>) <span class="hljs-comment">//c</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>];<br><br>_.nth(array, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// =&gt; &#x27;b&#x27;</span><br><br>_.nth(array, -<span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; &#x27;c&#x27;;</span><br></code></pre></td></tr></table></figure><h1 id="以下这-4-个方法"><a href="#以下这-4-个方法" class="headerlink" title="以下这 4 个方法"></a>以下这 4 个方法</h1><h2 id="pull"><a href="#pull" class="headerlink" title="pull()"></a>pull()</h2><p>根据给的参数（参数为数据）删除原数组里的对应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>_.pull(array, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [1, 1]</span><br></code></pre></td></tr></table></figure><h2 id="pullAll"><a href="#pullAll" class="headerlink" title="pullAll()"></a>pullAll()</h2><p>与上面的方法一样，就是参数为数组（好比 call,apply 这两个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>_.pullAll(array, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [1, 1]</span><br></code></pre></td></tr></table></figure><h2 id="pullAllBy-pullAllWith"><a href="#pullAllBy-pullAllWith" class="headerlink" title="pullAllBy()\pullAllWith()"></a>pullAllBy()\pullAllWith()</h2><p>与前面方面的语法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">3</span> &#125;, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> &#125;];<br><br>_.pullAllBy(array, [&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">3</span> &#125;], <span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [&#123; &#x27;x&#x27;: 2 &#125;]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">4</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">6</span> &#125;,<br>];<br><br>_.pullAllWith(array, [&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">4</span> &#125;], _.isEqual);<br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 5, &#x27;y&#x27;: 6 &#125;]</span><br></code></pre></td></tr></table></figure><h2 id="pullAt"><a href="#pullAt" class="headerlink" title="pullAt()"></a>pullAt()</h2><p>根据给的参数（参数为索引）删除原数组里的对应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>];<br><span class="hljs-keyword">var</span> evens = _.pullAt(array, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [5, 15]</span><br><br><span class="hljs-built_in">console</span>.log(evens);<br><span class="hljs-comment">// =&gt; [10, 20]</span><br></code></pre></td></tr></table></figure><h1 id="用后面-remove-的方法代替"><a href="#用后面-remove-的方法代替" class="headerlink" title="用后面 remove 的方法代替"></a>用后面 remove 的方法代替</h1><h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>根据函数删除原数组里的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>];<br>_.remove(arr, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, index, array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> index &gt; <span class="hljs-number">2</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> evens = _.remove(array, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [1, 3]</span><br><br><span class="hljs-built_in">console</span>.log(evens);<br><span class="hljs-comment">// =&gt; [2, 4]</span><br></code></pre></td></tr></table></figure><h2 id="without"><a href="#without" class="headerlink" title="without()"></a>without()</h2><p>根据给的参数（参数为数据）删除原数组里的对应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.without([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [3]</span><br></code></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>颠倒数组，这个方法原生的 Array 对象也有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>_.reverse(array);<br><span class="hljs-comment">// =&gt; [3, 2, 1]</span><br><br><span class="hljs-built_in">console</span>.log(array);<br><span class="hljs-comment">// =&gt; [3, 2, 1]</span><br></code></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>截取数组，这个方法原生的 Array 对象也有</p><h2 id="uniq-数组去重"><a href="#uniq-数组去重" class="headerlink" title="uniq()数组去重"></a>uniq()数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.uniq([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])); <span class="hljs-comment">//[1, 2]</span><br><span class="hljs-comment">//uniqBy()/uniqWith() 与前面的一样</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.uniq([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// =&gt; [2, 1]</span><br></code></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>把各数组中索引值相同的数据放到一起，组成新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(_.zip([<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;小刚&quot;</span>], [<span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>])); <span class="hljs-comment">//[[&quot;小明&quot;, &quot;男&quot;, 12],[&quot;小红&quot;, &quot;女&quot;, 13],[&quot;小刚&quot;, &quot;男&quot;, 14]]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">_.zip([<span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-string">&quot;barney&quot;</span>], [<span class="hljs-number">30</span>, <span class="hljs-number">40</span>], [<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; [[&#x27;fred&#x27;, 30, true], [&#x27;barney&#x27;, 40, false]]</span><br></code></pre></td></tr></table></figure><h2 id="zipObject"><a href="#zipObject" class="headerlink" title="zipObject()"></a>zipObject()</h2><p>与上面方法一样，区别是它输出的是对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.zipObject([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// =&gt; &#123; &#x27;a&#x27;: 1, &#x27;b&#x27;: 2 &#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  _.zipObject([<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;小刚&quot;</span>], [<span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>])<br>); <span class="hljs-comment">//&#123;小明: &quot;男&quot;, 小红: &quot;女&quot;, 小刚: &quot;男&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="zipWith"><a href="#zipWith" class="headerlink" title="zipWith()"></a>zipWith()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">_.zipWith([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>], [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;);<br><span class="hljs-comment">// =&gt; [111, 222]</span><br></code></pre></td></tr></table></figure><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip()"></a>unzip()</h2><p>这个方法与 zip 相反，把每个数组里索引值一样的数据放在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> zipped = _.zip([<span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-string">&quot;barney&quot;</span>], [<span class="hljs-number">30</span>, <span class="hljs-number">40</span>], [<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; [[&#x27;fred&#x27;, 30, true], [&#x27;barney&#x27;, 40, false]]</span><br><br>_.unzip(zipped);<br><span class="hljs-comment">// =&gt; [[&#x27;fred&#x27;, &#x27;barney&#x27;], [30, 40], [true, false]]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  _.unzip([<br>    [<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">12</span>],<br>    [<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">13</span>],<br>    [<span class="hljs-string">&quot;小刚&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">14</span>],<br>  ])<br>); <span class="hljs-comment">//[[&#x27;小明&#x27;, &#x27;小红&#x27;, &#x27;小刚&#x27;], [&#x27;男&#x27;, &#x27;女&#x27;, &#x27;男&#x27;], [12, 13, 14]]</span><br></code></pre></td></tr></table></figure><h2 id="unzipWith"><a href="#unzipWith" class="headerlink" title="unzipWith()"></a>unzipWith()</h2><p>与 zipWidth()一样，接收了一个迭代器的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> zipped = _.zip([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>], [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]);<br><span class="hljs-comment">// =&gt; [[1, 10, 100], [2, 20, 200]]</span><br><br>_.unzipWith(zipped, _.add);<br><span class="hljs-comment">// =&gt; [3, 30, 300]</span><br></code></pre></td></tr></table></figure><h1 id="Collection-集合"><a href="#Collection-集合" class="headerlink" title="Collection   集合"></a>Collection   集合</h1><h2 id="countBy"><a href="#countBy" class="headerlink" title="countBy()"></a>countBy()</h2><p>按照一定规则统计数量，key 循环次数，value 为匹配到的数量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(_.countBy([<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>], <span class="hljs-string">&quot;length&quot;</span>)); <span class="hljs-comment">//&#123;3: 2, 5: 1&#125;按每个字符串的length进行统计，length为3的有两个数据。length为5的有1个数据</span><br></code></pre></td></tr></table></figure><h2 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy()"></a>groupBy()</h2><p>按照一定规则进行分组，key 为循环次数，value 为匹配到的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(_.groupBy([<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>], <span class="hljs-string">&quot;length&quot;</span>)); <span class="hljs-comment">//&#123;3: [&quot;one&quot;, &quot;two&quot;], 5: [&quot;three&quot;]&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">_.groupBy([<span class="hljs-number">6.1</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">6.3</span>], <span class="hljs-built_in">Math</span>.floor);<br><span class="hljs-comment">// =&gt; &#123; &#x27;4&#x27;: [4.2], &#x27;6&#x27;: [6.1, 6.3] &#125;</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.groupBy([<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>], <span class="hljs-string">&quot;length&quot;</span>);<br><span class="hljs-comment">// =&gt; &#123; &#x27;3&#x27;: [&#x27;one&#x27;, &#x27;two&#x27;], &#x27;5&#x27;: [&#x27;three&#x27;] &#125;</span><br></code></pre></td></tr></table></figure><h2 id="each-forEach"><a href="#each-forEach" class="headerlink" title="each()/forEach()"></a>each()/forEach()</h2><p>循环，与原生 Array.forEach 一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">_([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(value);<br>&#125;);<br><span class="hljs-comment">// =&gt; Logs `1` then `2`.</span><br><br>_.forEach(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, key</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(key);<br>&#125;);<br><span class="hljs-comment">// =&gt; Logs &#x27;a&#x27; then &#x27;b&#x27; (iteration order is not guaranteed).</span><br></code></pre></td></tr></table></figure><h2 id="eachRight-forEachRight"><a href="#eachRight-forEachRight" class="headerlink" title="eachRight()/forEachRight()"></a>eachRight()/forEachRight()</h2><p>倒着循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">_.forEachRight([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(value);<br>&#125;);<br><span class="hljs-comment">// =&gt; Logs `2` then `1`.</span><br></code></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>与原生 Array.every 方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">_.every([<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;yes&quot;</span>], <span class="hljs-built_in">Boolean</span>);<br><span class="hljs-comment">// =&gt; false</span><br><br><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.every(users, &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// =&gt; false</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.every(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; true</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.every(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; false</span><br></code></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>过滤数组，与 Array 对象上的 filter()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br><br>_.filter(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !o.active;<br>&#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;fred&#x27;]</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.filter(users, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;]</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.filter(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; objects for [&#x27;fred&#x27;]</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.filter(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; objects for [&#x27;barney&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>查找据，与 Array 对象上的 find()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br>_.find(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> o.age &lt; <span class="hljs-number">40</span>;<br>&#125;);<br><span class="hljs-comment">// =&gt; object for &#x27;barney&#x27;</span><br><br><span class="hljs-comment">// The `_.matches` iteratee shorthand.</span><br>_.find(users, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;);<br><span class="hljs-comment">// =&gt; object for &#x27;pebbles&#x27;</span><br><br><span class="hljs-comment">// The `_.matchesProperty` iteratee shorthand.</span><br>_.find(users, [<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">false</span>]);<br><span class="hljs-comment">// =&gt; object for &#x27;fred&#x27;</span><br><br><span class="hljs-comment">// The `_.property` iteratee shorthand.</span><br>_.find(users, <span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-comment">// =&gt; object for &#x27;barney&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="findLast"><a href="#findLast" class="headerlink" title="findLast()"></a>findLast()</h2><p>与上面一样，区别在于它是从右往左查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">_.findLast([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h2><p>生成一个扁平化的数组，与原生的 flatMap()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">duplicate</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> [n, n];<br>&#125;<br><br>_.flatMap([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], duplicate);<br><span class="hljs-comment">// =&gt; [1, 1, 2, 2]</span><br></code></pre></td></tr></table></figure><h2 id="flatMapDeep"><a href="#flatMapDeep" class="headerlink" title="flatMapDeep()"></a>flatMapDeep()</h2><p>与上面一样，不过它可以递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">duplicate</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> [[[n, n]]];<br>&#125;<br><br>_.flatMapDeep([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], duplicate);<br><span class="hljs-comment">// =&gt; [1, 1, 2, 2]</span><br></code></pre></td></tr></table></figure><h2 id="flatMapDepth"><a href="#flatMapDepth" class="headerlink" title="flatMapDepth()"></a>flatMapDepth()</h2><p>与上面一样，它可以递归，并且可以指定递归的深度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">duplicate</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> [[[n, n]]];<br>&#125;<br><br>_.flatMapDepth([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], duplicate, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; [[1, 1], [2, 2]]</span><br></code></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><p>与 Array 对象上的 includes()方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">_.includes([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>);<br><span class="hljs-comment">// =&gt; true</span><br><br>_.includes([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// =&gt; false</span><br><br>_.includes(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span> &#125;, <span class="hljs-string">&quot;fred&quot;</span>);<br><span class="hljs-comment">// =&gt; true</span><br><br>_.includes(<span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-string">&quot;eb&quot;</span>);<br><span class="hljs-comment">// =&gt; true</span><br></code></pre></td></tr></table></figure><h2 id="invokeMap"><a href="#invokeMap" class="headerlink" title="invokeMap()"></a>invokeMap()</h2><p>使用第二个参数（方法）去处理数组，返回处理后的结果（数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  _.invokeMap(<br>    [<br>      [<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>],<br>      [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>    ],<br>    <span class="hljs-string">&quot;sort&quot;</span><br>  ), <span class="hljs-comment">//[ [1, 5, 7],[1, 2, 3]]</span><br>  _.invokeMap([<span class="hljs-number">123</span>, <span class="hljs-number">456</span>], <span class="hljs-built_in">String</span>.prototype.split, <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">//[[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;],[&quot;4&quot;, &quot;5&quot;, &quot;6&quot;]]</span><br>);<br></code></pre></td></tr></table></figure><h2 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy()"></a>keyBy()</h2><p>创建一个对象，里面的 key 由第二个参数决定。value 为原数组里对应的那条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<br>  &#123; <span class="hljs-attr">dir</span>: <span class="hljs-string">&quot;left&quot;</span>, <span class="hljs-attr">code</span>: <span class="hljs-number">97</span> &#125;,<br>  &#123; <span class="hljs-attr">dir</span>: <span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-attr">code</span>: <span class="hljs-number">100</span> &#125;,<br>];<br><span class="hljs-keyword">var</span> result = _.keyBy(array, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(o.code); <span class="hljs-comment">//key为使用fromCharCode解析后的字符。value为它所在数组里的那条数据</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<br><br><span class="hljs-comment">//key为dir，value为key所在原数组里的那条数据</span><br><span class="hljs-built_in">console</span>.log(_.keyBy(array, <span class="hljs-string">&quot;dir&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy()"></a>orderBy()</h2><p>排序，既能升序又能降序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">48</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">34</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> &#125;,<br>];<br><span class="hljs-built_in">console</span>.log(<br>  _.orderBy(users, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;asc&quot;</span>), <span class="hljs-comment">//以age属性的值进行升序排序</span><br>  _.orderBy(users, <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;desc&quot;</span>) <span class="hljs-comment">//以user属性的值进行降序排序</span><br>);<br></code></pre></td></tr></table></figure><h2 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy()"></a>sortBy()</h2><p>排序，只能升序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.sortBy(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> o.user;<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="partition"><a href="#partition" class="headerlink" title="partition()"></a>partition()</h2><p>根据第 2 个参数把一个数组分拆成一个二维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;pebbles&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br><span class="hljs-built_in">console</span>.log(<br>  _.partition(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-comment">//active为true的放在一起，active为false的放在一起</span><br>    <span class="hljs-keyword">return</span> o.active;<br>  &#125;),<br>  _.partition(users, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;) <span class="hljs-comment">//把第二个参数对应的数据放一起，其余的放一起</span><br>);<br></code></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>与 Array 对象上的 reduce()方法一样</p><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h2><p>与 Array 对象上的 reduceRight()方法一样</p><h2 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;barney&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;fred&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><span class="hljs-built_in">console</span>.log(<br>  _.reject(users, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> o.active; <span class="hljs-comment">//barney</span><br>  &#125;),<br>  _.reject(users, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;), <span class="hljs-comment">//fred</span><br>  _.reject(users, [<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;fred&quot;</span>]), <span class="hljs-comment">//barney</span><br>  _.reject(users, <span class="hljs-string">&quot;age&quot;</span>) <span class="hljs-comment">//[]</span><br>);<br></code></pre></td></tr></table></figure><h2 id="sample"><a href="#sample" class="headerlink" title="sample()"></a>sample()</h2><p>从数组中随机取一个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.sample([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]));<br></code></pre></td></tr></table></figure><h2 id="sampleSize"><a href="#sampleSize" class="headerlink" title="sampleSize()"></a>sampleSize()</h2><p>获得 n 个随机数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.sampleSize([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>], <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h2 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle()"></a>shuffle()</h2><p>随机排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.shuffle([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]));<br></code></pre></td></tr></table></figure><h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><p>返回集合长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.size([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]), <span class="hljs-comment">//5</span><br>  _.size(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;), <span class="hljs-comment">//2</span><br>  _.size(<span class="hljs-string">&quot;kaivon&quot;</span>) <span class="hljs-comment">//6</span><br>);<br></code></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>与 Array 对象上的 some()方法一样</p><h1 id="Function-方法"><a href="#Function-方法" class="headerlink" title="Function 方法"></a>Function 方法</h1><h2 id="defer"><a href="#defer" class="headerlink" title="defer()"></a>defer()</h2><p>推迟调用函数，在第二次事件循环的时候调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">_.defer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(text);<br>&#125;, <span class="hljs-string">&quot;第二次事件循环&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第一次事件循环&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="delay"><a href="#delay" class="headerlink" title="delay()"></a>delay()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">_.delay(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(text);<br>  &#125;,<br>  <span class="hljs-number">1000</span>,<br>  <span class="hljs-string">&quot;延迟一秒执行&quot;</span><br>);<br></code></pre></td></tr></table></figure><h2 id="flip"><a href="#flip" class="headerlink" title="flip()"></a>flip()</h2><p>调用函数时翻转参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br>fn1 = _.flip(fn1);<br>fn1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate()"></a>negate()</h2><p>结果取反函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(_.filter([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], _.negate(fn2))); <span class="hljs-comment">//[1, 3, 5]</span><br></code></pre></td></tr></table></figure><h2 id="once"><a href="#once" class="headerlink" title="once()"></a>once()</h2><p>函数只能调用一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;fn3&quot;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> newFn3 = _.once(fn3);<br>newFn3();<br>newFn3(); <span class="hljs-comment">//不起作用</span><br></code></pre></td></tr></table></figure><h1 id="Lang-方法"><a href="#Lang-方法" class="headerlink" title="Lang 方法"></a>Lang 方法</h1><h2 id="castArray"><a href="#castArray" class="headerlink" title="castArray()"></a>castArray()</h2><p>强制转为数组，其实就是在外面加一层方括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.castArray(<span class="hljs-string">&quot;a&quot;</span>), <span class="hljs-comment">//[&quot;a&quot;]</span><br>  _.castArray(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;) <span class="hljs-comment">//[&#123;a: 1, b: 2&#125;]</span><br>);<br></code></pre></td></tr></table></figure><h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123;<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = _.clone(obj1);<br><span class="hljs-built_in">console</span>.log(obj1, obj2);<br>改一个数据;<br>(obj2.b.c = <span class="hljs-number">3</span>), <span class="hljs-built_in">console</span>.log(obj1, obj2);<br>一改都变;<br></code></pre></td></tr></table></figure><h2 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="cloneDeep()"></a>cloneDeep()</h2><p>深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj3 = _.cloneDeep(obj1);<br>(obj3.b.c = <span class="hljs-number">4</span>), <span class="hljs-built_in">console</span>.log(obj1, obj3);<br></code></pre></td></tr></table></figure><h2 id="conformsTo"><a href="#conformsTo" class="headerlink" title="conformsTo()"></a>conformsTo()</h2><p>通过第二个参数来检测对象的属性值是否满足条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-built_in">console</span>.log(<br>  _.conformsTo(object, &#123;<br>    <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">1</span>;<br>    &#125;,<br>  &#125;), <span class="hljs-comment">//true</span><br>  _.conformsTo(object, &#123;<br>    <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">2</span>;<br>    &#125;,<br>  &#125;) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h2 id="ea"><a href="#ea" class="headerlink" title="ea()"></a>ea()</h2><p>比较两个值是否相等。与 Object.is()这个方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.eq(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>), <span class="hljs-comment">//true</span><br>  _.eq(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;), <span class="hljs-comment">//false</span><br>  _.eq(<span class="hljs-literal">NaN</span>, <span class="hljs-literal">NaN</span>) <span class="hljs-comment">//true</span><br>);<br></code></pre></td></tr></table></figure><h2 id="gt"><a href="#gt" class="headerlink" title="gt()"></a>gt()</h2><p>第一个值是否大于第二个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.gt(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), <span class="hljs-comment">//true</span><br>  _.gt(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h2 id="gte"><a href="#gte" class="headerlink" title="gte()"></a>gte()</h2><p>第一个值是否大于等于第二个值</p><h2 id="lt"><a href="#lt" class="headerlink" title="lt()"></a>lt()</h2><p>小于</p><h2 id="lte"><a href="#lte" class="headerlink" title="lte()"></a>lte()</h2><p>小于等于</p><h2 id="isArray"><a href="#isArray" class="headerlink" title="isArray()"></a>isArray()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.isArray([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]), <span class="hljs-comment">//true</span><br>  _.isArray(<span class="hljs-built_in">document</span>.body.children), <span class="hljs-comment">//false</span><br>  _.isObject(&#123;&#125;), <span class="hljs-comment">//true</span><br>  _.isObject(<span class="hljs-literal">null</span>) <span class="hljs-comment">//false</span><br>);<br></code></pre></td></tr></table></figure><h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.toArray(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;), <span class="hljs-comment">//[1, 2]</span><br>  _.toArray(<span class="hljs-string">&quot;abc&quot;</span>), <span class="hljs-comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br>  _.toArray(<span class="hljs-literal">null</span>) <span class="hljs-comment">//[]</span><br>);<br></code></pre></td></tr></table></figure><h1 id="Object-方法"><a href="#Object-方法" class="headerlink" title="Object 方法"></a>Object 方法</h1><h2 id="assign"><a href="#assign" class="headerlink" title="assign()"></a>assign()</h2><p>合并对象，与 Object.assign()方法一样</p><h2 id="assignIn-extend"><a href="#assignIn-extend" class="headerlink" title="assignIn()/extend()"></a>assignIn()/extend()</h2><p>与上面一样，不过它能继承原型身上的属性</p><h2 id="assignInWith-extendWith"><a href="#assignInWith-extendWith" class="headerlink" title="assignInWith()/extendWith()"></a>assignInWith()/extendWith()</h2><p>与上面一样，接收一个比较器的函数做为参数</p><h2 id="assignWith"><a href="#assignWith" class="headerlink" title="assignWith()"></a>assignWith()</h2><p>也是接收一个比较器的函数做为参数</p><h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><p>根据传入的属性创建一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-attr">a</span>: [&#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125;, <span class="hljs-number">4</span>] &#125;;<br><span class="hljs-built_in">console</span>.log(_.at(object, [<span class="hljs-string">&quot;a[0].b.c&quot;</span>, <span class="hljs-string">&quot;a[1]&quot;</span>])); <span class="hljs-comment">//[3, 4]</span><br></code></pre></td></tr></table></figure><h2 id="create"><a href="#create" class="headerlink" title="create()"></a>create()</h2><p>与 Object.create()一样</p><h2 id="defaults"><a href="#defaults" class="headerlink" title="defaults()"></a>defaults()</h2><p>合并对象，与 assign()一样，不过 assign 方法合并时遇到相同的属性，后面的会覆盖前面的。defaults 刚好相反，前面的覆盖后面的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.defaults(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> &#125;), <span class="hljs-comment">//&#123;a: 1, b: 2&#125;</span><br>  _.assign(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> &#125;) <span class="hljs-comment">//&#123;a: 3, b: 2&#125;</span><br>);<br></code></pre></td></tr></table></figure><h2 id="defaultsDeep"><a href="#defaultsDeep" class="headerlink" title="defaultsDeep()"></a>defaultsDeep()</h2><p>与 defaults 一致，不过它会深递归</p><h2 id="toPairs-entries"><a href="#toPairs-entries" class="headerlink" title="toPairs()/entries()"></a>toPairs()/entries()</h2><p>把对象里可枚举的属性(不包括继承的)创建成一个数组，与 Object.entities()的方法一样</p><h2 id="toPairsIn-entriesIn"><a href="#toPairsIn-entriesIn" class="headerlink" title="toPairsIn()/entriesIn()"></a>toPairsIn()/entriesIn()</h2><p>与上面的一样，但它包括继承的属性</p><h2 id="findKey"><a href="#findKey" class="headerlink" title="findKey()"></a>findKey()</h2><p>与前面讲的 find 方法一样，只不过它返回的是 key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = &#123;<br>  <span class="hljs-attr">barney</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">36</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">fred</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;,<br>  <span class="hljs-attr">pebbles</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(_.findKey(users, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span> &#125;)); <span class="hljs-comment">//pebbles</span><br></code></pre></td></tr></table></figure><h2 id="findLastKey"><a href="#findLastKey" class="headerlink" title="findLastKey()"></a>findLastKey()</h2><p>与上面一样，只不过它从反方向开始遍历</p><h2 id="forIn"><a href="#forIn" class="headerlink" title="forIn()"></a>forIn()</h2><p>与原生 的 for…in 循环一样，只不过它是一个函数，语法与<strong>forEach</strong>一样。它遍历的是自己的属性与继承的属性</p><h2 id="forInRight"><a href="#forInRight" class="headerlink" title="forInRight()"></a>forInRight()</h2><p>与上面一样，只不过是反方向遍历</p><h2 id="forOwn"><a href="#forOwn" class="headerlink" title="forOwn()"></a>forOwn()</h2><p>与 forIn()一样，只不过 forOwn 只能遍历到自己的属性</p><h2 id="forOwnRight"><a href="#forOwnRight" class="headerlink" title="forOwnRight()"></a>forOwnRight()</h2><p>与上面一样，只不过是反方向遍历</p><h2 id="functions-functionsIn"><a href="#functions-functionsIn" class="headerlink" title="functions()/functionsIn()"></a>functions()/functionsIn()</h2><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>获取属性的值，与 Object.defineProperty()   属性描述对象上的 get 方法一致</p><h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><p>设置属性的值，与 Object.defineProperty()   属性描述对象上的 set 方法一致</p><h2 id="setWith"><a href="#setWith" class="headerlink" title="setWith()"></a>setWith()</h2><p>与上面的一样，只不过可以给一个参数决定返回的是对象还是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.setWith(&#123;&#125;, <span class="hljs-string">&quot;[0][1]&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-built_in">Array</span>));<br></code></pre></td></tr></table></figure><h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><p>检查属性是否为对象的直接属性，与 Object.hasOwnProperty()方法返回 true 一样</p><h2 id="hasIn"><a href="#hasIn" class="headerlink" title="hasIn()"></a>hasIn()</h2><p>检查属性是对象的直接属性还是继承属性，也与 Object.hasOwnProperty()一样，true 表示直接属性，false 表示继承属性</p><h2 id="invert"><a href="#invert" class="headerlink" title="invert()"></a>invert()</h2><p>把对象的 key 与 value 颠倒，后面的属性会覆盖前面的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-built_in">console</span>.log(_.invert(object)); <span class="hljs-comment">//&#123;1: &quot;c&quot;, 2: &quot;b&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="invertBy"><a href="#invertBy" class="headerlink" title="invertBy()"></a>invertBy()</h2><p>与上面一样，它遇到相同的值后不会覆盖，而是会把所有放在一个数组里。另外它多了一个遍历器方法</p><h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke()"></a>invoke()</h2><p>调用方法去处理取到的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-attr">a</span>: [&#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] &#125; &#125;] &#125;;<br><span class="hljs-built_in">console</span>.log(_.invoke(object, <span class="hljs-string">&quot;a[0].b.c.slice&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">//[2, 3]用slice方法去截取a[0].b.c的1-3位</span><br></code></pre></td></tr></table></figure><h2 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h2><p>把对象的 key 放到一个数组里，与 Object.keys()的方法一样</p><h2 id="keysIn"><a href="#keysIn" class="headerlink" title="keysIn()"></a>keysIn()</h2><p>与上面一样，只不过它包含继承到的属性</p><h2 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h2><p>把对象的 value 放到一个数组里，与 Object.value()的方法一样</p><h2 id="valuesIn"><a href="#valuesIn" class="headerlink" title="valuesIn()"></a>valuesIn()</h2><p>与上面一样，只不过它包含继承到的属性</p><h2 id="mapKeys"><a href="#mapKeys" class="headerlink" title="mapKeys()"></a>mapKeys()</h2><p>修改对象的 key，value 不会变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = _.mapKeys(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, key</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> key + value;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//&#123;a1: 1, b2: 2&#125;</span><br></code></pre></td></tr></table></figure><h2 id="mapValues"><a href="#mapValues" class="headerlink" title="mapValues()"></a>mapValues()</h2><p>与上个方法一样，只不过它修改的是 value，key 不会变</p><h2 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h2><p>它与 assign 一样，不过它遇到相同的属性名后并不会覆盖，它会合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123;<br>  <span class="hljs-attr">a</span>: [&#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">d</span>: <span class="hljs-number">4</span> &#125;],<br>&#125;;<br><span class="hljs-keyword">var</span> other = &#123;<br>  <span class="hljs-attr">a</span>: [&#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;, &#123; <span class="hljs-attr">e</span>: <span class="hljs-number">5</span> &#125;],<br>&#125;;<br><span class="hljs-built_in">console</span>.log(_.merge(object, other));<br></code></pre></td></tr></table></figure><h2 id="mergeWith"><a href="#mergeWith" class="headerlink" title="mergeWith()"></a>mergeWith()</h2><p>与上面的方法一致，不过多了接收一个比较器的函数做为参数</p><h2 id="omit"><a href="#omit" class="headerlink" title="omit()"></a>omit()</h2><p>删除对象里的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.omit(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;, [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>])); <span class="hljs-comment">//&#123;b: &quot;2&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="omitBy"><a href="#omitBy" class="headerlink" title="_.omitBy"></a>_.omitBy</h2><p>与上面一样，不过是接收一个迭代器的函数做为参数</p><h2 id="pick"><a href="#pick" class="headerlink" title="pick()"></a>pick()</h2><p>筛选对象里的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.pick(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;, [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>])); <span class="hljs-comment">//&#123;a: 1, c: 3&#125;</span><br></code></pre></td></tr></table></figure><h2 id="pickBy"><a href="#pickBy" class="headerlink" title="pickBy()"></a>pickBy()</h2><p>与上面一样，不过是可接收一个迭代器的函数做为参数</p><h2 id="result"><a href="#result" class="headerlink" title="result()"></a>result()</h2><p>获取对象属性，它与 get 一样。只不过它遇到函数的属性时会调用函数，并且把 this 指向对象本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">12</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  &#125;,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(_.result(obj, <span class="hljs-string">&quot;a&quot;</span>)); <span class="hljs-comment">//12</span><br>_.result(obj, <span class="hljs-string">&quot;b&quot;</span>); <span class="hljs-comment">//12</span><br><span class="hljs-built_in">console</span>.log(_.get(obj, <span class="hljs-string">&quot;b&quot;</span>)); <span class="hljs-comment">//它只能取到这个函数，并不能执行</span><br></code></pre></td></tr></table></figure><h2 id="toPairs-、toPairsIn"><a href="#toPairs-、toPairsIn" class="headerlink" title="toPairs()、toPairsIn()"></a>toPairs()、toPairsIn()</h2><p>把对象的 key 与 value 一起放到数组里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;<br>Foo.prototype.c = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">console</span>.log(_.toPairs(<span class="hljs-keyword">new</span> Foo()));<br><span class="hljs-built_in">console</span>.log(_.toPairsIn(<span class="hljs-keyword">new</span> Foo()));<br></code></pre></td></tr></table></figure><h2 id="unset"><a href="#unset" class="headerlink" title="unset()"></a>unset()</h2><p>删除属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-attr">a</span>: [&#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">7</span> &#125; &#125;] &#125;;<br>_.unset(object, <span class="hljs-string">&quot;a[0].b.c&quot;</span>), <span class="hljs-built_in">console</span>.log(object);<br></code></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h2><p>这个与 set 一样，不过它可以接收一个函数的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span> &#125;;<br>_.update(object, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> n * n;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(object); <span class="hljs-comment">///&#123;a: 100&#125;</span><br></code></pre></td></tr></table></figure><h2 id="updateWith"><a href="#updateWith" class="headerlink" title="updateWith()"></a>updateWith()</h2><p>与上面的一样，不过可以接收一个路径的参数，决定生成的属性放在哪里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123;&#125;;<br>_.updateWith(<br>  object,<br>  <span class="hljs-string">&quot;[a][b]&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>  &#125;,<br>  <span class="hljs-built_in">Object</span><br>);<br><span class="hljs-built_in">console</span>.log(object);<br></code></pre></td></tr></table></figure><h1 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h1><h2 id="camelCase"><a href="#camelCase" class="headerlink" title="camelCase()"></a>camelCase()</h2><p>转换字符串为驼峰格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.camelCase(<span class="hljs-string">&quot;kaivon_chen&quot;</span>), _.camelCase(<span class="hljs-string">&quot;kaivon chen&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize()"></a>capitalize()</h2><p>首字母为大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.capitalize(<span class="hljs-string">&quot;kaivon&quot;</span>)); <span class="hljs-comment">//Kaivon</span><br></code></pre></td></tr></table></figure><h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h2><p>查检结尾的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.endsWith(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="escape"><a href="#escape" class="headerlink" title="escape()"></a>escape()</h2><p>把特殊字符转义成真正的 HTML 实体字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.escape(<span class="hljs-string">&quot;ka&lt;iv&gt;on&quot;</span>)); <span class="hljs-comment">//ka&amp;lt;iv&amp;gt;on</span><br></code></pre></td></tr></table></figure><h2 id="unescape"><a href="#unescape" class="headerlink" title="unescape()"></a>unescape()</h2><p>与上面相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.unescape(<span class="hljs-string">&quot;ka&amp;lt;iv&amp;gt;on&quot;</span>)); <span class="hljs-comment">//ka&lt;iv&gt;on</span><br></code></pre></td></tr></table></figure><h2 id="kebabCase"><a href="#kebabCase" class="headerlink" title="kebabCase()"></a>kebabCase()</h2><p>转换字符为加-的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.kebabCase(<span class="hljs-string">&quot;k a i&quot;</span>)); <span class="hljs-comment">//k-a-i</span><br></code></pre></td></tr></table></figure><h2 id="lowerCase-toLower"><a href="#lowerCase-toLower" class="headerlink" title="lowerCase()/toLower()"></a>lowerCase()/toLower()</h2><p>转小写</p><h2 id="upperCase-toUpper"><a href="#upperCase-toUpper" class="headerlink" title="upperCase()/toUpper()"></a>upperCase()/toUpper()</h2><p>转大写</p><h2 id="lowerFirst"><a href="#lowerFirst" class="headerlink" title="lowerFirst()"></a>lowerFirst()</h2><p>首字符转小写</p><h2 id="upperFirst"><a href="#upperFirst" class="headerlink" title="upperFirst()"></a>upperFirst()</h2><p>首字符转大写</p><h2 id="pad"><a href="#pad" class="headerlink" title="pad()"></a>pad()</h2><p>填充字符串到指定的长度(左右填充)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.pad(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&quot;-&quot;</span>)); <span class="hljs-comment">//--abc---</span><br></code></pre></td></tr></table></figure><h2 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.padEnd(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&quot;-&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.padStart(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&quot;-&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h2><p>把字符串类型的数字转成数字，</p><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><p>重复字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.repeat(<span class="hljs-string">&quot;kaivon&quot;</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//kaivonkaivon</span><br></code></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><p>替换字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.replace(<span class="hljs-string">&quot;kaivon&quot;</span>, <span class="hljs-string">&quot;von&quot;</span>, <span class="hljs-string">&quot;***&quot;</span>)); <span class="hljs-comment">//kai***</span><br></code></pre></td></tr></table></figure><h2 id="snakeCase"><a href="#snakeCase" class="headerlink" title="snakeCase()"></a>snakeCase()</h2><p>转换字符串为_的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.snakeCase(<span class="hljs-string">&quot;k a i&quot;</span>)); <span class="hljs-comment">//k_a_i</span><br></code></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p>分隔字符串为数组，与原生 String.split()一样</p><h2 id="startCase"><a href="#startCase" class="headerlink" title="startCase()"></a>startCase()</h2><p>转换字符串为+空格的形式，并且首字符大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.startCase(<span class="hljs-string">&quot;kaivon-chen&quot;</span>), <span class="hljs-comment">//Kaivon Chen</span><br>  _.startCase(<span class="hljs-string">&quot;kaivonChen&quot;</span>), <span class="hljs-comment">//Kaivon Chen</span><br>  _.startCase(<span class="hljs-string">&quot;kaivon_chen&quot;</span>) <span class="hljs-comment">//Kaivon Chen</span><br>);<br></code></pre></td></tr></table></figure><h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h2><p>检查字符串的开始字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.startsWith(<span class="hljs-string">&quot;kaivon&quot;</span>, <span class="hljs-string">&quot;k&quot;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="template"><a href="#template" class="headerlink" title="template()"></a>template()</h2><p>编译模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> compiled = _.template(<span class="hljs-string">&quot;hello &lt;%= user %&gt;!&quot;</span>); <span class="hljs-comment">//user为一个占位符</span><br><span class="hljs-built_in">console</span>.log(compiled(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;kaivon&quot;</span> &#125;)); <span class="hljs-comment">//拿到数据后，给user赋值，它就能正确解析出内容了</span><br></code></pre></td></tr></table></figure><h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><p>去除首尾空格，或者指定字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.trim(<span class="hljs-string">&quot;kaivon-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>)); <span class="hljs-comment">//kaivon</span><br></code></pre></td></tr></table></figure><h2 id="trimEnd"><a href="#trimEnd" class="headerlink" title="trimEnd()"></a>trimEnd()</h2><p>去除后面的空格，或者指定字符</p><h2 id="trimStart"><a href="#trimStart" class="headerlink" title="trimStart()"></a>trimStart()</h2><p>与上面的一样，只不过去除的是左边的</p><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate()"></a>truncate()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<br>  _.truncate(<span class="hljs-string">&quot;Hi kaivon! How are you feeling today? I am felling great!&quot;</span>)<br>); <span class="hljs-comment">//Hi kaivon! How are you feel...</span><br><span class="hljs-built_in">console</span>.log(<br>  _.truncate(<span class="hljs-string">&quot;Hi kaivon! How are you feeling today? I am felling great!&quot;</span>, &#123;<br>    <span class="hljs-comment">//&#x27;length&#x27;: 10,//限制固定的字符个数</span><br>    <span class="hljs-attr">separator</span>: <span class="hljs-regexp">/!/</span>, <span class="hljs-comment">//加个正则，遇到第一个空格后就加三个点</span><br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h2 id="words"><a href="#words" class="headerlink" title="words()"></a>words()</h2><p>把字符串的单词拆分成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(_.words(<span class="hljs-string">&quot;kaivon chen&quot;</span>)); <span class="hljs-comment">//[&quot;kaivon&quot;, &quot;chen&quot;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery</title>
    <link href="/2020/02/15/jQuery/"/>
    <url>/2020/02/15/jQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery-简介"><a href="#jQuery-简介" class="headerlink" title="jQuery 简介"></a>jQuery 简介</h1><p>jQuery123.com</p><p>jQuery.com</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log(jQuery); console.log($ === jQuery);<br></code></pre></td></tr></table></figure><h2 id="jQuery-写法"><a href="#jQuery-写法" class="headerlink" title="jQuery 写法"></a>jQuery 写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(box);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$().ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(box);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(box);<br>&#125;);<br></code></pre></td></tr></table></figure><p>ready 与 window.onload 有区别吗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.google.com/1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ready完成了&quot;</span>);<br>&#125;); <span class="hljs-comment">//dom元素加载完成之后就会触发，仅仅是标签</span><br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;load完成了&quot;</span>);<br>&#125;; <span class="hljs-comment">//页面整个下载完成</span><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;dom内容加载完毕&quot;</span>);<br>&#125;); <span class="hljs-comment">//所有dom元素加载完成之后就会触发，同于ready,早于ready</span><br></code></pre></td></tr></table></figure><h2 id="jQuery-特点：选择器"><a href="#jQuery-特点：选择器" class="headerlink" title="jQuery 特点：选择器"></a>jQuery 特点：选择器</h2><p>小 demo 点击创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>原生 js 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>  div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>  div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>  div.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>  <span class="hljs-built_in">document</span>.body.appendChild(div);<br>&#125;;<br></code></pre></td></tr></table></figure><p>jQuery 的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;div&quot;</span>)<br>    .css(&#123;<br>      <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>      <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>      <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;green&quot;</span>,<br>    &#125;)<br>    .appendTo(<span class="hljs-string">&quot;body&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>强大的选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ulId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ulClass&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;ul li:nth-child(1)&quot;</span>);<br><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;#ulId li:first-child&quot;</span>);<br><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;.ulClass li:first-child + li&quot;</span>);<br><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;li[name=blue]&quot;</span>);<br><span class="hljs-comment">//var li=document.querySelector(&#x27;#ulId li:first-child&#x27;);</span><br><span class="hljs-comment">//li.style.background=&#x27;green&#x27;;</span><br>li.css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">$(&#x27;.text&#x27;).html(&#x27;陈学辉&#x27;).css(&#x27;border&#x27;, &#x27;1px solid<br>#000&#x27;).width(200).height(200).css(&#x27;background&#x27;, &#x27;grey&#x27;);<br></code></pre></td></tr></table></figure><h2 id="原生-js-获取到的对象与-jquery-取到的对象的对比"><a href="#原生-js-获取到的对象与-jquery-取到的对象的对比" class="headerlink" title="原生 js 获取到的对象与 jquery 取到的对象的对比"></a>原生 js 获取到的对象与 jquery 取到的对象的对比</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>大标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> h1 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;h1&quot;</span>);<br>h1.style.color = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-comment">//h1.css(&#x27;color&#x27;,&#x27;pink&#x27;);//报错，原生的对象不使用jquery里的方法</span><br><span class="hljs-keyword">var</span> $h1 = $(<span class="hljs-string">&quot;h1&quot;</span>);<br>$h1.css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>);<br><span class="hljs-comment">//$h1.style.color=&#x27;pink&#x27;;//报错，jquery的对象也不能使用原后的方法</span><br><br><span class="hljs-built_in">console</span>.log(h1 == $h1); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(h1);<br><span class="hljs-built_in">console</span>.log($h1);<br></code></pre></td></tr></table></figure><h2 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//原生转jquery</span><br>$(h1).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);<br><br><span class="hljs-comment">//jquery转原生</span><br>$h1[<span class="hljs-number">0</span>].style.color = <span class="hljs-string">&quot;purple&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><blockquote><p>DOM 元素，没有权重</p></blockquote><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">1000px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#list1&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>);<br>$(<span class="hljs-string">&quot;.red&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;grey&quot;</span>);<br>$(<span class="hljs-string">&quot;li&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;2px solid pink&quot;</span>);<br>$(<span class="hljs-string">&quot;*&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;2px solid orange&quot;</span>);<br>$(<span class="hljs-string">&quot;li,p&quot;</span>).css(<span class="hljs-string">&quot;font-size&quot;</span>, <span class="hljs-string">&quot;20px&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div a&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>);<br><span class="hljs-comment">// $选择到的是一个集合</span><br>$(<span class="hljs-string">&quot;div&gt;a&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>$(<span class="hljs-string">&quot;div a.link + a&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>);<br>$(<span class="hljs-string">&quot;div a.link ~ a&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//后面所有兄弟节点</span><br></code></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ulColor&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;css-1&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;color1-green&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red-1color&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;encnhk&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en cn&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kaivon&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">$(&#x27;#ulColor li[class]&#x27;).css(&#x27;background&#x27;, &#x27;pink&#x27;); $(&#x27;#ulColor<br>li[title=blue]&#x27;).css(&#x27;background&#x27;, &#x27;grey&#x27;); $(&#x27;#ulColor<br>li[title!=blue]&#x27;).css(&#x27;background&#x27;, &#x27;yellowgreen&#x27;); $(&#x27;#ulColor<br>li[title|=css]&#x27;).css(&#x27;background&#x27;, &#x27;darkgreen&#x27;); //前缀是用-隔开的 $(&#x27;#ulColor<br>li[id^=color]&#x27;).css(&#x27;background&#x27;, &#x27;hotpink&#x27;); //以属性值为开始（不需要-隔开）<br>$(&#x27;#ulColor li[id$=color]&#x27;).css(&#x27;background&#x27;, &#x27;purple&#x27;); //以...结尾 $(&#x27;#ulColor<br>li[lang*=cn]&#x27;).css(&#x27;background&#x27;, &#x27;olive&#x27;); //属性中包含cn字符串 $(&#x27;#ulColor<br>li[lang~=cn]&#x27;).css(&#x27;background&#x27;, &#x27;skyblue&#x27;); //属性中包含cn单词，用空格隔开<br>$(&#x27;#ulColor li[class=cl][name=kaivon]&#x27;).css(&#x27;background&#x27;, &#x27;teal&#x27;);<br>//属性中包含cn单词，用空格隔开<br></code></pre></td></tr></table></figure><h2 id="基础过滤选择器"><a href="#基础过滤选择器" class="headerlink" title="基础过滤选择器"></a>基础过滤选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;olColor&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tar&quot;</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>h4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#olColor li:eq(1)&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid pink&quot;</span>); <span class="hljs-comment">// 0 1 2</span><br>$(<span class="hljs-string">&quot;#olColor li:gt(1)&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid grey&quot;</span>); <span class="hljs-comment">//大于</span><br>$(<span class="hljs-string">&quot;#olColor li:lt(3)&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid yellowgreen&quot;</span>); <span class="hljs-comment">//小于</span><br>$(<span class="hljs-string">&quot;#olColor li:not(#olColor li:eq(2))&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid darkgreen&quot;</span>); <span class="hljs-comment">//排除</span><br>$(<span class="hljs-string">&quot;#olColor li:even&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid hotpink&quot;</span>); <span class="hljs-comment">//偶数</span><br>$(<span class="hljs-string">&quot;#olColor li:odd&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid purple&quot;</span>); <span class="hljs-comment">//奇数</span><br>$(<span class="hljs-string">&quot;#olColor li:first&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid olive&quot;</span>); <span class="hljs-comment">//第一个</span><br>$(<span class="hljs-string">&quot;#olColor li:last&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid skyblue&quot;</span>); <span class="hljs-comment">//最后一个</span><br>$(<span class="hljs-string">&quot;#olColor li:lang(en)&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid teal&quot;</span>); <span class="hljs-comment">//lang属性</span><br>$(<span class="hljs-string">&quot;#olColor li:target(tar)&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid yellow&quot;</span>); <span class="hljs-comment">//tatget属性  锚点</span><br>$(<span class="hljs-string">&quot;:root&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;2px solid blue&quot;</span>); <span class="hljs-comment">//根节点</span><br>$(<span class="hljs-string">&quot;:header&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid darkgreen&quot;</span>); <span class="hljs-comment">//所有的h标签</span><br></code></pre></td></tr></table></figure><h2 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;paragraph&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>唯一的一个子元素<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only-two&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#paragraph p:first-child&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>); <span class="hljs-comment">//第一个子元素必需是p标签</span><br>$(<span class="hljs-string">&quot;#paragraph span:first-of-type&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;yellowgreen&quot;</span>); <span class="hljs-comment">//选择到第1个span标签</span><br>$(<span class="hljs-string">&quot;#paragraph span:last-child&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;darkgreen&quot;</span>);<br>$(<span class="hljs-string">&quot;#paragraph p:last-of-type&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;hotpink&quot;</span>);<br>$(<span class="hljs-string">&quot;#paragraph p:nth-child(2)&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//选择到第2个子元素，并且这个子元素必需是p标签</span><br>$(<span class="hljs-string">&quot;#paragraph span:nth-of-type(2)&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;olive&quot;</span>);<br>$(<span class="hljs-string">&quot;#only p:only-child&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;skyblue&quot;</span>); <span class="hljs-comment">//选择到只有一个子元素的标签</span><br>$(<span class="hljs-string">&quot;#only-two span:only-of-type&quot;</span>).css(<span class="hljs-string">&quot;font-size&quot;</span>, <span class="hljs-string">&quot;30px&quot;</span>); <span class="hljs-comment">//选择到只有一个span子元素的标签</span><br></code></pre></td></tr></table></figure><h2 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>kaivon<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;has&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>大标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#content:contains(kaivon)&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);<br>$(<span class="hljs-string">&quot;div:empty&quot;</span>).css(&#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>  <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;green&quot;</span>,<br>&#125;);<br>$(<span class="hljs-string">&quot;#has:has(p)&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;1px solid #000&quot;</span>);<br>$(<span class="hljs-string">&quot;#title:parent&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;1px solid #f00&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>男 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span> /&gt;</span>男 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">$(&#x27;:button&#x27;).css(&#x27;border&#x27;, &#x27;2px solid #f0f&#x27;); //选择到所有的按钮 $(&#x27;#sex<br>input:checkbox&#x27;).wrap(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#x27;).parent().css(&#x27;border&#x27;, &#x27;2px solid<br>purpLe&#x27;);//所有的链式操作都是选择的第一个 $(&#x27;:checked&#x27;).wrap(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">span</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#x27;).parent().css(&#x27;border&#x27;, &#x27;2px solid blue&#x27;);<br></code></pre></td></tr></table></figure><h1 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">1000px</span>;<br>&#125;<br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">background</span>: red;<br>&#125;<br><span class="hljs-selector-class">.green</span> &#123;<br>  <span class="hljs-attribute">background</span>: green;<br>&#125;<br><span class="hljs-selector-class">.blue</span> &#123;<br>  <span class="hljs-attribute">background</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">background</span>: greenyellow;<br>&#125;<br><span class="hljs-selector-class">.css</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="操作-class"><a href="#操作-class" class="headerlink" title="操作 class"></a>操作 class</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;setClass&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;green blue&quot;</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red green&quot;</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>点击切换class<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.setClass li:first&quot;</span>).addClass(<span class="hljs-string">&quot;red&quot;</span>); <span class="hljs-comment">//添加class</span><br>$(<span class="hljs-string">&quot;.setClass li:eq(1)&quot;</span>).removeClass(<span class="hljs-string">&quot;green&quot;</span>); <span class="hljs-comment">//移除class(不给参数，移除所有class)</span><br><span class="hljs-built_in">console</span>.log(<br>  <span class="hljs-comment">//是否包含某个class</span><br>  $(<span class="hljs-string">&quot;.setClass li:last&quot;</span>).hasClass(<span class="hljs-string">&quot;green&quot;</span>), <span class="hljs-comment">//true</span><br>  $(<span class="hljs-string">&quot;.setClass li:last&quot;</span>).hasClass(<span class="hljs-string">&quot;orange&quot;</span>) <span class="hljs-comment">//false</span><br>);<br><span class="hljs-comment">//toggleClass 切换class。在添加、删除间切换</span><br>$(<span class="hljs-string">&quot;.setClass p&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-built_in">this</span>).toggleClass();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="插入元素（内部插入）找到父级添加子元素"><a href="#插入元素（内部插入）找到父级添加子元素" class="headerlink" title="插入元素（内部插入）找到父级添加子元素"></a>插入元素（内部插入）找到父级添加子元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;insideAdd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在内部插入元素<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.insideAdd&quot;</span>).append(<span class="hljs-string">&quot;&lt;h2&gt;append方法插入&lt;/h2&gt;&quot;</span>); <span class="hljs-comment">//append()，在元素里面的末尾插入DOM。这个与appendChild的方法是一样的。</span><br>$(<span class="hljs-string">&quot;.insideAdd&quot;</span>).append($(<span class="hljs-string">&quot;.insideAdd p&quot;</span>));<br>$(<span class="hljs-string">&quot;&lt;h2&gt;appendTo方法插入&lt;/h2&gt;&quot;</span>).appendTo(<span class="hljs-string">&quot;.insideAdd&quot;</span>); <span class="hljs-comment">//将匹配的元素插入到目标元素的最后面。这个与append一样，只不过内容和目标的位置相反。append方法里直接写一个标签的字符串，就相当于创建一个DOM对象</span><br>$(<span class="hljs-string">&quot;.insideAdd&quot;</span>).prepend(<span class="hljs-string">&quot;&lt;h2&gt;prepend方法插入&lt;/h2&gt;&quot;</span>); <span class="hljs-comment">//prepend()，与append的语法一样，只不过是插入到父级元素的前面</span><br>$(<span class="hljs-string">&quot;&lt;h2&gt;prependTo方法插入&lt;/h2&gt;&quot;</span>).prependTo(<span class="hljs-string">&quot;.insideAdd&quot;</span>); <span class="hljs-comment">//prependTo()，与appendTo是一样的，不同的也是插入的位置是在前面</span><br></code></pre></td></tr></table></figure><h2 id="插入元素（外部插入）找到元素添加兄弟节点"><a href="#插入元素（外部插入）找到元素添加兄弟节点" class="headerlink" title="插入元素（外部插入）找到元素添加兄弟节点"></a>插入元素（外部插入）找到元素添加兄弟节点</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outsideAdd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>在外部插入元素<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//插入元素（外部插入，插入为兄弟节点）</span><br>$(<span class="hljs-string">&quot;.outsideAdd h2&quot;</span>).after(<span class="hljs-string">&quot;&lt;p&gt;after方法添加到h2后面&lt;/p&gt;&quot;</span>); <span class="hljs-comment">//after()（语法类似于append）</span><br>$(<span class="hljs-string">&quot;&lt;p&gt;insertAfter方法添加到h2后面&lt;/p&gt;&quot;</span>).insertAfter(<span class="hljs-string">&quot;.outsideAdd h2&quot;</span>); <span class="hljs-comment">//insertAfter()（语法类似于appendTo）</span><br>$(<span class="hljs-string">&quot;.outsideAdd h2&quot;</span>).before(<span class="hljs-string">&quot;&lt;p&gt;before方法添加到h2前面&lt;/p&gt;&quot;</span>); <span class="hljs-comment">//before()（语法类似于prepend）</span><br>$(<span class="hljs-string">&quot;&lt;p&gt;insertBefore方法添加到h2前面&lt;/p&gt;&quot;</span>).insertBefore(<span class="hljs-string">&quot;.outsideAdd h2&quot;</span>); <span class="hljs-comment">//insertBefore()（语法类似于prependTo）</span><br></code></pre></td></tr></table></figure><h2 id="插入元素，html-与-text-方法"><a href="#插入元素，html-与-text-方法" class="headerlink" title="插入元素，html 与 text 方法"></a>插入元素，html 与 text 方法</h2><p>插入元素，html 与 text 方法。相当于原生的 innerHTML、innerText 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;htmlText&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html与text方法<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.htmlText&quot;</span>).html()); <span class="hljs-comment">//获取</span><br>$(<span class="hljs-string">&quot;.htmlText&quot;</span>).html(<br>  <span class="hljs-string">&quot;&lt;h2&gt;这是html方法添加的标题&lt;/h2&gt;&lt;p&gt;这是html方法添加的内容&lt;/p&gt;&quot;</span><br>); <span class="hljs-comment">//设置</span><br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.htmlText&quot;</span>).text()); <span class="hljs-comment">//获取</span><br>$(<span class="hljs-string">&quot;.htmlText&quot;</span>).text(<br>  <span class="hljs-string">&quot;&lt;h2&gt;这是text方法添加的标题&lt;/h2&gt;&lt;p&gt;这是&lt;em&gt;text&lt;/em&gt;方法添加的内容&lt;/p&gt;&quot;</span><br>); <span class="hljs-comment">//纯文本</span><br></code></pre></td></tr></table></figure><h2 id="包裹元素"><a href="#包裹元素" class="headerlink" title="包裹元素"></a>包裹元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.wrap span&quot;</span>).wrap(<span class="hljs-string">&quot;&lt;li&gt;&quot;</span>); <span class="hljs-comment">//wrap()，在每个匹配的元素外层包上一个html元素</span><br>$(<span class="hljs-string">&quot;.wrap li&quot;</span>).wrapAll(<span class="hljs-string">&quot;&lt;ul&gt;&quot;</span>); <span class="hljs-comment">//wrapAll()，在所有匹配元素外面包一层HTML元素</span><br>$(<span class="hljs-string">&quot;.wrap span&quot;</span>).wrapInner(<span class="hljs-string">&quot;&lt;strong&gt;&quot;</span>); <span class="hljs-comment">//wrapInner()，在匹配元素里的内容外包一层结构</span><br>$(<span class="hljs-string">&quot;.wrap li&quot;</span>).unwrap(); <span class="hljs-comment">//.unwrap()，将匹配到的元素的父级删除</span><br></code></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>底部<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//$(&#x27;.del .title&#x27;).remove();//remove()，移除自己</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).remove(<span class="hljs-string">&quot;.title&quot;</span>); <span class="hljs-comment">//也可以添加参数。从div中移除一个.title的div</span><br>$(<span class="hljs-string">&quot;.del ul&quot;</span>).empty(); <span class="hljs-comment">//empty()，清空子元素</span><br><br>$(<span class="hljs-string">&quot;.del .end&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-comment">//detach()，与remove()一样，这两个方法都有一个返回值，返回被删除的DOM。它们的区别就在这个返回值身上</span><br><span class="hljs-keyword">var</span> end = $(<span class="hljs-string">&quot;.del .end&quot;</span>).detach(); <span class="hljs-comment">//再次添加后是有事件的</span><br><span class="hljs-comment">//var end=$(&#x27;.del .end&#x27;).remove();//再次添加后没有事件，不会弹出alert(1)了</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;.del&quot;</span>).append(end); <span class="hljs-comment">//1s后，被删除的那个元素会被重新添加上</span><br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h2 id="克隆与替换元素"><a href="#克隆与替换元素" class="headerlink" title="克隆与替换元素"></a>克隆与替换元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clone&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一段要被克隆的文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;replaceAll&quot;</span>&gt;</span>这是一段要主动替换的文字<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name1&quot;</span>&gt;</span>陈学辉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name2&quot;</span>&gt;</span>kaivon<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;replaceWidth&quot;</span>&gt;</span>这是一段要被动替换的文字<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.clone p&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-number">2</span>);<br>&#125;);<br><span class="hljs-comment">//$(&#x27;.clone p&#x27;).clone().appendTo(&#x27;.clone&#x27;);</span><br>$(<span class="hljs-string">&quot;.clone p&quot;</span>).clone(<span class="hljs-literal">true</span>).appendTo(<span class="hljs-string">&quot;.clone&quot;</span>); <span class="hljs-comment">//clone的参数为true时表示，会把事件也克隆了</span><br>$(<span class="hljs-string">&quot;&lt;h3&gt;使用replaceAll方法主动替换&lt;/h3&gt;&quot;</span>).replaceAll(<span class="hljs-string">&quot;.clone .replaceAll&quot;</span>); <span class="hljs-comment">//创建一个元素然后用它替换掉其它元素</span><br>$(<span class="hljs-string">&quot;.clone .name2&quot;</span>).replaceAll(<span class="hljs-string">&quot;.clone .name1&quot;</span>); <span class="hljs-comment">//使用已有的元素替换掉其它元素（剪切操作）</span><br>$(<span class="hljs-string">&quot;.clone .replaceWidth&quot;</span>).replaceWith(<span class="hljs-string">&quot;&lt;h3&gt;使用replaceWidth方法被动替换&lt;/h3&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="属性操作-通用属性操作"><a href="#属性操作-通用属性操作" class="headerlink" title="属性操作-通用属性操作"></a>属性操作-通用属性操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;attr&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/img_01.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">kaivon</span>=<span class="hljs-string">&quot;liu&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;img src=&quot;images/img_02.jpg&quot; alt=&quot;&quot; kaivon=&quot;liu&quot;&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;这是一个正经的输入框&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.attr img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>)); <span class="hljs-comment">//images/img_01.jpg（如果有多个img的话，它返回的是第一个img的src值）</span><br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).attr(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;这是一张美食图片&quot;</span>); <span class="hljs-comment">//如果有多个img的话，设置的是所有的img</span><br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).attr(&#123;<br>  <span class="hljs-comment">//同时设置多个属性</span><br>  <span class="hljs-attr">class</span>: <span class="hljs-string">&quot;delicious&quot;</span>,<br>  <span class="hljs-attr">alt</span>: <span class="hljs-string">&quot;美食&quot;</span>,<br>&#125;);<br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.attr img&quot;</span>).prop(<span class="hljs-string">&quot;src&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<br>  $(<span class="hljs-string">&quot;.attr img&quot;</span>).attr(<span class="hljs-string">&quot;kaivon&quot;</span>), <span class="hljs-comment">//liu</span><br>  $(<span class="hljs-string">&quot;.attr img&quot;</span>).prop(<span class="hljs-string">&quot;kaivon&quot;</span>) <span class="hljs-comment">//undefined</span><br>);<br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).prop(&#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;food&quot;</span>,<br>  <span class="hljs-attr">kaivon</span>: <span class="hljs-string">&quot;liuliu&quot;</span>, <span class="hljs-comment">//自定义的属性prop并没有添加到DOM标签身上，但是它会添加到DOM对象身上</span><br>&#125;);<br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).attr(<span class="hljs-string">&quot;kaivon&quot;</span>, <span class="hljs-string">&quot;liuliuliu&quot;</span>);<br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).removeAttr(<span class="hljs-string">&quot;kaivon&quot;</span>);<br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).removeProp(<span class="hljs-string">&quot;id&quot;</span>); <span class="hljs-comment">//删除的是DOM对象身上的属性，并不是DOM标签身上的属性</span><br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).prop(<span class="hljs-string">&quot;index&quot;</span>, <span class="hljs-number">5</span>);<br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.attr img&quot;</span>).prop(<span class="hljs-string">&quot;index&quot;</span>)); <span class="hljs-comment">//5 这条属性是添加在DOM对象身上</span><br>$(<span class="hljs-string">&quot;.attr img&quot;</span>).removeProp(<span class="hljs-string">&quot;index&quot;</span>);<br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.attr img&quot;</span>).prop(<span class="hljs-string">&quot;index&quot;</span>)); <span class="hljs-comment">//undefined removeProp是删除DOM对象身上的属性</span><br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.attr input&quot;</span>).val()); <span class="hljs-comment">//这是一个正经的输入框</span><br>$(<span class="hljs-string">&quot;.attr input&quot;</span>).val(<span class="hljs-string">&quot;这不是一个输入框&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="属性操作-css-类属性操作"><a href="#属性操作-css-类属性操作" class="headerlink" title="属性操作-css 类属性操作"></a>属性操作-css 类属性操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<br>  $(<span class="hljs-string">&quot;.css&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>), <span class="hljs-comment">//2px solid rgb(0, 0, 0)</span><br>  $(<span class="hljs-string">&quot;.css&quot;</span>).css(<span class="hljs-string">&quot;height&quot;</span>) <span class="hljs-comment">//19.9125px</span><br>);<br>$(<span class="hljs-string">&quot;.css h2&quot;</span>)<br>  .css(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;200px&quot;</span>)<br>  .css(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;100px&quot;</span>)<br>  .css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#ccc&quot;</span>)<br>  .text(<span class="hljs-string">&quot;插入一个标题&quot;</span>);<br><br>$(<span class="hljs-string">&quot;.css h2&quot;</span>).css(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;green&quot;</span>,<br>  <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;30px&quot;</span>,<br>  <span class="hljs-string">&quot;line-height&quot;</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>&#125;);<br>$(<span class="hljs-string">&quot;.css p&quot;</span>).css(&#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;200px&quot;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;200px&quot;</span>,<br>  <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>  <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px auto&quot;</span>,<br>  <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;2px solid #f00&quot;</span>,<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<br>  $(<span class="hljs-string">&quot;.css p&quot;</span>).width(), <span class="hljs-comment">//200</span><br>  $(<span class="hljs-string">&quot;.css p&quot;</span>).height(), <span class="hljs-comment">//200</span><br>  $(<span class="hljs-string">&quot;.css p&quot;</span>).innerWidth(), <span class="hljs-comment">//240获取包含padding的宽度（clientWidth）</span><br>  $(<span class="hljs-string">&quot;.css p&quot;</span>).innerHeight(), <span class="hljs-comment">//240</span><br>  $(<span class="hljs-string">&quot;.css p&quot;</span>).outerWidth(), <span class="hljs-comment">//244获取包含border的宽度（offsetWidth）</span><br>  $(<span class="hljs-string">&quot;.css p&quot;</span>).outerHeight() <span class="hljs-comment">//244</span><br>);<br>$(<span class="hljs-string">&quot;.css p&quot;</span>).width(<span class="hljs-number">300</span>).height(<span class="hljs-number">100</span>).innerWidth(<span class="hljs-number">400</span>).outerWidth(<span class="hljs-number">500</span>); <span class="hljs-comment">//给width与给innerWidth设置的都是width属性的值。但是innerWidth与outerWidth都会动态的算出一个宽度值，赋给width属性</span><br><br>$(<span class="hljs-string">&quot;.css&quot;</span>).css(<span class="hljs-string">&quot;position&quot;</span>, <span class="hljs-string">&quot;relative&quot;</span>); <span class="hljs-comment">//先把父级设置成相对定位</span><br>$(<span class="hljs-string">&quot;.css div&quot;</span>).css(&#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>  <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;green&quot;</span>,<br>  <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&quot;100px&quot;</span>,<br>  <span class="hljs-attr">top</span>: <span class="hljs-string">&quot;200px&quot;</span>,<br>&#125;);<br><span class="hljs-comment">//相对于document</span><br><span class="hljs-built_in">console</span>.log(<br>  $(<span class="hljs-string">&quot;.css div&quot;</span>).offset().left, <span class="hljs-comment">//110</span><br>  $(<span class="hljs-string">&quot;.css div&quot;</span>).offset().top <span class="hljs-comment">//1648.3499755859375</span><br>  <span class="hljs-comment">//此方法没有.right与.bottom</span><br>);<br>$(<span class="hljs-string">&quot;.css div&quot;</span>).offset(&#123;<br>  <span class="hljs-attr">left</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-attr">top</span>: <span class="hljs-number">1800</span>,<br>&#125;);<br><br><span class="hljs-comment">//获取相对于有定位的父级的位置信息</span><br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.css div&quot;</span>).position().left, $(<span class="hljs-string">&quot;.css div&quot;</span>).position().top);<br><br><span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">document</span>).scrollTop(), $(<span class="hljs-built_in">document</span>).scrollLeft());<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-built_in">document</span>).scrollTop(<span class="hljs-number">300</span>);<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><h2 id="获取后代元素"><a href="#获取后代元素" class="headerlink" title="获取后代元素"></a>获取后代元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child mb&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>yellow<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.child&quot;</span>).children().css(<span class="hljs-string">&quot;border-color&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>); <span class="hljs-comment">//.children()获取所有子元素(第一层)</span><br>$(<span class="hljs-string">&quot;.child&quot;</span>).children(<span class="hljs-string">&quot;:eq(1)&quot;</span>).css(<span class="hljs-string">&quot;border-width&quot;</span>, <span class="hljs-string">&quot;3px&quot;</span>); <span class="hljs-comment">//可以接收一个选择器的参数，这个选择器用来过滤子元素</span><br>$(<span class="hljs-string">&quot;.child&quot;</span>).find(<span class="hljs-string">&quot;span:eq(0)&quot;</span>).css(&#123;<br>  <span class="hljs-comment">//.find()获取匹配到的后代元素。它与children不同的地方为：children找到的是子元素，find找到的是后代元素</span><br>  <span class="hljs-string">&quot;font-size&quot;</span>: <span class="hljs-string">&quot;30px&quot;</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="获取祖先元素"><a href="#获取祖先元素" class="headerlink" title="获取祖先元素"></a>获取祖先元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent mb&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>white<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>black<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>orange<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>gold<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>grey<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.parent li ul li:first&quot;</span>).parent(<span class="hljs-string">&quot;ul&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;4px solid blue&quot;</span>); <span class="hljs-comment">//.parent()获取父元素。也可以加一个参数.ul。就表示要找到父级必需有个class</span><br><span class="hljs-comment">//$(&#x27;.parent li ul li:first&#x27;).parents().css(&#x27;border&#x27;,&#x27;2px solid purple&#x27;);</span><br><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.parent li ul li:first&quot;</span>).parents()); <span class="hljs-comment">//.parents()获取祖先元素。所有祖先元素都会被找到，一直找到HTML</span><br>$(<span class="hljs-string">&quot;.parent li ul li:first&quot;</span>).parents(<span class="hljs-string">&quot;ul&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;2px solid purple&quot;</span>);<br>$(<span class="hljs-string">&quot;.parent li ul li:first&quot;</span>)<br>  .parentsUntil(<span class="hljs-string">&quot;li&quot;</span>)<br>  .css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid purple&quot;</span>); <span class="hljs-comment">//.parentsUntil()获取祖先元素（但是有个范围，找到li就不再往上找了）</span><br>$(<span class="hljs-string">&quot;.parent li ul li:first&quot;</span>).offsetParent().css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid teal&quot;</span>); <span class="hljs-comment">//.offsetParent()获取最近的有定位的祖先元素</span><br></code></pre></td></tr></table></figure><h2 id="获取祖先元素-closest"><a href="#获取祖先元素-closest" class="headerlink" title="获取祖先元素.closest()"></a>获取祖先元素.closest()</h2><p>获取祖先元素，与 parents 有点像。但区别是 closest 会找自己，parents 不会找自己</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;closest mb&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pink<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.closest li ul li&quot;</span>).closest(<span class="hljs-string">&quot;ul&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;2px solid purple&quot;</span>);<br><br><span class="hljs-comment">//$(&#x27;.closest li ul li&#x27;).parents(&#x27;li&#x27;).css(&#x27;border&#x27;,&#x27;5px solid purple&#x27;);</span><br>$(<span class="hljs-string">&quot;.closest li ul li&quot;</span>).closest(<span class="hljs-string">&quot;li&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid purple&quot;</span>); <span class="hljs-comment">//会从自己查起，如果自己的标签满足的话，自己的标签就算</span><br></code></pre></td></tr></table></figure><h2 id="获取后面的兄弟元素"><a href="#获取后面的兄弟元素" class="headerlink" title="获取后面的兄弟元素"></a>获取后面的兄弟元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;next mb&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>purple<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>cyan<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pink<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>brown<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>skyblue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.next li:first&quot;</span>).next(<span class="hljs-string">&quot;li&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;cyan&quot;</span>); <span class="hljs-comment">//.next()获取后面紧临的兄弟元素。参数也是个选择器，可选</span><br>$(<span class="hljs-string">&quot;.next li:first&quot;</span>).nextAll(<span class="hljs-string">&quot;li&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid #000&quot;</span>); <span class="hljs-comment">//.nextAll()获取后面所有的同辈兄弟元素</span><br>$(<span class="hljs-string">&quot;.next li:first&quot;</span>).nextUntil(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid red&quot;</span>); <span class="hljs-comment">//获取后面所有的同辈兄弟元素（但是有个范围，找到div就不找了）</span><br></code></pre></td></tr></table></figure><h2 id="获取前面的兄弟元素-与-next-一样"><a href="#获取前面的兄弟元素-与-next-一样" class="headerlink" title="获取前面的兄弟元素(与 next 一样)"></a>获取前面的兄弟元素(与 next 一样)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prev mb&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>skyblue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>brown<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pink<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>cyan<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>purple<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.prev li:last&quot;</span>).prev(<span class="hljs-string">&quot;li&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;cyan&quot;</span>);<br>$(<span class="hljs-string">&quot;.prev li:eq(3)&quot;</span>).prevAll(<span class="hljs-string">&quot;li&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid #000&quot;</span>);<br>$(<span class="hljs-string">&quot;.prev li:eq(3)&quot;</span>).prevUntil(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid red&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="获取所有的兄弟节点"><a href="#获取所有的兄弟节点" class="headerlink" title="获取所有的兄弟节点"></a>获取所有的兄弟节点</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;siblings&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;select&quot;</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;select&quot;</span>&gt;</span>yellow<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pink<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.siblings li:eq(2)&quot;</span>).siblings().css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;5px solid skyblue&quot;</span>);<br>$(<span class="hljs-string">&quot;.siblings li:eq(2)&quot;</span>).siblings(<span class="hljs-string">&quot;.select&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>); <span class="hljs-comment">//添加了参数，进行过滤</span><br></code></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>事件名称函数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>通过on添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>通过one添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>解除事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span>&gt;</span>trigger触发事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;trigger&quot;</span>&gt;</span>trigger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;triggerHandler&quot;</span>&gt;</span>triggerHandler<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取焦点&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//绑定事件1：通过事件名称函数</span><br>$(<span class="hljs-string">&quot;#btn1&quot;</span>)<br>  .mouseover(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>);<br>  &#125;)<br>  .mouseout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;grey&quot;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>blue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>yellow<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//绑定事件2：通过on添加</span><br>$(<span class="hljs-string">&quot;#btn2&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;#btn2&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kaivon&quot;</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(event.data.name);<br>&#125;);<br>$(<span class="hljs-string">&quot;#btn3&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;h2&quot;</span>, &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-comment">//$(this)指向h2</span><br>  $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;1px solid &quot;</span> + event.data.color);<br>&#125;);<br><span class="hljs-comment">//on可以添加多个事件</span><br>$(<span class="hljs-string">&quot;#btn2&quot;</span>).on(&#123;<br>  <span class="hljs-attr">mouseover</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">mouseout</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;cyan&quot;</span>);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bubble&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>陈学辉<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//绑定事件3：one()</span><br>$(<span class="hljs-string">&quot;#btn4&quot;</span>).one(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;button&quot;</span>, &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;purple&quot;</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>  $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, event.data.color);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;只会打印一次&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span>&gt;</span>链式操作<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//解除事件：off()</span><br>$(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//$(&#x27;#btn1&#x27;).off();//没有参数，会把所有的事件全部解除</span><br>  $(<span class="hljs-string">&quot;#btn1&quot;</span>).off(<span class="hljs-string">&quot;mouseover&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">//手动触发绑定事件：trigger()</span><br>$(<span class="hljs-string">&quot;#btn6&quot;</span>).on(&#123;<br>  <span class="hljs-attr">click</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;btn6的点击事件&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">mouseover</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event, name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;btn6的鼠标移入事件：&quot;</span> + name + <span class="hljs-string">&quot; : &quot;</span> + age);<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">end</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;这是一个自定义的事件&quot;</span>);<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#btn6&quot;</span>).trigger(<span class="hljs-string">&quot;click&quot;</span>);<br>&#125;, <span class="hljs-number">500</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#btn6&quot;</span>).trigger(<span class="hljs-string">&quot;mouseover&quot;</span>, [<span class="hljs-string">&quot;kaivon&quot;</span>, <span class="hljs-number">18</span>]);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#btn6&quot;</span>).trigger(<span class="hljs-string">&quot;end&quot;</span>);<br>&#125;, <span class="hljs-number">1500</span>);<br></code></pre></td></tr></table></figure><h2 id="手动触发绑定事件：triggerHandler"><a href="#手动触发绑定事件：triggerHandler" class="headerlink" title="手动触发绑定事件：triggerHandler()"></a>手动触发绑定事件：triggerHandler()</h2><h2 id="trigger-与-triggerHandler-的区别"><a href="#trigger-与-triggerHandler-的区别" class="headerlink" title="trigger 与 triggerHandler 的区别"></a>trigger 与 triggerHandler 的区别</h2><h3 id="区别-1：trigger-会触发事件的默认行为；triggerHandler-不会触发事件的默认行为"><a href="#区别-1：trigger-会触发事件的默认行为；triggerHandler-不会触发事件的默认行为" class="headerlink" title="区别 1：trigger()会触发事件的默认行为；triggerHandler()不会触发事件的默认行为"></a>区别 1：trigger()会触发事件的默认行为；triggerHandler()不会触发事件的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).focus(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取到焦点了&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;#trigger&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;input&quot;</span>).trigger(<span class="hljs-string">&quot;focus&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;#triggerHandler&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;input&quot;</span>).triggerHandler(<span class="hljs-string">&quot;focus&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="区别-2：trigger-会执行所有选中元素的事件；triggerHandler-只会执行第一个元素的事件"><a href="#区别-2：trigger-会执行所有选中元素的事件；triggerHandler-只会执行第一个元素的事件" class="headerlink" title="区别 2：trigger()会执行所有选中元素的事件；triggerHandler()只会执行第一个元素的事件"></a>区别 2：trigger()会执行所有选中元素的事件；triggerHandler()只会执行第一个元素的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#color li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">this</span>).html() + <span class="hljs-string">&quot; &quot;</span> + $(<span class="hljs-built_in">this</span>).index());<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//$(&#x27;#color li&#x27;).trigger(&#x27;click&#x27;);</span><br>  $(<span class="hljs-string">&quot;#color li&quot;</span>).triggerHandler(<span class="hljs-string">&quot;click&quot;</span>);<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><h3 id="区别-3：trigger-会冒泡；triggerHandler-不会冒泡"><a href="#区别-3：trigger-会冒泡；triggerHandler-不会冒泡" class="headerlink" title="区别 3：trigger()会冒泡；triggerHandler()不会冒泡"></a>区别 3：trigger()会冒泡；triggerHandler()不会冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#bubble h2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;h2被点击了&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;#bubble span&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;span被点击了&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//$(&#x27;#bubble span&#x27;).trigger(&#x27;click&#x27;);</span><br>  $(<span class="hljs-string">&quot;#bubble span&quot;</span>).triggerHandler(<span class="hljs-string">&quot;click&quot;</span>);<br>&#125;, <span class="hljs-number">2500</span>);<br></code></pre></td></tr></table></figure><h3 id="区别-4：trigger-可以使用链式操作；triggerHandler-不可以使用链式操作"><a href="#区别-4：trigger-可以使用链式操作；triggerHandler-不可以使用链式操作" class="headerlink" title="区别 4：trigger()可以使用链式操作；triggerHandler()不可以使用链式操作"></a>区别 4：trigger()可以使用链式操作；triggerHandler()不可以使用链式操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn7&quot;</span>).on(&#123;<br>  <span class="hljs-attr">mouseover</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;200px&quot;</span>);<br>    <span class="hljs-comment">//return $(this);就能使triggerHandler能链式操作</span><br>  &#125;,<br>  <span class="hljs-attr">mouseout</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;200px&quot;</span>);<br>  &#125;,<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// $(&#x27;#btn7&#x27;).trigger(&#x27;mouseover&#x27;).trigger(&#x27;mouseout&#x27;);</span><br>  $(<span class="hljs-string">&quot;#btn7&quot;</span>).triggerHandler(<span class="hljs-string">&quot;mouseover&quot;</span>).triggerHandler(<span class="hljs-string">&quot;mouseout&quot;</span>);<br>&#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>事件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn8&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(event);<br>&#125;);<br>$(<span class="hljs-string">&quot;#btn9&quot;</span>)[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(ev);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="内置特效"><a href="#内置特效" class="headerlink" title="内置特效"></a>内置特效</h1><h2 id="基本特效"><a href="#基本特效" class="headerlink" title="基本特效"></a>基本特效</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toggle&quot;</span>&gt;</span>隐藏/显示切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#hide&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//$(&#x27;#box&#x27;).hide(&#x27;fast&#x27;);</span><br>  <span class="hljs-comment">//$(&#x27;#box&#x27;).hide(&#x27;nomal&#x27;);</span><br>  <span class="hljs-comment">//$(&#x27;#box&#x27;).hide(&#x27;slow&#x27;);</span><br>  $(<span class="hljs-string">&quot;#box&quot;</span>).hide(<span class="hljs-number">4000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;隐藏动画完成了&quot;</span>);<br>  &#125;);<br>&#125;);<br>$(<span class="hljs-string">&quot;#show&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).show(<span class="hljs-string">&quot;nomal&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;显示动画完成了&quot;</span>);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br>$(<span class="hljs-string">&quot;#toggle&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).toggle(<span class="hljs-string">&quot;nomal&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> re = n++ % <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//console.log(n++ % 2);</span><br>    <span class="hljs-keyword">if</span> (re == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;隐藏动画结束了&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;显示动画结束了&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="滑动特效"><a href="#滑动特效" class="headerlink" title="滑动特效"></a>滑动特效</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;slideUp&quot;</span>&gt;</span>滑动隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;slideDown&quot;</span>&gt;</span>滑动显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;slideToggle&quot;</span>&gt;</span>滑动隐藏/显示切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#slideUp&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).slideUp(<span class="hljs-number">4000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;滑动隐藏动画结束了&quot;</span>);<br>  &#125;);<br>&#125;);<br>$(<span class="hljs-string">&quot;#slideDown&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).slideDown(<span class="hljs-string">&quot;nomal&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;滑动显示动画结束了&quot;</span>);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br>$(<span class="hljs-string">&quot;#slideToggle&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).slideToggle(<span class="hljs-string">&quot;nomal&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> re = n++ % <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//console.log(n++ % 2);</span><br><br>    <span class="hljs-keyword">if</span> (re == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;滑动隐藏动画结束了&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;滑动显示动画结束了&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="渐变特效"><a href="#渐变特效" class="headerlink" title="渐变特效"></a>渐变特效</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fadeOut&quot;</span>&gt;</span>淡出隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fadeIn&quot;</span>&gt;</span>淡入显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fadeToggle&quot;</span>&gt;</span>淡出隐藏/淡入显示切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fadeTo&quot;</span>&gt;</span>透明度变化<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#fadeOut&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).fadeOut(<span class="hljs-string">&quot;slow&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;淡出隐藏动画结束了&quot;</span>);<br>  &#125;);<br>&#125;);<br>$(<span class="hljs-string">&quot;#fadeIn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).fadeIn(<span class="hljs-string">&quot;slow&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;淡入显示动画结束了&quot;</span>);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br>$(<span class="hljs-string">&quot;#fadeToggle&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).fadeToggle(<span class="hljs-string">&quot;nomal&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> re = n++ % <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//console.log(n++ % 2);</span><br><br>    <span class="hljs-keyword">if</span> (re == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;淡出隐藏动画结束了&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;淡入显示动画结束了&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#fadeTo&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).fadeTo(<span class="hljs-string">&quot;nomal&quot;</span>, <span class="hljs-number">0.5</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;透明度变化完成了&quot;</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;animate&quot;</span>&gt;</span>自定义动画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* $(&#x27;#animate&#x27;).click(function () &#123;</span><br><span class="hljs-comment">$(&#x27;#box&#x27;).animate(&#123;</span><br><span class="hljs-comment">width: 200,</span><br><span class="hljs-comment">left: &#x27;+=50&#x27;,</span><br><span class="hljs-comment">height: &#x27;toggle&#x27;,</span><br><span class="hljs-comment">&#x27;border-radius&#x27;: 50</span><br><span class="hljs-comment">&#125;, 500, function () &#123;</span><br><span class="hljs-comment">console.log(&#x27;运动结束了&#x27;);</span><br><span class="hljs-comment">&#125;);</span><br><span class="hljs-comment">&#125;); */</span><br><br><span class="hljs-comment">//链式操作</span><br>$(<span class="hljs-string">&quot;#animate&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>)<br>    .animate(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">200</span> &#125;, <span class="hljs-string">&quot;fast&quot;</span>)<br>    .delay(<span class="hljs-number">2000</span>) <span class="hljs-comment">//让后面的动画延迟执行</span><br>    .animate(&#123; <span class="hljs-attr">height</span>: <span class="hljs-number">200</span> &#125;, <span class="hljs-string">&quot;slow&quot;</span>)<br>    .delay(<span class="hljs-number">1000</span>)<br>    .animate(&#123; <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span> &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="控制动画"><a href="#控制动画" class="headerlink" title="控制动画"></a>控制动画</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>暂停动画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;finish&quot;</span>&gt;</span>完成动画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/img_02.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#stop&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).stop();<br>&#125;);<br>$(<span class="hljs-string">&quot;#finish&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&quot;#box&quot;</span>).finish();<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>get请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ajaxGet&quot;</span>&gt;</span>ajax get请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#get&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $.get(<br>    <span class="hljs-string">&quot;http://api.duyiedu.com/api/student/findAll&quot;</span>,<br>    &#123; <span class="hljs-attr">appkey</span>: <span class="hljs-string">&quot;kaivon_1574822824764&quot;</span> &#125;,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data);<br>    &#125;,<br>    <span class="hljs-string">&quot;json&quot;</span><br>  );<br>&#125;);<br>$(<span class="hljs-string">&quot;#ajaxGet&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $.ajax(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://api.duyiedu.com/api/student/findAll&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-comment">/* data:&#123;</span><br><span class="hljs-comment">appkey:&#x27;kaivon_1574822824764&#x27;,</span><br><span class="hljs-comment">&#125;, */</span><br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;appkey=kaivon_1574822824764&quot;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-comment">//json格式展示</span><br>    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data);<br>      <span class="hljs-comment">//后端已经给处理了跨域</span><br>    &#125;,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginBtn1&quot;</span>&gt;</span>登录(post请求)<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginBtn2&quot;</span>&gt;</span>登录(ajax post请求)<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#loginBtn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> username = $(<span class="hljs-string">&quot;#login input[name=account]&quot;</span>).val();<br>  <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#login input[name=password]&quot;</span>).val();<br><br>  $.post(<br>    <span class="hljs-string">&quot;http://api.duyiedu.com/api/student/stuLogin&quot;</span>,<br>    &#123; <span class="hljs-attr">appkey</span>: <span class="hljs-string">&quot;kaivon_1574822824764&quot;</span>, <span class="hljs-attr">account</span>: username, <span class="hljs-attr">password</span>: password &#125;,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data);<br>    &#125;,<br>    <span class="hljs-string">&quot;json&quot;</span><br>  );<br><br>  <span class="hljs-comment">//console.log(username,password);</span><br>&#125;);<br><br>$(<span class="hljs-string">&quot;#loginBtn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $.ajax(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://api.duyiedu.com/api/student/stuLogin&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">appkey</span>: <span class="hljs-string">&quot;kaivon_1574822824764&quot;</span>,<br>      <span class="hljs-attr">account</span>: $(<span class="hljs-string">&quot;#login input[name=account]&quot;</span>).val(),<br>      <span class="hljs-attr">password</span>: $(<span class="hljs-string">&quot;#login input[name=password]&quot;</span>).val(),<br>    &#125;,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data);<br>    &#125;,<br>    <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;错误原因：&quot;</span> + status);<br>    &#125;,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="JSON-请求"><a href="#JSON-请求" class="headerlink" title="JSON 请求"></a>JSON 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;json&quot;</span>&gt;</span>JSON请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#json&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $.getJSON(<br>    <span class="hljs-string">&quot;http://api.duyiedu.com/api/student/findAll&quot;</span>,<br>    &#123; <span class="hljs-attr">appkey</span>: <span class="hljs-string">&quot;kaivon_1574822824764&quot;</span> &#125;,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data);<br>    &#125;<br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h1><p><a href="https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1622446392834-d913ca5d-840a-4f66-9c03-c53a2dc5b092.7z?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/7z/758572/1622446392834-d913ca5d-840a-4f66-9c03-c53a2dc5b092.7z%22,%22name%22:%22jquery%E6%8F%92%E4%BB%B6.7z%22,%22size%22:102317,%22type%22:%22%22,%22ext%22:%227z%22,%22status%22:%22done%22,%22taskId%22:%22u391ff599-7fc9-429e-b762-2df470f2d23%22,%22taskType%22:%22transfer%22,%22id%22:%22x7qf3%22,%22card%22:%22file%22%7D">jquery 插件.7z</a><br>jsonp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- JSONP Json width Padding --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jsonp&quot;</span>&gt;</span>jsonp<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./jQuery源码/jquery-3.4.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  $(<span class="hljs-string">&quot;#jsonp&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    $.ajax(&#123;</span><br><span class="javascript">      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>, <span class="hljs-comment">//支持跨域</span></span><br><span class="javascript">      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  <span class="hljs-comment">// Request URL: http://developer.duyiedu.com/edu/testJsonp?callback=jQuery341041011376751943684_1615470566633&amp;_=1615470566634</span></span><br><span class="javascript">  <span class="hljs-comment">// jQuery341041011376751943684回调函数</span></span><br><span class="javascript">  <span class="hljs-comment">// _时间戳，表示阻止浏览器缓存数据，防止在新数据来了时，还用缓存数据</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加上 method:’post’,请求方式依旧 Request Method: GET<br>因为 JQuery 做出是否同源判断：<br>自己地址和请求地址同源：设置什么按什么发送<br>自己地址和请求地址不同源：跨域，get<br>JSONP 原理<br>script 标签发送网络请求<br>待学</p><h1 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h1><h2 id="1、给-jquery-对象本身扩展方法-abc"><a href="#1、给-jquery-对象本身扩展方法-abc" class="headerlink" title="1、给 jquery 对象本身扩展方法     $.abc()"></a>1、给 jquery 对象本身扩展方法     $.abc()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.extend(&#123;<br>  <span class="hljs-attr">lg</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>  &#125;,<br>&#125;);<br>$.lg(<span class="hljs-string">&quot;kaivon&quot;</span>); <span class="hljs-comment">//kaivon</span><br></code></pre></td></tr></table></figure><h2 id="2、给-jquery-DOM-对象扩展方法-‘-box’-abc"><a href="#2、给-jquery-DOM-对象扩展方法-‘-box’-abc" class="headerlink" title="2、给 jquery DOM 对象扩展方法       $(‘#box’).abc()"></a>2、给 jquery DOM 对象扩展方法       $(‘#box’).abc()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.fn.extend(&#123;<br>  <span class="hljs-attr">changeColor</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//$(this) 指向使用的DOM对象</span><br>    $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>    <span class="hljs-keyword">return</span> $(<span class="hljs-built_in">this</span>);<br>  &#125;,<br>&#125;);<br>$.fn.changeSize = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;fontSize&quot;</span>, <span class="hljs-number">50</span>);<br>  <span class="hljs-keyword">return</span> $(<span class="hljs-built_in">this</span>);<br>&#125;;<br>$(<span class="hljs-string">&quot;h1&quot;</span>).changeColor().changeSize();<br></code></pre></td></tr></table></figure><h3 id="封装拖拽的插件"><a href="#封装拖拽的插件" class="headerlink" title="封装拖拽的插件"></a>封装拖拽的插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.fn.draggable = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;<br>  options = options || &#123;&#125;;<br>  options.limit = options.limit || <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">var</span> This = $(<span class="hljs-built_in">this</span>);<br><br>  <span class="hljs-comment">//修改DOM元素的样式</span><br>  $(<span class="hljs-built_in">this</span>).css(&#123;<br>    <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">cursor</span>: <span class="hljs-string">&quot;move&quot;</span>,<br>  &#125;);<br><br>  $(<span class="hljs-built_in">this</span>).mousedown(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> disX = ev.pageX - $(<span class="hljs-built_in">this</span>).offset().left;<br>    <span class="hljs-keyword">var</span> disY = ev.pageY - $(<span class="hljs-built_in">this</span>).offset().top;<br><br>    $(<span class="hljs-built_in">document</span>).mousemove(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> l = ev.pageX - disX;<br>      <span class="hljs-keyword">var</span> t = ev.pageY - disY;<br><br>      <span class="hljs-comment">//如果用户传了limit:true，这个参数，就要处理拖拽的范围了</span><br>      <span class="hljs-keyword">if</span> (options.limit) &#123;<br>        <span class="hljs-keyword">if</span> (l &lt; <span class="hljs-number">0</span>) &#123;<br>          l = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; $(<span class="hljs-built_in">document</span>).innerWidth() - This.outerWidth()) &#123;<br>          l = $(<span class="hljs-built_in">document</span>).innerWidth() - This.outerWidth();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) &#123;<br>          t = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t &gt; $(<span class="hljs-built_in">document</span>).innerHeight() - This.outerHeight()) &#123;<br>          t = $(<span class="hljs-built_in">document</span>).innerHeight() - This.outerHeight();<br>        &#125;<br>      &#125;<br><br>      This.css(&#123;<br>        <span class="hljs-attr">left</span>: l,<br>        <span class="hljs-attr">top</span>: t,<br>      &#125;);<br>    &#125;);<br><br>    $(<span class="hljs-built_in">document</span>).mouseup(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      $(<span class="hljs-built_in">this</span>).off();<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;);<br>&#125;;<br><br>$(<span class="hljs-string">&quot;#box&quot;</span>).draggable(&#123;<br>  <span class="hljs-attr">limit</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#drag&quot;</span>).draggable();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本地化存储</title>
    <link href="/2020/02/10/%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%AD%98%E5%82%A8/"/>
    <url>/2020/02/10/%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、cookie"><a href="#一、cookie" class="headerlink" title="一、cookie"></a>一、cookie</h1><blockquote><p>为什么有 cookie?</p></blockquote><p>http 上下文无关，无状态协议<br>set-cookie 服务器设置,前端无法设置<br><img src="/img/3-1.png"><br>现象：<br>登录百度，但是百度知道，百度贴吧都顺便登录：Application 下 Domain 决定的<br>cookie 性质：<br>1、cookie 不可跨域<br>2、cookie 存储在浏览器里面，同一个浏览器下的不同页面能互相访问；不同浏览器同一个域名下不能访问<br>3、cookie 有数量与大小的限制<br>1、数量在 50 个左右<br>2、大小在 4kb 左右<br>4、cookie 的存储时间非常灵活<br>5、cookie 不光可以服务器设置，客户端（前端）也可以设置</p><p>前端设置 cookie：document.cookie<br>格式：key:value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&quot;name=kaivon&quot;</span>;<br><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&quot;name=kaivon; age=18&quot;</span>; <span class="hljs-comment">//document.cookie只能设置一次cookie，这次设置是错的</span><br></code></pre></td></tr></table></figure><p>cookie 的属性<br>1、name   cookie 的名字，唯一性<br>2、value cookie 的值<br>3、domain   设置 cookie 在哪个域下是有效的<br>4、path   cookie 的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//cookie属性：只能在规定的url下使用</span><br><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&#x27;color=red; domain=127.0.0.2; path=/docs&#x27;</span>;<span class="hljs-comment">//路径随意填</span><br>访问怎么访问呢？<br>把路径改成http:<span class="hljs-comment">//127.0.0.1:5500/docs就有color属性了</span><br></code></pre></td></tr></table></figure><p>5、expires  cookie 的过期时间   时间点。如果不设置，默认浏览器关闭时候删除(expires:session)<br>（会话期 cookie）<br>要求的日期格式 GMT</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&#x27;margin=20; expires=&#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2008</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//2月1号，月份从0开始</span><br>因为<span class="hljs-number">2008</span>已经过去，导致margin过期，消失<br>注意：expires取得是客户端电脑的时间<br></code></pre></td></tr></table></figure><p>6、max-age  cookie 的有效期   秒为单位的时间段<br>-1（临时 cookies） 0（马上要挂了） 正数（有效）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//document.cookie=&#x27;padding=30; max-age=1&#x27;;1s over</span><br><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&quot;padding=30; max-age=5&quot;</span>;<br></code></pre></td></tr></table></figure><p>之前是写，现在我想查看一下 cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.cookie);<br>&#125;, <span class="hljs-number">4000</span>);<br></code></pre></td></tr></table></figure><p>7、HttpOnly 有这个标记的 cookie，前端是无法获取的<br>8、Secure   设置 cookie 只能有过 https 协议传输<br>9、SameSite 设置 cookie 在跨域请求的时候不能被发送</p><h1 id="二、localstorage"><a href="#二、localstorage" class="headerlink" title="二、localstorage"></a>二、localstorage</h1><p><strong>H5 提供了 Web Storage（和 cookie 一样，不能跨域）</strong><br>**5Mb **<br><strong>与 http 无关</strong><br><strong>保存用户偏好设置，表单历史输入，购物车都是 localStorage</strong><br><strong>web strorage 提供了两个对象：</strong><br>**localStorage 不会过期    **<br><strong>sessionStorage 会过期（会话）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.dir(Storage);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">localStorage</span>, sessionStorage); <span class="hljs-comment">//继承Storage上的属性和方法</span><br></code></pre></td></tr></table></figure><p>**            1、length    本地存储数据的数量**<br>**            2、key()     通过索引找到存储的数据**<br>**            3、getItem()     通过键名取到本地存储的数据**<br>**            4、setItem()     设置一个本地存储数据**<br>**            5、removeItem()  删除一个本地存储数据**<br>**            6、clear()       清空本地存储数据**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">localStorage</span>.length);<br><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;kaivon&quot;</span>);<br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>);<br><span class="hljs-comment">//存储对象</span><br><span class="hljs-keyword">var</span> color = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]; <span class="hljs-comment">//&quot;red&quot;, &quot;green&quot;</span><br><span class="hljs-keyword">var</span> color = &#123; <span class="hljs-attr">c1</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">c2</span>: <span class="hljs-string">&quot;green&quot;</span> &#125;; <span class="hljs-comment">//[object Object]</span><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-built_in">JSON</span>.stringify(color));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;color&quot;</span>)));<br><br><span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&quot;color&quot;</span>); <span class="hljs-comment">//删除属性</span><br><span class="hljs-comment">//localStorage.clear();完全清空</span><br></code></pre></td></tr></table></figure><p><strong>删除 localStroage 的其他方法：浏览器无痕模式</strong></p><h1 id="三、Restful-API"><a href="#三、Restful-API" class="headerlink" title="三、Restful API"></a><strong>三、Restful API</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  &#123;dede:arclist typeid=&quot;1&quot; row=&quot;6&quot;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>[field:title function=&quot;cn_substr(@me, 63)&quot; /]<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;/dede:arclist&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>dede cms</strong></p><h3 id="Restful-API-是一种互联网软件架构的设计规范、设计指南、设计风格、设计原则"><a href="#Restful-API-是一种互联网软件架构的设计规范、设计指南、设计风格、设计原则" class="headerlink" title="Restful API 是一种互联网软件架构的设计规范、设计指南、设计风格、设计原则"></a>Restful API 是一种互联网软件架构的设计规范、设计指南、设计风格、设计原则</h3><p><strong>1、API   Application Programming Interface        应用程序接口（接口）</strong><br>**2、Rest  Resource Representational State Transfer    **<br><strong>apache</strong><br>（1）Resource<br>资源  <br>URI:统一资源标识符。是一个字符串。用来标识互联网资源的名称<br>URL:统一资源定位符。它是一种具体的 URI<br>（2）Representational<br>表现层<br>文本  text\html\xml\json\二进制<br>（3）State Transfer<br>状态转化</p><h3 id="Restful-API-具体设计规范"><a href="#Restful-API-具体设计规范" class="headerlink" title="Restful API 具体设计规范"></a>Restful API 具体设计规范</h3><p><strong>1、协议</strong><br>**     HTTPS**<br><strong>2、域名</strong><br>**             <strong><a href="https://api.kaivon.com/"><strong>https://api.kaivon.com</strong></a><br>**             <strong><a href="https://wwww.kaivon.com/api/"><strong>https://www.kaivon.com/api/</strong></a><br><strong>3、版本</strong><br>**             <strong><a href="https://api.kaivon.com/v1"><strong>https://api.kaivon.com/v1</strong></a><br><strong>4、路径</strong><br>**             <strong><a href="https://api.kaivon.com/v1/blogs"><strong>https://api.kaivon.com/v1/blogs</strong></a><br>** 5、方法</strong><br>**         1、GET    获取资源</strong><br>**                        GET <strong><a href="https://api.kaivon.com/v1/blogs"><strong>https://api.kaivon.com/v1/blogs</strong></a></strong>  获取所有的文章</strong><br>**                        GET <strong><a href="https://api.kaivon.com/v1/blogs/id"><strong>https://api.kaivon.com/v1/blogs/id</strong></a></strong>   获取到某一篇文章</strong><br>**         2、POST   添加资源**<br>**                        POST <strong><a href="https://api.kaivon.com/v1/blogs"><strong>https://api.kaivon.com/v1/blogs</strong></a></strong>     增加一篇文章**<br>**         3、PUT     修改资源（客户端需要提供改变后的完整资源）**<br>**                        POST <strong><a href="https://api.kaivon.com/v1/blogs/id"><strong>https://api.kaivon.com/v1/blogs/id</strong></a></strong>  修改某一篇文章**<br>**       4、PATCH  更新资源（客户端需要提供改变的属性）**<br>**                        PATCH <strong><a href="https://api.kaivon.com/v1/blogs/id"><strong>https://api.kaivon.com/v1/blogs/id</strong></a></strong>     更新某一篇文章**<br>**         5、DELETE     删除资源**<br>**                        DELETE <strong><a href="https://api.kaivon.com/v1/blogs/id"><strong>https://api.kaivon.com/v1/blogs/id</strong></a></strong>    删除某一篇文章**<br>** 6、数据过滤**<br>**           1、?limit=10  指定返回数据的数量**<br>**                        GET <strong><a href="https://api.kaivon.com/v1/blogs?limit=10"><strong>https://api.kaivon.com/v1/blogs?limit=10</strong></a><br>**           2、?offset=10     指定一个偏移量</strong><br>**                        GET <strong><a href="https://api.kaivon.com/v1/blogs?offset=10"><strong>https://api.kaivon.com/v1/blogs?offset=10</strong></a><br>**           3、?page=2&amp;per_page=10    指定第几页，以及每页的数量</strong><br>**                        GET <strong><a href="https://api.kaivon.com/v1/blogs?offset=10"><strong>https://api.kaivon.com/v1/blogs?offset=10</strong></a><br>**            4、?sortby=time&amp;order=arc     指定返回结果按照哪个属性排序，以及排序的方式</strong><br>**                        GET <strong><a href="https://api.kaivon.com/v1/blogs?sortby=time&order=arc"><strong>https://api.kaivon.com/v1/blogs?sortby=time&amp;order=arc</strong></a><br>** 7、状态码</strong><br>** 8、返回结果**<br>**                    1、GET        资源对象列表（数组），如果取的是一条数据，那返回一个对象**<br>**                    2、POST       返回添加后的资源对象，以及有可能会加上是否成功**<br>**                    3、PUT        返回修改后的资源对象，以及有可能会加上是否成功**<br>**                    4、PATCH  返回更新后的资源对象，以及有可能会加上是否成功**<br>**                    5、DELETE     返回空，以及有可能会加上是否成功**<br>** 9、返回的数据格式**<br>**                     尽量使用 JSON，避免使用 XML**</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>1、看 URL 就知道要什么</strong><br><strong>2、看 HTTP method 就知道干什么</strong><br><strong>3、看 HTTP stuts code 就知道结果如何</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端网络</title>
    <link href="/2020/01/28/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/"/>
    <url>/2020/01/28/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-互联网起源"><a href="#1-互联网起源" class="headerlink" title="1.互联网起源"></a>1.互联网起源</h1><p>1969 年起源 加利福尼亚大学洛杉矶分校 斯坦福大学 加利福尼亚大学 犹他州大学<br>互联网——Internet（因特网、英特网），网际网路<br>1989 年，欧洲粒子物理研究所——协议（格式）WWW（world wide web)万维网<br>1991 年，普及应用</p><blockquote><p>查看 ip：</p></blockquote><ul><li>mac：ifconfig</li><li>window：pconfig</li></ul><p>图灵：计算机科学之父<br>冯诺依曼：计算机之父<br>手机和平板也算计算机——冯诺依曼式计算机</p><blockquote><p>冯诺依曼式计算机一一冯诺依曼（面试题）</p></blockquote><p>运算器:<br>CPU ,GPU(显卡)<br>存储器:<br>内存（断电数据清空,读写速度快)，<br>硬盘（辅存):（数据可以持久化，读写速度，相对较慢)<br>控制器:<br>主板上的一些器件<br>输入设备:<br>键盘，鼠标，麦克风，网口<br>输出设备:<br>显示器，耳机，网口</p><h1 id="2-局域网"><a href="#2-局域网" class="headerlink" title="2. 局域网"></a>2. 局域网</h1><blockquote><p>局域网</p></blockquote><p>局域网：跨局域网不能访问<br>邓哥和成哥连接共同的路由器依旧不能互相访问？——ip<br>IP 地址格式：分为四个段：xxx.xxx.xxx.xxx。每个段 0-255，每个段都是由 8 个 0/1 组成的。<br>IP 地址分类：一个 IP 地址分为两个部分：网络 ID， 主机 ID<br>A 类：0.0.0.0-127.255.255.255（一个网络能有 1600+万台）<br>B 类：128.0.0.0-191.255.255.255<br>C 类：192.0.0.0-223.255.255.255（私有网络）<br>D 类：多播地址<br>E 类：<br>​</p><p>127.0.0.1 代表本机<br>0.0.0.0 代表不知道 ip，默认打到自己本机上</p><h1 id="3-ip-地址与公网"><a href="#3-ip-地址与公网" class="headerlink" title="3. ip 地址与公网"></a>3. ip 地址与公网</h1><blockquote><p>ip 地址</p></blockquote><h1 id="4-域名和-DNS-解析过程"><a href="#4-域名和-DNS-解析过程" class="headerlink" title="4. 域名和 DNS 解析过程"></a>4. 域名和 DNS 解析过程</h1><blockquote><p>域名与 DNS 解析</p></blockquote><p><a href="http://www.baidu.com叫做域名/">www.baidu.com叫做域名</a><br>问:能通过域名直接访问到一台机器吗?答:不可以的。网络只认得 ip 地址<br>实际上时用域名和 IP 形成对应关系。<br>首先，计算机是不知道域名对应的 IP 的。<br>问路由器，如果路由器认识这个域名，就返回一个 IP，然后计算机访问这个 IP。如果路由器不认识，他就问上一层路由器。<br>如果问到了城市这个级别的路由器的时候，DNS 服务器。<br>如果 DNS 服务器不认识这个域名，继续向上级 DNS 服务器查找。<br>互联网建立的时候，13 台总的 DNS 服务器。</p><blockquote><p>当向浏览器的地址栏中输入一个 url 按回车之后，网络中都会发生什么?</p></blockquote><p>比如输入的是 123.xyz</p><ol><li>看浏览器的缓存。</li><li>本机 host。</li></ol><p>C:windows/system32/drivers/etc/host<br>127.0.0.1 默认指的是当前这台机器 localhost<br>0.0.0.0：不知道 IP 地址，默认自己本机</p><ol start="3"><li>家里路由器</li><li>上级路由、城市的 LDNS 服务器</li><li>继续向上级的 DNS 服务器找。</li><li>globalDNS 服务器。(一定有)</li></ol><p>在浏览器地址栏中输入一个页面地址，按下回车键后发生了什么？</p><ol><li><p>浏览器将 url 地址补充完整：没有书写协议，添加上协议</p></li><li><p>浏览器对 url 地址进行 url 编码：如果 url 地址中出现非 ASCII 字符，则浏览器会对其进行编码</p></li><li><p>浏览器构造一个没有消息体的 GET 请求，发送至服务器，等待服务器的响应，此时浏览器标签页往往会出现一个等待的图标</p></li><li><p>服务器接收到请求，将一个 HTML 页面代码组装到消息体中，响应给浏览器</p></li><li><p>浏览器拿到服务器的响应后，丢弃掉当前页面，开始渲染消息体的 html 代码。浏览器之所以直到这是一个 html 代码，是因为服务器的响应头指定了消息类型为 text/html</p></li><li><p>浏览器在渲染页面的过程中，发现有其他的嵌入资源，如 CSS、JS、图片等</p></li><li><p>浏览器使用不阻塞渲染的方式，重新向服务器发送对该资源的请求，拿到响应结果后根据 Content-Type 做相应处理</p></li><li><p>当所有的资源都已下载并处理后，浏览器触发 window.onload 事件</p><blockquote><p>答案：</p></blockquote></li><li><p>客户端发给 DNS（域名解析服务器）服务器 查询对应的 ip (应用层)</p></li><li><p>客户端向 ip 对应的服务器进行建立连接（三次握手） （建立连接的发起是在传输层）</p></li><li><p>建立好连接之后 进行数据传递 传输层</p></li><li><p>数据传递完成 断开连接 （四次挥手）传输层</p></li><li><p>渲染页面 —— 文件按行解析执行</p></li><li><p>解析执行的过程中生成 DOM 树 接着根据 css 生成 CSS 树</p></li><li><p>合并成为 渲染树</p></li><li><p>根据渲染树开始渲染页面 展示出来</p></li><li><p>遇到 script 标签（会执行 script 标签里面的代码）会阻碍后面的代码执行</p></li></ol><p><img src="/img/2-1.png"></p><blockquote><p>思考：</p></blockquote><p>本机 host 不缓存，没有权限往里面写，用户自己可以写，可以篡改域名，浏览器缓存<br>所以输入 url 按下回车：至少往外发出 2 个信息</p><ol><li>通过域名找到 ip</li><li>然后访问 ip</li></ol><h1 id="5-五层网络模型"><a href="#5-五层网络模型" class="headerlink" title="5. 五层网络模型"></a>5. 五层网络模型</h1><p><img src="/img/2-2.png"><br>物理层传输方式：<br><img src="/img/2-3.png"><br>UDP 与 TCP 区别：<br>TCP 协议：安全可靠，发出请求在线等<br>UDP 协议：发出请求不管了<br>​</p><p>url 不一定都展示在地址栏里面</p><p><strong>发出去的是 http 协议，伴随着 TCP,IP 协议</strong><br>比如要想传送一个 hello，但是根据 http 协议，我不能直接传，需要有一个格式<br>http 协议格式：</p><blockquote><p>HTTP 协议分为两个部分：</p></blockquote><p>请求：Request<br>请求头(Request Headers)<br><img src="/img/2-4.png" alt="image.png"><br>请求头：<strong>请求方式 路径 协议版本</strong><br>两种请常用的请求方式：GET POST，还有 HEAD, PUT, DELETE</p><p>响应：Response<br>要想解析 hello，要经过层层包装加密（自上而下），层层解析（自下而上）的过程<br><img src="/img/2-5.png" alt="image.png"></p><h1 id="6-简述-HTTP-协议"><a href="#6-简述-HTTP-协议" class="headerlink" title="6. 简述 HTTP 协议"></a>6. 简述 HTTP 协议</h1><blockquote><p>请求</p></blockquote><p>两个部分：请求头、请求体<br>HTTP 源码格式：POST/path?a=1&amp;b=2 HTTP1.1<br>Request Headers</p><ul><li>Host: <a href="http://www.baidu.com/">www.baidu.com</a></li><li>Connection: keep-alive</li><li>User-Agent: asdasdasd</li><li>Cookie</li></ul><p>GET 特点：web 环境下的 http ，请求的参数都在 url 里</p><blockquote><p>响应：</p></blockquote><p>两个部分：响应头、数据体<br>响应头：协议版本 状态码 message<br>属性：值<br>Cache-Control:max-age=864000 在一天内相同的请求就会取缓存</p><h1 id="7-GET-POST-区别"><a href="#7-GET-POST-区别" class="headerlink" title="7. GET POST 区别"></a>7. GET POST 区别</h1><ol><li>是基于什么前提的?如果什么前提都没有，不使用任何规范，只考虑语法和理论上的 HTTP 协议。</li></ol><p>GET 和 POST 几乎没有什么区别，只有名字不一样。</p><ol start="2"><li>如果是基于 RFC 规范的。（RFC 组织来决定是否收纳一些协议规范）</li></ol><p>（1）理论上的(Specification) : GET 和 POST 具有相同语法的，但是有不同的语义。get 是用来获取数据的，post 是用来发送数据的，其他方面没有区别。<br>（2）实现上的(lmplementation) ︰各种浏览器（web 环境下的），就是这个规范的实现者。<br>所以才有了常见的那些不同</p><ol><li>GET 的数据在 URL 是可见的。POST 请求不显示在 URL 中。</li><li>GET 对长度是有限制的，POST 长度是无限的。</li><li>GET 请求的数据可以收藏为书签，POST 请求到的数据不可收藏为书签。</li><li>GET 请求后，按后退按钮、刷新按钮无影响，POST 数据会被重新提交。</li><li>GET 编码类型:application/x-www-form-url，</li></ol><p>POST 的编码类型:有很多种。<br>encodeapplication/x-www-form-urlencoded 加密的<br>multipart/form-data(传输文件的一些信息:POST 这种就可以发送文件)</p><ol start="6"><li>GET 历史参数会被保留在浏览器里，POST 不会保存在浏览器中的。</li><li>GET 只允许 ASCll。POST 没有编码限制，允许发二进制的。</li><li>GET 与 POST 相比，GET 安全性较差，GET 所发的数据是 URL 的一部分，POST 都在数据体里。但是<strong>HTTP 协议是种明文协议，都不安全。</strong></li></ol><p>纠正想法：地址栏！=URL，URL 不一定都展示在地址栏里面</p><p>请求方式 ： 为了告知服务器请求意图是什么</p><ul><li>GET : 获取资源</li><li>POST：传输实体主体(详细信息)</li><li>PUT： 传输文件  （使用的场景： 1. 传递文件  2. 修改实体数据）</li><li>DELETE ： 删除文件</li><li>HEAD： 获得报文首部 （不传递里面的数据）</li><li>OPTIONS：询问支持的方式</li></ul><p>详细版：<br>1 GET 请求指定的页面信息，并返回实体主体。<br>2 HEAD 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头<br>3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。 POST 请求可能会导致新的资源的建立和/或已有资源的修改。<br>4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>5 DELETE 请求服务器删除指定的页面。<br>6 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。<br>7 OPTIONS 允许客户端查看服务器的性能。<br>8 TRACE 回显服务器收到的请求，主要用于测试或诊断。<br>9 PATCH 是对 PUT 方法的补充，用来对已知资源进行局部更新 。</p><p>get 和 post 的区别</p><ul><li>get 请求会把数据拼接在地址栏当中  post 不会， 会放在请求体当中</li><li>get 请求的数据量较小（地址栏大小限制）大约为 4kb  post 请求的数据量较大 也有限制 5m</li><li>get 请求会有缓存（数据也会被缓存下来）  post 不会</li><li>post 相对安全</li><li>编码类型： get 请求数据只能用 ASCII 编码  post 请求没有限制</li></ul><p>POST 一般可以发送什么类型的文件，数据处理的问题</p><ul><li>文本、图片、视频、音频等都可以</li><li>text/image/audio/ 或 application/json 等</li></ul><h1 id="8-cookie-与-session"><a href="#8-cookie-与-session" class="headerlink" title="8. cookie 与 session"></a>8. cookie 与 session</h1><blockquote><p>Cookie 与 Session</p></blockquote><ol><li>如果我们用 JS 的变量来存数据，那么在页面关闭的时候，数据就消失了。</li><li>保持登录状态是怎么做到的呢?</li></ol><p>按照正常的 HTTP 协议来说，是做不到的。因为 HTTP 协议，上下文无关协议。</p><ol start="3"><li>所以说前端页面上，有可以持久化存储数据的东西。一旦登录成功，我就记载在这个里面。</li></ol><p>Cookie 是有限制的，自己只能往自己的域名下种 cookie。<br>Cookie 是存在浏览器里的，不是存在某个页面上的。是可以长期存储的。Cookie 即使是保存在浏览器里，也 是存放在不同的域名下的。</p><blockquote><p>自动登录过程</p></blockquote><p><img src="/img/2-6.png"><br><img src="/2-7.png"></p><p>不同 JS 文件不能互相访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(a);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自己只能往自己的域名下种 cookie；<br>cookie 可以跨页面，关闭页面不会消失，不能跨域存储<br>cookie 信息存在浏览器上，session 信息存在服务器上</p><h1 id="9-发送网络请求"><a href="#9-发送网络请求" class="headerlink" title="9. 发送网络请求"></a>9. 发送网络请求</h1><p>方式：</p><ol><li>在浏览器直接输入网址（无法用代码控制）</li><li>location.herf=”url”，可以发出网络请求，但是页面会跳转（页面会跳转）</li><li>带有 src 属性的标签。请求是可以发出的，服务端可以处理，也可以返回，但是返回之后能否被应用还要看浏览器 img，script（页面无法处理返回结果）</li><li>带有 href 属性的标签，请求是可以发出的，服务端可以处理，也可以返回，但是返回之后能否被应用还要看浏览器 link（页面无法处理返回结果）</li><li>带有 action 属性的标签。比如 form 表单，也可以向后端发出网络请求，但是 form 表单发出请求后也会页面跳转（页面会跳转）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>希望有一种方式，可以用代码控制，页面不会跳转，服务器返回的结果我可以用 js 继续处理</p><ol start="6"><li><strong>ajax</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求要素</span><br><span class="hljs-comment">// (1).请求方式:get post</span><br><span class="hljs-comment">// (2).url</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>); <span class="hljs-comment">// 兼容IE6</span><br>&#125;<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjax&quot;</span>);<br>xhr.send(); <span class="hljs-comment">// No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.跨域</span><br></code></pre></td></tr></table></figure><h1 id="10-跨域"><a href="#10-跨域" class="headerlink" title="10. 跨域"></a>10. 跨域</h1><blockquote><p>跨域发生在浏览器(接受的时候)，不是服务器</p></blockquote><p><img src="/img/2-8.png" alt="image.png"><br><img src="/img/2-9.png" alt="image.png"><br>演示：<br>新的接口，后端设置了 Access-Control-Allow-Origin，就可以跨域了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<br>&#125;<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjaxCrossOrigin&quot;</span>); <span class="hljs-comment">//初始化建立连接</span><br></code></pre></td></tr></table></figure><p><strong>JSONP</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<br>&#125;<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonP?callback=asd&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="11-页面正确打开方式"><a href="#11-页面正确打开方式" class="headerlink" title="11. 页面正确打开方式"></a>11. 页面正确打开方式</h1><p><strong>两个概念</strong><br><img src="/img/2-10.png"><br><img src="/img/2-11.png" alt="image.png"></p><blockquote><p>三种编辑器的 server 插件安装</p></blockquote><h1 id="12-原生-JS-发送-ajax"><a href="#12-原生-JS-发送-ajax" class="headerlink" title="12. 原生 JS 发送 ajax"></a>12. 原生 JS 发送 ajax</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(xhr.readyState); <span class="hljs-comment">//刚创建时候readyState为0</span><br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjaxCrossOrigin&quot;</span>);<br><span class="hljs-built_in">console</span>.log(xhr.readyState); <span class="hljs-comment">//1</span><br>xhr.send(); <span class="hljs-comment">//执行发送</span><br><span class="hljs-built_in">console</span>.log(xhr.readyState); <span class="hljs-comment">//1,发送之后状态没变</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//当readystate变化时候，就执行</span><br>  <span class="hljs-comment">// readyState == 4表示请求已完成，已经接收到数据</span><br>  <span class="hljs-built_in">console</span>.log(xhr.readyState);<br>&#125;;<br></code></pre></td></tr></table></figure><p>readyState == 4 表示请求已完成，已经接收到数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>    alert(xhr.responseText);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>HTTP 状态码</p></blockquote><p>2 表示成功<br>3 表示重定向(迁移的新地址)<br>4 表示客户端错误,404 页面没找到。<br>5 表示服务端错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//readyState == 4表示请求完成，已经接收到数据。</span></span><br><span class="javascript">    <span class="hljs-comment">//status == 200  网络请求，结果都会有一个状态码。来表示这个请求是否正常</span></span><br><span class="javascript">    <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>).innerText = xhr.responseText; <span class="hljs-comment">// 可以展示在页面上</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText); <span class="hljs-comment">// 转成JSON</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上方法不规范：网速很快，send 瞬间返回结果，function 还没完成，会返回 null。<br>改进：send()放在后面</p><blockquote><p>总结：原生 JS 发送 ajax</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>); <span class="hljs-comment">//兼容IE6</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(xhr.readyState);<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjaxCrossOrigin&quot;</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">console</span>.log(xhr.readyState);<br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>).innerText = xhr.responseText;<br>    <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText);<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;<br>&#125;;<br>xhr.send(); <span class="hljs-comment">//如果open第三个参数传true，或者不传，为异步模式。会导致后面的同步代码先执行。</span><br><span class="hljs-comment">// 如果传false，为同步模式。</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;====&quot;</span>); <span class="hljs-comment">// 先执行的</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;+++&quot;</span>); <span class="hljs-comment">// 先执行的</span><br></code></pre></td></tr></table></figure><p>在计算机的世界里，异步与同步和现实世界中是相反的。<br>在计算机的世界里，同步表示串行。异步表示同时进行。可以理解为同线程和异线程。</p><h1 id="13-JSONP-使用与特性"><a href="#13-JSONP-使用与特性" class="headerlink" title="13. JSONP 使用与特性"></a>13. JSONP 使用与特性</h1><p>jsonp 格式哪里特殊?</p><ol><li>发送的时候，会带上一个参数 callback(回调)</li><li>返回的结果不是 json</li><li>callback 的名 + ( + json + );</li><li>jsonp 跨域，只能使用 get 方法，如果我们设置的是 post 方法，jquery 会自动转为 get 方法。</li></ol><p>是不是在 jsonp 里面我只能使用 get 方法？是不是我设置的 post 方法都会转为 get 方法？<br>不是。jquery 会先判断是否同源，如果同源，那么设置的是 get 就是 get，设置的 post 就是 post。如果不是同源，无论设置的什么，都改为 get.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="14-JSONP-原理"><a href="#14-JSONP-原理" class="headerlink" title="14. JSONP 原理"></a>14. JSONP 原理</h1><p><strong>因为我想从一个接口获取一个数据，但是这个接口和当前页面不是同源的。（也就是跨域了）。但是这个接口是支持 JSONP 的。可以用 script 标签，有 src 属性，所以可以发出网络请求</strong><br><strong>script 标签，虽然可以引用其他域的资源，浏览器不限制。但是，浏览器会将返回的内容，作为 js 代码执行。</strong><br><strong>如果访问：</strong><a href="https://developer.duyiedu.com/edu/testJsonp?callback=asd">https://developer.duyiedu.com/edu/testJsonp?callback=asd</a><br><strong>把 asd({“status”:”ok”,”msg”:”Hello! There is DuYi education!”}) 作为 JS 代码执行：相当于调用了 asd 方法，传入了一个 json 对象作为参数。但是 asd is not defined。这时候如果定义了 asd 函数，则执行该函数。另外，asd 函数定义的时候可以传一个参数，这个参数就是服务器的返回结果。虽然服务器返回的是 asd({“status”:”ok”,”msg”:”Hello! There is DuYi education!”}) ，但是经过了 asd 函数，所以最终返回{“status”:”ok”,”msg”:”Hello! There is DuYi education!”}</strong><br><strong>​</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asd</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;asd执行&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://developer.duyiedu.com/edu/testJsonp?callback=asd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>JSONP 原理：</strong></p></blockquote><p><strong>1.  判断请求与当前页面的域，是否同源，如果同源则发送正常的 ajax，就没有跨域的事情了。</strong><br><strong>2.  如果不同源，生成一个 script 标签</strong><br><strong>3.  生成一个随机的 callback 名字，还得创建一个名为这个的方法。</strong><br><strong>4.  设置 script 标签的 src，设置为要请求的接口。</strong><br><strong>5.  将 callback 作为参数拼接在后面。</strong><br><strong>============以上是前端部分================</strong><br><strong>6.  后端接收到请求后，开始准备要返回的数据</strong><br><strong>7.  后端拼接数据，将要返回的数据用 callback 的值和括号包裹起来</strong><br>**              例如：callback=asd123456，要返回的数据为{“a”:1, “b”:2},**<br>**              就要拼接为：asd123456({“a”:1, “b”:2});**<br><strong>8.  将内容返回。</strong><br><strong>============以上是后端部分================</strong><br><strong>9.  浏览器接收到内容，会当做 js 代码来执行。</strong><br><strong>10.  从而执行名为 asd123456 的方法。这样我们就接收到了后端返回给我们的对象。</strong></p><blockquote><p>封装 JSONP</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = &#123;<br>  <span class="hljs-attr">ajax</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> url = options.url;<br>    <span class="hljs-keyword">var</span> type = options.type;<br>    <span class="hljs-keyword">var</span> dataType = options.dataType;<br>    <span class="hljs-comment">//判断是否同源（协议，域名，端口号）</span><br>    <span class="hljs-comment">//获取目标url的域</span><br>    <span class="hljs-keyword">var</span> targetProtocol = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//目标接口的协议</span><br>    <span class="hljs-keyword">var</span> targetHost = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//目标接口的host，host是包涵域名和端口的</span><br>    <span class="hljs-comment">//如果url不带http，那么访问的一定是相对路径，相对路径一定是同源的。</span><br>    <span class="hljs-keyword">if</span> (url.indexOf(<span class="hljs-string">&quot;http://&quot;</span>) == <span class="hljs-number">0</span> || url.indexOf(<span class="hljs-string">&quot;https://&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">var</span> targetUrl = <span class="hljs-keyword">new</span> URL(url);<br>      targetProtocol = targetUrl.protocol;<br>      targetHost = targetUrl.host;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则同源</span><br>      targetProtocol = location.protocol;<br>      targetHost = location.host;<br>    &#125;<br>    <span class="hljs-comment">//首先判断是否为jsonp，因为不是jsonp不用做其他的判断，直接发送ajax</span><br>    <span class="hljs-keyword">if</span> (dataType == <span class="hljs-string">&quot;jsonp&quot;</span>) &#123;<br>      <span class="hljs-comment">//要看是否同源</span><br>      <span class="hljs-keyword">if</span> (location.protocol == targetProtocol &amp;&amp; location.host == targetHost) &#123;<br>        <span class="hljs-comment">//表示同源</span><br>        <span class="hljs-comment">//此处省略。因为同源，jsonp会当做普通的ajax做请求</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不同源，跨域</span><br>        <span class="hljs-comment">//随机生成一个callback</span><br>        <span class="hljs-keyword">var</span> callback = <span class="hljs-string">&quot;cb&quot;</span> + <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1000000</span>);<br>        <span class="hljs-comment">//给window上添加一个方法</span><br>        <span class="hljs-built_in">window</span>[callback] = options.success;<br>        <span class="hljs-comment">//生成script标签。</span><br>        <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>);<br>        <span class="hljs-keyword">if</span> (url.indexOf(<span class="hljs-string">&quot;?&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">//表示已经有参数了</span><br>          script.src = url + <span class="hljs-string">&quot;&amp;callback=&quot;</span> + callback;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">//表示没有参数</span><br>          script.src = url + <span class="hljs-string">&quot;?callback=&quot;</span> + callback;<br>        &#125;<br>        script.id = callback;<br>        <span class="hljs-built_in">document</span>.head.appendChild(script);<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">//http://developer.duyiedu.com/edu/testJsonp?callback</span><br>$.ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// 成功后的回调</span><br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="15-HTTP-状态码"><a href="#15-HTTP-状态码" class="headerlink" title="15. HTTP 状态码"></a>15. HTTP 状态码</h1><blockquote><p>MDN 更标准的解析</p></blockquote><ol><li> 200   任何以 2 开头的请求成功并且后台服务器已经返回结果</li><li> 301 以 3 开头的都代表重令项   301 永久性重定向</li><li> 302   临时重定向</li><li> 303   重定向   确认了请求方式，必须是 GET 方法</li><li> 400 错误请求（原因可能是传递的参数类型不对或参数不对）</li><li> 403   以 4 开头的代表客户端   被服务器禁止访问资源:  （没有权限）</li><li> 404   页面没有找到 （地址错误）</li><li> 503   服务器错误（服务器宕机了或者代码有误）</li></ol><h1 id="16-什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个-jsonp-原理"><a href="#16-什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个-jsonp-原理" class="headerlink" title="16. 什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个 jsonp 原理"></a>16. 什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个 jsonp 原理</h1><p>产生跨域的原因：浏览器内部存在的安全机制——同源策略（只能是同源之间才允许数据交互）   不满足同源策略就会产生跨域<br>不满足同源策略的情况：协议、域名、端口号   其中有一个不相同都算是跨域（不同的域名但是对应相同的 IP   两个域名之间也属于跨域）</p><p>跨域问题的解决方案</p><ul><li>JSONP</li><li>CORS</li><li>服务器代理</li></ul><p><strong>JSONP 和 CORS 是怎样实现的？</strong></p><p>封装 jsonp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@params <span class="hljs-type">&#123;String&#125;</span> </span>url:  请求地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@params <span class="hljs-type">&#123;String&#125;</span> </span>data: 请求数据  key=value&amp;key1=value1;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@params <span class="hljs-type">&#123;String&#125;</span> </span>callbackName: 接收响应数据的函数名称</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">// 把callback当成数据传递更省事</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonp</span>(<span class="hljs-params">url, data</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> oScript = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>);<br>  oScript.src = url + <span class="hljs-string">&quot;?&quot;</span> + data; <span class="hljs-comment">//地址和数据之间用问号分割</span><br>  <span class="hljs-built_in">document</span>.body.appendChild(oScript);<br>  <span class="hljs-comment">// 已经append了，就会插到执行队列，不怕remove</span><br>  <span class="hljs-built_in">document</span>.body.removeChild(oScript); <span class="hljs-comment">// 输入的时候不断插入script标签，页面太多的script</span><br>&#125;<br><span class="hljs-comment">/* callback和data分开传递</span><br><span class="hljs-comment">function jsonp(url, data, callbackName) &#123;</span><br><span class="hljs-comment">oScript.src = url + &#x27;?&#x27; + data + &#x27;callback&#x27; + callbackName;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br>jsonp(<br>  <span class="hljs-string">&quot;https://www.baidu.com/sugrec&quot;</span>,<br>  <span class="hljs-string">&quot;pre=1&amp;p=3&amp;ie=utf-8&amp;json=1&amp;prod=pc&amp;from=pc_web&amp;sugsid=34298,33801,34322,31253,34331,34004,34072,34092,26350,34246&amp;wd=duy&amp;req=2&amp;bs=x&amp;pbs=x&amp;csor=3&amp;pwd=du&amp;cb=success&quot;</span><br>);<br></code></pre></td></tr></table></figure><p>自己可以实现搜索框</p><h1 id="17-Web-前端应该从哪些方面来优化网站性能"><a href="#17-Web-前端应该从哪些方面来优化网站性能" class="headerlink" title="17. Web 前端应该从哪些方面来优化网站性能"></a>17. Web 前端应该从哪些方面来优化网站性能</h1><p>图解 http</p><p>网站性能 —— 时间的问题  ——&gt; 加载时间 （文件的加载基于网络的 ）</p><blockquote><p><strong>网络加载时间的问题</strong></p></blockquote><ol><li> 减小文件的体积  —— 压缩文件 webpack</li><li> 就近取材 —— 使用 cdn 加载</li><li> 使用静态资源缓存</li><li> 网络请求可以使用异步请求资源</li></ol><blockquote><p><strong>渲染的时间问题</strong></p></blockquote><ol><li>减少重绘重排</li></ol><p>需要构建  domtree  +  cssTree = 渲染树 renderTree</p><ol><li> 把 script 标签写在最后（不阻碍其他资源加载）</li><li> css 样式通过外部引入的方式实现   并且将 link 标签写在 head 标签下面</li><li> 按需加载（懒加载），预加载（提前加载影响性能）</li></ol><h1 id="18-浏览器端缓存有哪些，并描述他们的区别。"><a href="#18-浏览器端缓存有哪些，并描述他们的区别。" class="headerlink" title="18. 浏览器端缓存有哪些，并描述他们的区别。"></a>18. 浏览器端缓存有哪些，并描述他们的区别。</h1><p>Cookies: 一般用来保存用户的信息比如自动登录。</p><p>Session:主要作用是通过服务端记录用户的状态。</p><p>浏览器缓存</p><ul><li>cookie</li></ul><ol><li>存储时间可以设置</li><li>会携带在网络请求的请求头当中</li><li>数据量较小  4kb</li><li>存储数据格式都是字符串</li></ol><ul><li>localStorage</li></ul><ol><li>存储时间是永久性的   除非手动删除 否则一直存在 URL</li><li>不会携带在网络请求头当中</li><li>数据量很大  5m</li><li>存储数据格式是对象{key: value}   数据对应的数据值要求是字符串 window.localStorage</li></ol><ul><li>sessionStorage</li></ul><ol><li>存储时间是当前会话</li><li>不会携带在网络请求头当中</li><li>数据量很大  5m</li><li>存储数据格式是对象{key: value}   数据对应的数据值要求是字符串</li></ol><h1 id="19-请描述-TCP-三次握手与四次挥手？"><a href="#19-请描述-TCP-三次握手与四次挥手？" class="headerlink" title="19. 请描述 TCP 三次握手与四次挥手？"></a>19. 请描述 TCP 三次握手与四次挥手？</h1><p>三次握手和四次挥手是传输层中 TCP 协议当中的两个概念<br>TCP（Transmission control protocol）：  传输控制协议   <br>特点：</p><ol><li>可靠的连接协议</li><li>面向字节流</li><li>点对点的连接(一对一，一问一答)</li><li>全双工通信：双方均可以在任何时刻进行数据交互<br>（原因： 在两端都设有缓存（发送缓存和接收缓存））<br>可靠连接的前提条件就是通信双方是均需要有接收和发送信息的能力的</li></ol><h2 id="判断前提条件的方法就是先进行建立连接，-建立连接的过程称之为三次握手"><a href="#判断前提条件的方法就是先进行建立连接，-建立连接的过程称之为三次握手" class="headerlink" title="判断前提条件的方法就是先进行建立连接，  建立连接的过程称之为三次握手"></a>判断前提条件的方法就是先进行建立连接，  建立连接的过程称之为三次握手</h2><p>A-&gt;B<br>第一次握手 ： A -&gt; B （建立连接请求发出）（我要向你发送信息了，你能接收到我的信息吗？）<br>（如果 B 端接收到这个信息了 可以明确 A 有发送数据的能力）<br>过程当中的报文标记：SYN = 1 代表建立一个新的连接   当前报文编号为 seq = x<br>第二次握手：  B -&gt; A （B 给 A 发出信息，我收到你的建立连接的信息了， 我可以收到， 你可以收到吗?）<br>（如果 A 收到这个信息了， A 可以确定 B 可以发出信息 也可以收到信息）<br>代表的是回应 seq=x 的报文 ack = x + 1<br>当前的报文编号 seq = y<br>ack 和 seq 可能相等，因为是独立的。ack 是对对方报文进行回应；seq 对当前这一端发出请求的编号<br>SYN = 1   代表当前的连接是 B 的新的连接<br>ACK = 1   代表接收到的连接报文是有效的<br>第三次握手： A -&gt; B （A 给 B 发出回应信息   我可以接收到你的信息   我开始发了）<br>（如果 B 接收到这个信息了， B 就明确了 A 有收到信息的能力了）<br>ACK = 1 : 代表接收到的 B 给出的回应报文是有效的<br>ack=y+1： 代表回应的是 B 发给 A 的报文编号为 y 的报文<br>seq = x+1： 代表当前报文的编号<br><img src="/img/2-12.png"><br>通俗来说：我要给你发信息，你能收到吗？我能收到，但是你能收到吗？我能收到。<br>​</p><p><img src="/img/2-13.png"><br>只有第三次握手才可以携带数据<br>接下来数据传递：<br>A -&gt;B  B-&gt;A 互相传递数据</p><h2 id="A-传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手"><a href="#A-传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手" class="headerlink" title="A 传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手"></a>A 传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手</h2><p>第一次挥手：<br>A -&gt; B （A 发出断开连接的请求） （我的数据发完了，我要断开了）<br>(如果 B 接收到这个请求了，能明确的是 A 已经把所有的数据给完了要断开了)<br>FIN = 1, seq=u<br>第二次挥手<br>B  -&gt; A （B 要对 A 断开连接请求进行响应）（我知道你传完了，但是我还没有处理完）<br>ACK = 1,ack=u+1, seq=v<br>(如果 A 接收到这个响应了，能明确 B 接收到我的断开连接请求了， 等待断开)<br>…….继续 B 给 A 发出数据…….<br>第三次挥手<br>B -&gt; A  （B 要对 A 发出断开连接请求） （我已经把生活费给你了，咱俩分手吧）<br>FIN = 1, seq=w, ack=u+1, ACK=1<br>（如果 A 接收到这个断开连接的信息了，能明确 B 已经传递完了，）<br>第四次挥手<br>A -&gt; B   （A 对 B 断开连接请求进行响应） （我知道你已经传完了，我要断开了）<br>ACK = 1, ack=w+1, seq=u+1<br>（如果 B 收到这个信息了，能明确，对方知道我要断开了，接下来 B 断开连接）<br>第一次挥手可以携带数据，<br>​</p><p>三次握手过程中可以携带数据么?</p><h2 id="跨域问题的解决方案"><a href="#跨域问题的解决方案" class="headerlink" title="跨域问题的解决方案"></a>跨域问题的解决方案</h2><p>跨域产生的原因：前端一般会使用 ajax 进行网络交互（客户端和服务器端数据交互）<br>ajax 的缺点：会受到同源策略的限制<br>同源策略：就是浏览器提出的一种安全策略。要求只有同源下面的信息才能进行数据交互。<br>同源： 协议，域名，端口号都相同<br>http 端口号：默认（隐藏）80<br>https 端口号：默认 443<br>客户端和服务器端的网络请求<br>解决方案：<br>1.CORS 跨域： cross origin resource sharing 跨域资源共享（只需要后端设置响应头）(IE10 之前不兼容)<br>Access-Control-Allow-Origin: *</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">简单请求<br>- 请求方式只能是<span class="hljs-keyword">get</span> post head<br><br>- 请求头字段要求只能有：<br><br>Accept<br><br>Accept/<span class="hljs-keyword">language</span><br><br><span class="hljs-keyword">language</span><br><br>Content-<span class="hljs-keyword">Type</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>  key=<span class="hljs-keyword">value</span>&amp;key1=value1<br><span class="hljs-string">&#x27;text/plain&#x27;</span>  纯文本<br><br><span class="hljs-string">&#x27;multipart/form-data&#x27;</span>  二进制文件<br><br>对于上述简单请求的跨域只需要在服务端设置响应头<br><br><span class="hljs-keyword">Access</span>-Control-Allow-Origin: *<br><br><br>请求方式的区别： put(一般是对已有数据修改的时候用)<br><br><span class="hljs-keyword">delete</span>（一般是对已有的数据进行删除的时候会用到）<br><br><span class="hljs-keyword">options</span> （自动选择）<br><br>head （只进行请求头的发送 不传递请求体）<br><br>非简单请求<br><br>不是简单请求的请求<br><br>对于非简单请求的跨域需要在服务端设置响应头<br><br>值中的<span class="hljs-string">&#x27;*&#x27;</span> 代表所有<br><br><span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br><br><span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class="hljs-string">&#x27;PUT,DELETE&#x27;</span>,<br><br><span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="hljs-string">&#x27;token&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>JSONP: json and padding   代表的是返回的数据加上包裹层<br>‘callback(“{name:”xxx”,age:18}”)’’<br>​</li></ol><p>原理： script 标签身上的 src 属性 在拿取外部资源的时候是不受同源策略的限制的<br>缺点：</p><ol><li><p>请求方式只能是 get</p></li><li><p>返回的数据格式是特殊的</p></li><li><p>传递的数据大小有限<br>​</p></li><li><p>服务器代理<br>服务器与服务器之间没有同源限制，浏览器有同源策略<br><img src="/img/2-14.png" alt="image.png"><br>其他跨域<br>客户端和客户端的跨域：iframe 子窗口之间的跨域问题<br>eg: h5 postMessage</p></li></ol><p><strong>面试：拥塞控制</strong><br>一个场景：<br>当前系统嵌套了一个学生管理系统， 在学生管理系统当中存在一个按钮 这个按钮 代表当前窗口隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;oIfr&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:5501/index.html&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oIfr = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;oIfr&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">window</span>.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e);</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (e.data.hide) &#123;</span><br><span class="javascript">      oIfr.style.display = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  oIfr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    oIfr.contentWindow.postMessage(a, <span class="hljs-string">&quot;http://127.0.0.1:5501&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="20-TCP-与-UDP-的区别"><a href="#20-TCP-与-UDP-的区别" class="headerlink" title="20. TCP 与 UDP 的区别"></a>20. TCP 与 UDP 的区别</h1><p>TCP (传输控制协议) ： 为了提供可靠的字节流服务的</p><pre><code>1. 以字节流（小的数据包）的形式传递2. 可靠的连接 有问有答 必须确认一问一答3. 点对点的4. 有三次握手和四次挥手的过程5. 报文的头部信息量大 syn ack...</code></pre><p>UDP（用户数据报协议）</p><ol><li>以数据报文的形式传递</li><li>不可靠的   不需要确认对方是否收到</li><li>一对一   一对多   多对多</li><li>没有三次握手四次挥手</li><li>报文的头部信息量小</li></ol><h1 id="21-http-是什么"><a href="#21-http-是什么" class="headerlink" title="21.http 是什么?"></a>21.http 是什么?</h1><p>HTTP 是超文本传输协议是一种通信协议，它允许将超文本标记语言（HTML）文档从 Web 服务器传送到客户端的浏览器。</p><p>所有 WEB 服务的一个协议，HTTP 协议属于 TCP/IP 协议族的一个子集</p><blockquote><p>HTTP 协议：</p></blockquote><ol><li><p>对于传递过程当中数据报文格式的约定</p></li><li><p>用于客户端与服务器端的数据通讯</p></li><li><p>无状态协议： 没有记忆功能 （不保存之前的记录）</p></li><li><p>可以做持久连接： （在一端没有发起断开连接请求的时候   就会一直连接着）</p><blockquote><p>HTTP 协议的缺点：</p></blockquote></li><li><p>传递的过程是明文传递的 （容易被窃取）</p></li><li><p>通信双方的身份不能确定 （容易遭遇伪装）</p></li><li><p>传递的过程当中容易被篡改<br>安全：<br>攻击会发生在五层网络模型和物理层之间（客户端和服务端的物理层之间）的过程中<br>HTTPS = HTTP + (SSL (安全套阶层) + TLS（安全传输协议))</p></li></ol><h1 id="22-http-与-https-的区别"><a href="#22-http-与-https-的区别" class="headerlink" title="22.http 与 https 的区别"></a>22.http 与 https 的区别</h1><p>为什么不普遍去用 HTTPS</p><ol><li>成本开销大</li><li>加密通信的过程很消耗内存资源以及 CPU   消耗资源</li></ol><p>标答：</p><ol><li>为了数据传输的安全，HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</li><li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</li><li>http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全。</li></ol><h1 id="23-重排（回流）和重绘是什么-什么情况下会触发重排和重绘。"><a href="#23-重排（回流）和重绘是什么-什么情况下会触发重排和重绘。" class="headerlink" title="23.重排（回流）和重绘是什么?什么情况下会触发重排和重绘。"></a>23.重排（回流）和重绘是什么?什么情况下会触发重排和重绘。</h1><p>重排 ：重新排列  （页面结构发生变化） 改变 dom 树<br>重绘： 重新绘制  （样式发生改变）   改变 css 树<br>offsetHeight，offsetWidth，offsetLeft，offsetTop，scrollHeight，scrollTop<br>client 不会吗<br>​</p><h1 id="直播课补充"><a href="#直播课补充" class="headerlink" title="直播课补充"></a>直播课补充</h1><p>ajax ===&gt; 封装 ajax 函数 ajax 用来请求资源 可以使页面局部刷新<br>网络的基础知识</p><p>(1). 五层网络模型： 物理层 —》 数据链路层 —-》网络层—》 传输层—》 应用层<br>duing 邓哥奇遇记<br>七层网络模型：<br>应用层: 网络服务与最终用户的一个接口。协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP<br>表示层: 数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）格式有，JPEG、ASCll、DECOIC、加密格式等<br>会话层: 建立、管理、终止会话。（在五层模型里面已经合并到了应用层） 对应主机进程，指本地主机与远程主机正在进行的会话<br>[</p><p>](<a href="http://www.baidu.com/">http://www.baidu.com:80/</a>)<br>(3). 三次握手 和 四次挥手 发生在传输层 TCP/IP 协议 TCP 和 UDP<br>(4). 请求方式： GET(获取数据的时候会用到) POST（新建数据保存的时候用到） HEAD PUT（修改数据的时候会用到） DELETE（删除数据的时候会用到）</p><p>(7). 客户端和服务器端的跨域：<br>&lt;1&gt; jsonp —》 不是 w3c 标准里的<br>原理： script 标签身上的 src 属性是不受同源策略的限制的<br>src=”<a href="http://www.baicu.com/">http://www.baicu.com</a>?”<br>&lt;2&gt; 服务器代理<br>&lt;3&gt; iframe<br>iframe + window.name —》 父页面请求子页面的数据 儿子给父亲数据<br>iframe + location.hash —-》 子页面请求父页面的数据 父亲给儿子数据<br>iframe + window.postMessage —》 双向请求<br>&lt;4&gt; CORS —》cross-origin resource sharing 跨域资源共享<br>后端来设置一个响应头 access-control-allow-origin: ‘<a href="http://www.duyiedu.com/">http://www.duyiedu.com</a>‘<br>浏览器先发出请求到服务器 返回的过程中 判断是否是同源的<br>如果不是同源的会去看响应报文的响应头是否有 access-control-allow-origin: * / 当前页面的域名<br>w3c 标准里面提出的<br>&lt;5&gt; document.domain —》 基础域名相同的页面 可以跨域<br>浏览器将 CORS 请求分成两类：<br>简单请求和非简单请求，只要同时满足下面两个条件就属于简单请求<br>( 1 ) 请求的方法只能是 HEAD，GET，POST<br>( 2 ) HTTP 的头信息不超出以下几种字段<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain<br>只要不满足以上两个条件就属于非简单请求，浏览器对于非简单请求会进行一次预检<br>对于简单请求<br>非简单请求<br>预检请求<br>非简单请求指的是对服务器有特殊要求，比如请求方法为 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。<br>非简单请求的 CORS 请求会在通信之前，增减一次 HTTP 查询的请求，成为 “预检”。<br>浏览器会先询问服务器，当前网页所在的域名是否在服务器许可的名单之中，<br>以及可以使用哪些 HTTP 请求和头部字段。如果通过服务器的校验，才会发起正式的 XMLHttpRequest 请求，否则就报错<br>非简单请求的响应头里面必须含有以下字段：<br>Allow-Control-Access-Origin 必需，表示可以请求的源。<br>Access-Control-Allow-Methods 必需，表示支持的所有方法，以逗号分隔<br>Access-Control-Allow-Headers 如果浏览器请求包括 Access-Control-Req 方法，以逗号分隔<br>Access-Control-Allow-Headers 如果浏览器请求包括 Access-Control-Request-Headers 字段，则 Access-Control-Allow-Headers 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段。<br>（8） HTTP 请求的发出经历了什么<br>​</p><h1 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h1><p>HTTP 缓存又分为强缓存和协商缓存：</p><ul><li>首先通过 Cache-Control 验证强缓存是否可用，如果强缓存可用，那么直接读取缓存</li><li>如果不可以，那么进入协商缓存阶段，发起 HTTP 请求，服务器通过请求头中是否带上 If-Modified-Since 和 If-None-Match 这些条件请求字段检查资源是否更新：</li><li>若资源更新，那么返回资源和 200 状态码</li><li>如果资源未更新，那么告诉浏览器直接使用缓存获取资源</li></ul><h1 id="你知道-302-状态码是什么嘛？你平时浏览网页的过程中遇到过哪些-302-的场景？"><a href="#你知道-302-状态码是什么嘛？你平时浏览网页的过程中遇到过哪些-302-的场景？" class="headerlink" title="你知道 302 状态码是什么嘛？你平时浏览网页的过程中遇到过哪些 302 的场景？"></a>你知道 302 状态码是什么嘛？你平时浏览网页的过程中遇到过哪些 302 的场景？</h1><p>而 302 表示临时重定向，这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问，一般是访问某个网站的资源需要权限时，会需要用户去登录，跳转到登录页面之后登录之后，还可以继续访问。</p><p>301 类似，都会跳转到一个新的网站，但是 301 代表访问的地址的资源被永久移除了，以后都不应该访问这个地址，搜索引擎抓取的时候也会用新的地址替换这个老的。可以在返回的响应的 location 首部去获取到返回的地址。301 的场景如下：</p><ul><li>比如从 <a href="http://baidu.com/">baidu.com</a>，跳转到 <a href="https://baidu.com/">baidu.com</a></li><li>域名换了</li></ul><h1 id="Fetch-API-与传统-Request-的区别"><a href="#Fetch-API-与传统-Request-的区别" class="headerlink" title="Fetch API 与传统 Request 的区别"></a>Fetch API 与传统 Request 的区别</h1><ul><li>fetch 符合关注点分离，使用 Promise，API 更加丰富，支持 Async/Await</li><li>语意简单，更加语意化</li><li>可以使用 isomorphic-fetch ，同构方便</li></ul><h1 id="对称加密和非对称加密的区别"><a href="#对称加密和非对称加密的区别" class="headerlink" title="对称加密和非对称加密的区别"></a>对称加密和非对称加密的区别</h1><h1 id="HTTP2-0-提升有哪些"><a href="#HTTP2-0-提升有哪些" class="headerlink" title="HTTP2.0 提升有哪些"></a>HTTP2.0 提升有哪些</h1><ol><li>cookies 和 session 的区别</li><li>get 和 post 的区别</li><li>Ajax、fetch、axios 的区别</li><li>http 和 https 的区别</li><li>解释 ajax 的工作原理</li></ol><h1 id="https-加密方式"><a href="#https-加密方式" class="headerlink" title="https 加密方式"></a>https 加密方式</h1><h1 id="常见-Http-请求头和响应头"><a href="#常见-Http-请求头和响应头" class="headerlink" title="常见 Http 请求头和响应头"></a>常见 Http 请求头和响应头</h1><h1 id="几种常见的-content-type"><a href="#几种常见的-content-type" class="headerlink" title="几种常见的 content-type"></a>几种常见的 content-type</h1><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ol><li> 必考：HTTP 状态码知道哪些？分别什么意思？</li><li> 大公司必考：HTTP 缓存有哪几种？</li><li> 必考：GET 和 POST 的区别</li><li> Cookie V.S. LocalStorage V.S. SessionStorage V.S. Session</li></ol><h1 id="集训面试题"><a href="#集训面试题" class="headerlink" title="集训面试题"></a>集训面试题</h1><h1 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h1><p>服务器在不同的语境下可能表达了不同的含义：</p><ol><li>一台独立的计算机</li><li>一个应用程序</li></ol><p>绝大部分使用，作为开发者，通常把服务器看作是一个应用程序</p><p>如果一个服务器（应用程序），它仅仅为一个浏览器访问网站服务，我们称它为<strong>web 服务器</strong></p><blockquote><p>实际上，目前的 web 服务器和游戏服务器界限已经非常模糊，可以认为，凡是在互联网中提供服务的服务器都是 web 服务器</p></blockquote><p>通常，我们把访问服务器的程序，称之为客户端</p><blockquote><p>实际上，web 服务器不仅限于为浏览器提供服务，还可以为手机 app、小程序、小游戏等常见互联网应用提供服务</p></blockquote><p>常见的 web 服务器有：nginx、apache、iis<br>在开发阶段，web 服务器往往安装在本地计算机，通常也称之为本地服务器</p><blockquote><p>vscode 有一个 live server 插件，其实它就是一个轻量级的 web 服务器</p></blockquote><h1 id="如何访问服务器"><a href="#如何访问服务器" class="headerlink" title="如何访问服务器"></a>如何访问服务器</h1><p>服务器程序可能在本机，也可能在远程，它一定运行在某一台计算机上<br>要在茫茫互联网中访问到服务器程序，就必须：</p><ol><li>精确的定位到服务器所在的计算机</li><li>精确定位到计算机中的服务器程序</li><li>精确定位到程序中的某个功能</li></ol><p>通常，我们使用 url 地址来描述以上 3 个信息<br><code>url</code>地址全称为<code>Uniform Resource Locator</code>，统一资源定位符，是一个字符串，它的格式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">protocol:<span class="hljs-regexp">//</span>hostname:port/path?query<span class="hljs-comment">#hash</span><br></code></pre></td></tr></table></figure><ul><li><code>protocal</code>: 使用的协议，选择不同的协议，会导致和服务器之间消息交互格式、连接方式不同，大部分都服务器支持 http 和 https 两种协议。如果选择了服务器不支持的协议，会导致访问失败。</li><li><code>hostname</code>：主机名，可以是 <code>ip</code>、域名<ul><li><code>ip</code>：每台计算机在网络中的唯一编号，<code>127.0.0.1</code>表示本机</li><li>域名：网络中容易记忆的唯一单词，通过<code>DNS</code>服务器可以将域名解析成<code>IP</code>，<code>localhost</code>会被解析为<code>127.0.0.1</code></li></ul></li><li><code>port</code>：端口号，0~65535 之间的数字，相当于服务器计算机上的房号，使用不同的端口号相当于敲不同房间的门。计算机上的程序可以监听一个或多个端口号，如果访问的端口号有程序被监听，则计算机会将到达的网络访问交给对应的程序来处理<ul><li>端口号可以不写，使用默认值</li><li><code>http</code>协议默认值 80</li><li><code>https</code>协议默认值 443</li></ul></li><li><code>path</code>: 一个普通的字符串，该字符串会交给 web 服务器处理，主要用于定位服务<ul><li>如果<code>path</code>为<code>/</code>，则表示根路径，如<code>http://www.baidu.com/</code>的 path 就是<code>/</code></li></ul></li><li><code>query</code>: 一种特殊格式的字符串，该字符串会交给 web 服务器处理，主要用于向服务器某个服务传递一些信息<ul><li>格式为：<code>属性名=属性值&amp;属性名=属性值</code></li></ul></li></ul><p>不同服务器不一样，那百度举例子：<a href="https://www.baidu.com/s?wd=html%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%A1%E7%94%A8query,%E5%88%99https://www.baidu.com/s/html">https://www.baidu.com/s?wd=html。如果没用query,则https://www.baidu.com/s/html</a><br>不同公司给出文档：<br>path:/api/movie<br>query:<br>名字 含义 默认值<br>page 页码 1<br>limit 页容量 100<br>/api/movie?page=2?limit=20</p><ul><li><code>hash</code>：一个普通的字符串，在浏览器的地址栏中，如果 url 其他位置的信息保持不变，仅变动 hash，浏览器不会重新访问服务器，因此通常用于不刷新的页面内跳转</li></ul><p>可以看出：</p><ul><li><code>hostname</code>是用于精准定位计算机的</li><li><code>port</code>是用于精准定位服务器的</li><li><code>protocal</code>是用于告诉服务器使用哪种协议进行传输数据</li><li><code>path</code>是用于精准定位服务器上的服务的</li><li><code>query</code>是在使用服务的时候传递的额外信息，具体看服务器要求</li><li><code>hash</code>是一些额外信息，服务器要不要用具体看服务器要求</li></ul><p>示例：分析出下面 url 地址的各部分内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>baike.baidu.com<span class="hljs-regexp">/item/</span>HTML?a=<span class="hljs-number">1</span><span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure><p>注意：url 仅支持 ASCII 字符，如果是包含非 ASCII 字符，会被现代浏览器自动进行编码<br>例如：<code>https://www.baidu.com/s?wd=http协议</code><br>会被编码为<code>https://www.baidu.com/s?wd=http%E5%8D%8F%E8%AE%AE</code></p><blockquote><p>url 地址不能过长，因为很多浏览器对 url 地址长度是有限制的，chrome 对 url 的长度限制为 8182 个 ASCII 字符</p></blockquote><h1 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h1><p>我们可以通过 url 地址访问服务器，但是，浏览器和服务器之间的数据到底是怎么交互的，数据的格式是什么，这取决于使用什么协议<br>最常见的协议，就是 http 协议<br>http 协议将和服务器的一次交互看作是两段简单的过程组成：<strong>请求 request</strong>和<strong>响应 response</strong></p><ul><li>请求：客户端通过 url 地址发送数据到服务器的过程</li><li>响应：服务器收到请求数据后回馈数据给客户端的过程</li></ul><p>当 请求-响应 完成后，本次交互结束，如果需要得到额外的服务，则需要重新发送新的请求<br>同时，http 协议约定了请求的消息格式和响应的消息格式</p><h2 id="请求消息格式"><a href="#请求消息格式" class="headerlink" title="请求消息格式"></a>请求消息格式</h2><p>请求消息格式有两部分组成：<strong>请求头 request headers</strong> 和 <strong>请求体 request body</strong></p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>请求头是一个多行文本的字符串<br>比如我们请求 <a href="http://www.baidu.com/s?wd=html">http://www.baidu.com/s?wd=html</a>, 得到的请求头可能如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/s?wd=html HTTP/</span><span class="hljs-number">1.1</span><br>Host: www.baidu.com<br>User-Agent: Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/79.0.3945.88 Safari/</span><span class="hljs-number">537.36</span><br>...<br></code></pre></td></tr></table></figure><p>可以看出，该字符串有两个部分组成</p><ol><li>请求行：请求方法 path 协议<ol><li>请求方法：一个普通的字符串，会被服务器读取到。常见的请求方法：<strong>GET</strong>、<strong>POST，（可以自定义请求方法）</strong></li><li>path：即 url 中的 path + search + hash，服务器可能会用到 path 中的信息</li><li>协议：协议以及版本号，目前固定为 HTTP/1.1</li></ol></li><li>键值对：大量的属性名和属性值组合，可以自定义。<ol><li>Host：url 地址中的 hostname</li><li>User-Agent：客户端信息描述</li><li>其他键值对</li></ol></li></ol><p>请求头描述了请求的<strong>元数据</strong>信息，这里的元数据信息是指与业务无关的额外信息<br>当我们在浏览器地址栏输入一个 url 按下回车后，浏览器会自动构建一个请求头，请求方法为 GET，然后向服务器发送请求</p><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/s?wd=html HTTP/</span><span class="hljs-number">1.1</span><br>Host: www.baidu.com<br>User-Agent: Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/79.0.3945.88 Safari/</span><span class="hljs-number">537.36</span><br>Content-Type:<br>...<br>请求体中的数据<br></code></pre></td></tr></table></figure><p>包含业务数据的字符串<br>理论上，请求体可以是任意格式的字符串，但习惯上，服务器普遍能识别以下格式：</p><ul><li>application/x-www-form-urlencoded：<code>属性名=属性值&amp;属性名=属性值...</code></li><li>application/json：<code>&#123;&quot;属性名&quot;:&quot;属性值&quot;, &quot;属性名&quot;:&quot;属性值&quot;&#125;</code></li><li>multipart/form-data：使用某个随机字符串作为属性之间的分隔符，通常用于文件上传</li></ul><p>由于请求体格式的多样性，服务器在分析请求体时可能无法知晓具体的格式，从而不知道如何解析请求体，因此，服务器往往要求在请求头中附带一个属性<code>Content-Type</code>来描述请求体使用的格式<br>例如</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br>Content-<span class="hljs-keyword">Type</span>: application/json<br>Content-<span class="hljs-keyword">Type</span>: multipart/<span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span><br></code></pre></td></tr></table></figure><h3 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="GET 和 POST"></a>GET 和 POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- POST请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    账号：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginId&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    密码：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginPwd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- GET请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./b.html&quot;</span>&gt;</span>去页面b<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然 http 协议并没有规定请求方法必须是什么，但随意的请求方法服务器可能无法识别<br>服务器一般都能识别 GET 和 POST 请求，并做出以下的差异化处理</p><ol><li>如果是 GET 请求，不读取请求体，业务数据从 path 或 query 中读取</li><li>如果是 POST 请求，读取请求体，业务数据从请求体中获取，关于请求体的格式，不同的服务器、同一个服务器的不同服务要求不同<blockquote><p>在浏览器地址栏中输入 url 地址是不能产生 POST 请求的，可以使用表单提交产生 POST 请求</p></blockquote></li></ol><p>由于服务器对 GET 和 POST 处理的差异，造成了 GET 和 POST 请求的差异：</p><ol><li>GET 请求一般没有请求体，POST 请求有</li><li>GET 请求的业务数据放在地址中，安全性较差</li><li>GET 请求传递的业务数据量是有限的，POST 是无限的（除非服务器限制）</li><li>GET 请求利于分享页面结果，POST 不行</li></ol><p>响应消息格式<br>和请求类似，响应消息也分为<strong>响应头</strong>(response headers)和响应体(response body)</p><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>比如我们请求 <a href="http://www.baidu.com/s?wd=html">http://www.baidu.com/s?wd=html</a>, 得到的响应头可能如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Content-Type: text/html;charset=utf<span class="hljs-number">-8</span><br><span class="hljs-built_in">Server</span>: BWS/<span class="hljs-number">1.1</span><br>...<br></code></pre></td></tr></table></figure><p>可以看出，该字符串有两个部分组成</p><ol><li>响应行：协议 状态码 状态文本<ol><li>协议：协议以及版本号，目前固定为 HTTP/1.1</li><li>状态码和状态文本：一个数字和数字对应的单词，来描述服务器的响应状态，浏览器会根据该状态码做不同的处理。<ol><li>200 OK：一切正常。你好，<code>我好，大家好。</code></li><li>301 Moved Permanently：资源已被永久重定向。<code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></li><li>302 Found：资源已被临时重定向。<code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></li><li>304 Not Modified：文档内容未被修改。<code>你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事</code></li><li>400 Bad Request：语义有误，当前请求无法被服务器理解。<code>你给我发的是个啥啊，我听都听不懂</code></li><li>403 Forbidden：服务器拒绝执行。<code>你的请求我已收到，但是我就是不给你东西</code></li><li>404 Not Found：资源不存在。<code>你的请求我收到了，但我没有你要的东西</code></li><li>500 Internal Server Error：服务器内部错误。<code>你的请求我已收到，但这道题我不会，解不出来，先睡了</code></li><li>通常认为，0~399 之间的状态码都是正常的，其他是不正常的</li></ol></li></ol></li><li>键值对：大量的属性名和属性值组合，可以在服务器响应的时候自定义。<ol><li>Content-Type：响应体中的数据格式，常见格式如下<ol><li>·: 普通的纯文本，浏览器通常会将响应体原封不动的显示到页面上</li><li><code>text/html</code>：html 文档，浏览器通常会将响应体作为页面进行渲染</li><li><code>text/javascript</code>或<code>application/javascript</code>：js 代码，浏览器通常会使用 JS 执行引擎将它解析执行</li><li><code>text/css</code>：css 代码，浏览器会将它视为样式</li><li><code>image/jpeg</code>：浏览器会将它视为 jpg 图片</li><li><code>attachment</code>：附件，浏览器看到这个类型，通常会触发下载功能</li><li>其他<code>MIME</code>类型</li></ol></li><li>Server：web 服务器类型</li></ol></li></ol><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应消息的正文<br>网络请求</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p>不仅仅是浏览器可以发出请求并获得响应，任何具有网络通信能力的程序均可以这样做。<br>过去，在浏览器中，只有浏览器本身有发送请求的能力，直到 ajax 的出现。<br>ajax 是一种技术，让 JS 语言在浏览器环境中获得了新的 API，通过该 API，JS 代码拥有了和服务器通信的能力<br>传统的 ajax 代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest(); <span class="hljs-comment">//创建发送请求的对象</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//当请求状态发生改变时运行的函数</span><br>  <span class="hljs-comment">// xhr.readyState： 一个数字，用于判断请求到了哪个阶段</span><br>  <span class="hljs-comment">// 0: 刚刚创建好了请求对象，但还未配置请求（未调用open方法）</span><br>  <span class="hljs-comment">// 1: open方法已被调用</span><br>  <span class="hljs-comment">// 2: send方法已被调用</span><br>  <span class="hljs-comment">// 3: 正在接收服务器的响应消息体</span><br>  <span class="hljs-comment">// 4: 服务器响应的所有内容均已接收完毕</span><br>  <span class="hljs-comment">// xhr.responseText： 获取服务器响应的消息体文本</span><br>  <span class="hljs-comment">// xhr.getResponseHeader(&quot;Content-Type&quot;) 获取响应头Content-Type</span><br>&#125;;<br>xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>); <span class="hljs-comment">//设置请求头</span><br>xhr.open(<span class="hljs-string">&quot;请求方法&quot;</span>, <span class="hljs-string">&quot;url地址&quot;</span>); <span class="hljs-comment">//配置请求</span><br>xhr.send(<span class="hljs-string">&quot;请求体内容&quot;</span>); <span class="hljs-comment">//构建请求体，发送到服务器</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 ajax 访问：<a href="http://yuanjin.tech:5100/api/movie">http://yuanjin.tech:5100/api/movie</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;movies&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getMovies()&quot;</span>&gt;</span>加载电影<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncConnect</span>(<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="javascript">          xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//当请求状态发生改变时运行的函数</span></span><br><span class="javascript">            <span class="hljs-comment">// xhr.readyState： 一个数字，用于判断请求到了哪个阶段</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">              <span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText); <span class="hljs-comment">// 将json格式的字符串转换为js对象</span></span><br><span class="javascript">              resolve(obj);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;;</span><br><span class="javascript">          xhr.open(<span class="hljs-string">&quot;get&quot;</span>, url); <span class="hljs-comment">//配置请求</span></span><br><span class="javascript">          xhr.send(<span class="hljs-literal">null</span>); <span class="hljs-comment">//构建请求体，发送到服务器</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;movies&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest(); <span class="hljs-comment">//创建发送请求的对象</span></span><br><span class="javascript">      <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMovies</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> movies = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;http://yuanjin.tech:5100/api/movie&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; movies.data.length; i++) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">var</span> m = movies.data[i];</span><br><span class="javascript">          <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">          li.innerHTML = <span class="hljs-string">&quot;&lt;img src=&#x27;&quot;</span> + m.poster + <span class="hljs-string">&quot;&#x27; /&gt; &quot;</span> + m.name;</span><br><span class="javascript">          ul.appendChild(li);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>怎么验证是否登录 cookie</p><ol><li>CORS 需要设置什么头</li><li>哈西和 history 区别<a href="https://juejin.cn/post/6844903625169502216">https://juejin.cn/post/6844903625169502216</a><ol><li>ajax 跨域 解决方案 cors 分两种，简单和复杂</li><li>http 缓存 expire, cache-control <a href="https://blog.csdn.net/zhouziyu2011/article/details/71312452">https://blog.csdn.net/zhouziyu2011/article/details/71312452</a></li><li>304 缓存原理 ETag LastModified JSONP 请求特殊的参数名 <strong>callback</strong>jq 里面 datatype:”jsonp”JSONP 和普通 AJAX 有什么区别和优缺点？JSONP 支持跨域，支持 POST 请求，支持 patch 请求？axios 拦截器 axios 好好学一下 。拦截器。读一下如何封装 axios 文章如何取消 axios 重复请求<ol><li>说一下 web worker</li><li>HTML5 的离线储存怎么使用，它的工作原理是什么</li><li>浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</li></ol></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript完美收官</title>
    <link href="/2020/01/20/JavaScript%E5%AE%8C%E7%BE%8E%E6%94%B6%E5%AE%98/"/>
    <url>/2020/01/20/JavaScript%E5%AE%8C%E7%BE%8E%E6%94%B6%E5%AE%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1-快速掌握-BOM-核心技能"><a href="#1-快速掌握-BOM-核心技能" class="headerlink" title="1-快速掌握 BOM 核心技能"></a>1-快速掌握 BOM 核心技能</h1><h2 id="1-什么是-BOM"><a href="#1-什么是-BOM" class="headerlink" title="1.什么是 BOM?"></a>1.什么是 BOM?</h2><p>DOM：document object model 文档对象模型<br>BOM：browser object model     浏览器对象模型<br>主要处理浏览器窗口（window）和框架（iframe），描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，不过通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。扩展如下： 1.弹出新的浏览器窗口 2.移动、关闭浏览器窗口以及调整窗口大小 3.提供 Web 浏览器详细信息的定位对象 4.提供用户屏幕分辨率详细信息的屏幕对象 5.对 cookie 的支持<br>6.IE 扩展了 BOM，加入了 ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象</p><h2 id="2-BOM-的核心—window"><a href="#2-BOM-的核心—window" class="headerlink" title="2.BOM 的核心—window"></a>2.BOM 的核心—window</h2><p>window 对象是 BOM 的顶层(核心)对象，玩转 BOM，就是玩转 window 的属性和方法<br>助记：DOM：document. ； BOM：window.<br>Window 对象它具有双重角色，既是通过 js 访问浏览器窗口的一个接口，又是一个全局对象。这意味着在网页中定义的任何对象，变量和函数，都是 window 的属性</p><h2 id="3-BOM-和-DOM-的关系"><a href="#3-BOM-和-DOM-的关系" class="headerlink" title="3.BOM 和 DOM 的关系"></a>3.BOM 和 DOM 的关系</h2><p>JavaScript 语法的标准化组织是 ECMA（原生 JS）<br>DOM 的标准化组织是 W3C——html css<br>BOM…(很尴尬)——浏览器</p><p><img src="/img/1-1.png"></p><h2 id="4-BOM-的组成"><a href="#4-BOM-的组成" class="headerlink" title="4.BOM 的组成"></a>4.BOM 的组成</h2><p>归纳：都是对象<br>Window JavaScript 层级中的顶层对象表示浏览器窗口<br>Navigator 包含客户端浏览器的信息<br>History 包含了浏览器窗口访问过的 URL<br>Location 包含了当前 URL 的信息<br>Screen 包含客户端显示屏的信息（兼容差）</p><h3 id="详解-window"><a href="#详解-window" class="headerlink" title="详解 window"></a>详解 window</h3><p>window.innerHeight: 返回窗口的文档显示区高度：包括滚动条<br>window.innerWidth: 返回窗口的文档显示区宽度：包括滚动条<br>document.clientHeight: 不包括滚动条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log(window.pageXOffset); console.log(window.pageYOffset);<br>//可以赋值，但是不能操控滚动条<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3000px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">3000px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>iframe：父子页面。子能取爹，反之不行<br>引入了另外一个页面（有完整的 html 结构）<br>跨域，同源策略<br>name：给显示内容无关，这是窗口的名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.name = &#x27;123&#x27;; window.name;//可以取出来;窗口名字<br></code></pre></td></tr></table></figure><p>alert()警告框<br>confirm()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">window.confirm(&#x27;邓哥虚否&#x27;)//点确定则true<br>window.confirm(&#x27;邓哥虚否&#x27;)//点取消则false<br></code></pre></td></tr></table></figure><p>prompt()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.prompt(&#x27;hello&#x27;)//输入<br></code></pre></td></tr></table></figure><p>关闭广告：是否要关闭的提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.onbeforeunload = function () &#123; return &#x27;hhh&#x27; &#125;<br></code></pre></td></tr></table></figure><p>open()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>, <span class="hljs-string">&quot;duyi&quot;</span>, <span class="hljs-string">&quot;width=200, heigth:200&quot;</span>);<br><span class="hljs-keyword">var</span> newWindow = <span class="hljs-built_in">window</span>.open(<br>  <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,<br>  <span class="hljs-string">&quot;duyi&quot;</span>,<br>  <span class="hljs-string">&quot;width=200, heigth:200&quot;</span><br>);<br><span class="hljs-keyword">var</span> newWindow = <span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;./child.html&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;width=200, height=200&quot;</span>);<br>newWindow;<br></code></pre></td></tr></table></figure><p>close()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.close()<br></code></pre></td></tr></table></figure><h3 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h3><p>浏览器详解_计算机素养<br>onLine：是否联网——做离线应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.navigator.onLine) &#123;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">//取缓存</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><p>一个窗口，多次变动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">history.length history.back() history.forward() history.go(2)向前2个<br></code></pre></td></tr></table></figure><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><p>url:资源定位器<br>组成：协议，域名，端口号(https 默认 443,http 默认 80)，路径，参数，锚点（#）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">协议location.protocol 域名location.host 路径location.pathname<br>参数location.search 锚点location.hash//必须# // 改 location.href =<br>&#x27;https://www.taobao.com&#x27; location.search = &#x27;?wd=lol&#x27;;<br></code></pre></td></tr></table></figure><p>改域名/参数——页面刷新<br>改锚点——不刷新————应用：单页面应用</p><h1 id="2-javascript-必会常用知识点"><a href="#2-javascript-必会常用知识点" class="headerlink" title="2-javascript 必会常用知识点"></a>2-javascript 必会常用知识点</h1><h1 id="一、浏览器的基本组成"><a href="#一、浏览器的基本组成" class="headerlink" title="一、浏览器的基本组成"></a>一、浏览器的基本组成</h1><blockquote><p>要说 DOCTYPE (改变渲染模式)，其和最后页面被展示的效果有关系，那我们深入浅出一下吧</p></blockquote><p>浏览器请求页面大致经历了哪些过程</p><ol><li>发送 url，DNS 查询，请求 IP 地址</li><li>TCP 三次握手</li><li>服务器响应内容 js html css img</li><li>按照成哥讲的 js 时间线理解 js 解析执行的过程就好</li><li>渲染页面： DOM 树 CSSDOM 树，生成 RENDER 树，布局，渲染</li><li>TCP 四次挥手</li></ol><p>这一过程有很多部分参与，说一下浏览器的组成，和组成部分的功能。<br>这里着重说一下渲染页面这部分，有渲染引擎主要参与<br>以下我们主要来说其渲染的过程</p><h2 id="1-浏览器的基本组成"><a href="#1-浏览器的基本组成" class="headerlink" title="1.浏览器的基本组成"></a>1.浏览器的基本组成</h2><ol><li>用户界面——外壳</li><li>浏览器引擎——程序</li><li>渲染引擎</li><li>网络</li><li>UI 后端</li><li>Js 引擎——解释执行 js</li><li>数据存储</li></ol><h2 id="2-页面展示过程分析"><a href="#2-页面展示过程分析" class="headerlink" title="2.页面展示过程分析"></a>2.页面展示过程分析</h2><p><img src="/img/1-2.png"><br>上图解析：输入 url：先 onLine 是否脱机，脱机取缓存，没脱机进行下一步</p><h2 id="3-浏览器基本组成"><a href="#3-浏览器基本组成" class="headerlink" title="3.浏览器基本组成"></a>3.浏览器基本组成</h2><p><img src="/img/1-3.png"><br>在布局这块 是由不同渲染模式来定义不同的规则的<br>拿一个举例子  IE6 怪异模式盒子模型 和 标准模式盒子模型    IE6 怪异模式和标准模式的 margin: 100 auto 0;<br>总结一下: 渲染的最后效果，由于采取模式的不同而产生了不同的效果<br>我们能大概了解了渲染模式是什么意思有什么样的作用。</p><p>IE6 怪异模式其实现在主流浏览器都已经不然兼容了（不去迎合了，被废弃掉了）但我们可以见到了解一下历史以及上述的过程吗。为什么要有怪异模式和标准模式的区别-》向前兼容如何控制显示页面的浏览器采取什么样的模式来渲染  DOCTYPE<br>​</p><h1 id="面试题：浏览器渲染原理"><a href="#面试题：浏览器渲染原理" class="headerlink" title="面试题：浏览器渲染原理"></a>面试题：浏览器渲染原理</h1><ul><li>介绍一下你对浏览器内核的理解？</li></ul><p>主要分成两部分：渲染引擎和 JS 引擎。 渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，<strong>渲染引擎</strong>可以显示 html、xml 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型 数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。 <strong>JS 引擎</strong>：解析和执行 javascript 来实现网页的动态效果。最开始渲染引擎和 JS 引擎并 没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎</p><ul><li>浏览器的渲染原理？</li></ul><p>（1）首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元 素及属性节点组成的。 （2）然后对 CSS 进行解析，生成 CSSOM 规则树。</p><p>（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象， 渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种 对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM 元素对应 几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</p><p>（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲 染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是 要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</p><p>（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们 的内容显示在屏幕上，绘制使用 UI 基础组件。值得注意的是，这个过程是逐步完成的，为 了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同 时，可能还在通过网络下载其余内容</p><ul><li>渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）</li></ul><p>JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎， 等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。 也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都 建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放 在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</p><ul><li>CSS 如何阻塞文档解析？（浏览器解析过程）</li></ul><p>理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而， 存在一个问题，JavaScript 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还 没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么 浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM 的下载和构建。也就 是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续 文档的解析。</p><h1 id="二、渲染引擎-渲染模式"><a href="#二、渲染引擎-渲染模式" class="headerlink" title="二、渲染引擎-渲染模式"></a>二、渲染引擎-渲染模式</h1><h2 id="1-什么是渲染？-渲染引擎，渲染过程"><a href="#1-什么是渲染？-渲染引擎，渲染过程" class="headerlink" title="1.什么是渲染？ 渲染引擎，渲染过程"></a>1.什么是渲染？ 渲染引擎，渲染过程</h2><p>渲染: 在电脑绘图中是指用软件从模型生成图像的过程。<br>渲染引擎: 其职责就是渲染，即在浏览器窗口中显示所请求的内容。<br>过程：解析 html 从而构建 DOM 树-&gt;CSS Rule 树-&gt;构建 Render 树-&gt;布局 Render 树-&gt;绘制 Render 树<br>DOMtree 没有样式；CSStree 没有结构<br><img src="/img/1-4.png"></p><h2 id="2-渲染模式的历史意义"><a href="#2-渲染模式的历史意义" class="headerlink" title="2.渲染模式的历史意义"></a>2.渲染模式的历史意义</h2><p>在多年以前（IE6 诞生以前），各浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。<br>随着 WEB 的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如 IE6 就是其中之一。<br>但是考虑到以前建设的网站并不支持标准模式，所以各浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）。<br>向前兼容网页，向后兼容浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.compatMode);<br><span class="hljs-comment">//1.&lt;!DOCTYPE html&gt;写——CSS1compat  标准</span><br><span class="hljs-comment">//2.&lt;!DOCTYPE html&gt;不写——Backcompat 怪异，虽说是怪异了，但是也不是完全怪异，区别不是很大，google怪异也变不成IE那种</span><br></code></pre></td></tr></table></figure><h2 id="3-渲染模式如何控制"><a href="#3-渲染模式如何控制" class="headerlink" title="3.渲染模式如何控制"></a>3.渲染模式如何控制</h2><p>三种标准模式的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">1.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>2.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br>3.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/1-5.png"></p><h1 id="三、Label-标签"><a href="#三、Label-标签" class="headerlink" title="三、Label 标签"></a>三、Label 标签</h1><p>应用:鼠标聚焦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关联触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLabel = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;label&quot;</span>)[<span class="hljs-number">0</span>];<br>oLabel.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br><span class="hljs-keyword">var</span> oInput = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>);<br>oInput.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="四、属性和特性"><a href="#四、属性和特性" class="headerlink" title="四、属性和特性"></a>四、属性和特性</h1><h3 id="属性和特性"><a href="#属性和特性" class="headerlink" title="属性和特性"></a>属性和特性</h3><p>特性：天生就可以具有的如 id type class value checked   有映射关系 js 对象-&gt;html 标签<br>属性包含特性  <br>非特性的属性： data cst log times 等等     无映射关系 js 对象-&gt;html 标签<br>在行间加属性：setAttribute getAttribute 。<br>是属性就能赋值<br>jq 源码  attr prop 底层原理就是这个。prop 是正常 JS 操作，点…。attr 是 setAttribute getAttribute。<br>​</p><h3 id="图片预加载和懒加载"><a href="#图片预加载和懒加载" class="headerlink" title="图片预加载和懒加载"></a>图片预加载和懒加载</h3><p>图片预加载 有充裕的能力时可以这么做<br>加载图片一点点出现，用户体验比较差<br>懒加载：按需加载：<br>写一个预加载：还没加载完不展示（不让她一点一点展示），下载完在展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建方法1</span><br><span class="hljs-comment">// var oImage = document.createElement(&#x27;img&#x27;);</span><br><span class="hljs-comment">// 创建方法2</span><br><span class="hljs-keyword">var</span> oImage = <span class="hljs-keyword">new</span> Image();<br>oImage.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>);<br>  appendChild(<span class="hljs-built_in">this</span>);<br>&#125;;<br>oImage.src =<br>  <span class="hljs-string">&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2187922730,604631233&amp;fm=27&amp;gp=0.jpg&quot;</span>;<br></code></pre></td></tr></table></figure><p>懒加载<br>淘宝 图片预加载+懒加载<br>监控滑轮位置；不断判断当前 div 位置；采用预加载；把图片正式的添加到页面中<br>Math.random()∈[0, 1)<br>12~36 随机数：<br>12+24*Math.random()<br>文档碎片 docuemnt.createDocumentFragment();<br>集中操作减少布局计算（重排）和绘制次数（重绘）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oF = <span class="hljs-built_in">document</span>.createDocumentFragment();<br><span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;wrapper&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-keyword">var</span> newLi = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>);<br>  newLi.innerText = i + <span class="hljs-string">&quot;&quot;</span>;<br>  oF.appendChild(newLi);<br>&#125;<br>oUl.appendChild(oF);<br></code></pre></td></tr></table></figure><p>理想很丰满显示很骨干,并未提高多少效率<br>其实可以采用字符串拼接的方式<br>现在还没学 vue，现在可以用字符串拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlStr = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;wrapper&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  htmlStr += <span class="hljs-string">&quot;&lt;li&gt;&quot;</span> + i + <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>;<br>&#125;<br>oUl.innerHTML = htmlStr;<br></code></pre></td></tr></table></figure><p>封装 className <br>document.getElementsByClassName()<br>​</p><h1 id="Bug-调试方法"><a href="#Bug-调试方法" class="headerlink" title="Bug 调试方法"></a>Bug 调试方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.页面一开始就报错了控制台直接显示错误信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length, i++) &#123;<span class="hljs-comment">//error</span><br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      update(<span class="hljs-built_in">this</span>, index);<br>    &#125;<br>  &#125;)(i);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.页面一开始没报错，执行中报错了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      update(<span class="hljs-built_in">this</span>, index);<br>    &#125;;<br>  &#125;)(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updata</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  <span class="hljs-comment">//error</span><br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.没有报错和预想不一样   结果反推</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// console.log(i);//10</span><br>      <span class="hljs-comment">// update(i);//error</span><br>    &#125;;<br>  &#125;)(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  <span class="hljs-comment">// dom可变量</span><br>  <span class="hljs-comment">// console.log(dom, index);//10 undefined</span><br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><p>断点调试.写上 debugger</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;l&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      update(<span class="hljs-built_in">this</span>, index);<br>    &#125;;<br>  &#125;)(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h1><ol><li> 字符串长度<code>str.length</code></li><li>查找字符串中的字符串<br> <code>indexOf</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;The full name of China is the People&#x27;s Republic of China.&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.indexOf(<span class="hljs-string">&quot;China&quot;</span>); <span class="hljs-comment">// 首次出现索引的地方:17</span><br></code></pre></td></tr></table></figure><pre><code> `lastIndexOf()` 指定文本在字符串中_最后_一次出现的索引</code></pre><p>两种方法</p><ol><li>没找到返回-1</li><li>可以传第二个参数（ 作为检索起始位置 ）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;The full name of China is the People&#x27;s Republic of China.&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.indexOf(<span class="hljs-string">&quot;China&quot;</span>, <span class="hljs-number">18</span>); <span class="hljs-comment">// 51</span><br></code></pre></td></tr></table></figure><ol start="3"><li>检索字符串中的字符串<code>search()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;The full name of China is the People&#x27;s Republic of China.&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.search(<span class="hljs-string">&quot;full&quot;</span>); <span class="hljs-comment">// 返回匹配的位置 4</span><br></code></pre></td></tr></table></figure><blockquote><p>两种方法，indexOf() 与 search()，是<em>相等的</em>。</p></blockquote><p>这两种方法是不相等的。区别在于：</p><ul><li>search() 方法无法设置第二个开始位置参数。</li><li>indexOf() 方法无法设置更强大的搜索值（正则表达式）。</li></ul><ol start="4"><li>提取部分字符串<br> 有三种提取部分字符串的方法：</li></ol><ul><li><code>slice(start, end)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">7</span>, <span class="hljs-number">13</span>); <span class="hljs-comment">// Banana</span><br></code></pre></td></tr></table></figure><p>如果某个参数为负，则从字符串的结尾开始计数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.slice(-<span class="hljs-number">13</span>, -<span class="hljs-number">7</span>); <span class="hljs-comment">// Banana</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则该方法将裁剪字符串的剩余部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>从结尾计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> res = str.slice(-<span class="hljs-number">13</span>);<br></code></pre></td></tr></table></figure><ul><li><code>substring(start, end)</code></li></ul><p>substring() 类似于 slice()。不同之处在于 substring() 无法接受负的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.substring(<span class="hljs-number">7</span>, <span class="hljs-number">13</span>); <span class="hljs-comment">// &#x27;Banana&#x27;</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则该 substring() 将裁剪字符串的剩余部分。</p><ul><li><code>substr(start, length)</code></li></ul><p>substr() 类似于 slice()。不同之处在于第二个参数规定被提取部分的<em>长度</em>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.substr(<span class="hljs-number">7</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">// Banana</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。</p><p>如果首个参数为负，则从字符串的结尾计算位置。 第二个参数不能为负，因为它定义的是长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.substr(-<span class="hljs-number">5</span>); <span class="hljs-comment">// Mango</span><br></code></pre></td></tr></table></figure><ol start="5"><li>替换字符串内容<code>replace()</code></li></ol><p>replace() 方法不会改变调用它的字符串。它返回的是新字符串。</p><p>默认地，replace() 只替换首个匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;Please visit Microsoft!&quot;</span>;<br><span class="hljs-keyword">var</span> n = str.replace(<span class="hljs-string">&quot;Microsoft&quot;</span>, <span class="hljs-string">&quot;W3School&quot;</span>);<br></code></pre></td></tr></table></figure><p>如需执行大小写不敏感的替换，请使用正则表达式 /i（大小写不敏感）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;Please visit Microsoft!&quot;</span>;<br><span class="hljs-keyword">var</span> n = str.replace(<span class="hljs-regexp">/MICROSOFT/i</span>, <span class="hljs-string">&quot;W3School&quot;</span>);<br></code></pre></td></tr></table></figure><p>如需替换所有匹配，请使用正则表达式的 g 标志（用于全局搜索）：</p><ol start="6"><li>转换为大写和小写</li></ol><p><code>toUpperCase()</code>: 把字符串转换为大写：</p><p><code>toLowerCase ()</code>: 把字符串转换为小写：</p><ol start="7"><li><code>concat()</code>方法 连接两个或多个字符串</li></ol><p>所有字符串方法都会返回新字符串。它们不会修改原始字符串。</p><p>正式地说：字符串是不可变的：字符串不能更改，只能替换。</p><ol start="8"><li> <code>String.trim()</code> 删除字符串两端的空白符：</li><li>提取字符串字符<br> 这是两个提取字符串字符的<em>安全</em>方法：</li></ol><ul><li>charAt(position)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>str.charAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// 返回 H</span><br></code></pre></td></tr></table></figure><ul><li>charCodeAt(position)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>str.charCodeAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// 返回 72</span><br></code></pre></td></tr></table></figure><h2 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h2><p>ECMAScript 5 (2009) 允许对字符串的属性访问 [ ]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>str[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 返回 H</span><br></code></pre></td></tr></table></figure><p>使用属性访问有点不太靠谱</p><ul><li>它让字符串看起来像是数组（其实并不是）</li><li>如果找不到字符，[ ]返回 undefined，而 charAt()返回空字符串。</li><li>它是只读的。str[0] = “A”不会产生错误（但也不会工作！）<blockquote><p>如果您希望按照数组的方式处理字符串，可以先把它转换为数组。</p></blockquote></li></ul><p>把字符串转换为数组<br>split()</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ol><li>直接字面量</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><ol start="2"><li>构造器构造</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//arr=[1,2,3,4];</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// arr=[empty*10]</span><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// arr=[1,2,3,4]</span><br></code></pre></td></tr></table></figure><p>构造器构造的数组，如果构造函数的参数传递一个数字代表的是数组的长度，数组当中每一项默认为 empty.</p><ol start="3"><li>Array.of</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//[1,2,3];</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// [3]</span><br></code></pre></td></tr></table></figure><p>Array.of 是返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。Array.of()出现的目的是为了解决构造器构造中因参数个数不同，导致的行为有差异的问题。</p><ol start="4"><li>Array.from(Array.from 是将类数组转换成数组的方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">Array</span>.from(obj); <span class="hljs-comment">//arr=[1,2,3]</span><br></code></pre></td></tr></table></figure><h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><h2 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h2><p>splice</p><p>arr.splice(从第几位开始，剪切多少长度，在切口处添加新的数据)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>];<br>arr.splice(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]; <span class="hljs-comment">//实现把4填进去</span><br>arr.splice(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//鼠标光标在前面</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.splice(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//倒数第一位</span><br></code></pre></td></tr></table></figure><p>push</p><p>把数组的最后一位增加</p><p>unshift</p><p>和 push 方向相反，在前面加东西</p><p>pop</p><p>把数组的最后一位剪切出去   不能传参</p><p>shift</p><p>把前面减 arr.shift()</p><p>reverse</p><p>逆反</p><p>sort 排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b; <span class="hljs-comment">//升序</span><br>  <span class="hljs-comment">//return b - a;//降序</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>copyWithin</p><p>复制数组中某些连接的数据到指定位置</p><p>fill</p><p>填充数组</p><h2 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h2><p>concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> c = arr.concat(arr1);<br></code></pre></td></tr></table></figure><p>toString<br>数组变成字符串<br>Slice<br>截取数组中部分连接数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-comment">// 1.两个参数，slice（从该位开始截取，截取到该位）</span><br><span class="hljs-comment">// var newArr = arr.slice(1,3);</span><br><span class="hljs-comment">// 2.一个参数slice（从第几位开始截取，截取到最后）</span><br><span class="hljs-keyword">var</span> newArr = arr.slice(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> newArr = arr.slice(-<span class="hljs-number">4</span>); <span class="hljs-comment">//-4+6位</span><br><span class="hljs-comment">// 3.没参数：全截取</span><br></code></pre></td></tr></table></figure><p>join<br>实现字符串连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.join(<span class="hljs-string">&quot;-&quot;</span>); <span class="hljs-comment">//必须是字符串形式</span><br>arr = [<span class="hljs-number">1</span> - <span class="hljs-number">2</span> - <span class="hljs-number">3</span> - <span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><p>split()</p><p>互逆方法：按照什么拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span> - <span class="hljs-number">2</span> - <span class="hljs-number">3</span> - <span class="hljs-number">4</span>];<br>arr.split(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">//必须是字符串形式</span><br></code></pre></td></tr></table></figure><p>数组转字符串 join<br>字符串转数组 split</p><p>forEach<br>遍历<br>indexOf<br>lastIndexOf<br>includes<br>toLocalString</p><p>是不是数组：isArray</p><h1 id="数组遍历方法"><a href="#数组遍历方法" class="headerlink" title="数组遍历方法"></a>数组遍历方法</h1><p>es5<br>forEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">arr1.forEach(<span class="hljs-function">(<span class="hljs-params">ele, index, arr1</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(ele)<br>&#125;)<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><pre><code>map</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = arr1.map(<span class="hljs-function">(<span class="hljs-params">ele, index, arr1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> ele * <span class="hljs-number">2</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code>filter</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = arr1.filter(<span class="hljs-function">(<span class="hljs-params">ele, index, arr1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> ele &gt; <span class="hljs-number">2</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code>everysomereducereduceRight</code></pre><p>es6<br>find<br>findIndex<br>keys<br>values<br>entries</p><h1 id="数组开头-结尾添加元素"><a href="#数组开头-结尾添加元素" class="headerlink" title="数组开头/结尾添加元素"></a>数组开头/结尾添加元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myArray = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>];<br>方法<span class="hljs-number">1</span>;<br>myArray.push(<span class="hljs-string">&quot;end&quot;</span>);<br>myArray.unshift(<span class="hljs-string">&quot;start&quot;</span>);<br>方法<span class="hljs-number">2</span>;<br>myArray = [<span class="hljs-string">&quot;start&quot;</span>, ...myArray];<br>myArray = [...myArray, <span class="hljs-string">&quot;end&quot;</span>];<br></code></pre></td></tr></table></figure><h1 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.slice.call(arrayLike);<br>返回的是一个<span class="hljs-built_in">Array</span>类型对象;<br></code></pre></td></tr></table></figure><p>已知数组 var stringArray = [“This”, “is”, “Baidu”, “Campus”]  This is Baidu Campus”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> stringArray = [<span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;baidu&quot;</span>];<br>stringArray = stringArray.join(<span class="hljs-string">&quot; &quot;</span>);<br>stringArray = stringArray.toString();<br><span class="hljs-built_in">console</span>.log(stringArray);<br></code></pre></td></tr></table></figure><p>Foreach<br>初探</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>];<br><span class="hljs-comment">// 数组方法：定义在Array.prototype</span><br><span class="hljs-comment">// forEach:参数：函数</span><br><span class="hljs-comment">// personArr.forEach(</span><br><span class="hljs-comment">//     // 不断调用，执行几次取决于数组元素的个数</span><br><span class="hljs-comment">//     function (ele, index, self) &#123;</span><br><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// );</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(ele, index, self);<br>&#125;<br>personArr.forEach(deal);<br></code></pre></td></tr></table></figure><p>小应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oLiArray = oUl.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">//类数组</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> personArr = [</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">  ];</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;</span><br><span class="javascript">    oLiArray[index].innerText = ele.name;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  personArr.forEach(deal);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>深入源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      <span class="hljs-keyword">var</span> oLiArray = oUl.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">//类数组</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> personArr = [</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">      ];</span><br><span class="javascript">      <span class="hljs-comment">// 目的：数组实例可以调用该方法，要达到循环遍历的作用</span></span><br><span class="javascript">      <span class="hljs-comment">// 参数：需要一个函数，最后实现我们一系列功能，函数执行的时候也会接受参数 ele(元素) index(该元素在数组中的索引) self(数组本身)</span></span><br><span class="javascript">      <span class="hljs-built_in">Array</span>.prototype.myForEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 实现功能：执行多少次取决于数组的个数</span></span><br><span class="javascript">        <span class="hljs-comment">// this =&gt; personArr</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;</span><br><span class="javascript">          <span class="hljs-comment">// this[i] 等价于 personArr[0]</span></span><br><span class="javascript">          func(<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(ele, index, self);</span></span><br><span class="javascript">        oLiArray[index].innerText = ele.name;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      personArr.myForEach(deal);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(ele, index, self, <span class="hljs-built_in">this</span>);<br>  <span class="hljs-comment">// this是谁取决于：是否传第二个参数，不传则window</span><br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br>personArr.forEach(deal, obj);<br></code></pre></td></tr></table></figure><p>源码实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oLiArray = oUl.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">//类数组</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> personArr = [</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">  ];</span><br><span class="javascript">  <span class="hljs-built_in">Array</span>.prototype.myForEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;</span><br><span class="javascript">    <span class="hljs-comment">// 实际参数列表</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] != <span class="hljs-literal">undefined</span> ? <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] : <span class="hljs-built_in">window</span>;</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;</span><br><span class="javascript">      func.apply(_this, [<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// this =&gt; window</span></span><br><span class="javascript">    oLiArray[index].innerText = ele.name;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(ele, index, self, <span class="hljs-built_in">this</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;</span><br><span class="javascript">  personArr.myForEach(deal, obj);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Filter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>];<br><br><span class="hljs-comment">// Array.prototype.filter 对数组过滤作用，基于遍历的</span><br><span class="hljs-comment">// filter 参数 函数</span><br><span class="hljs-comment">// filter执行完后，会返回一个新的数组</span><br><span class="hljs-keyword">var</span> newArray = personArr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-comment">// if (ele.sex == &quot;m&quot;) &#123;</span><br>  <span class="hljs-comment">//     return true;</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//     return false;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">return</span> ele.sex == <span class="hljs-string">&quot;m&quot;</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newArray);<br></code></pre></td></tr></table></figure><p>封装 filter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>];<br><span class="hljs-built_in">Array</span>.prototype.myFilter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = [];<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>; <span class="hljs-comment">//遇到真的直接返回</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    func.apply(_this, [<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]) &amp;&amp; arr.push(<span class="hljs-built_in">this</span>[i]); <span class="hljs-comment">//如果前面正确，就用后面的</span><br>    <span class="hljs-comment">// 写法2</span><br>    <span class="hljs-comment">// if (func.apply(_this, [this[i], i, this])) &#123;</span><br>    <span class="hljs-comment">//     arr.push(this[i]);</span><br>    <span class="hljs-comment">// &#125;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br><span class="hljs-keyword">var</span> newArr = personArr.myFilter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-comment">// this</span><br>  <span class="hljs-keyword">return</span> ele.sex == <span class="hljs-string">&quot;f&quot;</span>;<br>&#125;, obj);<br><span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><p>Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><br><span class="hljs-comment">// Array.prototype.map映射作用 返回新数组</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> newNameArr = personArr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-comment">// this=obj</span><br>  <span class="hljs-comment">// console.log(ele, index, self, this);</span><br>  <span class="hljs-keyword">return</span> ele.name;<br>&#125;, obj);<br><span class="hljs-built_in">console</span>.log(newNameArr);<br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><br><span class="hljs-built_in">Array</span>.prototype.myMap = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = [];<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    arr.push(func.call(_this, <span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>));<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> newNameArr = personArr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">return</span> ele.name;<br>&#125;, obj);<br><span class="hljs-built_in">console</span>.log(newNameArr);<br></code></pre></td></tr></table></figure><p>Every</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><span class="hljs-comment">// Array.prototype.every</span><br><span class="hljs-comment">// 目的：判断数组元素是否都符合条件 true false</span><br><span class="hljs-keyword">var</span> flag = personArr.every(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">if</span> (ele.age &gt; <span class="hljs-number">18</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;<br>);<br><span class="hljs-built_in">console</span>.log(flag);<br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><span class="hljs-built_in">Array</span>.prototype.myEvery = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">if</span> (func.apply(_this, [<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]) == <span class="hljs-literal">false</span>) &#123;<br>      flag = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> flag;<br>&#125;;<br><span class="hljs-keyword">var</span> flag = personArr.myEvery(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">if</span> (ele.age &gt; <span class="hljs-number">18</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;<br>);<br><span class="hljs-built_in">console</span>.log(flag);<br></code></pre></td></tr></table></figure><p>Some</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">var</span> flag = personArr.some(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>    <span class="hljs-comment">// 一真则真</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">if</span> (ele.age &lt; <span class="hljs-number">18</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;<br>);<br><span class="hljs-built_in">console</span>.log(flag);<br></code></pre></td></tr></table></figure><p>Reduce 从左向右遍历<a href="https://segmentfault.com/a/1190000017420042">https://segmentfault.com/a/1190000017420042</a><br>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.cookie);<br><span class="hljs-keyword">var</span> cookieStr =<br>  <span class="hljs-string">&quot;BIDUPSID=5B95EF6FA42E8383ED0DF3B230A443E4; PSTM=1604537657; BAIDUID=5B95EF6FA42E8383AAD0F65E4D7F2E56:FG=1; H_WISE_SIDS=107319_110085_127969_128698_131423_132548_151533_154213_165135_165935_166148_167537_168389_168490_168542_169060_169308_169770_170036_170817_170872_171159_171235_171706_171930_172385_172499_172678_172871_172897_172938_172996_173016_173033_173125_173127_173129_173202_173221_173244_173369_173387_173414_173564_173609_173711_8000097_8000106_8000129_8000139_8000145; MSA_WH=375_667; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BD_UPN=12314753; H_PS_PSSID=34298_33801_34322_31253_34331_34004_34072_34092_26350_34246; BAIDUID_BFESS=5B95EF6FA42E8383AAD0F65E4D7F2E56:FG=1; delPer=0; BD_CK_SAM=1; PSINO=1; H_PS_645EC=00aeqYdOwo0pndDhzUfhp00eoOoEcL5cDeqOEhDW1M7FqfrhZGt8gXfo6mNS3VkB7bbR; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; BD_HOME=1; BA_HECTOR=8g04210g0g0g2l2h5i1ggab600q&quot;</span>;<br><span class="hljs-comment">// name =&gt; value</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseCookieStr</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> cookieArr = str.split(<span class="hljs-string">&quot;; &quot;</span>);<br>  <span class="hljs-keyword">return</span> cookieArr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">preValue, icurValue, index, self</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(preValue, icurValue)</span><br>    <span class="hljs-keyword">var</span> arr = icurValue.split(<span class="hljs-string">&quot;=&quot;</span>);<br>    preValue[arr[<span class="hljs-number">0</span>]] = arr[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> preValue;<br>  &#125;, obj);<br>  <span class="hljs-comment">// console.log(cookieArr)</span><br>&#125;<br><br><span class="hljs-comment">// console.log(parseCookieStr(cookieStr));</span><br><span class="hljs-keyword">var</span> cookieObj = parseCookieStr(cookieStr);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.myReduce = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func, initialValue</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length,<br>    _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>] || <span class="hljs-built_in">window</span>,<br>    nextValue = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    nextValue = func.apply(_this, [nextValue, <span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> nextValue;<br>&#125;;<br></code></pre></td></tr></table></figure><p>ReduceRight 从右向左遍历</p><h1 id="题"><a href="#题" class="headerlink" title="题"></a>题</h1><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;baidu&quot;</span>];<br><span class="hljs-built_in">console</span>.log(arr.toString()); <span class="hljs-comment">//this,is,baidu</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//this is baidu</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//已知有字符串 foo=&quot;get-element-by-id&quot;,写一个 function 将其转化成驼峰表示法&quot;getElementById&quot;。</span><br>答案：<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combo</span>(<span class="hljs-params">msg</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> arr = msg.split(<span class="hljs-string">&quot;-&quot;</span>);<br>  <span class="hljs-keyword">var</span> len = arr.length; <span class="hljs-comment">//将 arr.length 存储在一个局部变量可以提高 for 循环效</span><br>  率<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)&#123;<br>    arr[i]=arr[i].charAt(<span class="hljs-number">0</span>).toUpperCase()+arr[i].substr(<span class="hljs-number">1</span>,arr[i].length-<span class="hljs-number">1</span>);<br>  &#125;<br>  msg=arr.join(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">specify(‘hello,world’)<span class="hljs-comment">//=&gt;’h,e,l,l,o,w,o,r,l,d’ 实 现 specify</span><br>函<br></code></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="你不知道的-JS"><a href="#你不知道的-JS" class="headerlink" title="你不知道的 JS"></a>你不知道的 JS</h1><h1 id="一、UI-多线程"><a href="#一、UI-多线程" class="headerlink" title="一、UI 多线程"></a>一、UI 多线程</h1><h2 id="1-浏览器常驻的线程"><a href="#1-浏览器常驻的线程" class="headerlink" title="1.浏览器常驻的线程"></a>1.浏览器常驻的线程</h2><blockquote><p>js 引擎线程 （解释执行 js 代码、用户输入、网络请求）<br>GUI 线程 （绘制用户界面、与 js 主线程是互斥的）<br>http 网络请求线程 （处理用户的 get、post 等请求，等返回结果后将回调函数推入任务队列）<br>定时触发器线程 （setTimeout、setInterval 等待时间结束后把执行函数推入任务队列中）<br>浏览器事件处理线程 （将 click、mouse 等交互事件发生后将这些事件放入事件队列中）</p></blockquote><h2 id="2-UI-主线程负责协调运转"><a href="#2-UI-主线程负责协调运转" class="headerlink" title="2.UI 主线程负责协调运转"></a>2.UI 主线程负责协调运转</h2><p><img src="/img/1-6.png"></p><h2 id="3-JS-引擎线程和-GUI-线程-互斥"><a href="#3-JS-引擎线程和-GUI-线程-互斥" class="headerlink" title="3.JS 引擎线程和 GUI 线程-互斥"></a>3.JS 引擎线程和 GUI 线程-互斥</h2><p>JS 可以操作 DOM 元素，进而会影响到 GUI 的渲染结果，因此 JS 引擎线程与 GUI 渲染线程是互斥的。也就是说当 JS 引擎线程处于运行状态时，GUI 渲染线程将处于冻结状态。<br>JS 单线程：当死循环，点击事件永远失效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">  <span class="hljs-comment">// dieLoop();//这里因为是死循环，所以执行点击的时候，不会触发UI，按钮样式不会变化</span></span><br><span class="javascript">  oBtn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;0&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dieLoop</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;&#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-Js-执行机制-单线程"><a href="#4-Js-执行机制-单线程" class="headerlink" title="4.Js 执行机制-单线程"></a>4.Js 执行机制-单线程</h2><p>单线程-同一时间只能做一件事</p><blockquote><p>Js 执行机制-多线程不好吗？</p></blockquote><p>js 设计出来就是为了与用户交互，处理 DOM，假如 js 是多线程，同一时间一个线程想要修改 DOM，另一个线程想要删除 DOM，问题就变得复杂许多，浏览器不知道听谁的，如果引入“锁”的机制，这不就又回到了被其他语言尴尬的困境了吗。</p><h2 id="5-大量数据操作怎么办？"><a href="#5-大量数据操作怎么办？" class="headerlink" title="5.大量数据操作怎么办？"></a>5.大量数据操作怎么办？</h2><p>单线程计算能力有限，大量数据需要计算渲染的话，我们可以配合后端进行操作，比如我们后期进阶班里降到的 VUE 与 nodejs 配合，也就是传说中的 SSR 技术。</p><h2 id="6-Js-执行机制"><a href="#6-Js-执行机制" class="headerlink" title="6.Js 执行机制"></a>6.Js 执行机制</h2><p>JavaScript 是基于单线程运行的，同时又是可以异步执行的，一般来说这种既是单线程又是异步的语言都是基于事件来驱动的，恰好浏览器就给 JavaScript 提供了这么一个环境<br>导图要表达的内容用文字来表述的话：<br><img src="/img/1-7.png"><br>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数。<br>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。<br>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</p><p>上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</p><blockquote><p>同步任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params">ot</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params">it</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(it);<br>  &#125;<br>  inner(<span class="hljs-number">20</span>);<br>  <span class="hljs-built_in">console</span>.log(ot);<br>&#125;<br>outer(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><ol><li>代码没有执行的时候，执行栈为空栈</li><li>foo 函数执行时，创建了一帧，这帧中包含了形参、局部变量（预编译过程），然后把这一帧压入栈中</li><li>然后执行 foo 函数内代码，执行 bar 函数</li><li>创建新帧，同样有形参、局部变量，压入栈中</li><li>bar 函数执行完毕，弹出栈</li><li>foo 函数执行完毕，弹出栈</li><li>执行栈为空<br>执行栈其实相当于 js 主线程<blockquote><p>异步任务</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>  <span class="hljs-attr">url</span>: ‘localhost:<span class="hljs-regexp">/js/</span>demo.json’,<br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br>       <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(‘run’);<br></code></pre></td></tr></table></figure><p>Ajax 进入 Event Table，注册回调函数 success<br>执行 console.log(‘run’)<br>ajax 事件完成 http 网络请求线程把任务放入 Event Queue 中<br>主线程（调用栈）读取任务下执行 success 函数<br>换一张图理解一下<br>用定时器举个栗子<br><img src="/img/1-8.png"></p><h2 id="7-重新理解定时器"><a href="#7-重新理解定时器" class="headerlink" title="7.重新理解定时器"></a>7.重新理解定时器</h2><p>setTimeout 的等待时间结束后并不是直接执行的而是先推入浏览器<br>的一个任务队列，在同步队列结束后在依次调用任务队列中的任务。<br>setTimeout(function(){}, 0)Js 主线程中的执行栈为空时，0 毫秒实际上也达不到的，根据 HTML 标准，最低 4 毫秒。<br>setInterval 是每隔一段时间把任务放到 Event Queue 之中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> statTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//+:直接调用getTime</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">time</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; time; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(statTime);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - statTime);<br>&#125;, <span class="hljs-number">100</span>);<br>sleep(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></figure><p>定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(‘time’)&#125;, <span class="hljs-number">400</span>);<br>outer(<span class="hljs-number">100000</span>);<br><span class="hljs-built_in">console</span>.log(‘hello world’);<br></code></pre></td></tr></table></figure><p>真正了解底层原理，才能是持续化发展之路。</p><h1 id="二、Bind-的模拟实现"><a href="#二、Bind-的模拟实现" class="headerlink" title="二、Bind 的模拟实现"></a>二、Bind 的模拟实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = &#123;<br>  <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.message = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-built_in">this</span>.bindEvent();<br>  &#125;,<br>  <span class="hljs-attr">bindEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this = list</span><br>    <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)[<span class="hljs-number">0</span>];<br>    oDiv.onclick = <span class="hljs-built_in">this</span>.show; <span class="hljs-comment">// div</span><br>  &#125;,<br>  <span class="hljs-comment">// show : function () &#123;</span><br>  <span class="hljs-comment">// console.log(this);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-attr">show</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.target);<br>  &#125;,<br>&#125;;<br>list.init();<br></code></pre></td></tr></table></figure><h2 id="1-Bind-的使用"><a href="#1-Bind-的使用" class="headerlink" title="1.Bind 的使用"></a>1.Bind 的使用</h2><p>Func.bind(x1, x2, x3, …..)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;width: 100px; height: 100px;background-color: red;&quot;</span>&gt;&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">var</span> list = &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.message = <span class="hljs-string">&#x27;hello&#x27;</span>;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.bindEvent();</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">bindEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">// this = list</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span></span><br><span class="javascript"><span class="xml">    oDiv.onclick = <span class="hljs-built_in">this</span>.show.bind(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//即执行show的功能，this又指向list</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">show</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(e.target, <span class="hljs-built_in">this</span>);</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;;</span></span><br><span class="javascript"><span class="xml">list.init();</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);<br>  <span class="hljs-built_in">console</span>.log(name, age);<br>&#125;<br><span class="hljs-comment">// show(obj, &#x27;cc&#x27;, 19)</span><br><span class="hljs-keyword">var</span> newShow = show.bind(obj); <span class="hljs-comment">//改变了this</span><br>newShow(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>继续传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);<br>  <span class="hljs-built_in">console</span>.log(name, age);<br>&#125;<br><span class="hljs-keyword">var</span> newShow = show.bind(obj, <span class="hljs-string">&quot;sc&quot;</span>);<br>newShow(<span class="hljs-number">19</span>);<br><span class="hljs-comment">//也可传三个参数</span><br><span class="hljs-keyword">var</span> newShow = show.bind(obj, <span class="hljs-string">&quot;sc&quot;</span>, <span class="hljs-number">19</span>);<br>newShow();<br><span class="hljs-comment">// 可以传null</span><br><span class="hljs-keyword">var</span> newShow = show.bind(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;sc&quot;</span>, <span class="hljs-number">19</span>);<br>newShow();<br><span class="hljs-keyword">var</span> newShow = show.bind(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;sc&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-keyword">new</span> newShow(); <span class="hljs-comment">//新对象   undefined</span><br></code></pre></td></tr></table></figure><h2 id="2-Instanceof"><a href="#2-Instanceof" class="headerlink" title="2.Instanceof"></a>2.Instanceof</h2><p>var obj = new Object();</p><p>obj instanceof Object == true</p><h1 id="三、惰性函数"><a href="#三、惰性函数" class="headerlink" title="三、惰性函数"></a>三、惰性函数</h1><p>针对于优化频繁使用的函数</p><p>常用于，函数库的编写，单例模式之中</p><p>写一个 test 函数，这个函数返回首次调用时的 new Date().getTime()时间，注意是首次。</p><p>惰性函数-全局污染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (t) &#123;<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;<br>  t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><p>惰性函数-非调用时计算时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test1 = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>惰性函数-未解决判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test2 = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> t;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (t) <span class="hljs-keyword">return</span> t;<br>    t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>惰性函数-完美</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> t;<br>  t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> test();<br>&#125;;<br></code></pre></td></tr></table></figure><p>惰性函数</p><p>事件函数的封装</p><p>滚动条偏移量函数的封装</p><p>jQuery 函数库的封装</p><h1 id="四、防抖-amp-节流"><a href="#四、防抖-amp-节流" class="headerlink" title="四、防抖&amp;节流"></a>四、防抖&amp;节流</h1><p>在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于 DOM 操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流(throttle)和函数防抖(debounce)就是为了解决类似需求应运而生的。</p><p>函数节流就是预定一个函数只有在大于等于执行周期时才执行，周期内调用不执行。好像水滴攒到一定重量才会落下一样。</p><p>场景：</p><pre><code>窗口调整（resize）页面滚动（scroll）抢购疯狂点击（mousedown）</code></pre><h1 id="五、柯里化"><a href="#五、柯里化" class="headerlink" title="五、柯里化"></a>五、柯里化</h1><p>函数式编程之柯里化</p><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p><h2 id="1-前端-why？柯里化"><a href="#1-前端-why？柯里化" class="headerlink" title="1. 前端 why？柯里化"></a>1. 前端 why？柯里化</h2><p>前端使用柯理化的用途主要就应该是简化代码结构，提高系统的维护性，一个方法，只有一个参数，强制了功能的单一性，很自然就做到了功能内聚，降低耦合。<br>柯理化的优点就是降低代码的重复，提高代码的适应性</p><h2 id="2-调用形式"><a href="#2-调用形式" class="headerlink" title="2.调用形式"></a>2.调用形式</h2><p>function add(a,b,c){} ;<br>var newAdd = Curry(add);<br>newAdd(1)(2)(3)</p><h1 id="3-柯里化前奏-需要固定数量参数"><a href="#3-柯里化前奏-需要固定数量参数" class="headerlink" title="3.柯里化前奏-需要固定数量参数"></a>3.柯里化前奏-需要固定数量参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b, c, d</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b + c + d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FixedParamsCurry</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-comment">// [add, 1, 2]</span><br>  <span class="hljs-keyword">var</span> _arg = [].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// arguments [2, 3]</span><br>    <span class="hljs-comment">// [1,2,2,3]</span><br>    <span class="hljs-keyword">var</span> newArg = _arg.concat([].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, newArg); <span class="hljs-comment">//this就是函数环境</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> newAdd = FixedParamsCurry(add, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(newAdd(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h2 id="4-实现柯里化-期待固定数量参数（不是必须这次，可以下次）"><a href="#4-实现柯里化-期待固定数量参数（不是必须这次，可以下次）" class="headerlink" title="4. 实现柯里化-期待固定数量参数（不是必须这次，可以下次）"></a>4. 实现柯里化-期待固定数量参数（不是必须这次，可以下次）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b, c, d</span>) </span>&#123;<br>  <span class="hljs-comment">// add.length</span><br>  <span class="hljs-keyword">return</span> a + b + c + d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FixedParamsCurry</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> _arg = [].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> newArg = _arg.concat([].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, newArg);<br>  &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Curry</span>(<span class="hljs-params">fn, length</span>) </span>&#123;<br>  <span class="hljs-comment">// length:4</span><br>  <span class="hljs-keyword">var</span> length = length || fn.length;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length &lt; length) &#123;<br>      <span class="hljs-comment">// [fn].concat([1])  [fn,1]</span><br>      <span class="hljs-keyword">var</span> combined = [fn].concat([].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>));<br>      <span class="hljs-keyword">return</span> Curry(<br>        FixedParamsCurry.apply(<span class="hljs-built_in">this</span>, combined),<br>        length - <span class="hljs-built_in">arguments</span>.length<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> newAdd = Curry(add);<br><span class="hljs-comment">// console.log(newAdd(1,2,3,4));</span><br><span class="hljs-comment">// console.log(newAdd(1)(2,3,4));// FixedParamsCurry</span><br><span class="hljs-comment">// console.log(newAdd(1)(2)(3)(4));//外部包裹Curry</span><br><br><span class="hljs-comment">// 应用于ajax</span><br><span class="hljs-comment">// POST www.test1.com &#x27;name=cst&amp;code=111&#x27;</span><br><span class="hljs-comment">// POST www.test1.com &#x27;key=222&#x27;</span><br><span class="hljs-comment">// POST www.test2.com &#x27;name=cst&amp;code=111&#x27;</span><br><span class="hljs-comment">// POST www.test2.com &#x27;key=111&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">method, url, data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(method);<br>  <span class="hljs-built_in">console</span>.log(url);<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test1.com&#x27;, &#x27;name=cst&amp;code=111&#x27;)</span><br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test1.com&#x27;, &#x27;key=222&#x27;)</span><br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test2.com&#x27;, &#x27;name=cst&amp;code=111&#x27;)</span><br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test2.com&#x27;, &#x27;key=222&#x27;)</span><br><br><span class="hljs-keyword">var</span> ajaxCurry = Curry(ajax);<br><span class="hljs-keyword">var</span> PostAjax = ajaxCurry(<span class="hljs-string">&quot;POST&quot;</span>);<br>PostAjax(<span class="hljs-string">&quot;www.test1.com&quot;</span>, <span class="hljs-string">&quot;key=222&quot;</span>);<br>PostAjax(<span class="hljs-string">&quot;www.test1.com&quot;</span>, <span class="hljs-string">&quot;name=cst&amp;code=111&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="五、节流"><a href="#五、节流" class="headerlink" title="五、节流"></a>五、节流</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;show&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">  oBtn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    oDiv.innerText = <span class="hljs-built_in">parseInt</span>(oDiv.innerText) + <span class="hljs-number">1</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-comment">// 写一个恶意脚本，点击button</span></span><br><span class="javascript">  <span class="hljs-comment">// for (var i = 0; i &lt; 9000; i++) &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     oBtn.onclick()</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>封装节流</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;show&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">handler, wait</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//返回出去改函数让OBtn调用</span></span><br><span class="javascript">      <span class="hljs-comment">//arguments第0位即[event]</span></span><br><span class="javascript">      <span class="hljs-comment">// 这里的this是oBtn</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (nowTime - lastTime &gt; wait) &#123;</span><br><span class="javascript">        handler.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);</span><br><span class="javascript">        lastTime = nowTime;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, e);</span><br><span class="javascript">    oDiv.innerText = <span class="hljs-built_in">parseInt</span>(oDiv.innerText) + <span class="hljs-number">1</span>;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oBtn.onclick = throttle(buy, <span class="hljs-number">1000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="六、防抖"><a href="#六、防抖" class="headerlink" title="六、防抖"></a>六、防抖</h1><p>在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于 DOM 操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流(throttle)和函数防抖(debounce)就是为了解决类似需求应运而生的。<br>场景：<br>实时搜索(keyup)<br>拖拽(mousemove)<br>初级防抖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oInp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;inp&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//时间对象</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e, <span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oInp.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>,</span><br><span class="javascript">      _arg = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">    <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      ajax.apply(_self, _arg);</span><br><span class="javascript">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>封装防抖：便于所有函数应用防抖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oInp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;inp&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">hander, delay</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>,</span><br><span class="javascript">        _arg = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">      <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        hander.apply(_self, _arg);</span><br><span class="javascript">      &#125;, delay);</span><br><span class="javascript">    &#125;;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//时间对象</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e, <span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oInp.oninput = debounce(ajax, <span class="hljs-number">2000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="七、纯函数"><a href="#七、纯函数" class="headerlink" title="七、纯函数"></a>七、纯函数</h1><p>纯函数：对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态<br>依赖外部 num：不是纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> x &gt; num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(compare(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>纯函数：不影响外界，不依赖于外界</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">18</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(compare(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">x, num</span>) </span>&#123;<br>  <span class="hljs-comment">// AO -&gt; num 是自己的num，不是外部的。此处的num是实参传进来的</span><br>  <span class="hljs-keyword">return</span> x &gt; num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(compare(<span class="hljs-number">20</span>, num));<br></code></pre></td></tr></table></figure><p>对外部 arr 产生了影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">_arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br>  _arr.push(obj);<br>&#125;<br>add(arr);<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>想变成纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;duyi&quot;</span> &#125;];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">_arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br>  <span class="hljs-keyword">var</span> newArr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; _arr.length; i++) &#123;<br>    newArr[i] = _arr[i]; <span class="hljs-comment">//尽量深克隆</span><br>  &#125;<br>  newArr.push(obj);<br>  <span class="hljs-keyword">return</span> newArr;<br>&#125;<br><span class="hljs-keyword">var</span> newArr = add(arr);<br></code></pre></td></tr></table></figure><p>纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-comment">// x, y</span><br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">2</span>;<br>add(num1, num2);<br></code></pre></td></tr></table></figure><p>作用<br>在 JavaScript 中你可以很容易的创建全局变量，这些变量可以在所有函数中访问到。<br>这也是一个导致 bug 的常见原因，因为程序中的任何部分都可能修改全局变量从而导致函数的行为出现异常。<br>纯函数非常容易进行单元测试,因为不需要考虑上下文环境.只需要考虑输入和输出<br>纯函数是健壮的，改变执行次序不会对系统造成影响,因此纯函数的操作可以并行执行。<br>组件化开发-状态共享<br>数组过滤：满足完性王的，返回之后还能满足找性刘的<br>​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Regular Expression</title>
    <link href="/2020/01/09/Regular-Expression/"/>
    <url>/2020/01/09/Regular-Expression/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a></p><h2 id="一-课前补充-字符串"><a href="#一-课前补充-字符串" class="headerlink" title="(一).课前补充 字符串"></a>(一).课前补充 字符串</h2><p>转义字符 “\”</p><p>反斜杠会强制把后面的东西强制转换成文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc\&quot;snj&quot;</span>;<span class="hljs-comment">//双引号里面打印出双引号</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">\n</th><th align="center">换行</th></tr></thead><tbody><tr><td align="center">\r</td><td align="center">正常下，一个回车代表\r+\n 行结束+行换行</td></tr><tr><td align="center">\t</td><td align="center">缩进</td></tr></tbody></table><p>多行字符串 打印多行文本——编程上让字符串换行</p><p>系统规定字符串不能多行展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> test = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">&lt;div&gt;&lt;/div&gt;\</span><br><span class="hljs-string">&lt;span&gt;&lt;span&gt;\</span><br><span class="hljs-string">&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="二-RegExp-正则表达式"><a href="#二-RegExp-正则表达式" class="headerlink" title="(二).RegExp 正则表达式"></a>(二).RegExp 正则表达式</h2><p>正则表达式的作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择。</p><p>用户输入用户名密码格式校验，例如：输入 XXYY 才符合</p><p>API 字典 参考 w3school 参考正则表达式 pdf</p><h2 id="1-两种创建方式"><a href="#1-两种创建方式" class="headerlink" title="1.两种创建方式"></a>1.两种创建方式</h2><p>1.直接量（推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/</span>;   <span class="hljs-comment">//匹配这个字符串的规则叫abc</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reg.test(str));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>2.new RegExp();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd/m&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;m&quot;</span>);<br></code></pre></td></tr></table></figure><p>w3c 上面有这么一段话<br>返回值：一个新的 RegExp 对象，具有指定的模式和标志。如果参数 <em>pattern</em> 是正则表达式而不是字符串，那么 RegExp() 构造函数将用与指定的 RegExp 相同的模式和标志创建一个新的 RegExp 对象。如果不用 new 运算符，而将 RegExp() 作为函数调用，那么它的行为与用 new 运算符调用时一样，只是当 <em>pattern</em> 是正则表达式时，它只返回 _pattern_，而不再创建一个新的 RegExp 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//不同人</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//同一个人</span><br></code></pre></td></tr></table></figure><h2 id="2-三个属性"><a href="#2-三个属性" class="headerlink" title="2.三个属性"></a>2.三个属性</h2><p>(1) 忽视大小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/i</span>;<br></code></pre></td></tr></table></figure><p>(2) 全局匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span>  reg = <span class="hljs-regexp">/ab/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br></code></pre></td></tr></table></figure><p>加上全局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br></code></pre></td></tr></table></figure><p>(3) 执行多行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/g</span>;<span class="hljs-comment">//一行里面以a开头的a</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcde\na&quot;</span>;<br><span class="hljs-comment">// console.log(str.match(reg));-----&gt;&quot;a&quot;依旧是一个a</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/gm</span>;<span class="hljs-comment">//加上m才具有多行匹配功能</span><br></code></pre></td></tr></table></figure><p>两个方法：</p><p>reg.test(); 有没有符合要求额片 段—-true/false<br>str.match(reg); 直观匹配</p><p>方括号：表达式</p><p>匹配三个数字相连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[1234567890][1234567890][1234567890]/g</span>;<span class="hljs-comment">//一个方括号代表一位</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123jbh987jkbjbnjik&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str.match(reg)&quot;</span>)<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[ab][cd][d]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str.match(reg)&quot;</span>)<span class="hljs-comment">//可以取bcd</span><br></code></pre></td></tr></table></figure><p>演示：非</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^a][^b]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;ab1cd&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str.match(reg)&quot;</span>)<span class="hljs-comment">//可以取b1 cd 返回的是数组</span><br></code></pre></td></tr></table></figure><p>括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)/g</span>;<span class="hljs-comment">//匹配abc或者bcd</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd&quot;</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>括号升级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)[0-9]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd&quot;</span><br></code></pre></td></tr></table></figure><p>元字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\w/g</span>;<br><span class="hljs-comment">//\w===[0-9A-z_]</span><br><span class="hljs-comment">//\W===[^\w]</span><br><span class="hljs-comment">//\d===[0-9]</span><br><span class="hljs-comment">//\D===[^\d]</span><br><span class="hljs-comment">//\s===[\t\n\r\v\f]</span><br><span class="hljs-comment">//\S===[^\s]</span><br><span class="hljs-comment">//\b===单词边界</span><br><span class="hljs-comment">//\B===非单词边界</span><br><span class="hljs-comment">// var reg = /\bcde/g;</span><br><span class="hljs-comment">// var str = &quot;abc ada ads&quot;;</span><br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>unicode 编码</p><p>一般是 6 位</p><p>量词</p><p>Doctype</p><p>1.渲染模式</p><p>在多年以前（IE6 诞生以前），各浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。随着 WEB 的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如 IE6 就是其中之一。但是考虑到以前建设的网站并不支持标准模式，所以各浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）。</p><p>三种标准模式的写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">1.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>2.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br>3.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>待穿插知识点</p><p><label> for 属性 — &gt; js 中表示 htmlFor<br>属性映射 HTML 属性 映射到 Element 属性<br>讲事件的时候，阻止默认事件记得要拿 form 提交举例，阻止提交，也要拿 a 举例，组织跳转—&gt;同时引出 javascript:void(0);<br>img 图片预加载<br>byClassName 自己定义的写法还没写呢<br>Math.random() 和彩票程序 0-36 的随机数</label></p><p>要打印多行字符串 打印多行文本——编程上让字符串换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">方法一：<br><span class="hljs-keyword">var</span> test = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">            &lt;div&gt;&lt;/div&gt;\</span><br><span class="hljs-string">            &lt;span&gt;&lt;span&gt;\</span><br><span class="hljs-string">            &quot;</span>;<span class="hljs-comment">//将文本形式的回车转义掉，让他不再是回车</span><br>方法二：<br><span class="hljs-keyword">var</span> test = <span class="hljs-string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span> +<br>    <span class="hljs-string">&quot;&lt;span&gt;&lt;/span&gt;&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>两种创建方式</p><p>1.直接量（个人推荐用直接量）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/</span>;   <span class="hljs-comment">//匹配这个字符串的规则叫abc</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reg.test(str));<span class="hljs-comment">//test()正则表达式的方法</span><br><br></code></pre></td></tr></table></figure><p>2.new RegExp();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd/m&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;m&quot;</span>);<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//长得一样，实际不一样</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//引用</span><br><br></code></pre></td></tr></table></figure><p>三个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS">i<br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/i</span>;  <span class="hljs-comment">//忽视大小写</span><br>g<br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/g</span>; <span class="hljs-comment">//全局匹配</span><br><span class="hljs-comment">// demo：</span><br><span class="hljs-keyword">var</span>  reg = <span class="hljs-regexp">/ab/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<span class="hljs-comment">//只会匹配出来一个</span><br><span class="hljs-comment">// 加上全局匹配：</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br>m<br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/m</span>;  <span class="hljs-comment">//执行多行匹配</span><br>demo<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/g</span>;<span class="hljs-comment">//以a开头的a</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcde\na&quot;</span>;<br><span class="hljs-comment">// console.log(str.match(reg));-----&gt;&quot;a&quot;依旧是一个a，没有多行匹配功能</span><br><span class="hljs-comment">//一旦加上m------:</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/gm</span>;<span class="hljs-comment">//才具有多行匹配功能</span><br><br><br></code></pre></td></tr></table></figure><p>reg.test();//有没有符合要求额片段—-true/false<br>str.match();//直观匹配</p><p>方括号：表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 匹配三个数字相连接</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[1234567890][1234567890][1234567890]/g</span>;<span class="hljs-comment">//一个方括号代表一位</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[ab][cd][d]/g</span>;<span class="hljs-comment">//可以取bcd??????????????</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[0-9A-z][cd][d]/g</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^a][^b]/g</span>;<span class="hljs-comment">//非</span><br>括号：<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd&quot;</span>;<br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)[0-9]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd2&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>量词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS">n+ : (<span class="hljs-number">1</span>, <span class="hljs-literal">Infinity</span>)<br>n* : (<span class="hljs-number">0</span>, <span class="hljs-literal">Infinity</span>)<br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d*/g</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\w*/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>n? : (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>n&#123;X&#125; : (X)<br>n&#123;x,y&#125; : (x, y)<br>n&#123;x, &#125; : 不写，默认<span class="hljs-literal">Infinity</span><br><span class="hljs-attr">n$</span> : 开头<br>    ^n : 结尾<br><br></code></pre></td></tr></table></figure><p>阿里巴巴： 写一个正则表达式，检验字符串首尾是否含有数字(首或尾)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d|\d$/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123abc&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>// 写一个正则表达式，检验字符串首尾是否都含有数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d[\s\S]*\d$/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123abc&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>正则表达式对象属性</p><p>global<br>ignoreCase<br>lastIndex<br>multiline<br>source</p><p>正则表达式对象方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS">reg.test();<span class="hljs-comment">//检索字符串中指定的值，返回true/false</span><br>reg.compile();<span class="hljs-comment">//编译正则表达式</span><br>reg.exec();<span class="hljs-comment">//检索字符串中指定的值，并确定位置</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-comment">//lastIndex可以手动更改值</span><br><br><span class="hljs-comment">// 如果不加g</span><br><span class="hljs-comment">// lastIndex不移动，永远在第一位开始匹配</span><br><br></code></pre></td></tr></table></figure><p>小知识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<span class="hljs-comment">//想匹配四个一样的东西</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(a)\1/g</span>;<span class="hljs-comment">//反向引用第一个子表达式中的匹配的内容</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(a)\1/g</span>;<span class="hljs-comment">//\w匹配出来的那个东西，后面要拷贝一个一样的</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(a)\1\1\1/g</span>;<br><span class="hljs-comment">// 变式：</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><br></code></pre></td></tr></table></figure><p>jQuery 会深入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><br><br></code></pre></td></tr></table></figure><p>字符串方法：match</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br></code></pre></td></tr></table></figure><p>字符串方法：search</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-built_in">console</span>.log(str.search(reg));<br></code></pre></td></tr></table></figure><p>字符串方法：split</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aadnsndcbbccdsvwsnkdd&quot;</span>;<span class="hljs-comment">//双向重复拆分</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1/g</span>;<br><span class="hljs-built_in">console</span>.log(str.split(reg));<br></code></pre></td></tr></table></figure><p>字符串方法：relpace</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa&quot;</span>;<br>str.replace(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//ba  只能匹配一个</span><br><br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa&quot;</span>;<br>str.replace(reg, <span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//ba 没写全局匹配</span><br><br>demo:aabb---&gt;bbaa<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-string">&quot;$2$2$1$1&quot;</span>));<br>demo变式:xyxy---&gt;yxyx<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$, $<span class="hljs-number">1</span>, $<span class="hljs-number">2</span></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> $<span class="hljs-number">2</span> + $<span class="hljs-number">2</span> + $<span class="hljs-number">1</span> + $<span class="hljs-number">1</span>;<span class="hljs-comment">//规则随便拼</span><br>&#125;));<br><br>str.toUpperCase();<span class="hljs-comment">// 变大写方法</span><br>str.toUpperCase().toLowerCase();<span class="hljs-comment">//变小写</span><br><br></code></pre></td></tr></table></figure><p>demo // the-first-name—&gt;theFirstName;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/-(\w)/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;the-first-name&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$, $<span class="hljs-number">1</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> $<span class="hljs-number">1.</span>toUpperCase();<br>&#125;))<br><br></code></pre></td></tr></table></figure><p>正向预查、正向断言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abaaaaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a(?=b)/g</span>;<span class="hljs-comment">//后面跟着b</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a(?!b)/g</span>;<span class="hljs-comment">//后面不跟着b</span><br><br></code></pre></td></tr></table></figure><p>贪婪匹配&amp;&amp;非贪婪匹配</p><p>正则表达式默认贪婪匹配</p><p>变成非贪婪：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a+?/g</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a&#123;1,3&#125;?/g</span>;<span class="hljs-comment">//有1不取23</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a??/g</span>;<span class="hljs-comment">//能取0不取1</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a*?/g</span>;<span class="hljs-comment">//能取0不取1</span><br><br></code></pre></td></tr></table></figure><p>正则表达式专题文档</p><p>匹配空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaa aaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ /g</span>;<br><br></code></pre></td></tr></table></figure><p><strong>精通计划</strong></p><p>匹配\</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa\\aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\\/g</span>;<br><br></code></pre></td></tr></table></figure><p>匹配*+-?()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa?aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\?/g</span>;<br><br></code></pre></td></tr></table></figure><p>高难——字符串去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaaaabbbbbbbbbbcccccccc&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1*/g</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-string">&quot;$1&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>百度顶级难题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;100000000&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg,<span class="hljs-string">&quot;.&quot;</span>));<br><br><span class="hljs-comment">//100.000.000</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM BOM</title>
    <link href="/2020/01/05/DOM-BOM/"/>
    <url>/2020/01/05/DOM-BOM/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="1-DOM-操作演示"><a href="#1-DOM-操作演示" class="headerlink" title="1.DOM 操作演示"></a>1.DOM 操作演示</h2><p>Document Object Model</p><p>插件 emmet 学习</p><p>DOM 定义了表示和修改文档所需的对象、这些对象的行为和属性以及这些对象之间的关系。DOM 对象即为宿主对象，由浏览器厂商定义，用来操作<strong>html 和 xml</strong>功能的一类对象的集合(不能修改 CSS 样式表，可以改变行间样式，即通过改变 html 间接修改 css)。也有人称 DOM 是对 HTML 以及 XML 的标准编程接口。</p><p>demo 案例</p><p>项目 1：实现点击一下发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.style.width = <span class="hljs-string">&quot;200px&quot;</span>;<br>    <span class="hljs-built_in">this</span>.style.height = <span class="hljs-string">&quot;50px&quot;</span>;<br>    <span class="hljs-built_in">this</span>.style.borderRadius = <span class="hljs-string">&quot;50%&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目 2：实现点击变色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    count++;<br>    <span class="hljs-keyword">if</span>(count % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&quot;green&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;red&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一定要多练，编程思想</strong></p><p>项目 3：实现选项卡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>finish js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">display</span>: none;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> solid red;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-comment">/*注意权重*/</span></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block&quot;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>邓哥...2222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btn.length; i++)&#123;</span><br><span class="javascript">                (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="javascript">                    btn[n].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; btn.length; j++)&#123;</span><br><span class="javascript">                            btn[j].className = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">                            div[j].style.display = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&quot;active&quot;</span>;</span><br><span class="javascript">                        div[n].style.display = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;(i))<span class="hljs-comment">//立即执行函数，防止I互相污染</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目 4：实现木块运动停止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.appendChild(div);</span><br><span class="javascript">            div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">            div.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;</span><br><span class="javascript">            div.style.left = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            div.style.top = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> speed = <span class="hljs-number">1</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                speed += speed/<span class="hljs-number">7</span>;</span><br><span class="javascript">                div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(div.style.top) &gt; <span class="hljs-number">200</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(div.style.left) &gt; <span class="hljs-number">200</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,<span class="hljs-number">50</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目 5.实现俄罗斯方块基础</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(div);<br>div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>div.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;<br>div.style.left = <span class="hljs-string">&quot;0&quot;</span>;<br>div.style.top = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-keyword">switch</span>(e.which) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">38</span>:<br>            div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) - <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">40</span>:<br>            div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) + <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">37</span>:<br>            div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) - <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">39</span>:<br>            div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) + <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目 6.实现按住方向键，加速（待做——js 运动）</p><p>项目 7.实现点击加速，改变左右键移动速度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:50px;</span></span><br><span class="hljs-string"><span class="hljs-tag">                       background:linear-gradient(to left, #999, #000, #432,#fcc);</span></span><br><span class="hljs-string"><span class="hljs-tag">                       position: fixed;right:0;</span></span><br><span class="hljs-string"><span class="hljs-tag">                       top:50%;text-align:center;line-height:50px;color:#fff;font-famliy:arial;&quot;</span>&gt;</span>加速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.appendChild(div);</span><br><span class="javascript">            div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">            div.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;</span><br><span class="javascript">            div.style.left = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            div.style.top = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> speed = <span class="hljs-number">5</span>;</span><br><span class="javascript">            btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                speed++;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">switch</span>(e.which) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">38</span>:</span><br><span class="javascript">                        div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) - speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">40</span>:</span><br><span class="javascript">                        div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">37</span>:</span><br><span class="javascript">                        div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) - speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">39</span>:</span><br><span class="javascript">                        div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目 8：扫雷项目基础：刮奖效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">*&#123;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css"><span class="hljs-attribute">box-sizing</span>: border-box;<span class="hljs-comment">/*盒模型合理展示*/</span></span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="css"><span class="hljs-comment">/*border: 1px solid black;*/</span></span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="css"><span class="hljs-attribute">list-style</span>: none;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">img-date</span> = <span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">img-date</span> = <span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>//此处省略400行li样式<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;ul&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">ul.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-comment">//鼠标移入触发什么</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> event = e||<span class="hljs-built_in">window</span>.event;</span><br><span class="javascript"><span class="hljs-keyword">var</span> target = event.target || event.srcElement;</span><br><span class="javascript">target.style.backgroundColor = <span class="hljs-string">&quot;rgb(0,255,&quot;</span> + target.getAttribute(<span class="hljs-string">&#x27;img-date&#x27;</span>) +<span class="hljs-string">&quot;)&quot;</span>;</span><br><span class="javascript">target.setAttribute(<span class="hljs-string">&#x27;img-date&#x27;</span>, <span class="hljs-built_in">parseInt</span>(target.getAttribute(<span class="hljs-string">&#x27;img-date&#x27;</span>))+ <span class="hljs-number">6</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>高级轮播图</p><p>H5 C3 高级动画</p><h2 id="2-对节点的增删改查"><a href="#2-对节点的增删改查" class="headerlink" title="2.对节点的增删改查"></a>2.对节点的增删改查</h2><h2 id="（1）查看节点"><a href="#（1）查看节点" class="headerlink" title="（1）查看节点"></a>（1）查看节点</h2><p>document 代表整个文档(是一个对象)：位于 html 标签上层的</p><p>document 的方法：<strong>IE 不支持说的是 IE9 及以下</strong></p><table><thead><tr><th>document.getElementById()</th><th align="center">元素 id 在 Ie8 以下的浏览器，不区分 id 大小写，而且也返回匹配 name 属性的元素</th></tr></thead><tbody><tr><td>getElementsByTagName()</td><td align="center">标签名放在<strong>类数组</strong>里面</td></tr><tr><td>getElementByName();</td><td align="center">只有部分标签 name 可生效（表单，表单元素，img，iframe）</td></tr><tr><td>getElementsByClassName()</td><td align="center">类名 -&gt; ie8 和 ie8 以下的 ie 版本中没有，可以多个 class 一起</td></tr><tr><td>querySelector()</td><td align="center">css 选择器 在 ie7 和 ie7 以下的版本中没有</td></tr><tr><td>querySelectorAll()</td><td align="center">css 选择器 在 ie7 和 ie7 以下的版本中没有</td></tr></tbody></table><p>页面里面所有的 div 拿出来——&gt;扔到一个类数组里面去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.length);<span class="hljs-comment">//放在类数组里面了</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>选择 div 里面的 p</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(p);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开发经验：尽量不用 id 写东西，用 class<br>读懂代码——布局，处理细节，居中，两栏布局， 反着布局（淘宝）<br>商业逻辑编程逻辑相互配合<br>jQuery:：实现 CSS 选择模式选择 JS：就是识别 CSS<br>query 演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&gt;span strong.demo&#x27;</span>);<span class="hljs-comment">//选一个</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong1 = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&gt;span strong.demo&#x27;</span>);<span class="hljs-comment">//选一组</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而强大的 querySelector()和 querySelectorAll()不能用<br>原因： 1.在 ie7 和 ie7 以下的版本中没有 2.实时性：他们选出的不是实时的<br>实时的是这样：男生全占起来，一会来了一个迟到的，也算进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> demo = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> newDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(newDiv);<br></code></pre></td></tr></table></figure><p>querySelector 不是实时性，改的是副本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> demo = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> newDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.body.appendChild(newDiv);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>var div = document.querySelectorAll(&#x27;div&#x27;);<br></code></pre></td></tr></table></figure><h2 id="（2）遍历节点树"><a href="#（2）遍历节点树" class="headerlink" title="（2）遍历节点树"></a>（2）遍历节点树</h2><table><thead><tr><th>parentNode</th><th align="center">父节点 (最顶端的 parentNode 为#document);</th></tr></thead><tbody><tr><td>childNodes</td><td align="center">子节点们（直系的）</td></tr><tr><td>firstChild</td><td align="center">第一个子节点</td></tr><tr><td>lastChild</td><td align="center">最后一个子节点</td></tr><tr><td>nextSibling</td><td align="center">后一个兄弟元素</td></tr><tr><td>previousSibling</td><td align="center">前一个兄弟元素</td></tr></tbody></table><h3 id="节点的类型"><a href="#节点的类型" class="headerlink" title="节点的类型"></a>节点的类型</h3><p>元素节点 —— 1<br>属性节点 —— 2<br>文本节点 —— 3<br>注释节点 —— 8<br>document —— 9<br>DocumentFragment —— 11</p><p>parentNode 演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(strong.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode.parentNode.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode.parentNode.parentNode.parentNode);<br></code></pre></td></tr></table></figure><p>childNodes 演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-comment">// 要是按照直系元素来说，应该长度为3，但是实际为7,遍历节点数(节点不一定都是html)</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>节点讲解 demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    123sabchiabs<br>    <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.childNodes);<span class="hljs-comment">//7个</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>nextSibling 演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    123sabchiabs<br>    <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 下一个兄弟节点，不是下一个兄弟元素节点</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(strong.nextSibling);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(strong.nextSibling.nextSibling);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(strong.nextSibling.nextSibling.nextSibling);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="（3）遍历元素节点数"><a href="#（3）遍历元素节点数" class="headerlink" title="（3）遍历元素节点数"></a>（3）遍历元素节点数</h2><p>去掉乱七八糟节点</p><table><thead><tr><th align="center">parentElement</th><th align="center">返回当前元素的父元素节点 (IE 不兼容)</th></tr></thead><tbody><tr><td align="center">children</td><td align="center">只返回当前元素的元素子节点</td></tr><tr><td align="center">node.childElementCount=== node.children.length</td><td align="center">当前元素节点的子元素节点个数(IE 不兼容)</td></tr><tr><td align="center">firstElementChild</td><td align="center">返回的是第一个元素节点(IE 不兼容)</td></tr><tr><td align="center">lastElementChild</td><td align="center">返回的是最后一个元素节点(IE 不兼容)</td></tr><tr><td align="center">nextElementSibling / previousElementSibling</td><td align="center">返回后一个/前一个兄弟元素节点（IE 不兼容)</td></tr></tbody></table><h3 id="节点的四个属性"><a href="#节点的四个属性" class="headerlink" title="节点的四个属性"></a>节点的四个属性</h3><table><thead><tr><th align="center">nodeName</th><th align="center">元素的标签名，以大写形式表示,只读</th></tr></thead><tbody><tr><td align="center">nodeValue 重要</td><td align="center">Text 节点或 Comment 节点的文本内容,可读写</td></tr><tr><td align="center">nodeType</td><td align="center">该节点的类型，只读</td></tr><tr><td align="center">attributes</td><td align="center">Element 节点的属性集合</td></tr></tbody></table><p>节点的一个方法 Node.hasChildNodes()——有没有子节点（true/false)</p><p>获取节点类型 nodeType （）</p><p>案例：实现输入数据的节点数返回</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>123<br><span class="hljs-comment">&lt;!-- This is comment --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retElementChild</span>(<span class="hljs-params">node</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//no children</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> temp =  &#123;</span><br><span class="javascript"><span class="hljs-attr">length</span> : <span class="hljs-number">0</span>,</span><br><span class="javascript"><span class="hljs-attr">push</span> : <span class="hljs-built_in">Array</span>.prototype.push,</span><br><span class="javascript"><span class="hljs-attr">splice</span> : <span class="hljs-built_in">Array</span>.prototype.splice<span class="hljs-comment">//实现看出来像数组</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript">child = node.childNodes,</span><br><span class="javascript">len = child.length;</span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(child[i].nodeType === <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">temp.push(child[i]);</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">return</span> temp;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(retElementChild(div));</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="（4）DOM-树"><a href="#（4）DOM-树" class="headerlink" title="（4）DOM 树"></a>（4）DOM 树</h2><p>Document<br>Document 返回一个函数,document 代表整个页面<br>注意：Document 是一个构造函数，但是我不能 new，只允许系统 new<br>好处：原形：Document 写东西，document 也适用，继承关系<br>构造关系：document—-&gt;HTMLDocument.prototype—-&gt;Document.prototype<br>所以：Document.prototype.abc 可以受益到 document 上，且就近继承<br>关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">HTMLDocument.prototype=&#123;<br>    <span class="hljs-attr">__proto__</span>:Document.prototype<br>&#125;<br></code></pre></td></tr></table></figure><p>最后一列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">HTMLBodyElement.prototype.abc = <span class="hljs-string">&quot;demo&quot;</span>;<br><span class="hljs-keyword">var</span> body = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;body&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.log(head.abc);------&gt;<span class="hljs-literal">undefined</span><br><span class="hljs-built_in">console</span>.log(body.abc);------&gt;demo<br></code></pre></td></tr></table></figure><h2 id="（5）DOM-操作"><a href="#（5）DOM-操作" class="headerlink" title="（5）DOM 操作"></a>（5）DOM 操作</h2><ol><li><p>getElementById 方法定义在 Document.prototype 上，即 Element 节点上不能使用。</p></li><li><p>getElementsByName 方法定义在 HTMLDocument.prototype 上，即非 html 中的 document 以外不能使用(xml document,Element)</p></li><li><p>getElementsByTagName 方法定义在 Document.prototype 和 Element.prototype 上</p></li></ol><p>实现选第一个 span</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//整个文档上找element</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> span = div.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//div下面的span</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通配符选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;*&#x27;</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//选择所有标签</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>HTMLDocument.prototype 定义了一些常用的属性，body,head,分别指代 HTML 文档中的 body head 标签。</p></li><li><p>Document.prototype 上定义了 documentElement 属性，指代文档的根元素，在 HTML 文档中，他总是指代 html 元素</p></li><li><p>getElementsByClassName、querySelectorAll、querySelector 在 Document,Element 类中均有定义</p></li></ol><h2 id="3-课堂练习"><a href="#3-课堂练习" class="headerlink" title="3.课堂练习"></a>3.课堂练习</h2><p>1.遍历元素节点树，要求不能用 children 属性</p><p>题意 1.给出父节点，遍历出子节点 ChildNodes</p><p>题意 2.打印树形结构：div 子元素节点们，判断子元素节点是否还有子元素节点，有的话一直递归</p><p>网络参考答案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> div=<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)</span><br><span class="javascript">            <span class="hljs-keyword">var</span> a=[];</span><br><span class="javascript">            HTMLElement.prototype.allElements=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> dom=<span class="hljs-built_in">this</span></span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;dom.children.length;i++)&#123;</span><br><span class="javascript">                    a.push(dom.children[i])</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(dom.children[i].hasChildNodes())&#123;</span><br><span class="javascript">                        <span class="hljs-comment">// console.log(this.children[i].children[i])</span></span><br><span class="javascript">                        dom.children[i].allElements();</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> a;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> list = [];<span class="hljs-comment">//用来后面储存获取的元素</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHDeles</span>(<span class="hljs-params">ele</span>) </span>&#123;<span class="hljs-comment">//ele是形参,代表需要求打印哪个dom树</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> children = ele.children;<span class="hljs-comment">//获取ele下的子元素</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<span class="hljs-comment">//遍历children</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> child = children[i]<span class="hljs-comment">//children每一个子代存起来</span></span><br><span class="javascript">            list.push(child)<span class="hljs-comment">//每一个子代存入数组当中</span></span><br><span class="javascript">            getHDeles(child);<span class="hljs-comment">//子代也要求子代,继续调用这个函数</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    getHDeles(<span class="hljs-built_in">document</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(list)<span class="hljs-comment">//会打印document下的所有dom树:html,head,meta,body.....</span></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.封装函数，返回元素 e 的第 n 层祖先元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retParent</span>(<span class="hljs-params">elem, n</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">while</span> (elem &amp;&amp; n) &#123;</span><br><span class="javascript">        <span class="hljs-comment">//elem == null时候</span></span><br><span class="javascript">        elem = elem.parentElement;</span><br><span class="javascript">        n--;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> elem;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;i&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.封装函数，返回元素 e 的第 n 个兄弟节点，n 为正，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retSibkling</span>(<span class="hljs-params">e, n</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">while</span>(e &amp;&amp; n)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                e = e.nextElementSibling;</span><br><span class="javascript">                n --;</span><br><span class="javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                e = e.previousElementSibling;</span><br><span class="javascript">                n ++;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> e;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br></code></pre></td></tr></table></figure><p>想兼容 IE</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retSibling</span>(<span class="hljs-params">e, n</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">while</span> (e &amp;&amp; n) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (e.nextElementSibling) &#123;</span><br><span class="javascript">                            e = e.nextElementSibling;</span><br><span class="javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                            <span class="hljs-keyword">for</span> (e = e.nextSibling; e &amp;&amp; e.nodeType != <span class="hljs-number">1</span>; e = e.nextSibling);<span class="hljs-comment">//这里的e兼容的是null</span></span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        n--;</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (e.previousElementSibling) &#123;</span><br><span class="javascript">                            e = e.previousElementSibling;</span><br><span class="javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                            <span class="hljs-keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType != <span class="hljs-number">1</span>; e = e.previousSibling);</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        n++;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> e;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.编辑函数，封装 children 功能，子元素节点。解决以前部分浏览器的兼容性问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>  abc<br>  <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  Element.prototype.myChildren = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> child = <span class="hljs-built_in">this</span>.childNodes;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> len = child.length;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> arr = [];</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (child[i].nodeType == <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">        arr.push(child[i]);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> arr;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.自己封装 hasChildren()方法，不可用 children 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>  abc<br>  <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  Element.prototype.myChildren = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> child = <span class="hljs-built_in">this</span>.childNodes;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> len = child.length;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> arr = [];</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (child[i].nodeType == <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><blockquote><p>增</p></blockquote><blockquote><p>增加创建元素节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(div);<br>div.innerHTML = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><blockquote><p>创建文本节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;邓宝宝&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>创建注释节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> comment = <span class="hljs-built_in">document</span>.createComment(<span class="hljs-string">&#x27;this is comment&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>创建文档碎片节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure><blockquote><p>删</p></blockquote><p>他杀</p><p>parent.removeChild();其实是剪切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.removeChild(i);<br></code></pre></td></tr></table></figure><p>自杀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">i.remove()<br></code></pre></td></tr></table></figure><p>替换 parent.replaceChild(new, origin);剪切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.replaceChild(<span class="hljs-keyword">new</span>, origin);<br></code></pre></td></tr></table></figure><blockquote><p>插</p></blockquote><p>appendChild 类似 push</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;邓宝宝&#x27;</span>);<br><span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;span&#x27;</span>);<br>div.appendChild(text);<br>div.appendChild(span);<br><span class="hljs-keyword">var</span> text1 = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;demo&#x27;</span>);<br>span.appendChild(text1);<br>span.appendChild(text);<span class="hljs-comment">//剪切插入</span><br></code></pre></td></tr></table></figure><p>为了证明是 appendChild 剪切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.appendChild(span);<br></code></pre></td></tr></table></figure><p>insertBefore div.insertBefore(a, b) == div insert a before b</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;i&gt;&lt;/i&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;strong&gt;&lt;/strong&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;strong&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;i&#x27;</span>);</span><br><span class="javascript">    div.insertBefore(strong, span);<span class="hljs-comment">//strong插入到span前面</span></span><br><span class="javascript">    div.insertBefore(i, strong);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Element 节点的一些属性</p><p>innerHTML:取，写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.innerHTML = <span class="hljs-string">&#x27;123&#x27;</span>;<span class="hljs-comment">//覆盖</span><br>div.innerHTML += <span class="hljs-string">&#x27;456&#x27;</span><span class="hljs-comment">//追加</span><br>div.innerHTML = <span class="hljs-string">&quot;&lt;span style=&quot;</span>background-color:red;color:#fff;font-size:20px<span class="hljs-string">&quot;&gt;123&lt;/span&gt;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>innerText(火狐不兼容) / textContent(老版本 IE 不好使)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.innerText<span class="hljs-comment">//取出里面东西</span><br>div.innerText = <span class="hljs-number">123</span><span class="hljs-comment">//覆盖</span><br></code></pre></td></tr></table></figure><p>Element 节点的一些方法</p><p>ele.setAttribute()设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>,<span class="hljs-string">&#x27;demo&#x27;</span>);<br></code></pre></td></tr></table></figure><p>ele.getAttribute();取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.getAttribute(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.setAttribute(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;only&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://m.sm.cn/">https://m.sm.cn/</a></p><p>实战项目 data-log 实现统计点击多少次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">data-log</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>hehe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">&#x27;data-log&#x27;</span>));</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>小操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> all = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;*&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="javascript">    all[i].setAttribute(<span class="hljs-string">&quot;this.name&quot;</span>, all[i].nodeName);</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>课堂练习</p><p>请编写一段 JavaScript 脚本生成下面这段 DOM 结构。要求：使用标准的 DOM 方法或属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slogan&quot;</span>&gt;</span>姬成，你最帅!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示 dom.className 可以读写 class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);<br>div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;example&#x27;</span>);<br>p.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;slogan&#x27;</span>);<br><span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;最帅&#x27;</span>);<br>p.appendChild(text);<br>div.appendChild(p);<br><span class="hljs-built_in">document</span>.body.appendChild(div);<br></code></pre></td></tr></table></figure><p>简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">div.innerHTML = <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>改变 class/id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.className = <span class="hljs-string">&quot;&quot;</span><br>div.id = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>小练习</p><ol><li>封装 remove(); 使得 child.remove()直接可以销毁自身</li><li>将目标节点内部的节点顺序逆序。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">eg:<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>封装函数 insertAfter;功能类似 insertBefort();可忽略老版本浏览器，直接在 Element.prototype 上编程</p><p>原型链上编程好处：this 可以表示任何要表示的东西；可以实现继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            Element.prototype.insertAfter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">targetNode, afterNode</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> beforeNode = afterNode.nextElementSibling;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(beforeNode == <span class="hljs-literal">null</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.appendChild(targetNode);</span><br><span class="javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.insertBefore(targetNode, beforeNode);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;b&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将目标节点内部节点顺序逆序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    Element.prototype.eNiXu = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> child = <span class="hljs-built_in">this</span>.children;</span><br><span class="javascript">        len = child.length;</span><br><span class="javascript">        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>; i &lt;= len; i++)&#123;         <span class="hljs-comment">//这里要把循环圈数写对（只需循环len-1次），不然下文的剪切就会报错</span></span><br><span class="javascript">            <span class="hljs-built_in">this</span>.appendChild(child[len-i]);     <span class="hljs-comment">//剪切掉并且增加到this最后面</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.eNiXu());</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="日期对象-Date"><a href="#日期对象-Date" class="headerlink" title="日期对象 Date()"></a>日期对象 Date()</h1><p>封装函数，打印当前是何年何月何日何时，几分几秒</p><p>官方文档<a href="https://www.w3school.com.cn/jsref/jsref_obj_date.asp">https://www.w3school.com.cn/jsref/jsref_obj_date.asp</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 日期对象，是系统提供好的</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>具体知识看看文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>getTime() 性能优化验证工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 时间戳</span><br><span class="hljs-comment">// 纪元时间：1970-1-1</span><br><span class="hljs-comment">// 买电脑验证性能</span><br><span class="hljs-keyword">var</span> firstTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>&#125;<br><span class="hljs-keyword">var</span> lastTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-built_in">console</span>.log(lastTime - firstTime);<br></code></pre></td></tr></table></figure><p>闹铃：倒计时秒杀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>date.setMinutes(<span class="hljs-number">13</span>);<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - date.getTime() &gt; <span class="hljs-number">1000</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老邓是宝宝&#x27;</span>)<br>    &#125;<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>封装函数，打印当前何年何月何日何时几分几秒——一顿 get</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> retMyDate=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>    <span class="hljs-keyword">var</span> year=date.getFullYear();<br>    <span class="hljs-keyword">var</span> month=date.getMonth()+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> day=date.getDate();<br>    <span class="hljs-keyword">var</span> hour=date.getHours()<br>    <span class="hljs-keyword">var</span> Mi=date.getMinutes()<br>    <span class="hljs-keyword">var</span> se=date.getSeconds()<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;今天是&quot;</span>+year+<span class="hljs-string">&quot;年&quot;</span>+month+<span class="hljs-string">&quot;月&quot;</span>+day+<span class="hljs-string">&quot;日&quot;</span>+hour+<span class="hljs-string">&quot;时&quot;</span>+Mi+<span class="hljs-string">&quot;分&quot;</span>+se+<span class="hljs-string">&quot;秒&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>识别 time 只识别一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> time = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,time);<br><span class="hljs-comment">// time = 200;不起作用</span><br></code></pre></td></tr></table></figure><p>计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    i++;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>准不准：应该都是 1000 才准</p><p>为什么不准</p><p><a href="https://blog.csdn.net/qq_41494464/article/details/99944633">https://blog.csdn.net/qq_41494464/article/details/99944633</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> firstTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>    <span class="hljs-built_in">console</span>.log(lastTime - firstTime);<br>    firstTime = lastTime;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p><strong>必看书：高性能 JS ； 你不知道的 JS 学透了</strong></p><p>setInterval();隔多长时间执行</p><p>清除定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// clearInterval();</span><br><span class="hljs-comment">// 定时器唯一标识</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<span class="hljs-number">2000</span>);<br><span class="hljs-comment">// 清除唯一标识</span><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i++);<br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;<br>&#125;,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>setTimeout(); 多长时间后执行，只执行一次</p><p>电影 5min 试看时间</p><p>clearInterval();<br>clearTimeout();<br>全局对象 window 上的方法，内部函数 this 指向 window<br>注意也可以这样 ：setInterval(“func()”,1000);<br>写一个计时器，到一分钟停止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>);</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: right;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    minutes : <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span> seconds :<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> min = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      <span class="hljs-keyword">var</span> sec = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">1</span>];</span><br><span class="javascript">      <span class="hljs-keyword">var</span> seconds = <span class="hljs-number">0</span>,</span><br><span class="javascript">        minutes = <span class="hljs-number">0</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        seconds++;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (seconds == <span class="hljs-number">60</span>) &#123;</span><br><span class="javascript">          seconds = <span class="hljs-number">0</span>;</span><br><span class="javascript">          minutes++;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        sec.value = seconds;</span><br><span class="javascript">        min.value = minutes;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (minutes == <span class="hljs-number">3</span>) &#123;</span><br><span class="javascript">          <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;, <span class="hljs-number">10</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p>查看滚动条的滚动距离</p><blockquote><p>window.pageXOffset/pageYOffset</p></blockquote><p>IE8 及 IE8 以下不兼容</p><blockquote><p>document.body/documentElement.scrollLeft/scrollTop</p><p>兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// &lt;!-- IE8和IE8以下浏览器 --&gt;</span><br><span class="hljs-comment">// document.body.scrollLeft/Top  ie?</span><br><span class="hljs-comment">// document.documentElement.scrollLeft/Top ie?</span><br><span class="hljs-comment">// 以上，只要一个好使，另一个一定为0</span><br><span class="hljs-built_in">document</span>.body.scrollLeft + <span class="hljs-built_in">document</span>.documentElement.scrollLeft<br></code></pre></td></tr></table></figure><p>封装兼容性方法，g 求滚动轮滚动距离 getScrollOffset()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScrollOffset</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.pageXOffset) &#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">x</span> : <span class="hljs-built_in">window</span>.pageXOffset,<br>            <span class="hljs-attr">y</span> : <span class="hljs-built_in">window</span>.pageYOffset<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">x</span> : <span class="hljs-built_in">document</span>.body.scrollLeft + <span class="hljs-built_in">document</span>.documentElement.scrollLeft,<br>            <span class="hljs-attr">y</span> : <span class="hljs-built_in">document</span>.body.scrollTop + <span class="hljs-built_in">document</span>.documentElement.scrollTop<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查看视口的尺寸"><a href="#查看视口的尺寸" class="headerlink" title="查看视口的尺寸"></a>查看视口的尺寸</h2><p>window.innerWidth/innerHeight<br>IE8 及 IE8 以下不兼容</p><blockquote><p>document.documentElement.clientWidth/clientHeight<br>标准模式下，任意浏览器都兼容<br>document.body.clientWidth/clientHeight<br>适用于怪异模式下的浏览器。去掉<code>&lt;!DOCTYPE html&gt;</code>就变成怪异模式</p></blockquote><p>浏览器两种渲染模式：标准模式；怪异模式（混杂模式，为了兼容之前版本）</p><p>封装兼容性方法，返回浏览器视口尺寸 getViewportOffset()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getViewportOffset</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.innerWidth)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">w</span> : <span class="hljs-built_in">window</span>.innerWidth,<br>            <span class="hljs-attr">h</span> : <span class="hljs-built_in">window</span>.innerHeight<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.compatMode === <span class="hljs-string">&quot;BackCompat&quot;</span>)&#123;<span class="hljs-comment">//向后兼容</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">w</span> : <span class="hljs-built_in">document</span>.body.clientWidth,<br>                <span class="hljs-attr">h</span> : <span class="hljs-built_in">document</span>.body.clientHeight<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">w</span> : <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>                <span class="hljs-attr">h</span> : <span class="hljs-built_in">document</span>.documentElement.clientHeight<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查看元素的几何尺寸"><a href="#查看元素的几何尺寸" class="headerlink" title="查看元素的几何尺寸"></a>查看元素的几何尺寸</h2><p>domEle.getBoundingClientRect();</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 100px; position: absolute; top:100px;right: 200px; bottom: 200px; left: 100px;background-color: aqua;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.getBoundingClientRect());</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>兼容性很好<br>该方法返回一个对象，对象里面有 left,top,right,bottom 等属性。left 和 top 代表该元素左上角的 X 和 Y 坐标，right 和 bottom 代表元素右下角的 X 和 Y 坐标<br>height 和 width 属性老版本 IE 并未实现<br>返回的结果并不是“实时的”</p><h2 id="查看元素的尺寸（可视区）"><a href="#查看元素的尺寸（可视区）" class="headerlink" title="查看元素的尺寸（可视区）"></a>查看元素的尺寸（可视区）</h2><p>dom.offsetWidth，dom.offsetHeight 返回的是可视区</p><blockquote><p>想求内容区宽高</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style.height<br></code></pre></td></tr></table></figure><h2 id="查看元素的位置"><a href="#查看元素的位置" class="headerlink" title="查看元素的位置"></a>查看元素的位置</h2><p>dom.offsetLeft, dom.offsetTop</p><p>求的是相对于父级的位置演示。忽略自身是否是定位元素，而是距离他有定位的父级的距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px;height:300px;border:2px solid black;position:relative;top:100px;left:100px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;position:absolute;margin-left:100px;margin-top:100px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。</p><p>把 position:static;默认值，父级不设置定位演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px;height:300px;border:2px solid black;position:static;margin-left: 100px;margin-top: 100px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;position:absolute;margin-left:100px;margin-top:100px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>div.offsetLeft<br>210：=body8+border2<br>div.offsetTop<br>202   塌陷了<br></code></pre></td></tr></table></figure><p>dom.offsetParent 返回最近的有定位的父级，如无，返回 body, body.offsetParent 返回 null</p><p>eg：求元素相对于文档的坐标 getElementPositoin。不知有没有定位父级也不知有定位的父级多少层</p><p>思路：看是不是有定位的父级，有定位的父级继续看是不是还有父级，父级在相对于文档</p><h1 id="脚本化-CSS"><a href="#脚本化-CSS" class="headerlink" title="脚本化 CSS"></a>脚本化 CSS</h1><h2 id="1-读写元素-css-属性"><a href="#1-读写元素-css-属性" class="headerlink" title="1.读写元素 css 属性"></a>1.读写元素 css 属性</h2><p>dom.style.prop:必须是写在行间的 可读可写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style<span class="hljs-comment">//这个div所有css ；类数组</span><br>div.style.width = <span class="hljs-string">&#x27;200px&#x27;</span><br>div.style.[<span class="hljs-string">&#x27;width&#x27;</span>]<br></code></pre></td></tr></table></figure><p>可读写行间样式，没有兼容性问题，碰到 float 这样的关键字属性，前面应加 css</p><p>没写在行间的看不到</p><p>保留字尽量 float — &gt; cssFloat<br>复合属性必须拆解，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style.borderWidth<br></code></pre></td></tr></table></figure><p>组合单词变成小驼峰式写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span><br></code></pre></td></tr></table></figure><p>写入的值必须是字符串格式</p><h2 id="2-查询计算样式"><a href="#2-查询计算样式" class="headerlink" title="2.查询计算样式"></a>2.查询计算样式</h2><p>window.getComputedStyle(ele,null); IE8 及 IE8 以下不兼容</p><p>获取的是当前这个元素 所展示出的一切 css 属性的<strong>显示值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span><span class="hljs-meta">!important</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;float: left;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div,<span class="hljs-literal">null</span>).width);<span class="hljs-comment">//200px</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(div.style.width)<span class="hljs-comment">//100px</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>null：解决伪元素问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: orangered;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-comment">/*默认inline*/</span><br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div, <span class="hljs-string">&#x27;after&#x27;</span>).width);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改变伪元素：点击 div， 绿色方块变黄</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: orangered;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.green</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.yellow</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;green&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            div.className = <span class="hljs-string">&#x27;yellow&#x27;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改变两个状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.style.width = <span class="hljs-string">&#x27;200px&#x27;</span>;<br>    div.style.height = <span class="hljs-string">&#x27;200px&#x27;</span>;<br>    div.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;<span class="hljs-comment">//这些点DOM操作浪费效率</span><br>&#125;<br></code></pre></td></tr></table></figure><p>更好的写法–一个<code>.style</code>就会浪费一点效率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.className = <span class="hljs-string">&quot;active&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: palegreen;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算样式只读<br>返回的<strong>计算样式</strong>的值都是绝对值，没有相对单位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div,<span class="hljs-literal">null</span>).width);<span class="hljs-comment">//160px</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div,<span class="hljs-literal">null</span>).backgroundColor);<span class="hljs-comment">//rga()</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>IE 独有的属性<br>ele.currentStyle<br>计算样式只读<br>返回的计算样式的值不是经过转换的绝对值</p></blockquote><p>封装兼容性方法 getStyle(obj,prop);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Var div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStyle</span>(<span class="hljs-params">elem, prop</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.getComputedStyle) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.getComputedStyle(elem, <span class="hljs-literal">null</span>)[prop];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> elem.currentStyle[prop];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>小项目：让方块运动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red;position: absolute;left:0;top:0;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- left:默认auto --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStyle</span>(<span class="hljs-params">elem, prop</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.getComputedStyle) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.getComputedStyle(elem, <span class="hljs-literal">null</span>)[prop];</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> elem.currentStyle[prop];</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> speed = <span class="hljs-number">3</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        speed += speed / <span class="hljs-number">7</span>;</span><br><span class="javascript">        div.style.left = <span class="hljs-built_in">parseInt</span>(getStyle(div, <span class="hljs-string">&#x27;left&#x27;</span>)) + speed + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(div.style.left) &gt; <span class="hljs-number">500</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;, <span class="hljs-number">10</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="让滚动条滚动"><a href="#让滚动条滚动" class="headerlink" title="让滚动条滚动"></a>让滚动条滚动</h2><p>window 上有三个方法<br>scroll(),scrollTo(),scrollBy();<br>三个方法功能类似，用法都是将 x,y 坐标传入。即实现让滚动轮滚动<strong>到当前位置。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">window</span>.scroll(x,y)<span class="hljs-comment">//当前位置</span><br><span class="hljs-built_in">window</span>.scrollTo(x,y)<span class="hljs-comment">//当前位置</span><br><span class="hljs-built_in">window</span>.scrollBy(x,y)<span class="hljs-comment">//累加滚动</span><br></code></pre></td></tr></table></figure><p>区别：scrollBy()会在之前的数据基础之上做累加。</p><p>收起展开项目：收起的时候回到原地。用 scroll(),scrollTo()。</p><p>思路：点击展开的时候记录当前滚动距离，收起就回来</p><p>利用 scrollBy() 快速阅读的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.demo1</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">                <span class="hljs-attribute">bottom</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">                <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.demo2</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">                <span class="hljs-attribute">color</span>: green;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">                <span class="hljs-attribute">bottom</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">                <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>stop<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> start = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> stop = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">1</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-number">0</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> key = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            start.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (key) &#123;</span><br><span class="javascript">                    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-built_in">window</span>.scrollBy(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">                    &#125;, <span class="hljs-number">100</span>);</span><br><span class="javascript">                    key = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            stop.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">                key = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">// 多次点击start不好使——加锁</span></span><br><span class="javascript"></span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>定义：Browser Object Model，定义了操作浏览器的接口<br>BOM 对象: Window, History,Navigator,Screen, Location 等<br>由于浏览器厂商的不同，Bom 对象的兼容性极低。一般情况下，我只用其中的部分功能<br>Window<br>History 对象<br>Navigator 对象<br><a href="http://www.w3school.com.cn/jsref/dom_obj_navigator.asp">http://www.w3school.com.cn/jsref/dom_obj_navigator.asp</a><br>Screen 对象<br>Location 对象<br>location.hash<br>“#”后是对浏览器操作的，对服务器无效，实际发出的请求也不包含”#”后面的部分<br>“#”被算作历史记录</p><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>JSON 是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json 是用来传输的，属性名加上双引号）</p><p>表示形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;name&quot; : &quot;deng&quot;,</span><br><span class="hljs-string">    &quot;age&quot; : 19</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>JSON.parse(); string — &gt; json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;&#123;&quot;</span>name<span class="hljs-string">&quot;:&quot;</span>abc<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:112&#125;&quot;</span><br>JSON.parse(str)<br></code></pre></td></tr></table></figure><p>JSON.stringify(); json — &gt; string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">112</span><br>&#125;<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(obj)<br>---&gt;<span class="hljs-string">&quot;&#123;&quot;</span>name<span class="hljs-string">&quot;:&quot;</span>abc<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:112&#125;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h1><p>HTML 解析：深度优先原则</p><p>domTree + cssTree = randerTree<br>避免 reflow 重排 dom 节点删除，添加<br>dom 节点宽高变化，位置变化，display none<br>offsetWidth offsetLeft</p><p>repaint 重绘</p><h1 id="异步加载-js"><a href="#异步加载-js" class="headerlink" title="异步加载 js"></a>异步加载 js</h1><p>js 加载的缺点：加载工具方法没必要阻塞文档，过得 js 加载会影响页面效率，一旦网速不好，那么整个网站将等待 js 加载而不进行后续渲染等工作。<br>有些工具方法需要按需加载，用到再加载，不用不加载。<br>javascript 异步加载 的 三种方案</p><blockquote><p>1.defer 异步加载，但要等到 dom 文档全部解析完才会被执行。只有 IE 能用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;tools.js&quot;</span> <span class="hljs-attr">defer</span>=<span class="hljs-string">&quot;defer&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//变成了异步JS，不会阻断HTML CSS，并行下载</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.async 异步加载，加载完就执行，async 只能加载外部脚本，不能把 js 写在 script 标签里。</p></blockquote><blockquote><p>1.2 执行时也不阻塞页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;tools.js&quot;</span> <span class="hljs-attr">aysnc</span>=<span class="hljs-string">&quot;aysnc&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//里面不能写东西</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>3.创建 script，插入到 DOM 中，加载完毕后 callBack（常用）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="javascript">  script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;</span><br><span class="javascript">  script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.head.appendChild(script);</span><br><span class="javascript">  外部js   alert(<span class="hljs-string">&#x27;老邓&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等待下载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>); <span class="hljs-comment">//创建</span></span><br><span class="javascript">  script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>; <span class="hljs-comment">//设置</span></span><br><span class="javascript">  script.src = <span class="hljs-string">&quot;alert.js&quot;</span>; <span class="hljs-comment">//读到直接异步下载</span></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.head.appendChild(script);</span><br><span class="javascript">  <span class="hljs-comment">// test();----还没下载完</span></span><br><span class="javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    test();</span><br><span class="javascript">  &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示下载</p><p>safari chrome firefox opera</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<br>script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    test();<br>&#125;<span class="hljs-comment">//确保下载完执行，下载不完不执行</span><br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><p>IE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<br><span class="hljs-comment">// script.readyState = &quot;loading&quot;;&quot;completed&quot; &quot;loaded&quot;</span><br>script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>    <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>        test();<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><p>合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<br><span class="hljs-keyword">if</span>(script.readyState)&#123;<br>    script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>        <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>            test();<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        test();<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><p>封装函数</p><p>外部函数 alert.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> tools = &#123;<br><span class="hljs-attr">test</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,<br><span class="hljs-attr">demo</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadScript</span>(<span class="hljs-params">url, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>    <span class="hljs-keyword">if</span>(script.readyState)&#123;<br>        script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>            <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>                callback();<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            callback();<br>        &#125;<br>    &#125;<br>    script.src = url;<span class="hljs-comment">//放在后面的原因：先执行绑定事件，在加载文件</span><br>    <span class="hljs-built_in">document</span>.head.appendChild(script);<br>&#125;<br><span class="hljs-comment">// loadScript(&#x27;alert.js&#x27;,test);还没解析，不知test是谁</span><br>loadScript(<span class="hljs-string">&#x27;alert.js&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    test();<br>&#125;);<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadScript</span>(<span class="hljs-params">url, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>    <span class="hljs-keyword">if</span>(script.readyState)&#123;<br>        script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>            <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>                <span class="hljs-built_in">eval</span>(callback);<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">eval</span>(callback);<br>        &#125;<br>    &#125;<br>    script.src = url;<span class="hljs-comment">//放在后面的原因：先执行绑定事件，在加载文件</span><br>    <span class="hljs-built_in">document</span>.head.appendChild(script);<br>&#125;<br><span class="hljs-comment">// loadScript(&#x27;alert.js&#x27;,test);还没解析，不知test是谁</span><br>loadScript(<span class="hljs-string">&#x27;alert.js&#x27;</span>,<span class="hljs-string">&quot;test()&quot;</span>);<br></code></pre></td></tr></table></figure><p>最终异步加载写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadScript</span>(<span class="hljs-params">url, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>    <span class="hljs-keyword">if</span>(script.readyState)&#123;<br>        script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>            <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>                tools[callback]();<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            tools[callback]();<br>        &#125;<br>    &#125;<br>    script.src = url;<span class="hljs-comment">//放在后面的原因：先执行绑定事件，在加载文件</span><br>    <span class="hljs-built_in">document</span>.head.appendChild(script);<br>&#125;<br><span class="hljs-comment">// loadScript(&#x27;alert.js&#x27;,test);还没解析，不知test是谁</span><br>loadScript(<span class="hljs-string">&#x27;alert.js&#x27;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="js-加载时间线"><a href="#js-加载时间线" class="headerlink" title="js 加载时间线"></a>js 加载时间线</h1><blockquote><p>优化基础</p></blockquote><p>1、创建 Document 对象，开始解析 web 页面。解析 HTML 元素和他们的文本内容后添加 Element 对象和 Text 节点到文档中。这个阶段 document.readyState = ‘loading’。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    <span class="hljs-comment">// window.onload = function()&#123;</span></span><br><span class="javascript">    <span class="hljs-comment">// console.log(document.readyState);</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、遇到 link 外部 css，创建线程加载，并继续解析文档。</p><p>3、遇到 script 外部 js，并且没有设置 async、defer，浏览器加载，并阻塞，等待 js 加载完成并执行该脚本，然后继续解析文档。</p><p>4、遇到 script 外部 js，并且设置有 async、defer，浏览器创建线程加载，并继续解析文档。<br>对于 async 属性的脚本，脚本加载完成后立即执行。（异步禁止使用 document.write()）<br>5、遇到 img 等，先正常解析 dom 结构，然后浏览器异步加载 src，并继续解析文档。<br>6、当文档解析完成，document.readyState = ‘interactive’。<br>7、文档解析完成后，所有设置有 defer 的脚本会按照顺序执行。（注意与 async 的不同,但同样禁止使用 document.write()）;<br>8、document 对象触发 DOMContentLoaded 事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。<br>9、当所有 async 的脚本加载完成并执行后、img 等加载完成后，document.readyState = ‘complete’，window 对象触发 load 事件。<br>10、从此，以异步响应方式处理用户输入、网络事件等。</p><h1 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h1><h2 id="1-事件：交互体验的核心功能"><a href="#1-事件：交互体验的核心功能" class="headerlink" title="1.事件：交互体验的核心功能"></a>1.事件：交互体验的核心功能</h2><h3 id="1-如何绑定事件处理函数"><a href="#1-如何绑定事件处理函数" class="headerlink" title="(1).如何绑定事件处理函数"></a>(1).如何绑定事件处理函数</h3><p>如何绑定事件处理函数，不是绑定事件，事件本身就有</p><blockquote><p>1.ele.onxxx = function (event) {}<br>兼容性很好，但是一个元素只能绑定一个处理程序</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;</span><br><span class="javascript">    &#125;<span class="hljs-comment">//一个对象一个事件 多次赋值会覆盖</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>基本等同于写在 HTML 行间上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background-color</span>: red<span class="hljs-string">&quot; onclick=&quot;</span>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-string">&quot;&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.obj.addEventListener(type, fn, false);<br>IE9 以下不兼容（w3c 标准），可以为一个事件绑定多个处理程序</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件监听机制：不是 Js 引擎干的，而是 webstore 做的</p><p>可以为一个事件绑定多个处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">    &#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript">    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>演示：打印 2 个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>演示：打印一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, test, <span class="hljs-literal">false</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, test, <span class="hljs-literal">false</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.obj.attachEvent(‘on’ + type, fn);<br>IE 独有，一个事件同样可以绑定多个处理程序</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            * &#123;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n) &#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n-<span class="hljs-number">1</span>) &#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> liCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; liCollection.length; i++) &#123;</span><br><span class="javascript">                (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) </span>&#123;</span><br><span class="javascript">                    liCollection[j].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(j);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;(i));</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件处理程序的运行环境</p><blockquote><p>1.ele.onxxx = function (event) {}<br>程序 this 指向是 dom 元素本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.obj.addEventListener(type, fn, false);<br>程序 this 指向是 dom 元素本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = docuemnt.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><blockquote><p>3.obj.attachEvent(‘on’ + type, fn);<br>程序 this 指向 window</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = docuemnt.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.attchEvent(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// console.log(this);---window</span><br>    handle.call(div);<span class="hljs-comment">//让this指向div</span><br>&#125;);<br><span class="hljs-comment">// 想让this指向div</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// this.</span><br>    <span class="hljs-comment">//事件处理程序</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-解除事件处理程序"><a href="#2-解除事件处理程序" class="headerlink" title="(2).解除事件处理程序"></a>(2).解除事件处理程序</h3><blockquote><p>ele.onclick = false/‘’/null;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.onclick = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ele.removeEventListener(type, fn, false);</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click,test,false&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">div.addEventListener(&#x27;click,function ()&#123;&#125;,false&#x27;);</span><br><span class="hljs-comment">这样用不了，永远接触不掉了，匿名函数</span><br><span class="hljs-comment">*/</span><br>div.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,test,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><blockquote><p>ele.detachEvent(‘on’ + type, fn);同上</p></blockquote><blockquote><p>注:若绑定匿名函数，则无法解除</p></blockquote><h2 id="2-事件处理模型"><a href="#2-事件处理模型" class="headerlink" title="2.事件处理模型"></a>2.事件处理模型</h2><h3 id="1-事件冒泡："><a href="#1-事件冒泡：" class="headerlink" title="(1).事件冒泡："></a>(1).事件冒泡：</h3><p><strong>结构上</strong>（<strong>非视觉上</strong>）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><br><span class="javascript">            wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapper&#x27;</span>);</span><br><span class="javascript">            &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">            content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;content&#x27;</span>);</span><br><span class="javascript">            &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">            box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;box&#x27;</span>);</span><br><span class="javascript">            &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结：结构上嵌套，而不是视觉上</strong></p><h3 id="2-事件捕获："><a href="#2-事件捕获：" class="headerlink" title="(2).事件捕获："></a>(2).事件捕获：</h3><p>结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自底向上）和冒泡区别：<strong>改成 true</strong>，与冒泡正好相反，先抓父级，后子元素<br>IE 没有捕获事件</p><p>一个对象的一个事件类型只能存在一个事件模型，要么时间冒泡，要么事件捕获</p><p>说法：点击最外层，最外面捕获事件并且执行，中间捕获并且执行，最里面叫事件执行</p><blockquote><p>同一个对象的同一事件类型上面绑定了两个事件处理函数，一个叫事件冒泡，一个事件捕获这两个执行顺序如何？</p></blockquote><p><strong>触发顺序，先捕获，后冒泡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;wrapper&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;content&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;box&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  wrapper.addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;wrapper&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-literal">true</span></span><br><span class="javascript">  );</span><br><span class="javascript">  content.addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;content&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-literal">true</span></span><br><span class="javascript">  );</span><br><span class="javascript">  box.addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;box&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-literal">true</span></span><br><span class="javascript">  );</span><br><span class="javascript"></span><br><span class="javascript">  wrapper.addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;wrapperBubble&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-literal">false</span></span><br><span class="javascript">  );</span><br><span class="javascript">  content.addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;contentBubble&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-literal">false</span></span><br><span class="javascript">  );</span><br><span class="javascript">  box.addEventListener(</span><br><span class="javascript">    <span class="hljs-string">&quot;click&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;boxBubble&quot;</span>);</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-literal">false</span></span><br><span class="javascript">  );</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果换换顺序：两个捕获结束，到了黄色区域的执行，谁先绑定谁先执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];<br>wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapperBubble&#x27;</span>)<br>&#125;,<span class="hljs-literal">false</span>);<br>content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;contentBubble&#x27;</span>)<br>&#125;,<span class="hljs-literal">false</span>);<br>box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;boxBubble&#x27;</span>)<br>&#125;,<span class="hljs-literal">false</span>);<br>wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapper&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>);<br>content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;content&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>);<br>box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;box&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>focus，blur，change，submit，reset，select 等事件不冒泡</strong></p><h3 id="3-取消冒泡和阻止默认事件"><a href="#3-取消冒泡和阻止默认事件" class="headerlink" title="(3).取消冒泡和阻止默认事件"></a>(3).取消冒泡和阻止默认事件</h3><p>取消冒泡：</p><p>W3C 标准 event.stopPropagation()；但不支持 ie9 以下版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你闲的呀&#x27;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">div.onclick =  <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">e.stopPropagation();<span class="hljs-comment">//取消冒泡</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.style.background = <span class="hljs-string">&quot;green&quot;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IE，谷歌有 event.cancelBubble = true;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.onclick =  <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    e.cancelBubble = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件:"></a>阻止默认事件:</h3><p>默认事件 — 表单提交，a 标签跳转，右键菜单等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1.return false; 以对象属性的方式注册的事件才生效,只有句柄绑定的事件才好使</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.event.preventDefault(); W3C 标注，IE9 以下不兼容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    e.preventDefault();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.event.returnValue = false; 兼容 IE</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    e.returnValue = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>a 标签默认跳转事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- br*100 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- br*100 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cancelHandler</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(event.preventDefault) &#123;</span><br><span class="javascript">            event.preventDefault();</span><br><span class="javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">            event.returnValue = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以这样，相当于 return</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- &lt;a href=&quot;javascript:alert(&#x27;a&#x27;)&quot;&gt;demo&lt;/a&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(false)&quot;</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>event || window.event 用于 IE</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px;background-color: green&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-comment">// 事件源对象</span></span><br><span class="javascript">    wrapper.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件源对象<br>event.target 火狐独有的<br>event.srcElement Ie 独有的<br>这俩 chrome 都有</p><p>兼容性写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px;background-color: green&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-comment">// 事件源对象</span></span><br><span class="javascript">    wrapper.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> target = event.target || event.srcElement;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(target);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>点那个出那个内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> len = li.length;</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;</span><br><span class="javascript">            li[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.innerText);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>优化实现：子元素就能冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;ul&#x27;</span>)[<span class="hljs-number">0</span>];<br>ul.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>.event;<br>    <span class="hljs-keyword">var</span> target = event.target || event.srcElement;<br>    <span class="hljs-built_in">console</span>.log(target.innerText);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用事件冒泡，和事件源对象进行处理<br>优点：</p><ol><li><p>性能 不需要循环所有的元素一个个绑定事件</p></li><li><p>灵活 当有新的子元素时不需要重新绑定事件</p></li></ol><p>老面试官会问：什么是事件捕获，三个参数为 true，还有没有其他形式的捕获：</p><p>真实的事件处理的过程用于解决拖拽鼠标容易出来 div 这样的麻烦事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 只在IE好使</span><br>div.setCapture();<span class="hljs-comment">//任何地方发生的任何事件都获取到自己身上</span><br>div.releaseCapture();<span class="hljs-comment">//释放</span><br></code></pre></td></tr></table></figure><h4 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h4><p>鼠标事件<br>click、mousedown、mousemove、mouseup、contextmenu</p><p>click = mousedown + mouseup</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onmousedown&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onmouseup&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>mouseover、mouseout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;yellow&quot;</span>;<br>&#125;<br>div.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>h5 新规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.onmouseenter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;yellow&quot;</span>;<br>&#125;<br>div.onmouseleave = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用 button 来区分鼠标的按键，0/1/2<br>DOM3 标准规定:click 事件只能监听左键,只能通过 mousedown 和 mouseup 来判断鼠标键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(e.button == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;right&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.button == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;left&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//中间滚动轮是1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>拖拽影响 click，click 不影响拖拽，基于这个，实现拖拽不等于点击：时间差</p><p>如何解决 mousedown 和 click 的冲突</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> firstTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> key = <span class="hljs-literal">false</span>;<span class="hljs-comment">//开关</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        firstTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        lastTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(lastTime - firstTime &lt; <span class="hljs-number">300</span>)&#123;</span><br><span class="javascript">            key = <span class="hljs-literal">true</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(key)&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);</span><br><span class="javascript">            key = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>随机移动方块项目：鼠标放上去，随机向四面八方移动</p><h2 id="事件分类-1"><a href="#事件分类-1" class="headerlink" title="事件分类"></a>事件分类</h2><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><blockquote><p>移动端 onmouseon 就不好使了，得用 touchstart touchmove touchend</p></blockquote><p>keydown keyup keypress</p><p>猜想：</p><p>keydown+keyup=keypress</p><p>但是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onkeypress = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;keypress&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;keydown&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;keyup&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>触发顺序： keydown &gt; keypress &gt; keyup</p><h4 id="keydown-和-keypress-的区别"><a href="#keydown-和-keypress-的区别" class="headerlink" title="keydown 和 keypress 的区别"></a>keydown 和 keypress 的区别</h4><p>keydown 可以响应任意键盘按键(除了 fn 都有)，keypress 只可以相应字符类键盘按键（字符时候用它大小写区分开）<br>keypress 返回 ASCII 码，可以转换成相应字符</p><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onkeypress = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e);<br>&#125;<br><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>ASCII 转化成字母（验证的时候按空白区域，不是 console 区域）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onkeypress = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>.fromCharCode(e.charCode));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文本操作事件"><a href="#文本操作事件" class="headerlink" title="文本操作事件"></a>文本操作事件</h2><h4 id="input-change"><a href="#input-change" class="headerlink" title="input change"></a>input change</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#01f</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//改变</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            input.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">//聚焦+状态改变才触发</span></span><br><span class="javascript">            input.change = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="focus-blur"><a href="#focus-blur" class="headerlink" title="focus,blur"></a>focus,blur</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#01f</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#999&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;if(this.value == &#x27;请输入用户名&#x27;)</span></span><br><span class="hljs-string"><span class="hljs-tag">                                                                      &#123;this.value=&#x27;&#x27;&#125;&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;if(this.value==&#x27;&#x27;)&#123;this.value=&#x27;请输入用户名&#x27;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="窗体操作类-window-上的事件"><a href="#窗体操作类-window-上的事件" class="headerlink" title="窗体操作类(window 上的事件)"></a>窗体操作类(window 上的事件)</h4><p>scroll(当滚动条一滚动就触发)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML">br*100<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.pageXOffset + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">window</span>.pageYOffset);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>load</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div);</span><br><span class="javascript">    div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">    div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">    div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>div在下面，肯定读不到娶不到，用onload就能用<br></code></pre></td></tr></table></figure><p>为什么不用？</p><p>浏览器时间线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xx.solarge&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器先认出来就行了，具体加载先不管，认出来直接放树上(见图片)<br>先解析完，立刻开启新线程异步下载<br>html 刚刚解析完 JS 就能操作了，不用等 HTML 解析完<br>window.onload 要等解析完下载完才执行，效率太低</p><p>小练习:用 position:absoluted 模拟 fixed 定位 js 兼容版(IE6 没有 fixed )</p><p>position:top + 原来的 top===他原来位置</p><p><a href="https://blog.csdn.net/longyin0528/article/details/80777809">https://blog.csdn.net/longyin0528/article/details/80777809</a></p><p>完成：</p><p>1.完善轮播图，加按钮 2.提(qie)取密码框的密码——监听：边写边监听打印 3.输入框功能完善 4.贪食蛇游戏—-项目公演 5.扫雷游戏—-项目公演：注意闭包</p><p>6.N 阶菜单栏：display:none/block</p><p>7.打方块游戏</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对象包装类原形原型链</title>
    <link href="/2019/12/20/%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB%E5%8E%9F%E5%BD%A2%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2019/12/20/%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB%E5%8E%9F%E5%BD%A2%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>用已学的知识点，描述一下你心目中的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> mrDeng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;mrDeng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">health</span> : <span class="hljs-number">100</span>,<span class="hljs-comment">//可在控制台更改</span><br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am smoking&#x27;</span>);<br>        mrDeng.health --;<br>    &#125;,<br>    <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am drink&#x27;</span>);<br>        mrDeng.health ++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进 第一人称：this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> mrDeng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;mrDeng&quot;</span>,   千万别是等于号<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">health</span> : <span class="hljs-number">100</span>,<span class="hljs-comment">//可在控制台更改</span><br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am smoking&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.health --;<br>    &#125;,<br>        <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am drink&#x27;</span>);<br>            <span class="hljs-built_in">this</span>.health ++;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-属性的增、删、改、查"><a href="#1-属性的增、删、改、查" class="headerlink" title="1.属性的增、删、改、查"></a>1.属性的增、删、改、查</h2><p>增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS">drink:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am drinking&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.health ++;<br>&#125;<br>meDeng.wife = <span class="hljs-string">&quot;xiaowang&quot;</span>;<br><span class="hljs-comment">// console.log(mrDeng.wife = &quot;xiaoliu&quot;);</span><br><span class="hljs-comment">// console.log(mrDeng);</span><br></code></pre></td></tr></table></figure><p>改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(mrDeng);<br><span class="hljs-built_in">console</span>.log(mrDeng.sex = <span class="hljs-string">&quot;male&quot;</span>);<br><span class="hljs-built_in">console</span>.log(mrDeng.sex);<br></code></pre></td></tr></table></figure><p>删 delete + 属性</p><p><strong>当一个变量没有声明就是用报错，对象的属性没有就访问打印 undefined，不会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">prepareWife</span> : <span class="hljs-string">&quot;xiaowang&quot;</span>,<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;laodeng&quot;</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">gf</span> : <span class="hljs-string">&quot;xiaoliu&quot;</span>,<br>    <span class="hljs-attr">wife</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">divorce</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.wife;<br>        <span class="hljs-built_in">this</span>.gf = <span class="hljs-built_in">this</span>.PrepareWife;<br><br>    &#125;,<br>    <span class="hljs-attr">getMarried</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.wife = <span class="hljs-built_in">this</span>.gf;<br><br>    &#125;,<br>    <span class="hljs-attr">changePrepareWife</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">someone</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.PrepareWife = someone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象的创建方法"><a href="#2-对象的创建方法" class="headerlink" title="2.对象的创建方法"></a>2.对象的创建方法</h2><p>1.var obj = {} 叫 plainObject 对象字面量/对象直接量</p><p>2.构造函数</p><p>（1） 系统自带的构造函数 new Object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>obj.sex = <span class="hljs-string">&#x27;female&#x27;</span>;<br>obj.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>系统提供的：new Object();Array();Number();Boolean();Date();</p><p>（2） 自定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//方便使用-人为的，构造函数特点：大驼峰式命名规则，只要是单词，首字母大写（小驼峰式：第一个外的首字母大写）</span><br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;BMW&quot;</span>;<br>    <span class="hljs-built_in">this</span>.height = <span class="hljs-string">&quot;1400&quot;</span>;<br>    <span class="hljs-built_in">this</span>.lang = <span class="hljs-string">&quot;4900&quot;</span>;<br>    <span class="hljs-built_in">this</span>.weight = <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">this</span>.health = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.health --;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car();<span class="hljs-comment">//每个都一样，但是每个都独立</span><br><span class="hljs-keyword">var</span> car1 = <span class="hljs-keyword">new</span> Car();<span class="hljs-comment">//不是一个人，不互通</span><br><span class="hljs-built_in">console</span>.log(car.run());<br><span class="hljs-built_in">console</span>.log(car1.health);<br><span class="hljs-built_in">console</span>.log(car.health);<br></code></pre></td></tr></table></figure><p>demo</p><p>实现自己选配颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.color = color;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;BMW&quot;</span>;<br>    <span class="hljs-built_in">this</span>.height = <span class="hljs-string">&quot;1400&quot;</span>;<br>    <span class="hljs-built_in">this</span>.lang = <span class="hljs-string">&quot;4900&quot;</span>;<br>    <span class="hljs-built_in">this</span>.weight = <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">this</span>.health = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.health --;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>);<br><span class="hljs-keyword">var</span> car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;green&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(car/car1);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.grade = <span class="hljs-number">2017</span>;<br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意事项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Object</span>(<span class="hljs-params"></span>)</span>&#123;<br>    obj.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    obj.sex = <span class="hljs-string">&#x27;female&#x27;</span>;<br>    obj.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//冒号</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>构造函数内部原理</p></blockquote><p>有 new 则发生三步</p><p>1.在函数体最前面隐式的加上 var this = {} 2.执行 this.xxx = xxx; 3.隐式的返回 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-comment">//var this = &#123;</span><br>    <span class="hljs-comment">// name : &quot;&quot;</span><br>    <span class="hljs-comment">// age :</span><br>    <span class="hljs-comment">// &#125;;</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.grade = <span class="hljs-number">2017</span>;<br>    <span class="hljs-comment">// return this;</span><br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, height</span>)</span>&#123;<br>    <span class="hljs-comment">// var this = &#123;&#125;</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.height = height;<br>    <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.say);<br>    &#125;<br>    <span class="hljs-comment">// return this;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaoliu&#x27;</span>,<span class="hljs-number">180</span>).name);<br></code></pre></td></tr></table></figure><p>模拟构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, height</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> that = &#123;&#125;;<br>    that.name = name;<br>    that.height = height;<br>    <span class="hljs-keyword">return</span> that;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaowang&#x27;</span>, <span class="hljs-number">180</span>);<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaozhang&#x27;</span>,<span class="hljs-number">175</span>);<br></code></pre></td></tr></table></figure><p>冷门知识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, height</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">this</span> = &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.height = height;<br>    <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.say);<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<span class="hljs-comment">//显示返回空对象,so person很person1都返回空对象</span><br>    <span class="hljs-comment">// return this;</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaowang&#x27;</span>, <span class="hljs-number">180</span>);<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaozhang&#x27;</span>,<span class="hljs-number">175</span>);<br><span class="hljs-comment">// 但是return一个原始值不允许</span><br></code></pre></td></tr></table></figure><p>Object.create(原型)方法</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="1-小知识"><a href="#1-小知识" class="headerlink" title="1.小知识"></a>1.小知识</h2><p><strong>原始值不能有属性和方法，只有对象能有，对象包括对象自己，数组，function。</strong><br><strong>数字不一定是原始值。数字分两种：原始值数字才是原始值。数字，字符串分为两种。</strong><br>var num = 123;数字<br>Var num = new number(123);也数字，对象 123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(num);<br><span class="hljs-built_in">console</span>.log(num.abc=<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(num.abc);<br><span class="hljs-built_in">console</span>.log(num);<br><span class="hljs-built_in">console</span>.log(num*<span class="hljs-number">2</span>);<span class="hljs-comment">//成了数字，没有了对象属性，同理字符串，布尔</span><br></code></pre></td></tr></table></figure><p>不能有属性的两个原始值：<strong>undefined null</strong></p><p>String();<br>Boolean();<br>Number();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>);<br><span class="hljs-keyword">var</span> bol = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;true&#x27;</span>);<br><span class="hljs-comment">// undefined与null不可以有属性</span><br><span class="hljs-built_in">console</span>.log(num.abc);<br></code></pre></td></tr></table></figure><h2 id="2-现象："><a href="#2-现象：" class="headerlink" title="2.现象："></a>2.现象：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = “abcd”;<br>str.length = <span class="hljs-number">4</span>;<span class="hljs-comment">//理论上不可以</span><br>str.abc = ‘a’;<br>str.abc = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><p>原始值不可能有属性和方法，因为经历了一个过程——包装类，才能调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">4</span>;<span class="hljs-comment">//包装类</span><br><span class="hljs-built_in">console</span>.log(num.len = <span class="hljs-number">3</span>);<br><span class="hljs-comment">//new Number(4).len = 3;  delete</span><br><span class="hljs-comment">// new Number(4).len</span><br><span class="hljs-built_in">console</span>.len(num.len);<span class="hljs-comment">//undefined</span><br><span class="hljs-comment">// num没有length</span><br></code></pre></td></tr></table></figure><blockquote><p>考题</p></blockquote><p>基于一个理论：数组截断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [a,b,c,d];<br><span class="hljs-built_in">console</span>.log(arr.length = <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>成哥真题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br>str.length = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// new String(&#x27;abcd&#x27;).length = 2;delete</span><br><span class="hljs-built_in">console</span>.log(str);<span class="hljs-comment">//abcd</span><br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br>str.length = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// new String(&#x27;abcd&#x27;).length = 2;delete</span><br><span class="hljs-comment">// new String(&#x27;abcd&#x27;).length</span><br><span class="hljs-built_in">console</span>.log(str.length);<span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h1 id="原形"><a href="#原形" class="headerlink" title="原形"></a>原形</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>原型是 function 对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。</p><p>构造函数产生的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// Person.prototype = &#123;&#125; 是祖先</span><br>Person.prototype.name = <span class="hljs-string">&quot;hehe&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>应用：</p><p>实例一：自己有取自己的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br>Person.prototype.say  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hehe&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this.LastName = &#x27;ji&#x27;;先看自己后看父亲</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>实例二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br>Person.prototype.say  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hehe&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xuming&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-提取共有属性。"><a href="#2-提取共有属性。" class="headerlink" title="2.提取共有属性。"></a>2.提取共有属性。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color,owner</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.owner = owner;<br>    <span class="hljs-built_in">this</span>.carName = <span class="hljs-string">&quot;BMW&quot;</span>;<span class="hljs-comment">//每次生产都得执行这三句，耦合</span><br>    <span class="hljs-built_in">this</span>.height = <span class="hljs-number">1400</span>;<br>    <span class="hljs-built_in">this</span>.lang = <span class="hljs-number">8900</span>;<br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;prof.ji&#x27;</span>);<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Car.prototype.height = <span class="hljs-number">1400</span>;<br>Car.prototype.lang = <span class="hljs-number">8900</span>;<br>Car.prototype.carName = <span class="hljs-string">&quot;BMW&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color,owner</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.owner = owner;<br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;prof.ji&#x27;</span>);<br><span class="hljs-keyword">var</span> car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;laodeng&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="3-原形的增删改查"><a href="#3-原形的增删改查" class="headerlink" title="3.原形的增删改查"></a>3.原形的增删改查</h2><p>增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<span class="hljs-comment">//原形属性没有改，想改，就要调用Person.prototyoe.lastName</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xuming&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(person.lastName=<span class="hljs-string">&quot;james&quot;</span>);<span class="hljs-comment">//这不叫修改，这叫增加</span><br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(person.lastName);<br></code></pre></td></tr></table></figure><p>删</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> person.name);<br><span class="hljs-built_in">console</span>.log(person.name);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> person.lastName);<br><span class="hljs-built_in">console</span>.log(person.lastName);<span class="hljs-comment">//删除失效</span><br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Car.prototype.height = <span class="hljs-number">1400</span>;<br>Car.prototype.lang = <span class="hljs-number">8900</span>;<br>Car.prototype.carName = <span class="hljs-string">&quot;BMW&quot;</span>;<br>一步到位<br>Car.prototype = &#123;<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">1400</span>,<br>    <span class="hljs-attr">lang</span> : <span class="hljs-number">4900</span>,<br>    <span class="hljs-attr">carName</span> : <span class="hljs-string">&quot;BMW&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>改</p><p>2.对象如何查看对象的构造函数 — &gt; constructor 构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-comment">//可以手动更改</span><br><span class="hljs-comment">//构造器constructor：谁生的</span><br>Car.prototype = &#123;<br>    <span class="hljs-attr">constructor</span> : Person<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car();<br><span class="hljs-built_in">console</span>.log(car.constructor);<br></code></pre></td></tr></table></figure><p>查</p><ol><li>对象如何查看原型 — &gt; 隐式属性 <strong>proto</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//浅紫色，隐式命名规则</span><br><span class="hljs-built_in">console</span>.log(person);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS">person.prototype.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-comment">// 私人属性：var __pravite</span><br><span class="hljs-built_in">console</span>.log(person.__proto__)<span class="hljs-comment">//__proto__里面放的是原形</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">this</span> = &#123;<br>        <span class="hljs-comment">// __proto__: Person.prototype</span><br>    &#125;<br>&#125;<span class="hljs-comment">//先看看自己有没有name属性，没有的话沿着proto指向找</span><br><span class="hljs-keyword">var</span> perosn = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(perosn.name);<br></code></pre></td></tr></table></figure><p>改变 proto 指向会使得指向更改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// var this = &#123;</span><br>    <span class="hljs-comment">// // __proto__: Person.prototype</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sunny&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<span class="hljs-comment">//换爹</span><br>person.__proto__ = obj;<br></code></pre></td></tr></table></figure><p>演示 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>Person.prototype.name = <span class="hljs-string">&quot;cherry&quot;</span>;<br>person.name;<br>分析:自己没有，找proto，是Person.prototype：sunny，最后又改成cherry<br></code></pre></td></tr></table></figure><p>演示 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br>Person.prototype.name = <span class="hljs-string">&quot;cherry&quot;</span>;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.name);<br>同理分析cherry<br></code></pre></td></tr></table></figure><p>演示 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>Person.prototype = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;cherry&quot;</span><br>&#125;<br>person.name;<br>答案：sunny。<br>.的写法是原有的基础上把原有的值改了，这一次是把原形改了，换了个新对象<br></code></pre></td></tr></table></figure><p>简化:引用值的互相赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;a&quot;</span>&#125;;<br><span class="hljs-keyword">var</span> obj1 = obj;<br>obj = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;b&quot;</span>&#125;;<br>obj1:a,<span class="hljs-attr">obj</span>:b<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.Prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//var this = &#123;__proto__:Person.prototype&#125;</span><br>&#125;<span class="hljs-comment">//proto指向不变还是sunny</span><br><span class="hljs-keyword">var</span> person  = <span class="hljs-keyword">new</span> Person();<br>Person.prototype = &#123;<span class="hljs-comment">//把自己空间换了</span><br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;cherry&#x27;</span><br>&#125;<br><span class="hljs-comment">// 更加简化</span><br><span class="hljs-comment">// Perosn.prototype = &#123;name:&quot;a&quot;&#125;;</span><br><span class="hljs-comment">// __proto__ = Person.Prototype;</span><br><span class="hljs-comment">// Person.Prototype = &#123;name:&quot;b&quot;&#125;;</span><br></code></pre></td></tr></table></figure><p>演示 4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br>Person.prototype = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cherry&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>person.name;<br>答案：cherry<br>预编译：函数 <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123; &#125; 提升到最上面，然后顺序执行，执行到最后一行，有<span class="hljs-keyword">new</span>了，<br>就有<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">var</span> <span class="hljs-built_in">this</span> = __proto__ Person.prototype &#125; ，再访问：下面的把上覆盖<br></code></pre></td></tr></table></figure><p>原型链引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS">Grand.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Gand</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name  = <span class="hljs-string">&quot;xuming&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.hobbit = <span class="hljs-string">&quot;somke&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-built_in">console</span>.log(son.hobbit);<br><span class="hljs-built_in">console</span>.log(son.name);<span class="hljs-comment">//顺着链找</span><br><span class="hljs-built_in">console</span>.log(son.toString);<br>Grand.prototype.__proto__=<span class="hljs-built_in">Object</span>.prototype是所有对象的最终原形<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__);proto没了，so就是终端<br></code></pre></td></tr></table></figure><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>如何构成原型链?</p><h2 id="1-原型链上属性的增删改查"><a href="#1-原型链上属性的增删改查" class="headerlink" title="1.原型链上属性的增删改查"></a>1.原型链上属性的增删改查</h2><p>增，删，修改：只有本人有权限，子孙没有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> Father.prototype.n);<span class="hljs-comment">//删不了</span><br></code></pre></td></tr></table></figure><p>特例：引用值调用修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;xuming&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.fortune = &#123;<br>        <span class="hljs-attr">card1</span> : <span class="hljs-string">&#x27;visa&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.hobbit = <span class="hljs-string">&quot;somoke&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> son =  <span class="hljs-keyword">new</span> Son();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(son.fortune);<br>son.fortune = <span class="hljs-number">200</span>;<br><span class="hljs-built_in">console</span>.log(son);<br><span class="hljs-built_in">console</span>.log(father.fortune);<br>son.fortune.card2 = <span class="hljs-string">&#x27;master&#x27;</span>;<br>cons.log(father);<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS">Grand.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Grand</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;xuming&quot;</span>;<br>    <span class="hljs-built_in">this</span>.forture = &#123;<br>        <span class="hljs-attr">card1</span> : <span class="hljs-string">&#x27;visa&#x27;</span><br>    &#125;;<br>    <span class="hljs-built_in">this</span>.num = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.hobbit = <span class="hljs-string">&quot;smoke&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(son.num++);<span class="hljs-number">100</span><br><span class="hljs-built_in">console</span>.log(father);<span class="hljs-number">100</span><br><span class="hljs-built_in">console</span>.log(son.num);<span class="hljs-number">101</span><br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<span class="hljs-comment">//答案：a</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;b&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>小常识：<br>a.sayName()<br>sayName 里面的 this 指向是，谁调用的这个方法，this 就指向谁<br>person.sayName(); person 调用的，b<br>如果 Person.prototype.sayName(); a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype = &#123;<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.eat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.height ++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(person.eat);<br>person.eat();<br><span class="hljs-built_in">console</span>.log(person.eat);<span class="hljs-comment">//默認return：undefined 查看要写代码</span><br></code></pre></td></tr></table></figure><p>公司规范：数组，对象都用字面量创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<span class="hljs-comment">//对象自变量创建形式，有原形</span><br><span class="hljs-comment">//与var obj1 = new Object();相同</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;内部来一个<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>所以要写对象字面量<br></code></pre></td></tr></table></figure><blockquote><p>绝大多数对象的最终都会继承自 Object.prototype</p></blockquote><p>（选择题真题）<br>例外：由于 Object.create</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.create());<span class="hljs-comment">//报错，不写代码</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>));<br></code></pre></td></tr></table></figure><blockquote><p>Object.create(原型)也能创造对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var obj = Object(原形);</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;sunny&quot;</span>, <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>&#125;;<br><span class="hljs-keyword">var</span> obj1 = <span class="hljs-built_in">Object</span>.create(obj);<br><span class="hljs-comment">// obj1成为了对象，obj1的原形是obj,所以obj1.name就是obj.name</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-built_in">Object</span>.create(Person.prototype);<br></code></pre></td></tr></table></figure><h2 id="2-关于-toString"><a href="#2-关于-toString" class="headerlink" title="2.关于 toString:"></a>2.关于 toString:</h2><p><strong>只有 undefined 与 null 不能调用 toString</strong><br>数字可以，因为经过包装类一层层访问 123.toString();<br>undefined 没有包装类，是个原始值，没有原形，不能调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span>.toString);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>.toString);<br>obj.__proto__ = &#123; <span class="hljs-attr">name</span>: sunny&#125;;<br><span class="hljs-built_in">console</span>.log(obj.name);<span class="hljs-comment">//自己加原形不管用</span><br></code></pre></td></tr></table></figure><p>各个变量各个属性值调用 toString 返回结果不一样 变成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(num.toString);<span class="hljs-comment">//字符串</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123.</span>toString);<span class="hljs-comment">//识别成浮点型</span><br></code></pre></td></tr></table></figure><p>现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj.toString();----&gt;[object <span class="hljs-built_in">Object</span>]<br></code></pre></td></tr></table></figure><p>原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-comment">// num.toString();--&gt;new Number(num).toString();</span><br><span class="hljs-built_in">Number</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-comment">// Number.prototype.__proto__ = Object.prototype</span><br></code></pre></td></tr></table></figure><p>重写笔试题:写一个方法重写形式，写一个和系统同样的名，不同功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// Object.prototype.toString = function ()&#123;</span><br><span class="hljs-comment">// &#125;</span><br>Person.prototype = &#123;<br>    <span class="hljs-attr">toString</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hehhe&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> Person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><blockquote><p><strong>本集多看弱项</strong></p></blockquote><h2 id="3-小-bug"><a href="#3-小-bug" class="headerlink" title="3.小 bug"></a>3.小 bug</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.4</span>*<span class="hljs-number">100</span>);<span class="hljs-comment">//js精度不准</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">123.234</span>));<span class="hljs-comment">//向上取整</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">123.99999</span>));<span class="hljs-comment">//下</span><br></code></pre></td></tr></table></figure><p>随机生成 0-100 随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Math</span>.random();<span class="hljs-comment">//随机数生成函数(0,1)</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    <span class="hljs-keyword">var</span> num  = <span class="hljs-built_in">Math</span>.random().toFixed(<span class="hljs-number">2</span>)*<span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">console</span>.log(num);<span class="hljs-comment">//会出现偏差</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解决:先*100 后取整</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">console</span>.log(num);<br>&#125;<br><span class="hljs-comment">// 总结：可正常那个计算的范围：小数点前16后16</span><br></code></pre></td></tr></table></figure><h1 id="call-apply-必考"><a href="#call-apply-必考" class="headerlink" title="call/apply 必考"></a>call/apply <code>必考</code></h1><h2 id="1-call"><a href="#1-call" class="headerlink" title="1.call"></a>1.call</h2><p><strong>作用，改变 this 指向。借用别人的函数实现自己的功能</strong><br><strong>区别，后面传的参数形式不同。</strong><br>call 需要把实参按照形参的个数传出去 apply 需要传一个 arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>test()===test.call();<span class="hljs-comment">//后面隐式默认</span><br></code></pre></td></tr></table></figure><p>call 里面可以传东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;deng&#x27;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">var</span> obj = &#123;<br>&#125;<br><span class="hljs-comment">// Person.call(obj);</span><br><span class="hljs-comment">// 会让Person里所有的this变成obj 即this=obj</span><br><span class="hljs-comment">// 怎么传参：Person.call(obj,&#x27;cheng&#x27;,300);</span><br>Person.call(obj,<span class="hljs-string">&#x27;cheng&#x27;</span>,<span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure><p>企业级开发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//开发讲究快准狠，A写的代码能实现B的功能，省时</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, sex, tel, grade</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.tel = tel;<br>    <span class="hljs-built_in">this</span>.grade = grade;<span class="hljs-comment">//后面覆盖前面</span><br>&#125;<br><span class="hljs-comment">// call 借用别人的函数实线自己的功能</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, sex, tel, grade</span>)</span>&#123;<br>    <span class="hljs-comment">// var this = &#123;name : &quot;&quot;, age : &quot;&quot;,sex : &quot;&quot;&#125;</span><br>    Person.call(<span class="hljs-built_in">this</span>, name, age, sex);<br>    <span class="hljs-built_in">this</span>.tel = tel;<br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;sunny&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-number">139</span>,<span class="hljs-number">2017</span>);<br></code></pre></td></tr></table></figure><p>造车举例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Wheel</span>(<span class="hljs-params">wheelSize,style</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.style = style;<br>    <span class="hljs-built_in">this</span>.wheelSize = wheelSize;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Sit</span>(<span class="hljs-params">c,sitColor</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.c = c;<br>    <span class="hljs-built_in">this</span>.sitColor = sitColor;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Model</span>(<span class="hljs-params">height,width,len</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.height = height;<br>    <span class="hljs-built_in">this</span>.width = width;<br>    <span class="hljs-built_in">this</span>.len = len;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">wheelSize, style, c, sitColor, height, width, len</span>) </span>&#123;<br>    Wheel.call(<span class="hljs-built_in">this</span>, wheelSize,style);<br>    Sit.call(<span class="hljs-built_in">this</span>,c,sitColor);<br>    Model.call(<span class="hljs-built_in">this</span>, height, width, len);<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;花里胡哨的&#x27;</span>,<span class="hljs-string">&#x27;真皮&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-number">1800</span>,<span class="hljs-number">1900</span>,<span class="hljs-number">4900</span>);<br></code></pre></td></tr></table></figure><h2 id="2-apply："><a href="#2-apply：" class="headerlink" title="2.apply："></a>2.apply：</h2><p>apply 只能传送一个数组形式的实参<br>Wheel.apply(this, [wheelSize,style]);</p><p>总结：</p><p>call：<strong>需要把实参按照形参的个数传进去</strong></p><p>apply: <strong>需要传一个 arguments</strong></p><p>作业:电子书 js 设计模式 0-35 页上部分</p><p>笔试题：用友 2017 校招前端</p><h1 id="继承发展史"><a href="#继承发展史" class="headerlink" title="继承发展史"></a>继承发展史</h1><h2 id="1-传统形式"><a href="#1-传统形式" class="headerlink" title="1.传统形式"></a>1.传统形式</h2><blockquote><p>过多的继承了没用的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS">Grand.prototype.lastName = <span class="hljs-string">&quot;Ji&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Grand</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;hehe&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<span class="hljs-comment">//一系列从头到尾继承，导致不想继续的也继承了</span><br></code></pre></td></tr></table></figure><h2 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2.借用构造函数"></a>2.借用构造函数</h2><p>不能继承借用构造函数的原型<br>每次构造函数都要多走一个函数实际浪费效率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age,sex</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<span class="hljs-comment">//实际上call apply不是继承</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, sex, grade</span>) </span>&#123;<br>    Person.call(<span class="hljs-built_in">this</span>,name,age,sex);<br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student();<br></code></pre></td></tr></table></figure><h2 id="3-共享原型"><a href="#3-共享原型" class="headerlink" title="3.共享原型"></a>3.共享原型</h2><p>不能随便改动自己的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// Son想继承father的prototype</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现方法</p><ol><li><p>原型链</p><p>function Son()上面放上 var father…</p></li><li><p>共有原形</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br>Son.prototype = Father.prototype<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br></code></pre></td></tr></table></figure><p>抽象成函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    Target.prototype = Origin.prototype;<br>&#125;<br>inherit(Son, Father);<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<span class="hljs-comment">//son.LastName = &quot;Deng&quot;;</span><br></code></pre></td></tr></table></figure><p>要先继承后使用，Son.lastName 指向原来的空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    Target.prototype = Origin.prototype;<br><br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>inherit(Son, Father);<span class="hljs-comment">//先继承，后该原形不管用 son.lastName = undefined</span><br></code></pre></td></tr></table></figure><p>不足：</p><p>son 给自己多加一个属性，方便后续生产出的对象使用，不能个性实现，继承了，但是影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>)</span>&#123;<br>    Target.prototype = Origin.prototype;<br><br>&#125;<br>inherit(Son, Father);<br>Son.prototype.sex = <span class="hljs-string">&quot;male&quot;</span>;<span class="hljs-comment">//与father的prototype一致，一个变，都变</span><br>Father.prototype<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br><span class="hljs-comment">// 要实现：想继承但不相互影响</span><br></code></pre></td></tr></table></figure><h2 id="4-圣杯模式"><a href="#4-圣杯模式" class="headerlink" title="4.圣杯模式"></a>4.圣杯模式</h2><h3 id="通过原型链"><a href="#通过原型链" class="headerlink" title="通过原型链"></a>通过原型链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>    F.prototype = Origin.prototype;<br>    Target.prototype = <span class="hljs-keyword">new</span> F();<br>&#125;<br>Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br>inherit(Son,Father);<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br><span class="hljs-built_in">console</span>.log(Son.prototype.sex = <span class="hljs-string">&quot;male&quot;</span>);<br><span class="hljs-built_in">console</span>.log(son.sex);<br><span class="hljs-built_in">console</span>.log(father.sex);<br><span class="hljs-built_in">console</span>.log(Father.prototype);<br></code></pre></td></tr></table></figure><p>但是，constructor 应该指向构造函数，然而，son.constructor = ƒ Father()？？？？怎么回事？</p><blockquote><p>原形上系统自带的一个属性叫 constructor，<strong>默认指向他的构造函数</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">son.__proto__ ---&gt;<span class="hljs-keyword">new</span> F().__proto__---&gt;Father.prototype<br><span class="hljs-comment">//指向紊乱了</span><br></code></pre></td></tr></table></figure><p>实现继承：必会圣杯模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>    F.prototype = Origin.prototype;<br>    Target.prototype = <span class="hljs-keyword">new</span> F();<br>    Target.prototype.constructor = Target;<br>    Target.prototype.uber = Origin.prototype;<span class="hljs-comment">//超级父级：超类</span><br>&#125;<br>Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>inherit(Son, Father);<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br></code></pre></td></tr></table></figure><p>颠倒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">F.prototype = Origin.prototype;<br>Target.prototype = <span class="hljs-keyword">new</span> F();<span class="hljs-comment">//不能颠倒，一定要在new之前改原形</span><br></code></pre></td></tr></table></figure><h3 id="类雅虎"><a href="#类雅虎" class="headerlink" title="类雅虎"></a>类雅虎</h3><p>闭包的作用：可以实现封装，属性私有化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Deng</span>(<span class="hljs-params">name, wife</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> prepareWife = <span class="hljs-string">&quot;xiaozhang&quot;</span>;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.wife = wife;<br>    <span class="hljs-built_in">this</span>.divorce = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.wife = prepareWife;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.changePrepareWife = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>)</span>&#123;<br>        prepareWife = target;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.sayPreparewife = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(prepareWife);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> deng = <span class="hljs-keyword">new</span> Deng(<span class="hljs-string">&#x27;deng&#x27;</span>,<span class="hljs-string">&#x27;xiaoliu&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(deng.sayPreparewife());<br><span class="hljs-built_in">console</span>.log(deng.Preparewife)<span class="hljs-comment">//直接看看不到  即私有化变量</span><br></code></pre></td></tr></table></figure><p>F 变成了私有化变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> inherit = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<span class="hljs-comment">//F放在闭包，私有化变量</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Target,Origin</span>)</span>&#123;<br>        F.prototype = Origin.prototype;<br>        Target.prototype = <span class="hljs-keyword">new</span> F();<br>        Target.prototype.constuctor = Target;<br>        Target.prototype.uber = Origin.prototype;<br>    &#125;<br>&#125;());<br></code></pre></td></tr></table></figure><p><strong>离散数学</strong>（重要）——&gt;CS 专业（计算机专业），，，，概率论,人工智能</p><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><blockquote><p>就是对象</p></blockquote><p>管理变量，防止污染全局，适用于模块化开发</p><p>一个页面，多人协作，合并冲突</p><h2 id="1-老办法：命名空间"><a href="#1-老办法：命名空间" class="headerlink" title="1.老办法：命名空间"></a>1.老办法：命名空间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> org = &#123;<br>    <span class="hljs-attr">department1</span> : &#123;<br>        <span class="hljs-attr">jicheng</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;abc&quot;</span>;<br>            age : <span class="hljs-number">123</span>;<br>        &#125;,<br>        <span class="hljs-attr">xuming</span> : &#123;<br><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">department2</span> : &#123;<br>        <span class="hljs-attr">zhangsan</span> : &#123;<br><br>        &#125;,<br>        <span class="hljs-attr">lisi</span> : &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> jicheng = org.department1.jicheng;<br>jicheng.name;<br></code></pre></td></tr></table></figure><h2 id="2-新方法：闭包私有化变量"><a href="#2-新方法：闭包私有化变量" class="headerlink" title="2.新方法：闭包私有化变量"></a>2.新方法：闭包私有化变量</h2><p>webpack</p><blockquote><p>闭包（实现变量私有化）+立即执行函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;bac&quot;</span>;<br><span class="hljs-keyword">var</span> init = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callName();<br>    &#125;<br>&#125;())<br>init();<br></code></pre></td></tr></table></figure><p>协作也不冲突</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;bac&quot;</span>;<br><span class="hljs-keyword">var</span> init = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callName();<br>    &#125;<br>&#125;())<br><span class="hljs-keyword">var</span> initDeng = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-number">123</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callName();<br>    &#125;<br>&#125;())<br></code></pre></td></tr></table></figure><blockquote><p>如何实现链式调用模式（模仿 jquery）<br>obj.eat().smoke().drink().eat().sleep();</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">$(<span class="hljs-string">&#x27;div&#x27;</span>).css(<span class="hljs-string">&#x27;background-color&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>).width(<span class="hljs-number">100</span>).height(<span class="hljs-number">100</span>).<br>html(<span class="hljs-number">123</span>).css(<span class="hljs-string">&#x27;position&#x27;</span>,<span class="hljs-string">&#x27;absolute&#x27;</span>).<br>css(<span class="hljs-string">&#x27;left&#x27;</span>,<span class="hljs-string">&#x27;100px&#x27;</span>).css(<span class="hljs-string">&#x27;top&#x27;</span>,<span class="hljs-string">&#x27;100px&#x27;</span>);<br></code></pre></td></tr></table></figure><p>模拟 jQuery 实现连续调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Smoking...xuan cool!!!&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Drinking...good&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">perm</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;perming...cool&#x27;</span>);<br>    &#125;<br>&#125;<br>deng.smoke();<br>deng.drink();<br>deng.perm();<span class="hljs-comment">//怎么实现JQ一样连续调用</span><br></code></pre></td></tr></table></figure><p>为什么不能连续调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Smoking...xuan cool!!!&#x27;</span>);<br><span class="hljs-comment">// return undefined;</span><br></code></pre></td></tr></table></figure><p>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Smoking...xuan cool!!!&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Drinking...good&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">perm</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;perming...cool&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br>deng.smoke().drink().perm().smoke().drink();<br></code></pre></td></tr></table></figure><h1 id="查看属性"><a href="#查看属性" class="headerlink" title="查看属性"></a>查看属性</h1><p>想实现 num 为几，就叫哪个媳妇</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">wife1</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaoliu&quot;</span>&#125;,<br>    <span class="hljs-attr">wife2</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaozhang&quot;</span>&#125;,<br>    <span class="hljs-attr">wife3</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaowang&quot;</span>&#125;,<br>    <span class="hljs-attr">wife4</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaoli&quot;</span>&#125;,<br>    <span class="hljs-attr">sayWife</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>&#123;<br>        <span class="hljs-keyword">switch</span>(num) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.wife1;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>把上述代码简化：变量拼接属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;abc&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>**obj.name—-&gt;obj[‘name’];**内部会转换成方括号，so 这样写也对<br>方括号可以字符串拼接<br>功能实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> deng = &#123;<br>  <span class="hljs-attr">wife1</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoliu&quot;</span> &#125;,<br>  <span class="hljs-attr">wife2</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaozhang&quot;</span> &#125;,<br>  <span class="hljs-attr">wife3</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaowang&quot;</span> &#125;,<br>  <span class="hljs-attr">wife4</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoli&quot;</span> &#125;,<br>  <span class="hljs-attr">sayWife</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">switch</span> (num) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[<span class="hljs-string">&quot;wife&quot;</span> + num]; <span class="hljs-comment">//字符串加啥都是字符串</span><br>    &#125;<br>  &#125;,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(deng.sayWife(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h1 id="对象的枚举"><a href="#对象的枚举" class="headerlink" title="对象的枚举"></a>对象的枚举</h1><blockquote><p>for in 循环</p></blockquote><p>数据组的遍历：想知道十个人的信息，挨个知道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br><span class="hljs-comment">//遍历 枚举 enumeration</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<span class="hljs-comment">//遍历</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果想查找（遍历）对象的呢（不知道啥类型，编辑器角度）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;123&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">75</span><br>    <span class="hljs-comment">//prop:123</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-built_in">console</span>.log(obj.prop);<span class="hljs-comment">//不好使---obj.prop---&gt;obj[&#x27;prop&#x27;]当成属性了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span><span class="hljs-comment">//也会把原形东西拿出来，不想把原形拿出来————hasOwnProperty</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-built_in">console</span>.log(obj[prop]);<br>    <span class="hljs-comment">//console.log(obj[&#x27;prop&#x27;]);//跟obj.prop一样，这样也不对</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现 obj1 里面属性+1 返回<br>错误示范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">a</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">b</span> : <span class="hljs-number">234</span>,<br>    <span class="hljs-attr">c</span> : <span class="hljs-number">456</span><br>&#125;<br><span class="hljs-keyword">var</span> key;<br><span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> obj1) &#123;<span class="hljs-comment">//这样写也行</span><br>    obj1.key ++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-hasOwnProperty（重点）"><a href="#1-hasOwnProperty（重点）" class="headerlink" title="1.hasOwnProperty（重点）"></a>1.hasOwnProperty（重点）</h2><p>过滤性方法</p><p>判断这个属性是否是<strong>自己</strong>的(不是原形链的)<br>true<br>false</p><p>不想把原形拿出来 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span>(obj.hasOwnProperty(prop))&#123;<br>        <span class="hljs-built_in">console</span>.log(obj[prop]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自己设的一定能打印，系统设的一定不能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span>,<br>        <span class="hljs-attr">__proto__</span> : <span class="hljs-built_in">Object</span>.prototype<span class="hljs-comment">//一旦延展的原型链的最顶端，不会打印最顶端</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-in"><a href="#2-in" class="headerlink" title="2.in"></a>2.in</h2><p>和 hasOwnProperty 类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//console.log(height in obj)//height叫变量</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;height&#x27;</span> <span class="hljs-keyword">in</span> obj)<span class="hljs-comment">//height这个属性名存不存在于obj</span><br>concole.log(<span class="hljs-string">&#x27;lastName&#x27;</span> <span class="hljs-keyword">in</span> obj)<br></code></pre></td></tr></table></figure><p>和 hasOwnProperty 的区别：<br>In 判断能不能访问到这个属性或者原形（只能判断对象上能不能访问到这个属性，也可以在父级找）<br>hasOwnProperty 判断属性属不属于这个对象<br>开发从来不用</p><h2 id="3-instanceof（重点）"><a href="#3-instanceof（重点）" class="headerlink" title="3.instanceof（重点）"></a>3.instanceof（重点）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-comment">// A对象是不是B构造函数构造出来的</span><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Person);<br><span class="hljs-comment">// ----&gt;ture</span><br></code></pre></td></tr></table></figure><p>看 A 对象的的原型链上有么有 B 的原形（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);<br>----&gt;ture<br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>);<br>----&gt;ture<br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);<br>----&gt;ture<br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>);<br>----&gt;<span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> Person);<br>----&gt;<span class="hljs-literal">false</span> <span class="hljs-comment">//两个没关系</span><br></code></pre></td></tr></table></figure><p>解决的问题</p><blockquote><p>判断变量是数组还是对象（机器识别）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">typeof</span>([])<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span>(&#123;&#125;)<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-comment">//需求：</span><br><span class="hljs-keyword">var</span> arr = [] || &#123;&#125;;<br></code></pre></td></tr></table></figure><p>第一种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<span class="hljs-comment">//var obj = [];</span><br>obj.constructor<span class="hljs-comment">//直接区分出来了</span><br></code></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>第三种方法：toString</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Object</span>.prototype.toString.call([]);<br><span class="hljs-comment">//Object.prototype.toString = function ()&#123;</span><br><span class="hljs-comment">//谁调用，this就是谁</span><br><span class="hljs-comment">//识别this:</span><br><span class="hljs-comment">//返回相应结果</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// obj.toString();</span><br><span class="hljs-comment">// call.toString();</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call([]);<span class="hljs-comment">//数组会替换this</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">123</span>);<br><span class="hljs-built_in">Object</span>.prototype.toString.call(&#123;&#125;);<span class="hljs-comment">//区别数组和对象</span><br></code></pre></td></tr></table></figure><p>控制台验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Object</span>.prototype.toString.call([]);<br><span class="hljs-string">&quot;[object Array]&quot;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(&#123;&#125;)<br><span class="hljs-string">&quot;[object Object]&quot;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">123</span>);<br><span class="hljs-string">&quot;[object Number]&quot;</span><br></code></pre></td></tr></table></figure><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="1-函数预编译过程-this-—-gt-window"><a href="#1-函数预编译过程-this-—-gt-window" class="headerlink" title="1.函数预编译过程 this —&gt; window"></a>1.函数预编译过程 this —&gt; window</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">c</span>) </span>&#123;<br>    <span class="hljs-comment">//var this = Object.create(test.prototype);</span><br>    <span class="hljs-comment">//相当于</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">// __proto__ : test.prototype</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//AO&#123;</span><br><span class="hljs-comment">//  arguments : [1],//自带的</span><br><span class="hljs-comment">//  this : window,//自带的</span><br><span class="hljs-comment">//  c : 1,</span><br><span class="hljs-comment">//  a : undefined,</span><br><span class="hljs-comment">//  b : function() &#123;&#125;</span><br><span class="hljs-comment">//&#125;</span><br>test(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">new</span> test();<span class="hljs-comment">//new导致this指向发生了改变，不在是window了</span><br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><h2 id="2-全局作用域里-this-—-gt-window"><a href="#2-全局作用域里-this-—-gt-window" class="headerlink" title="2.全局作用域里 this —&gt; window"></a>2.全局作用域里 this —&gt; window</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>);<br></code></pre></td></tr></table></figure><h2 id="3-call-apply-可以改变函数运行时-this-指向"><a href="#3-call-apply-可以改变函数运行时-this-指向" class="headerlink" title="3.call/apply 可以改变函数运行时 this 指向"></a>3.call/apply 可以改变函数运行时 this 指向</h2><h2 id="4-obj-f-f-里面的-this-指向-obj"><a href="#4-obj-f-f-里面的-this-指向-obj" class="headerlink" title="4.obj.f(); f()里面的 this 指向 obj)"></a>4.obj.f(); f()里面的 this 指向 obj)</h2><p>谁调用的方法，this 就指向谁，如果没人调用这个方法，空执行，this 是 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<span class="hljs-comment">//谁调用，就用谁的name</span><br>    &#125;,<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span><br>&#125;<br>obj.a();<span class="hljs-comment">//obj调用</span><br></code></pre></td></tr></table></figure><h2 id="5-this-题"><a href="#5-this-题" class="headerlink" title="5.this 题"></a>5.this 题</h2><p>条件判断为假的情况有： 0 、false 、’’ 、 null 、undefined 、未定义对象。<br>函数声明写在运算符中，其为 true，但 放在运算符中的函数声明在执行阶段时找不到的 。<br>另外，对未声明的变量执行 typeof 不会报错，会返回 undefined</p><p>this 一马平川题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;222&quot;</span>;<br><span class="hljs-keyword">var</span> a = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;111&quot;</span>,<br>    <span class="hljs-attr">say</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fun = a.say;<span class="hljs-comment">//a.say代表function的函数引用，fun在全局上执行，相当于函数在全局执行</span><br>fun()<span class="hljs-comment">//222全局执行也没人调用</span><br>a.say()<span class="hljs-comment">//111</span><br><span class="hljs-keyword">var</span> b = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;333&quot;</span>,<br>    <span class="hljs-attr">say</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fun</span>)</span>&#123;<br>        <span class="hljs-comment">//this----&gt;b</span><br>        fun();<span class="hljs-comment">//不是this.fun(),谁也没调用,预编译，上面得this---&gt;window,222</span><br>    &#125;<br>&#125;<br>b.say(a.say);<span class="hljs-comment">//a.say---是上面的函数体，       222</span><br>b.say = a.say;<span class="hljs-comment">//a.say上面的函数拷贝到b.say(代替b.say)</span><br>b.say();<span class="hljs-comment">//333</span><br></code></pre></td></tr></table></figure><h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><blockquote><p>arguments.callee</p></blockquote><blockquote><p>func.caller</p></blockquote><p>arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br> &#125;<br>test();<span class="hljs-comment">//返回自己的函数体</span><br></code></pre></td></tr></table></figure><p>应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n*阶乘(n-<span class="hljs-number">1</span>);<br>&#125;(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>立即执行函数的阶乘：只能用 callee 做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n*<span class="hljs-built_in">arguments</span>.callee(n-<span class="hljs-number">1</span>);<br>&#125;(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>在那个函数里面，就打印哪个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>    &#125;<br>    demo();<br>&#125;<br></code></pre></td></tr></table></figure><p>caller: demo 在哪个环境调用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>demo();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(demo.caller);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><h1 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h1><h2 id="1-浅层克隆"><a href="#1-浅层克隆" class="headerlink" title="1.浅层克隆"></a>1.浅层克隆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin,target</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin)&#123;<br>        target[prop] = origin[prop];<br>    &#125;<br>&#125;<br>clone(obj,obj1);<br><span class="hljs-comment">//打印obj1显示已经copy过去了</span><br></code></pre></td></tr></table></figure><p>实现容错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin,target</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin)&#123;<br>        target[prop] = origin[prop];<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br>clone(obj,obj1);<br></code></pre></td></tr></table></figure><p>原始值没问题，但是引用值拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">123</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;female&quot;</span>,<br>  <span class="hljs-attr">card</span>: [<span class="hljs-string">&quot;visa&quot;</span>, <span class="hljs-string">&quot;unionpay&quot;</span>],<br>&#125;;<br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin, target</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>    target[prop] = origin[prop];<br>  &#125;<br>  <span class="hljs-keyword">return</span> target;<br>&#125;<br>clone(obj, obj1);<br></code></pre></td></tr></table></figure><h2 id="2-深层克隆"><a href="#2-深层克隆" class="headerlink" title="2.深层克隆"></a>2.深层克隆</h2><p>两个人，克隆，只考虑引用值的数组、对象 核心：区分数组和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>,<span class="hljs-string">&#x27;unionpay&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">card</span> : [obj.card[<span class="hljs-number">0</span>],obj.card[<span class="hljs-number">1</span>],[]]<br>&#125;<br>clone(obj, obj1);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>, <span class="hljs-string">&#x27;master&#x27;</span>],<br>    <span class="hljs-attr">wife</span> : &#123;<br>        <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>        <span class="hljs-attr">son</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;aaa&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span> : obj.name,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">card</span> : []<span class="hljs-comment">//重新开始循环，发现里面都是原始值，card : [obj.card[0],obj.card[1]],</span><br>    <span class="hljs-attr">wife</span> : &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>    <span class="hljs-attr">son</span> : &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>    <span class="hljs-attr">son</span> :<br>&#125;<br>&#125;<span class="hljs-comment">//里面是不是原始值，第一个是，第二个不是， 建立新的对象,进行循环</span><br>&#125;<br></code></pre></td></tr></table></figure><p>遍历对象 for(var prop in obj)<br>遍历除了可以遍历对象，还可以遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> arr) &#123;<br>    arr[prop]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p></blockquote><p>1.判断是不是原始值 typeof()如果是 object 引用值，不是 obj,基本是原始值 null 最后讲 2.数组还是对象 三种方法: instanceof toString constructor,建议使用 toString,因为<br>另外两个有小问题，不会遇到<br>父子域：一个页面里面可能还有个子页面 跨父子域 [] instanceof Array ——&gt;false 应该 ture 3.建立相应的数组和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 递归</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin,target</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<span class="hljs-comment">//容错</span><br>    toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>        arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<span class="hljs-comment">//比对</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>, <span class="hljs-string">&#x27;master&#x27;</span>],<br>    <span class="hljs-attr">wife</span> : &#123;<br>        <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>        <span class="hljs-attr">son</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;aaa&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin,target</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<span class="hljs-comment">//容错</span><br>    toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>        arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>        <span class="hljs-keyword">if</span>(origin.hasOwnProperty(prop)) &#123;<span class="hljs-comment">//防止原型链上的</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(origin[prop]) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span>(toStr.call(origin[prop]) == arrStr) &#123;<br>                    target[prop] = [];<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    target[prop] = &#123;&#125;;<br>                &#125;<br>                deepClone(origin[prop],target[prop]);<span class="hljs-comment">//递归</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                target[prop] = origin[prop];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin, target</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> target = target || &#123;&#125;,<br>            toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>            arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>            <span class="hljs-keyword">if</span>(origin.hasOwnProperty(prop)) &#123;<span class="hljs-comment">//null问题</span><br>                <span class="hljs-keyword">if</span>(origin[prop] !== <span class="hljs-string">&quot;null&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span>(origin[prop]) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                    <span class="hljs-comment">//绝对不等于，隐式类型转换也不行</span><br>                    <span class="hljs-keyword">if</span>(toStr.call(origin[prop]) == arrStr) &#123;<br>                        target[prop] == [];<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        target[prop] = &#123;&#125;;<br>                    &#125;<br>                    deepClone(origin[prop],target[prop]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    target[prop] = origin[prop];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br></code></pre></td></tr></table></figure><p>三目运算符简化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin, target</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> target = target || &#123;&#125;,<br>            toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>            arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>            <span class="hljs-keyword">if</span>(origin.hasOwnProperty(prop)) &#123;<span class="hljs-comment">//null问题</span><br>                <span class="hljs-keyword">if</span>(origin[prop] !== <span class="hljs-string">&quot;null&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span>(origin[prop]) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                    <span class="hljs-comment">//绝对不等于，隐式类型转换也不行</span><br><br>                    target[prop] = (toStr.call(origin[prop]) == arrStr) ? [] : &#123;&#125;;<br>                    deepClone(origin[prop],target[prop]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    target[prop] = origin[prop];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组的定义</p><p>区分对象的定义方式<br>（1） 自面量<br>（2） 构造函数——系统自带<br>（3） 自定义构造函数<br>（4） Var Obect.create()</p><p>数组 1.数组字面量 var arr = [];</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,,,<span class="hljs-number">5</span>];<span class="hljs-comment">//稀松数组</span><br></code></pre></td></tr></table></figure><p>2.new Array(length/content);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">构造方法   <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//返回长度为10的稀松数组</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">10</span>];<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10.2</span>);<span class="hljs-comment">//长度为10.2 报错</span><br></code></pre></td></tr></table></figure><p>数组的读和写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr[num] <span class="hljs-comment">//不可以溢出读   结果undefined</span><br>arr[num] = xxx;<span class="hljs-comment">//可以溢出写，撑长数组</span><br></code></pre></td></tr></table></figure><p>JS 中，数组就算没有第 10 位也不报错，因为数组是基于对象的<br>数组常用的方法</p><h2 id="1-改变原数组-7-个"><a href="#1-改变原数组-7-个" class="headerlink" title="1.改变原数组 7 个"></a>1.改变原数组 7 个</h2><p>reverse,sort,push,pop,shift,unshift,</p><blockquote><p>push 把数组的最后一位增加</p></blockquote><p>封装 push()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//不能写形参，因为不知道有几个，所以只能用arguments</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>        <span class="hljs-built_in">this</span>[<span class="hljs-built_in">this</span>.length] = <span class="hljs-built_in">arguments</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>pop 删除：把数组的最后一位剪切出去</p></blockquote><p>arr.pop(); 不能传参</p><blockquote><p>shift：把前面减 arr.shift()</p></blockquote><blockquote><p>unshift:和 push 方向相反，在前面加东西</p></blockquote><p>封装 unshift</p><p>数组不能向前面放东西，所以用新数组，在拼接起来(concat)</p><blockquote><p>reverse:逆反</p></blockquote><blockquote><p>sort</p></blockquote><p>arr.sort();//升序排序</p><p>arr.sort().reverse()//降序</p><p><strong>但是这个排序是按 ASCII 排的</strong>，so<br>var arr = [1,2,10,2,4,5];不能实现想要的排序<br>实现排序：(冒泡排序) 1.必须两个形参 2.看返回值</p><p>(1)返回值为负数，前面的数放在前面<br>(2)为正数，后面的数在前<br>(3)为 0，不动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>简化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(a - b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最终</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a - b;<span class="hljs-comment">//升序</span><br>    <span class="hljs-comment">//return b - a;//降序</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>给一个有序数组乱序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Math</span>.random()    返回(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)随机数<br><span class="hljs-comment">// var arr = [1,2,3,4,5,6,7];</span><br><span class="hljs-comment">// arr.sort(function () &#123;</span><br><span class="hljs-comment">// return Math.random() - 0.5;//实现可正可负</span><br><span class="hljs-comment">// &#125;);</span><br></code></pre></td></tr></table></figure><p>对象年龄排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> cheng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;cheng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;male&#x27;</span>,<br>    <span class="hljs-attr">face</span> : <span class="hljs-string">&quot;handsome&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;deng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">face</span> : <span class="hljs-string">&quot;amazing&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> zhang = &#123;<br>    name = <span class="hljs-string">&quot;zhang&quot;</span>,<br>    age = <span class="hljs-number">20</span>,<br>    sex = <span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> arr = [cheng, deng, zhang];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-comment">// if(a.age &gt; b.age) &#123;</span><br>    <span class="hljs-comment">// return 1;</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">// return -1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> a.age - b.age;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串长度排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;ac&#x27;</span>,<span class="hljs-string">&#x27;bcd&#x27;</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>,<span class="hljs-string">&#x27;asfsadshilk&#x27;</span>,<span class="hljs-string">&#x27;casuicbniasbnciuas&#x27;</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a.length - b.length;<br>&#125;)<br></code></pre></td></tr></table></figure><p>字节长度排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retBytes</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = str.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(str.charCodeAt(i) &gt; <span class="hljs-number">255</span>)&#123;<br>            num ++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a邓&#x27;</span>,<span class="hljs-string">&#x27;ba邓&#x27;</span>,<span class="hljs-string">&#x27;cc邓cc&#x27;</span>,<span class="hljs-string">&#x27;老邓&#x27;</span>,<span class="hljs-string">&quot;残邓&quot;</span>,<span class="hljs-string">&#x27;asdoifqwoeiur&#x27;</span>,<span class="hljs-string">&#x27;asdf&#x27;</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> retBytes(a)-retBytes(b);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>splice:切片</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// arr.splice(从第几位开始，剪切多少长度，在切口处添加新的数据)</span><br>arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>demo<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];<br>arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>];<span class="hljs-comment">//实现把4填进去</span><br>arr.splice(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//鼠标光标在前面</span><br><br><br>arr.splice(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//倒数第一位</span><br></code></pre></td></tr></table></figure><p>-1 倒数第一位；1 倒数 第二位怎么实现的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">splice = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pos</span>) </span>&#123;<br>  pos += pos &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">this</span>.length; <span class="hljs-comment">//负数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-不改变原数组"><a href="#2-不改变原数组" class="headerlink" title="2.不改变原数组"></a>2.不改变原数组</h2><p>concat,join—&gt;split,toString</p><blockquote><ol><li>concat 连接</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>arr.concat(arr1);<br></code></pre></td></tr></table></figure><blockquote><p>toString</p></blockquote><p>把数组变成字符串</p><blockquote><p>Slice 截取</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-comment">// 1.两个参数，slice（从该位开始截取，截取到该位）</span><br><span class="hljs-comment">// var newArr = arr.slice(1,3);</span><br><span class="hljs-comment">// 2.一个参数slice（从第几位开始截取，截取到最后）</span><br><span class="hljs-keyword">var</span> newArr = arr.slice(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> newArr = arr.slice(-<span class="hljs-number">4</span>)<span class="hljs-comment">//-4+6位</span><br><span class="hljs-comment">// 3.没参数：全截取</span><br></code></pre></td></tr></table></figure><blockquote><p>join</p></blockquote><p>实现字符串连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr.join(<span class="hljs-string">&quot;-&quot;</span>)<span class="hljs-comment">//必须是字符串形式</span><br>arr = [<span class="hljs-number">1</span>-<span class="hljs-number">2</span>-<span class="hljs-number">3</span>-<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><blockquote><p>split()互逆方法：按照什么拆分</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>-<span class="hljs-number">2</span>-<span class="hljs-number">3</span>-<span class="hljs-number">4</span>];<br>arr.split(<span class="hljs-string">&quot;3&quot;</span>)<span class="hljs-comment">//必须是字符串形式</span><br></code></pre></td></tr></table></figure><h1 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h1><p>是对象，可以当数组一样用</p><blockquote><p>类数组 1.可以利用属性名模拟数组的特性 2.可以动态的增长 length 属性 3.如果强行让类数组调用 push 方法，则会根据 length 属性值的位置进行属性的扩充。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-built_in">arguments</span>.push(<span class="hljs-number">7</span>);<span class="hljs-comment">//报错</span><br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><p>现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//完成类数组的基本形态构建</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span> : <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&quot;length&quot;</span> : <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;push&quot;</span> : <span class="hljs-built_in">Array</span>.prototype.push<br>&#125;<br>obj.push(<span class="hljs-string">&#x27;d&#x27;</span>);<br><span class="hljs-comment">//导致length=4并且&quot;3&quot;:d</span><br></code></pre></td></tr></table></figure><p>类数组：是对象，可以当数组一样用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">push</span>: <span class="hljs-built_in">Array</span>.prototype.push,<br>  <span class="hljs-attr">splice</span>: <span class="hljs-built_in">Array</span>.prototype.splice, <span class="hljs-comment">//加上他就变成可以当数组用了,像数组了</span><br>&#125;;<br><span class="hljs-comment">//类数组组成部分:属性要为索引（数字）属性，必须有length属性，最好加上push</span><br></code></pre></td></tr></table></figure><p>length 内部操作手法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>[<span class="hljs-built_in">this</span>.length] = target;<br>    <span class="hljs-built_in">this</span>.length ++;<br>&#125;<br><span class="hljs-comment">//如果对象调用，则</span><br><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    obj[obj.length] = target;<br>    obj.length ++;<br>&#125;<br></code></pre></td></tr></table></figure><p>类数组所有元素遍历出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&quot;b&quot;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span> : <span class="hljs-string">&quot;c&quot;</span>,<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">length</span> : <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">push</span> : <span class="hljs-built_in">Array</span>.prototype.push,<br>    <span class="hljs-attr">splice</span> : <span class="hljs-built_in">Array</span>.prototype.splice<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-built_in">console</span>.log(obj[prop])<br>&#125;<br></code></pre></td></tr></table></figure><p>封装 type</p><p>typeof([])– array<br>typeof({})– object<br>typeof(function)– function<br>typeof(new Number())– new Object<br>typeof(123)– number<br>分两类：1、原始值 引用值 2、区分引用值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">type</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> template = &#123;<br>        <span class="hljs-string">&quot;[object Array]&quot;</span> : <span class="hljs-string">&quot;array&quot;</span>,<br>        <span class="hljs-string">&quot;[object Object]&quot;</span> : <span class="hljs-string">&quot;object&quot;</span>,<br>        <span class="hljs-string">&quot;[object Number]&quot;</span> : <span class="hljs-string">&quot;number - object&quot;</span>,<br>        <span class="hljs-string">&quot;[object Boolean]&quot;</span> : <span class="hljs-string">&#x27;boolean - object&#x27;</span>,<br>        <span class="hljs-string">&quot;[object String]&quot;</span> : <span class="hljs-string">&#x27;string - object&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(target === <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// if(typeof(target) == &#x27;function&#x27;) &#123;</span><br>    <span class="hljs-comment">// return &#x27;function&#x27;;</span><br>    <span class="hljs-comment">// &#125;else if(typeof(target) == &quot;object&quot;) = &#123;</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(target) == <span class="hljs-string">&quot;object&quot;</span>)&#123;<br>        <span class="hljs-comment">// 数组；</span><br>        <span class="hljs-comment">// 对象；</span><br>        <span class="hljs-comment">// 包装类Object.prototype.toString</span><br>        <span class="hljs-keyword">var</span> str = <span class="hljs-built_in">Object</span>.prototype.toString.call(target);<br>        <span class="hljs-keyword">return</span> template[str];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//原始值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span>(target);<br>    &#125;<br></code></pre></td></tr></table></figure><p>数组去重，在原型链上编程 ​ hash 哈西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br><span class="hljs-built_in">Array</span>.prototype.unique = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> temp = &#123;&#125;,<br>    arr = [],<br>    len = <span class="hljs-built_in">this</span>.length; <span class="hljs-comment">//也是优化，不用每次都this了</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!temp[<span class="hljs-built_in">this</span>[i]]) &#123;<br>      <span class="hljs-comment">//如果有0，!0==true，所以还是&quot;abc&quot;吧</span><br>      temp[<span class="hljs-built_in">this</span>[i]] = <span class="hljs-string">&quot;abc&quot;</span>;<br>      arr.push(<span class="hljs-built_in">this</span>[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p>形式：判断语句? 若为真，执行，并返回结果：若为假，执行，并返回结果<br>三目运算符其实就是简化版的 if(){…}else{}语句<br>条件判断？是 ：否 并且会返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">2</span> + <span class="hljs-number">2</span> : <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> ? (<span class="hljs-string">&quot;10&quot;</span> &gt; <span class="hljs-string">&quot;9&quot;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>) : <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h1><p>try{}catch(e) {}一行代码报错影响后面代码执行</p><p>finally{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//try...catch</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(b);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-comment">//执行到b就不执行了，在try里面发生的错误，不会执行错误后的try里面的代码，打印ad</span><br></code></pre></td></tr></table></figure><p>关于 catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<span class="hljs-comment">//error  error.message  error.name ---&gt; error</span><br>    <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot; : &quot;</span> + e.message);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>小问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//虽然错误，但是不执行</span><br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>    <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot; : &quot;</span> + e.message);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>Error.name 的六种值对应的信息：<br>1.EvalError：eval()的使用与定义不一致<br>2.RangeError：数值越界<br>3.ReferenceError：非法或不能识别的引用数值<br>4.SyntaxError：发生语法解析错误<br>5.TypeError：操作数类型错误<br>6.URIError：URI 处理函数使用不当</p><h1 id="es5-严格模式"><a href="#es5-严格模式" class="headerlink" title="es5 严格模式"></a>es5 严格模式</h1><p>如今：基于 es3.0+<strong>es5.0 的新增方法</strong> 使用的，如果产生冲突，则遵循 es3.0 的<br>要讲的是怎么让他遵循 es5.0 解决，即 es5.0 的严格模式，则产生冲突的部分用 es5.0，否则 es3.0<br>“use strict”<br>不再兼容 es3 的一些不规则语法。使用全新的 es5 规范。<br>demo1：es5 不允许使用 arguments.callee</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// es5.0严格模式的启动</span><br><span class="hljs-meta">&quot;use strict&quot;</span><span class="hljs-comment">//放在逻辑的最顶端</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>demo2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>&#125;<br>demo(); <span class="hljs-comment">//es3.0</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-meta">  &quot;use strict&quot;</span>; <span class="hljs-comment">//内部es5.0</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>两种用法：<br>全局严格模式<br>局部函数内严格模式（推荐）<br>就是一行字符串，不会对不兼容严格模式的浏览器产生影响<br>为什么用字符串”use strict”：可能在老浏览器执行，浏览器版本问题——向后兼容<br>es5 不允许用 with(){} with 可以改变作用域链，with(obj) obj 作为最顶端的 AO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;obj&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;window&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;scope&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params">obj</span>)</span> &#123;<span class="hljs-comment">//如果with里面添加了对象，with(obj),会把对象当做with要执行的代码体的作用域链的最顶端</span><br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;obj&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">234</span><br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;window&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">123</span>;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;scope&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<span class="hljs-comment">//obj</span><br>        <span class="hljs-built_in">console</span>.log(age);<span class="hljs-comment">//234</span><br>    &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>with 作用：简化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> org = &#123;<br>    <span class="hljs-attr">dp1</span> : &#123;<br>        <span class="hljs-attr">jc</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>            <span class="hljs-attr">age</span> : <span class="hljs-number">123</span><br>        &#125;,<br>        <span class="hljs-attr">deng</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaodneg&quot;</span>,<br>            <span class="hljs-attr">age</span> : <span class="hljs-number">234</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">dp2</span> : &#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params">org.dp1.jc</span>)</span> &#123;<span class="hljs-comment">//直接访问org.dp1.jc里面的</span><br>    <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>应用：document 也是对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>&#123;<br>    <span class="hljs-attr">write</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params"><span class="hljs-built_in">document</span></span>)</span> &#123;<br>    write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>不支持 with,arguments.callee,func.caller,变量赋值前必须声明，局部 this 必须被赋值,(Person.call(null/undefined) 赋值什么就是什么),拒绝重复属性和参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//undefined</span><br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>new 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//控制台显示constructor的名</span><br>&#125;<br><span class="hljs-keyword">new</span> Test();<br></code></pre></td></tr></table></figure><p>预编译在 es5 严格模式下 this 不在指向 window，没有指向（空），this 必须被赋值，赋值什么就是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>Test.call(&#123;&#125;);<br></code></pre></td></tr></table></figure><p>赋值 123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>Test.call(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>123 是原始值:ES3 就会变成包装类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>Test.call(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>严格模式，在全局，this 指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><p>es5 拒绝重复<strong>属性和参数</strong>。。es3 里面重复属性和参数是不报错的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">name , name</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br><span class="hljs-comment">//test(1,2);</span><br><span class="hljs-comment">//test(2);</span><br></code></pre></td></tr></table></figure><p>参数报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">name , name</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>属性不报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;112&#x27;</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;111&#x27;</span><br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>关于 eval：</p><ol><li><p>es3 不能用 eval();——能改变作用域</p></li><li><p>eval 能执行字符串</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;console.log(a)&#x27;</span>);<span class="hljs-comment">//字符串在eval里面执行</span><br></code></pre></td></tr></table></figure><p>面试题：为什么不用 with();</p><p>with 可以改变作用域链，改变作用域链，都会降低效率</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2019/12/15/%E9%97%AD%E5%8C%85/"/>
    <url>/2019/12/15/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h1 id="一、作用域初探"><a href="#一、作用域初探" class="headerlink" title="一、作用域初探"></a>一、作用域初探</h1><p>作用域定义：变量（变量作用于又称上下文）和函数生效（能被访问）的区域<br>互相嵌套的函数，里面可以访问外面的，外面不能访问里面</p><p>外面不访问里面演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">123</span>;<br>&#125;<br>test(); <span class="hljs-comment">//</span><br><span class="hljs-built_in">document</span>.write(b);<br></code></pre></td></tr></table></figure><p>里面能访问外面演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">234</span>;<br>        <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//0</span><br>        <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//123</span><br>    &#125;<br>    demo();<br>    <span class="hljs-comment">// document.write(c);//报错</span><br>&#125;<br>test();<br></code></pre></td></tr></table></figure><h1 id="二、js-运行三部曲"><a href="#二、js-运行三部曲" class="headerlink" title="二、js 运行三部曲"></a>二、js 运行三部曲</h1><p>JS 逼格：单线程；解释性语言</p><p>语法分析，通篇扫描—–&gt;预编译——-&gt;解释执行</p><h2 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1.预编译"></a>1.预编译</h2><h3 id="引入-demo"><a href="#引入-demo" class="headerlink" title="引入 demo"></a>引入 demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//123</span><br><br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>函数声明整体提升</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>变量 声明提升</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a;<br><span class="hljs-built_in">document</span>.write(a);<br>a = <span class="hljs-number">123</span>;<br><span class="hljs-comment">//var a  = 123;相当于var a;a = 123</span><br></code></pre></td></tr></table></figure><blockquote><p>两句话不能解决的问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">234</span>;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>    a();<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><h3 id="预编译前奏："><a href="#预编译前奏：" class="headerlink" title="预编译前奏："></a>预编译前奏：</h3><p>1.imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为<strong>全局对象 window</strong>所有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b =<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//先b赋值1(未声明)，在声明a，在赋值a</span><br>&#125;<br>test();<br><span class="hljs-comment">//var a = 123;先声明a,后赋值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<br></code></pre></td></tr></table></figure><p>2.一切声明的全局变量，全是 window 的属性。<br>window 就是全局的域；window 就是全局：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//----&gt;window.a等价</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">window</span> &#123;<br>    <span class="hljs-attr">a</span> : <span class="hljs-number">123</span> <span class="hljs-comment">//相当</span><br>&#125;<br></code></pre></td></tr></table></figure><p>经典 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = <span class="hljs-number">123</span>;<br>&#125;<br>test();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<span class="hljs-comment">//undefined，局部，不是全局</span><br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>声明局部变量不行 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">123</span>;<br>&#125;<br>test();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<br><span class="hljs-built_in">console</span>.log(b);<br></code></pre></td></tr></table></figure><h3 id="预编译四部曲"><a href="#预编译四部曲" class="headerlink" title="预编译四部曲"></a>预编译四部曲</h3><p>预编译发生在函数执行的前一刻</p><p>1.创建 AO 对象(Activation object)执行期上下文 2.找形参和变量声明，将变量和形参名作为 AO 属性名，值为 undefined 3.将实参值和形参统一（GO 没有） 4.在函数体里面找<strong>函数声明</strong>，值赋予<strong>函数体</strong></p><p>例子 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">// function a()&#123;&#125;</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    <span class="hljs-comment">// var a看过了不看了 直接a=123;</span><br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">// 123</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-comment">// 早已看过不看了</span><br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">// 123</span><br>    <span class="hljs-keyword">var</span> b=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<span class="hljs-comment">//叫函数表达式</span><br>    <span class="hljs-comment">// var b不用看了，看过了，直接b=function()&#123;&#125;</span><br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-comment">// function()&#123;&#125;</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br>fn(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>例子 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a,b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> c;<br>    a = <span class="hljs-number">3</span>;<br>    b = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-built_in">console</span>.log(b);<br>&#125;<br>test(<span class="hljs-number">1</span>);<span class="hljs-comment">// 答案122</span><br></code></pre></td></tr></table></figure><p>例子 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>    <span class="hljs-built_in">console</span>.log(b);<br>    a = <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-keyword">var</span> a;<br>    b = <span class="hljs-number">234</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>预编译不止发生在函数体系里面，还发生在全局，全局叫生成了一个 GO 对象，名字不同，步骤一样。 window 就是 GO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">// b : 123;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<span class="hljs-comment">//能访问</span><br>&#125;<br>test();<br><span class="hljs-comment">//AO &#123;</span><br>    <span class="hljs-comment">// a:undefiend</span><br>    <span class="hljs-comment">// 对b不起作用</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// 但是GO里没有a,so window.a没有</span><br></code></pre></td></tr></table></figure><p>先生成 GO（全局），后 AO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">//     test:function()&#123;...&#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-built_in">console</span>.log(test);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">test</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(test);<br>    <span class="hljs-keyword">var</span> test = <span class="hljs-number">234</span>;<br>    <span class="hljs-built_in">console</span>.log(test);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    &#125;<br>&#125;<br>test(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> test = <span class="hljs-number">123</span>;<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">//     //test执行的前一刻</span><br><span class="hljs-comment">//     // GO,AO里面都有test，要AO的</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>难度 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">// global : undefined----&gt;100</span><br><span class="hljs-comment">// fn : function ()&#123;...&#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">global</span> = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>&#125;<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">// 没东西了，就打印把，global自己里面没有，再去GO里面找到了</span><br><span class="hljs-comment">// &#125;</span><br>fn();<br></code></pre></td></tr></table></figure><p>难度 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">global</span> = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>    <span class="hljs-built_in">global</span> = <span class="hljs-number">200</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">global</span> = <span class="hljs-number">300</span>;<br>&#125;<br>fn();<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">global</span>;<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">//  global:undefined</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//答案：undefined 200 有自己的先用自己的</span><br></code></pre></td></tr></table></figure><p>难度 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">//     //GO里面才有a</span><br><span class="hljs-comment">//     a : undefined</span><br><span class="hljs-comment">//     c : 234暗示全局变量</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-keyword">if</span>(a) &#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined,因为if不走</span><br>    c = <span class="hljs-number">234</span>;<span class="hljs-comment">//暗示全局变量</span><br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//234</span><br>&#125;<br><span class="hljs-keyword">var</span>  a;<br>test();<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">//  b : undefined</span><br><span class="hljs-comment">// &#125;</span><br>a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//234</span><br></code></pre></td></tr></table></figure><p>百度题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> foo;<br>    foo = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-number">11</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(bar());<br><span class="hljs-comment">//答案：function foo()&#123;&#125;return 下面有函数，返回函数</span><br></code></pre></td></tr></table></figure><p>百度题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(bar());<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;<br>    foo = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">return</span> foo;<br>    <span class="hljs-comment">//return 前面覆过值，就11</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>变量 声明提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>顶级难度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">// a : undefined,</span><br><span class="hljs-comment">// demo : function () &#123;&#125;</span><br><span class="hljs-comment">// 然后a:100;在demo执行的前一刻，产生AO</span><br><span class="hljs-comment">// f :123</span><br><span class="hljs-comment">// &#125;</span><br>a = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(e);<span class="hljs-comment">//2</span><br>    <span class="hljs-keyword">if</span>(a) &#123;<span class="hljs-comment">//如今if里面不能放函数声明了//a是undefined，里面语句不走了</span><br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//猪都能做出来</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> c;<br>    a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">var</span> a;<br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined</span><br>    f = <span class="hljs-number">123</span>;<span class="hljs-comment">//f AO里面没有，扔给GO 暗示全局变量</span><br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//func  unde</span><br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//10</span><br>&#125;<br><span class="hljs-keyword">var</span> a;<br>AO&#123;<br>    <span class="hljs-comment">//形参</span><br>    <span class="hljs-attr">e</span> : <span class="hljs-literal">undefined</span>---&gt;<span class="hljs-number">1</span>----&gt;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>)</span>&#123;&#125;---&gt;<span class="hljs-number">2</span><br>    <span class="hljs-attr">b</span> : <span class="hljs-literal">undefined</span><br>    <span class="hljs-attr">c</span> : <span class="hljs-literal">undefined</span>---&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;&#125;)<br>    <span class="hljs-attr">a</span> : <span class="hljs-literal">undefined</span>---&gt;<span class="hljs-number">10</span><br>&#125;<br>demo(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 以下为函数外面了，全局了，GO</span><br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//100</span><br><span class="hljs-built_in">console</span>.log(f);<span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><p>姬成题目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//typeof(null);----object</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-literal">false</span> + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span>.write(str);<span class="hljs-comment">//1</span><br><span class="hljs-keyword">var</span> demo = <span class="hljs-literal">false</span> == <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span>.write(demo);<span class="hljs-comment">//false</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(a)&amp;&amp;-<span class="hljs-literal">true</span> + (+<span class="hljs-literal">undefined</span>) + <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;基础扎实&#x27;</span>);<br>&#125;<span class="hljs-comment">//&quot;undefined&quot;&amp;&amp;-1 + &quot;NAN&quot;字符串类型 +&quot;&quot;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">11</span> + <span class="hljs-string">&quot;11&quot;</span> * <span class="hljs-number">2</span> == <span class="hljs-number">33</span>) &#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;基础扎实&#x27;</span>);<br>&#125;<br>!!<span class="hljs-string">&quot; &quot;</span> + !!<span class="hljs-string">&quot;&quot;</span> - !!<span class="hljs-literal">false</span>||<span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;你觉得能打印，你就是猪&#x27;</span>);<br><span class="hljs-comment">// &quot; &quot;空格字符串true</span><br><span class="hljs-comment">// &quot;&quot;空串 false</span><br><span class="hljs-comment">// true + false - false == 1就停了</span><br><span class="hljs-comment">// 1||(被省略了)</span><br></code></pre></td></tr></table></figure><p>笔试题：</p><p>1.css 中,display 属性几种,列出来<br>display : none/block/inline-block/inline……<br>2.css 中 list-style 的属性有几种，分别是什么</p><p>3.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box_1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box_r&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>平行排列，并且均分父级，并且没有间距//两栏布局 4.使用 CSS HTML 三角形 5.水平垂直居中 6.写出 window.foo 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">(<span class="hljs-built_in">window</span>.foo || <span class="hljs-built_in">window</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>);<span class="hljs-comment">//这样报错，这样先计算或，优先级高</span><br>(<span class="hljs-built_in">window</span>.foo || (<span class="hljs-built_in">window</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>));<span class="hljs-comment">//先看括号，bar</span><br></code></pre></td></tr></table></figure><h1 id="三、作用域精解"><a href="#三、作用域精解" class="headerlink" title="三、作用域精解"></a>三、作用域精解</h1><p>1.单线程 2.解释性语言（翻译一句解释一句）<br>[[scope]]:每个 javascript 函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供 javascript 引擎存取，[[scope]]就是其中一个。[[scope]]指的就是我们所说的作用域,其中存储了运行期上下文的集合。<br>作用域链：[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。 3.运行期上下文:当函数执行时，会创建一个称为执行期上下文的内部对象 AO。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。<br>查找变量：从作用域链的顶端依次向下查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">234</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//自己里面有，就不要GO,无论如何说明AO与GO有某种联系</span><br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>小例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    b();<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-keyword">var</span> glob = <span class="hljs-number">100</span>;<br>a();<br><span class="hljs-comment">// a defined a.[[scope]]---&gt; 0:GO&#123;&#125;</span><br><span class="hljs-comment">// a.doing   a.[[scope]]---&gt; 0:AO&#123;&#125;</span><br><span class="hljs-comment">//                           1:GO&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>两个 AO 是引用，指向同一个房间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> bb = <span class="hljs-number">234</span>;<br>        aa = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    b();<br>    <span class="hljs-built_in">console</span>.log(aa);<br>&#125;<br><span class="hljs-keyword">var</span> glob = <span class="hljs-number">100</span>;<br>a();<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>)</span>&#123;<br>        &#125;<br>        c();<br>    &#125;<br>    b();<br>&#125;<br>a();<br>a defined a.[[scope]] ---&gt;<br><span class="hljs-number">0</span>:GO<br>a doing a.[[scope]] ---&gt;<br><span class="hljs-number">0</span> : aAO<br><span class="hljs-number">1</span> : GO<br>b defined b.[[scope]] ---&gt;<br><span class="hljs-number">0</span>:aAO<br><span class="hljs-number">1</span>:GO<br>b doing   b.[[scope]] ---&gt;<br><span class="hljs-number">0</span>:bAO<br><span class="hljs-number">1</span>:aAO<br><span class="hljs-number">2</span>:GO<br>c defind c.[[scope]] ---&gt;<br><span class="hljs-number">0</span>:bAO<br><span class="hljs-number">1</span>:aAO<br><span class="hljs-number">2</span>:GO<br>c doing c.[[scope]] ---&gt;<br><span class="hljs-number">0</span>:cAO<br><span class="hljs-number">1</span>:bAO<br><span class="hljs-number">2</span>:aAO<br><span class="hljs-number">3</span>:GO<br></code></pre></td></tr></table></figure><h1 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h1><h2 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h2><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露</p><h2 id="2-闭包例子"><a href="#2-闭包例子" class="headerlink" title="2.闭包例子"></a>2.闭包例子</h2><p>例子 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>        <span class="hljs-built_in">console</span>.log(aaa);<span class="hljs-comment">//123</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> aaa = <span class="hljs-number">123</span>;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-keyword">var</span> glob = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> demo = a();<br>demo();<br></code></pre></td></tr></table></figure><p>例子 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        num ++;<br>        <span class="hljs-built_in">console</span>.log(num);<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-keyword">var</span> demo = a();<br>demo();<span class="hljs-comment">//101</span><br>demo();<span class="hljs-comment">//102</span><br></code></pre></td></tr></table></figure><h2 id="3-闭包的作用"><a href="#3-闭包的作用" class="headerlink" title="3.闭包的作用"></a>3.闭包的作用</h2><blockquote><p>实现公有变量<br>eg:函数累加器，之前依赖外部变量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        count++;<br>        <span class="hljs-built_in">console</span>.log(count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> demo;<br>&#125;<br><span class="hljs-keyword">var</span> counter = add();<br>counter();<br>counter();<br>counter();<br>counter();<br>counter();<br></code></pre></td></tr></table></figure><blockquote><p>可以做缓存<br>eg:eater</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>        num++;<br>        <span class="hljs-built_in">console</span>.log(num);<br>    &#125;<br>    <span class="hljs-comment">// a defined  a.[[scope]] 0 : testAO</span><br>    <span class="hljs-comment">//    1 : GO</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>        num--;<br>        <span class="hljs-built_in">console</span>.log(num);<br>    &#125;<br>    <span class="hljs-comment">// b defined b.[[scope]] 0 : testAO</span><br>    <span class="hljs-comment">//    1 : GO</span><br>    <span class="hljs-keyword">return</span> [a,b];<br>&#125;<br><span class="hljs-keyword">var</span> MyArr = test();<br>MyArr[<span class="hljs-number">0</span>]();<br><span class="hljs-comment">// a doing a.[[scope]] 0 : aAO</span><br><span class="hljs-comment">// 1 : testAO  *</span><br><span class="hljs-comment">// 2. GO</span><br>MyArr[<span class="hljs-number">1</span>]();<br><span class="hljs-comment">// b doing b.[[scope]]  0 : bAO</span><br><span class="hljs-comment">// 1 : testAO*</span><br><span class="hljs-comment">// 2. GO</span><br><span class="hljs-comment">// 因为a,b是一个爹，环境一样，a=b</span><br></code></pre></td></tr></table></figure><p>缓存演示 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eater</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> food = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>        <span class="hljs-attr">eat</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;i am eating &quot;</span> + food);<br>            food = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;,<br>        <span class="hljs-attr">push</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">myFood</span>) </span>&#123;<br>            food = myFood;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> eater1 = eater();<br>eater1.push(<span class="hljs-string">&#x27;banana&#x27;</span>);<br>eater1.eat();<br></code></pre></td></tr></table></figure><blockquote><p>可以实现封装，属性私有化<br>eg: Person();</p></blockquote><blockquote><p>模块化开发，防止污染全局变量</p></blockquote><p><strong>函数声明&amp;&amp;函数表达式区别</strong></p><h2 id="4-闭包的防范"><a href="#4-闭包的防范" class="headerlink" title="4.闭包的防范"></a>4.闭包的防范</h2><p>闭包会导致多个执行函数共用一个公有变量，如果不是特殊需要，应尽量防止这种情况发生</p><h1 id="五、立即执行函数"><a href="#五、立即执行函数" class="headerlink" title="五、立即执行函数"></a>五、立即执行函数</h1><blockquote><p>定义：此类函数没有声明，在一次执行过后即释放。适合做初始化工作</p></blockquote><blockquote><p>针对初始化功能的函数。立即执行函数用完销毁和函数没区别</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> d = a + b + c;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><blockquote><p>立即执行函数的两种写法：</p></blockquote><ol><li>(function (){}()); W3C 建议第一种</li><li>(function (){})();</li></ol><blockquote><p>现象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//函数声明</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>&#125;();<span class="hljs-comment">//语法解析错误</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>&#125;<br>test();<span class="hljs-comment">//test是表达式，就可以</span><br></code></pre></td></tr></table></figure><p>以上，只有表达式才能被执行符号执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>&#125;<span class="hljs-comment">//函数声明</span><br><span class="hljs-number">123</span>;<span class="hljs-comment">//函数表达式</span><br>test();<span class="hljs-comment">//函数表达式</span><br><br><span class="hljs-comment">// 函数表达式可以</span><br><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;();<br><br><span class="hljs-comment">// 能被执行符号执行的表达式，这个函数名字就会被自动忽略</span><br><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;();<span class="hljs-comment">//立即执行</span><br><br>+ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;();<span class="hljs-comment">//减号，叹号，乘除不行（加减代表正负），&amp;&amp;，||</span><br><br><span class="hljs-comment">// 惊悚的</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;)()<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;())<br><span class="hljs-comment">// 因为被执行符号执行的表达式，这个函数名字就会被自动忽略</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;())<br><span class="hljs-comment">//立即执行函数很多形式</span><br></code></pre></td></tr></table></figure><p>阿里巴巴</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a,b,c,d</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b+c+d);<br>&#125;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><span class="hljs-comment">//相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a,b,c,d</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b+c+d);<br>&#125;<br><br>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><blockquote><p>重点引入样例：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = [];<span class="hljs-comment">//里面存了十个函数</span><br>    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> myArr = test();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>    myArr[j]();<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么是 10<br>i++<br>为什么全是 10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>是一个赋值语句，把一个函数引用赋给数组当前位，函数体 document.write(i + ‘ ‘);没调用前不执行，直到调用，才执行，恰好执行的时候全是十。<br>执行位置！=定义位置<br>怎么解决（唯一方法） 十个小立即执行函数吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = [];<span class="hljs-comment">//里面存了十个函数</span><br>    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>)</span>&#123;<br>            arr[j] =  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">document</span>.write(j + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> myArr = test();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>    myArr[j]();<br>&#125;<span class="hljs-comment">//打印i依旧是10,</span><br><span class="hljs-comment">//立即执行函数是读到马上执行</span><br></code></pre></td></tr></table></figure><h1 id="六、闭包"><a href="#六、闭包" class="headerlink" title="六、闭包"></a>六、闭包</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> demo;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> abc = <span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(abc);<br>    &#125;<br>    demo = a;<br>&#125;<br>test();<br>demo();<br><span class="hljs-comment">//里面的保存到外部，生成闭包</span><br></code></pre></td></tr></table></figure><p>阿里巴巴笔试题（UC 移动事业群）社招题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> liCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i  = <span class="hljs-number">0</span>; i &lt; liCollection.length; i++)&#123;<br>        liCollection[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(i);<br>        &#125;<br>    &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hehe<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">      * &#123;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n) &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n + <span class="hljs-number">1</span>) &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> liCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; liCollection.length; i++) &#123;</span><br><span class="javascript">          (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>) </span>&#123;</span><br><span class="javascript">            liCollection[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(j);</span><br><span class="javascript">            &#125;;</span><br><span class="javascript">          &#125;)(i);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      test();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>笔试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;&#125;)&#123;<br>    x += <span class="hljs-keyword">typeof</span> f;<br>&#125;<br><span class="hljs-built_in">console</span>.log(x);<span class="hljs-comment">//1undefined</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript</title>
    <link href="/2019/11/15/ECMAScript/"/>
    <url>/2019/11/15/ECMAScript/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><h1 id="一、js-浏览器历史"><a href="#一、js-浏览器历史" class="headerlink" title="一、js 浏览器历史"></a>一、js 浏览器历史</h1><h2 id="1-web-发展史"><a href="#1-web-发展史" class="headerlink" title="1.web 发展史"></a>1.web 发展史</h2><p>Mosaic，是互联网历史上第一个获普遍使用和能够显示<strong>图片</strong>的网页浏览器。于 1993 年问世<br>1994 年 4 月，马克.安德森和 Silicon Graphics（简称为 SGI，中译为“视算科技”或“硅图”）公司的创始人吉姆·克拉克（Jim Clark）在美国加州设立了“Mosaic Communication Corporation”。<br>Mosaic 公司成立后，由于伊利诺伊大学拥有 Mosaic 的商标权，且伊利诺伊大学已将技术转让给 Spy Glass 公司，开发团队必须彻底重新撰写浏览器程式码，且浏览器名称更改为 Netscape Navigator，公司名字于 1994 年 11 月改名为“Netscape Communication Corporation”，此后沿用至今，中译为“网景”。<br>微软的 Internet Explorer 及 Mozilla Firefox 等，其早期版本皆以 Mosaic 为基础而开发。微软随后买下 Spy Glass 公司的技术开发出 Internet Explorer 浏览器，而 Mozilla Firefox 则是网景通讯家开放源代码后所衍生出的版本。</p><h2 id="2-js-历史"><a href="#2-js-历史" class="headerlink" title="2.js 历史"></a>2.js 历史</h2><p>JavaScript 作为 Netscape Navigator 浏览器的一部分首次出现在 1996 年。它最初的设计目标是改善网页的用户体验。<br>作者：Brendan Eich<br>期初 JavaScript 被命名为，LiveScript，后因和 Sun 公司合作，因市场宣传需要改名 JavaScript。后来 Sun 公司被 Oracle 收购，JavaScript 版权归 Oracle 所有。</p><h2 id="3-浏览器组成"><a href="#3-浏览器组成" class="headerlink" title="3.浏览器组成"></a>3.浏览器组成</h2><p>1.shell 部分 2.内核部分<br>​ 1.渲染引擎（语法规则和渲染）<br>​ 2.js 引擎<br>​ 2001 年发布 ie6，首次实现对 js 引擎的优化。<br>​ 2008 年 Google 发布最新浏览器 Chrome，它是采用优化后的 javascript 引擎，引擎代号 V8，因能把 js 代码直接 转化为机械码来执行，进而以速度快而闻名。<br>​ 后 Firefox 也推出了具备强大功能的 js 引擎<br>​ Firefox3.5 TraceMonkey（对频繁执行的代码做了路径优化）<br>​ Firefox4.0 JeagerMonkey<br>​ 3.其他模块</p><h2 id="4-js-的逼格"><a href="#4-js-的逼格" class="headerlink" title="4.js 的逼格"></a>4.js 的逼格</h2><p>1.<strong>解释性语言</strong> — (不需要像编译性语言一样编译成文件）跨平台</p><p>优缺点</p><p>编译：快——开发游戏引擎，操作系统；不能跨平台，移植性不好</p><p>解释性：稍慢；跨平台</p><p><strong>2.单线程</strong></p><p>异步下载</p><p>ECMA 标注 — 为了取得技术优势，微软推出了 JScript，CEnvi 推出 ScriptEase，与 JavaScript 同样可在浏览器上运行。为了统一规格 JavaScript 兼容于 ECMA 标准，因此也称为 ECMAScript。</p><h2 id="5-js-执行队列"><a href="#5-js-执行队列" class="headerlink" title="5.js 执行队列"></a>5.js 执行队列</h2><blockquote><p>类似吃饭</p></blockquote><p>js 三大部分<br>​ ECMAScript、DOM、BOM<br>如何引入 js?<br>​ 页面 内嵌 script 标签<br>外部引入<br>​ 为符合 web 标准（w3c 标准中的一项）结构、样式、行为相分离，通常会采用外部引入<br>同时外部引入，页面内嵌<br>外部好使，内部失效</p><h1 id="二、js-基本语法"><a href="#二、js-基本语法" class="headerlink" title="二、js 基本语法"></a>二、js 基本语法</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><p>变量声明<br>声明、赋值分解<br>单一 var 声明法</p><p>命名规则</p><p>1.变量名必须以英文字母、_ 、$ 开头 2.变量名可以包括英文字母、_、$、数字 3.不可以用系统的关键字、保留字作为变量名(关键字，保留字)</p><p>开发规范：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>,</span><br><span class="javascript">        b = <span class="hljs-number">20</span>,</span><br><span class="javascript">        d;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(a,b,c,d);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-值类型"><a href="#2-值类型" class="headerlink" title="2.值类型"></a>2.值类型</h2><blockquote><p>原始值（不可改变的;栈数据）</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Number</td><td align="center">var a = 123.12</td></tr><tr><td align="center">String</td><td align="center">var b = “abc”</td></tr><tr><td align="center">Boolean</td><td align="center">var b = false; var a = ture; 输出结果就是本身</td></tr><tr><td align="center">Undefined</td><td align="center">var b = undefined; 输出结果就是本身：没有定义的</td></tr><tr><td align="center">Null</td><td align="center">var b = null; 空值占位</td></tr></tbody></table><p>两个数据类型的区别：</p><p>原始值：stack（栈） 先进去的最后出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b = a;<br>a = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">document</span>.write(b);<br></code></pre></td></tr></table></figure><p>栈内存与栈内存之间是拷贝</p><blockquote><p>引用值（堆数据）</p></blockquote><p>array, object, function</p><p>Date,RegExp</p><p><strong>以上栈内存、堆内存底层原理见视频</strong></p><p>JS 是动态语言，解释一行，执行一行</p><h1 id="三、js-基本语句"><a href="#三、js-基本语句" class="headerlink" title="三、js 基本语句"></a>三、js 基本语句</h1><p>语句后面要用分号结束“；”</p><p>不加分号</p><ol><li>function test(){}</li><li>for(){}</li><li>if(){}</li></ol><p>js 不同文件变量可以互相访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(a);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js 语法错误会引发后续代码终止，但不会影响其它 js 代码块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(c);</span><br><span class="javascript">  <span class="hljs-comment">//20</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> b = <span class="hljs-number">20</span>;</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(b);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>几种错误</p></blockquote><ol><li><p>低级错误（语法解析错误） 一行也不执行</p></li><li><p>逻辑错误</p><p>先扫描全局，没有低级错误后，解释一行，执行一行</p></li></ol><p>书写格式要规范，“= + / -”两边都应该有空格</p><h2 id="1-js-运算符"><a href="#1-js-运算符" class="headerlink" title="1.js 运算符"></a>1.js 运算符</h2><blockquote><p>运算操作符</p></blockquote><p>“+”</p><p>1.数学运算、字符串链接</p><p>2.任何数据类型加字符串都等于字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span> .write(a); a1<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span> .write(a); <span class="hljs-comment">//自左向右：a11</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;a&quot;</span> + ture + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span> .write(a); ature1<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span> / <span class="hljs-number">0</span>;<br>NAN——not a number<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>/ <span class="hljs-number">0</span>;<br><span class="hljs-literal">Infinity</span><br></code></pre></td></tr></table></figure><p>“-”，“*”，“/“，“%”，”=“，“()”</p><p>优先级”=“最弱，”()”优先级较高</p><p>“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”</p><p>a ++;先执行语句，后++</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">document</span>.write(a++);<br><span class="hljs-comment">//先document .write (a)后++  因为先打印，所以出来10</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">document</span>.write(a++);<br><span class="hljs-built_in">document</span>.write(a);<br><span class="hljs-comment">//则10 11</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b = ++a - <span class="hljs-number">1</span> + a++;<br><span class="hljs-built_in">document</span>.write(b + <span class="hljs-string">&quot;&quot;</span> + a);<br><span class="hljs-comment">//11（a变成了11）-1+11        b:21   a:12（a最后的++）</span><br></code></pre></td></tr></table></figure><blockquote><p>比较运算符</p></blockquote><p>​ “&gt;”，”&lt;”，”==”，“&gt;=”，“&lt;=”，”!=”<br>​ 比较结果为 boolean 值</p><blockquote><p>逻辑运算符</p></blockquote><p>​ “&amp;&amp;”，“||”，“!“<br>​ 运算结果为真实的值</p><h2 id="2-false"><a href="#2-false" class="headerlink" title="2.false"></a>2.false</h2><p>undefined， null， NaN， “”(空串)， 0， false</p><h2 id="3-条件语句"><a href="#3-条件语句" class="headerlink" title="3.条件语句"></a>3.条件语句</h2><p>布尔值</p><p>1.什么都能比较大小（字符串比较 ASCII 顺序）</p><p>2.只要左右一样，则一样</p><p>特例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = NAN == NAN;<br><span class="hljs-built_in">document</span>.write(a);<br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>3.逻辑运算符：&amp;&amp; || !</p><p>&amp;&amp;:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span>;<br><span class="hljs-built_in">document</span> .write(a);      <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>两个表达式：</p><p>先看前面表达式转换成布尔值是否为真，（false: undefined， null， NaN， “”， 0， false<br>），真则看第二个表达式转换成布尔值的结果，如果只有两个表达式，只要看到第二个表达式，就可以返回第二个表达式的值了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span>; <span class="hljs-comment">//1为真，故返回2</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">2</span>;<span class="hljs-comment">//直接把第一个表达式的原本的值返回， 故返回0</span><br></code></pre></td></tr></table></figure><p>多个表达式：</p><p>先看第一个表达式，如果真，看第二个，也真，看第三个，一旦假的，就返回假的</p><p>&amp;&amp;：如果前面是零，就不看了；真，就下一句。</p><p>开发应用（短路语句）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">document</span> .write(<span class="hljs-string">&quot;成哥很帅&quot;</span>)<br><span class="hljs-keyword">var</span> data = …;<br>data &amp;&amp; 执行一个语句，会用到data, 如果data空值，就不能执行下面<br></code></pre></td></tr></table></figure><p>&amp;</p><p>开发没卵用（有卵用）var num = 1 &amp; 3;即 01 &amp; 11 即 01</p><p>||</p><p>第一个是不是真，真，就返回真的原始值，假的话，返回第二个</p><h2 id="4-写兼容应用"><a href="#4-写兼容应用" class="headerlink" title="4.写兼容应用"></a>4.写兼容应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS">div. onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br><span class="hljs-comment">// 把e的值取出来非ie浏览器</span><br><span class="hljs-keyword">var</span> event = e;<br>&#125;<br>div. onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br><span class="hljs-comment">// 把e的值取出来ie浏览器</span><br><span class="hljs-keyword">var</span> event = e;<br><span class="hljs-built_in">window</span>. event;<br>&#125;<br>兼容：<br>div. onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br><span class="hljs-comment">// 把e的值取出来</span><br><span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>. event;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-if、if-else-if"><a href="#5-if、if-else-if" class="headerlink" title="5.if、if else if"></a>5.if、if else if</h2><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> score = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">window</span> .prompt(<span class="hljs-string">&#x27;input&#x27;</span>));<br><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;alibaba&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">90</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;tencent&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> score = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">window</span> .prompt(<span class="hljs-string">&#x27;input&#x27;</span>));<br><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;alibaba&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">90</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;tencent&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>等价关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br>与<br><span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="6-for"><a href="#6-for" class="headerlink" title="6.for"></a>6.for</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(; i; )&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    count ++;<br>    <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span>) &#123;<br>        i = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思维拓展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">for</span>(; i --; )&#123;<br>    <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-while-do-while"><a href="#7-while-do-while" class="headerlink" title="7.while, do while"></a>7.while, do while</h2><p>带 7 和 7 的倍数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">10</span> ==<span class="hljs-number">7</span>)&#123;<br>        <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-switch-case"><a href="#8-switch-case" class="headerlink" title="8.switch case"></a>8.switch case</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span>(n) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span>(n)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;b&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);<br>    <span class="hljs-keyword">case</span> ture:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> data = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">switch</span>(data)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;monday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tuesday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;wednesday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;thursday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;firday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;saturday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sunday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> data = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">switch</span>(data)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;monday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tuesday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;wednesday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;thursday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;firday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;saturday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sunday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-break"><a href="#9-break" class="headerlink" title="9.break"></a>9.break</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    i++;<br>    <span class="hljs-built_in">console</span>.log(i);<br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">100</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-continue"><a href="#10-continue" class="headerlink" title="10.continue"></a>10.continue</h2><blockquote><p>中止本次循环，进行下一循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">10</span> == <span class="hljs-number">7</span>)&#123;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i ++)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">10</span> == <span class="hljs-number">7</span>)&#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、初识引用值"><a href="#四、初识引用值" class="headerlink" title="四、初识引用值"></a>四、初识引用值</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-literal">undefined</span>];<br></code></pre></td></tr></table></figure><p>array 后来赋值即更改</p><p>demo 取出每一位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&quot;acv&quot;</span>,<span class="hljs-literal">undefined</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象-object"><a href="#2-对象-object" class="headerlink" title="2.对象 object"></a>2.对象 object</h2><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;Deng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">Wife</span> : <span class="hljs-string">&quot;xaioliu&quot;</span>,<br>    <span class="hljs-attr">father</span> : <span class="hljs-string">&quot;dengge&quot;</span>,<br>    <span class="hljs-attr">son</span> : <span class="hljs-string">&quot;dengxiaobao&quot;</span>,<br>    <span class="hljs-attr">handsome</span> : <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(deng.lastName);<br>deng.lastName = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-built_in">console</span>.log(deng.lastName);<br></code></pre></td></tr></table></figure><h2 id="3-编程形式的区别"><a href="#3-编程形式的区别" class="headerlink" title="3.编程形式的区别"></a>3.编程形式的区别</h2><p>1.面向过程</p><p>2.面向对象</p><h1 id="六、typeof"><a href="#六、typeof" class="headerlink" title="六、typeof"></a>六、typeof</h1><p>六种数据类型： <strong>number、string、boolean、undefined、object、function</strong></p><p>false <strong>undefined， null， NaN， “”， 0， false</strong></p><p>类型转换</p><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> * <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//s数字类型的1</span><br><br><span class="hljs-keyword">var</span> num = <span class="hljs-string">&quot;2&quot;</span> * <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//数字类型2</span><br></code></pre></td></tr></table></figure><p>具体玩法</p><p>typeof：typeof(num)或者 typeof num</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num));<br><span class="hljs-comment">// number</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-string">&quot;true&quot;</span>;<span class="hljs-comment">//字符串true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num));<br><span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure><p>谁返回 object</p><p>引用值：对象、数组、null(历史遗留问题)</p><h1 id="七、类型转换"><a href="#七、类型转换" class="headerlink" title="七、类型转换"></a>七、类型转换</h1><h2 id="1-显示类型转换"><a href="#1-显示类型转换" class="headerlink" title="1.显示类型转换"></a>1.显示类型转换</h2><blockquote><p>Number(mix)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot; : &quot;</span> + num);<br><span class="hljs-comment">// number:123</span><br><span class="hljs-comment">//Null:0</span><br><span class="hljs-comment">//Underfined: NAN</span><br><span class="hljs-comment">//“a”: NAN</span><br><span class="hljs-comment">//False:0</span><br><span class="hljs-comment">//“123”:123</span><br></code></pre></td></tr></table></figure><blockquote><p>parseInt(string,radix)</p></blockquote><p>基础用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">“<span class="hljs-number">123.9</span>”:<span class="hljs-number">123</span><br><span class="hljs-attr">ture</span>:NAN<br><span class="hljs-attr">Null</span>:NAN<br><span class="hljs-attr">Underfined</span>: NAN<br><span class="hljs-number">123.9</span>:<span class="hljs-number">123</span><br>123abc:<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>基底</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> dmeo = <span class="hljs-string">&quot;10&quot;</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">parseInt</span>(demo, <span class="hljs-number">16</span>);<span class="hljs-comment">//转成16进制</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-keyword">var</span> demo = <span class="hljs-string">&quot;10&quot;</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">parseInt</span>(demo, <span class="hljs-number">16</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br></code></pre></td></tr></table></figure><p>radix∈（2-36）</p><blockquote><p>parseFloat(string)</p></blockquote><p>转换成浮点型（正常数字）参数只能是字符串</p><p>100.2:100.2<br>100.2.2:100.2</p><p>100.2abs:100.2</p><blockquote><p>toString(radix)</p></blockquote><p>转换成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> demo = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> num = demo.toString();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//string:123</span><br></code></pre></td></tr></table></figure><p>Radix：进制，demo 里面转换成进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> demo = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> num = demo.toString();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//string : 123</span><br></code></pre></td></tr></table></figure><p>特殊点：<br>underfined 和 null 不能用</p><blockquote><p>String(mix)</p></blockquote><p>同 number string 是转换成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">underfined: underfined<br><span class="hljs-comment">//123:123</span><br><span class="hljs-comment">//ture:ture</span><br></code></pre></td></tr></table></figure><blockquote><p>Boolean()</p></blockquote><p>除了这些，都是 ture : undefined， null， NaN， “”， 0， false</p><p>题目:10101010 转换成 16 进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// parseInt       toString</span><br><span class="hljs-comment">// 2        10      16</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10101010</span>;<br><span class="hljs-keyword">var</span> test = <span class="hljs-built_in">parseInt</span>(num, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(test.toString(<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><h2 id="2-隐式类型转换"><a href="#2-隐式类型转换" class="headerlink" title="2.隐式类型转换"></a>2.隐式类型转换</h2><blockquote><p>isNaN () ——调用 number</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//console.log(isNAN(NAN));   ture</span><br><br><span class="hljs-comment">//123 false</span><br><span class="hljs-comment">//“123” false</span><br><span class="hljs-comment">//null false</span><br><span class="hljs-comment">//underfined ture</span><br><span class="hljs-comment">//“abc” ture</span><br><br><span class="hljs-comment">// console.log(isNAN(&quot;abc&quot;));</span><br><span class="hljs-comment">// Number(&#x27;abc&#x27;)----&gt;NAN  流程</span><br></code></pre></td></tr></table></figure><blockquote><p>++/— +/-（一元正负）——调用 number</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var a = &quot;123&quot;;</span><br><span class="hljs-comment">// a++;//字符串计算也是124</span><br><span class="hljs-comment">// var a = &quot;abc&quot;;</span><br><span class="hljs-comment">// a ++;</span><br><span class="hljs-comment">// // NAN 但是typeof是number</span><br></code></pre></td></tr></table></figure><blockquote><p>-</p></blockquote><p>两侧有一侧是字符串，就调用 string 变成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var a = &quot;a&quot; + 1;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));</span><br></code></pre></td></tr></table></figure><blockquote><p>*/% ——调用 number</p></blockquote><blockquote><p>&amp;&amp; || ！</p></blockquote><blockquote><p>&lt; &gt; &lt;= &gt;=</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var a = &quot;3&quot; &gt; 2;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));</span><br><span class="hljs-comment">// // 转换成数字比较</span><br><span class="hljs-comment">// var a = &quot;3&quot; &gt; &quot;2&quot;;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));</span><br><span class="hljs-comment">// // 比较ASCII</span><br><br><span class="hljs-comment">// var a = 1 == &quot;1&quot;;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));//隐式类型转 相等</span><br><br><span class="hljs-comment">// // undefined == null:true,其他都是false</span><br><span class="hljs-comment">// undefined&gt;0</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// undefined&lt;0</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// undefined==0</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// null同理</span><br><br><span class="hljs-comment">// NAN == NAN : false;</span><br></code></pre></td></tr></table></figure><p>== !=</p><h2 id="3-不发生类型转换"><a href="#3-不发生类型转换" class="headerlink" title="3.不发生类型转换"></a>3.不发生类型转换</h2><p>=== !==</p><p>没定义直接使用会报错，除了 console.log(typeof(a))</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS">alert(<span class="hljs-keyword">typeof</span>(a));<br>alert(<span class="hljs-keyword">typeof</span>(<span class="hljs-literal">undefined</span>));<br>alert(<span class="hljs-keyword">typeof</span>(NAN));<br>alert(<span class="hljs-keyword">typeof</span>(<span class="hljs-literal">null</span>));<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;123abc&quot;</span>;<br>alert(<span class="hljs-keyword">typeof</span>(+a));<br>alert(<span class="hljs-keyword">typeof</span>(!!a));<br>alert(<span class="hljs-keyword">typeof</span>(a+<span class="hljs-string">&quot;&quot;</span>));<br>alert(<span class="hljs-number">1</span> == <span class="hljs-string">&quot;1&quot;</span>);<br>alert(NAN == NAN);<br>alert(<span class="hljs-keyword">typeof</span>(NAN == <span class="hljs-literal">undefined</span>));<br>alert(<span class="hljs-string">&quot;11&quot;</span>+<span class="hljs-number">11</span>);<br>alert(<span class="hljs-number">1</span>===<span class="hljs-string">&quot;1&quot;</span>);<br>alert(parentInt(<span class="hljs-string">&quot;13abx&quot;</span>));<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">123123.22324</span>;<br>alert(num.toFixed(<span class="hljs-number">3</span>));<br>alert(<span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">typeof</span>(a)));<br></code></pre></td></tr></table></figure><h1 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h1><p>函数组成形式</p><ul><li>函数名称</li><li>参数<br>​ 形参<br>​ 实参</li><li>返回值</li></ul><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p><strong>方法 1：函数声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>方法 2：函数表达式</strong></p><p>函数定义方式</p><blockquote><p>1.命名函数表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.匿名函数表达式（常用）——函数表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> demo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>3.现象：</p></blockquote><p>abc 不是函数了，test 才是。等号右边是表达式，表达式忽略 abc 名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">test.name<span class="hljs-comment">//abc</span><br>demo.name<span class="hljs-comment">//demo</span><br>test.name<span class="hljs-comment">//test</span><br></code></pre></td></tr></table></figure><h2 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2.函数参数"></a>2.函数参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">text</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-comment">// 相当于隐式var a,b;</span><br>    <span class="hljs-built_in">document</span>.write(a+b);<br>&#125;<br>text(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><blockquote><p>形式参数—形参</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> c = a + b;<br>    <span class="hljs-built_in">document</span>.write(c);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实际参数—实参</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><blockquote><p>形参实参不一定相等数量，谁都谁少都行，传参传什么类型都行，也不一定一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(a);<br>&#125;<br>sum(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>不管调用没调用，都有</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b,c,d</span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(a);<br>    <span class="hljs-built_in">document</span>.write(d);<span class="hljs-comment">//undefined</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-comment">//arguments--[11,2,3];实参列表</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.length);<br>&#125;<br></code></pre></td></tr></table></figure><p>小应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[i])<br>    &#125;<br>&#125;<br>sum(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>求形参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b,c,d</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(sum.length);<span class="hljs-comment">//形参长度</span><br>&#125;<br>sum(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>映射规则（形参=实参才映射）：但是是两个东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>]);<br>&#125;<br>sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//2    a变，arguments也变</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br>sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//3    a 也变</span><br></code></pre></td></tr></table></figure><p>参数不相等，不映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-comment">// argument[1]就没值了</span><br>  b = <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>]);<br>  <span class="hljs-comment">// 返回undefined</span><br>&#125;<br>sum(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="3-return"><a href="#3-return" class="headerlink" title="3.return"></a>3.return</h2><p>1.函数终止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//在这里终止</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);<br>&#125;<br>sum(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>2.返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">//本句不好使，因为也终止函数</span><br>&#125;<br>sum(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> num = sum();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNumber</span>(<span class="hljs-params">target</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> +target;<br>&#125;<br><span class="hljs-keyword">var</span> num = myNumber(<span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot; &quot;</span> + num);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS2.0基础</title>
    <link href="/2019/10/15/CSS2.0%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/10/15/CSS2.0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS（cascading-style-sheet-层叠样式表）"><a href="#CSS（cascading-style-sheet-层叠样式表）" class="headerlink" title="CSS（cascading style sheet 层叠样式表）"></a>CSS（cascading style sheet 层叠样式表）</h1><h2 id="一-引入-CSS"><a href="#一-引入-CSS" class="headerlink" title="(一)引入 CSS"></a>(一)引入 CSS</h2><h3 id="1-行间样式"><a href="#1-行间样式" class="headerlink" title="1.行间样式"></a>1.行间样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">    width: 100px;</span></span><br><span class="hljs-string"><span class="hljs-tag">    height: 100px;</span></span><br><span class="hljs-string"><span class="hljs-tag">    background-color: red;</span></span><br><span class="hljs-string"><span class="hljs-tag">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-页面级-CSS"><a href="#2-页面级-CSS" class="headerlink" title="2.页面级 CSS"></a>2.页面级 CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-外部-CSS-文件"><a href="#3-外部-CSS-文件" class="headerlink" title="3.外部 CSS 文件"></a>3.外部 CSS 文件</h3><p>加载 css</p><p><a href="http://www.baidu.com/">www.baidu.com</a> 通过 dns 解析——192.122.222.666</p><p>开启新的线程</p><p>下载一行，执行一行</p><p>执行到 CSS 文件，开启新线程，同时下载，叫异步加载</p><p>异步的——同时<br>​ 同步的——不同时</p><h2 id="二-CSS-选择器"><a href="#二-CSS-选择器" class="headerlink" title="(二)CSS 选择器"></a>(二)CSS 选择器</h2><h3 id="1-ID-选择器-一个元素——一个-ID，一对一"><a href="#1-ID-选择器-一个元素——一个-ID，一对一" class="headerlink" title="1.ID 选择器(一个元素——一个 ID，一对一)"></a>1.ID 选择器(一个元素——一个 ID，一对一)</h3><p>roseOnly darryRing</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">HTML:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”only”</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">CSS: #only&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-class-选择器（特点选择）——多对多"><a href="#2-class-选择器（特点选择）——多对多" class="headerlink" title="2.class 选择器（特点选择）——多对多"></a>2.class 选择器（特点选择）——多对多</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">HTML: <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">”demo”</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">CSS: .demo&#123;&#125;<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo demo1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo &quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.demo</span>&#123;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>&#123;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-标签选择器"><a href="#3-标签选择器" class="headerlink" title="3.标签选择器"></a>3.标签选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;&#125;    任意，所有标签——整个页面<br></code></pre></td></tr></table></figure><h4 id="优先级-（CSS-权重）：10-1-差-256-进制"><a href="#优先级-（CSS-权重）：10-1-差-256-进制" class="headerlink" title="优先级 （CSS 权重）：10-1 差 256 进制"></a>优先级 （CSS 权重）：10-1 差 256 进制</h4><p>！important Infinity(能计算,不同于数学)<br>行间样式（纹身） 1000<br>Id 100<br>Class|属性|伪类 10 （先来后到，后面为准）<br>标签|伪元素 1<br>通配符 0</p><h3 id="5-属性选择器"><a href="#5-属性选择器" class="headerlink" title="5.属性选择器"></a>5.属性选择器</h3><p>实例一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>1123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>[id]&#123;<br>background-color: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例二</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>1123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only1&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-attr">[id=<span class="hljs-string">&quot;only&quot;</span>]</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-伪类选择器"><a href="#6-伪类选择器" class="headerlink" title="6.伪类选择器"></a>6.伪类选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS">！important<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red<span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-派生选择器（父子选择器）"><a href="#7-派生选择器（父子选择器）" class="headerlink" title="7.派生选择器（父子选择器）"></a>7.派生选择器（父子选择器）</h3><p>实例一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>345<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例二：不一定非要标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>3454<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">em</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-直接子元素选择器"><a href="#8-直接子元素选择器" class="headerlink" title="8.直接子元素选择器"></a>8.直接子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">em</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>浏览器内核原理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></figure><p>原理：section div ul li a em {}从右往左识别快</p><h3 id="9-并列选择器：实现不能实现的问题"><a href="#9-并列选择器：实现不能实现的问题" class="headerlink" title="9.并列选择器：实现不能实现的问题"></a>9.并列选择器：实现不能实现的问题</h3><p>问题：选择中间的 div</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">calss</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.demo</span>&#123;&#125;权重计算，一样的话，后面覆盖前面的   不加空格<br></code></pre></td></tr></table></figure><p>并列选择器：实现不能实现的问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classDiv&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idDiv&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classP&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idP&quot;</span>&gt;</span><br>        1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><span class="hljs-selector-id">#idDiv</span> <span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-comment">/* 100+1 */</span><br><span class="hljs-selector-class">.classDiv</span><span class="hljs-selector-class">.classP</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><span class="hljs-comment">/* 10+10 */</span><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>正无穷+1&gt;正无穷</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#idDiv</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.classP</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red<span class="hljs-meta">!important</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.classP</span><span class="hljs-selector-id">#idP</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green<span class="hljs-meta">!important</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classDiv&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idDiv&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classP&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idP&quot;</span>&gt;</span><br>                1<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-分组选择器——代码耦合度高"><a href="#10-分组选择器——代码耦合度高" class="headerlink" title="10.分组选择器——代码耦合度高"></a>10.分组选择器——代码耦合度高</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">em</span>,<br><span class="hljs-selector-tag">strong</span>,<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.demo1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>,<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-CSS-代码块"><a href="#三-CSS-代码块" class="headerlink" title="(三)CSS 代码块"></a>(三)CSS 代码块</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<span class="hljs-comment">/*字体大小，浏览器默认16px，一般12px,设置的高*/</span><br><span class="hljs-attribute">font-weight</span>: bold;<span class="hljs-comment">/*bold加粗=strong；lighter细体，默认normal, bolder更粗100,200,900没有单位*/</span><br><span class="hljs-attribute">font-style</span>: italic;<span class="hljs-comment">/*斜体= em*/</span><br><span class="hljs-attribute">font-family</span>: arial;<span class="hljs-comment">/*字体，默认:arial*/</span><br>字典：www<span class="hljs-selector-class">.css88</span><span class="hljs-selector-class">.com</span><br><span class="hljs-attribute">color</span>:<br>font-color不对，直接就color<br>r    g     b<br><span class="hljs-number">00</span>-ff  <span class="hljs-number">00</span>-ff    <span class="hljs-number">00</span>-ff<br><span class="hljs-number">1</span>.土鳖式：英文单词（开发不能用）<br><span class="hljs-number">2</span>.颜色代码（常用）<br>每两个一样，就变三位<br><span class="hljs-number">3</span>.颜色函数<br><span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span><span class="hljs-built_in">-255</span>(十进制),<span class="hljs-number">0</span>-<span class="hljs-number">255</span>,<span class="hljs-number">0</span>-<span class="hljs-number">255</span>);<br><span class="hljs-attribute">border</span>:<br>给容器加一个盒子（外边框）<br>border:  <span class="hljs-number">1px</span>   solid  black<br>         粗细    实心  颜色<br>border-width:<span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border-style</span>: solid;<span class="hljs-comment">/*实心*/</span><span class="hljs-comment">/*dotted或 dashed 虚线*/</span><br><span class="hljs-attribute">border-color</span>: red;<br>透明色：transparent<br></code></pre></td></tr></table></figure><p>百度面试题：画气泡(宽高为零)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">100px</span> solid black;<br>    <span class="hljs-attribute">border-left-color</span>: red;<br>    <span class="hljs-attribute">border-right-color</span>: <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">border-top-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-CSS-进阶"><a href="#四-CSS-进阶" class="headerlink" title="(四)CSS 进阶"></a>(四)CSS 进阶</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS">对齐方式：<span class="hljs-attribute">text-align</span>: left;(center居中显示)<br>文本行高：<span class="hljs-attribute">line-height</span>(单行文本所占高度)<br>文字在容器内水平(单行文本)垂直居中: 实现：height=line-height：实现上下居中——文本所占高度=容器高度<br><br>首行缩进：text-indent:<span class="hljs-number">2em</span>;——两个文本距离<br>关于单位：px(像素)<span class="hljs-selector-tag">em</span>()——<span class="hljs-number">1em</span>=<span class="hljs-number">1</span>*<span class="hljs-attribute">font-size</span><br><span class="hljs-number">1.2</span>倍行高：<span class="hljs-attribute">line-height</span> : <span class="hljs-number">1.2em</span>;<br>关于<span class="hljs-attribute">text-decoration</span><br>&lt;<span class="hljs-selector-tag">del</span>&gt;原价<span class="hljs-number">120</span>&lt;/<span class="hljs-selector-tag">del</span>&gt;<br>&lt;<span class="hljs-selector-tag">span</span>&gt;原价<span class="hljs-number">120</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;模拟<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: line-through;<span class="hljs-comment">/* 有线* /</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">    del&#123;</span><br><span class="hljs-comment">    text-decoration: none;/*使del没有线*/</span><br>&#125;<br>下划线：(仿生<span class="hljs-selector-tag">a</span>标签)<br>&lt;<span class="hljs-selector-tag">span</span>&gt;www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline;// <span class="hljs-attribute">text-decoration</span>: overline;上划线<br>    <span class="hljs-attribute">color</span>: rgb (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">238</span>);<br>&#125;<br><span class="hljs-attribute">cursor</span>: pointer;<span class="hljs-comment">/*当鼠标移入显示什么样式*/</span><br></code></pre></td></tr></table></figure><p>伪类选择器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<span class="hljs-comment">/*一样[href]:hover&#123;&#125;*/</span><br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">font-family</span>: arial;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span>&gt;</span>www.taobao.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.jd.com&quot;</span>&gt;</span>www.jd.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五-总结标签"><a href="#五-总结标签" class="headerlink" title="(五)总结标签"></a>(五)总结标签</h2><h3 id="1-行级元素、内联元素-inline"><a href="#1-行级元素、内联元素-inline" class="headerlink" title="1.行级元素、内联元素 inline"></a>1.行级元素、内联元素 inline</h3><p>feature:内容决定元素所占位置 不可通过 css 改变宽高</p><p>span strong em a del</p><h3 id="2-块级元素-block"><a href="#2-块级元素-block" class="headerlink" title="2.块级元素 block"></a>2.块级元素 block</h3><p>feature：独占一行 可以通过 css 改变宽高</p><p>div p ul li ol form address</p><h3 id="3-行级块元素-inline-block"><a href="#3-行级块元素-inline-block" class="headerlink" title="3.行级块元素 inline -block"></a>3.行级块元素 inline -block</h3><p>feature: 内容决定大小 可以改宽高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>：一般只设置一个宽或者高，另一个等比例缩放<br></code></pre></td></tr></table></figure><p>一切事物没有绝对：</p><p>CSS 控制属性和特点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br>So可以改变<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">display</span>：block；<br>&#125;<br></code></pre></td></tr></table></figure><p>企业级开发项目</p><p>N 张图片排列一起：(实战)——凡是带有 inline 的都有文字属性 被分割</p><p>解决方法 1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>变为<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>间距为4px<br></code></pre></td></tr></table></figure><p>解决方法 2</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">6px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是：所以，实际上压缩代码：img——-一个字母；空格回车删除，so margin-left: -6px;内嵌了，不用管他</p><h2 id="六-公司用法（开发经验）："><a href="#六-公司用法（开发经验）：" class="headerlink" title="(六)公司用法（开发经验）："></a>(六)公司用法（开发经验）：</h2><p>1.先定义功能，后选配</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">先定义class:<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red size1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;green size2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gray size3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.red</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.green</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><span class="hljs-selector-class">.gray</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><span class="hljs-selector-class">.size1</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.size2</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.size3</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>标签先天缺陷——自定义标签：标签选择器</li></ol><p>初始化标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#424242</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span>&#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>&#125;<br>*&#123;<br>    <span class="hljs-comment">/*初始化所有标签*/</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/*权重为0，可以后期更改*/</span><br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>了解各种标签的先天值</p><h2 id="七-盒子模型（万物皆盒子）"><a href="#七-盒子模型（万物皆盒子）" class="headerlink" title="(七)盒子模型（万物皆盒子）"></a>(七)盒子模型（万物皆盒子）</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">margin + <span class="hljs-built_in">border</span> + padding + (<span class="hljs-built_in">content</span> = <span class="hljs-built_in">width</span> + <span class="hljs-built_in">height</span>)<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 padding:100px;</p><p>​ 等价于 padding:100px 100px 100px 100px;</p><p>​ 四个值顺时针上右下左</p><p>​ 三个值：上左右下：左右等距情况多</p><p>​ 两个值：上下左右</p><p>​ 这也可以：border-width:100px:==100px 100px 100px 100px</p><p>盒模型计算：</p><p>求视觉宽高：（margin 不能算，不能被看到）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-comment">/* 160 160 */</span><br></code></pre></td></tr></table></figure><p>求可视区宽高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-id">#my-defined</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid orange;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用:远视图：一个快在一个快的中间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mmm.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.content1</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八-定位：定点在某处展示-position"><a href="#八-定位：定点在某处展示-position" class="headerlink" title="(八)定位：定点在某处展示 position"></a>(八)定位：定点在某处展示 position</h2><ol><li>absolute 绝对定位——可定位</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-comment">/*left: 200px;左边线距离*/</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-comment">/*right右边线距离*/</span><br>    <span class="hljs-comment">/*bottom*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>body 的 margin 8px;天生</p><p>层模型：</p><p>absolute：脱离原来位置进行定位：一个是 absolute 另一个可以在它下面，不在一个层级了(立交桥)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br> <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br> <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.demo</span>&#123;<br> <span class="hljs-attribute">position</span>: absolute;<br> <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br> <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br> <span class="hljs-attribute">background-color</span>: red;<br> <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br> <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br> <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br> <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>.relative 相对定位 保留他原来位置定位，也是不同层级，占据的位置不给另一个（灵魂出来，尸体占位置）</p><p>结论</p><p>absolute 相对于最近的有定位的父级进行定位，没有最近的定位的父级，就相对于文档定位<br>relative:相对于原来的位置进行定位</p><p>定位——参照物+有定位</p><p>经验定律：relative 作为参照物，absolute 定位——减小对后续元素的破坏</p><p>DMEO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>广告定位：fixed 位置不动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面居中广告+不动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;   But定位定的是左顶点<br></code></pre></td></tr></table></figure><p>文档居中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>;（-<span class="hljs-number">0.5</span>宽高）<br>    <span class="hljs-comment">/*margin-left: -10px;嵌入在里面*/</span><br>&#125;<br>可视区窗口：<span class="hljs-attribute">position</span>为fixed<br>可用&lt;br&gt;验证<br></code></pre></td></tr></table></figure><p>五环——屏幕正中央永远居中</p><p>z-index:0;默认 1：更靠近我——层级</p><p>border-radius:50%;圆角</p><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mmm.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;plat&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.circle1</span>,<br><span class="hljs-selector-class">.circle2</span>,<br><span class="hljs-selector-class">.circle3</span>,<br><span class="hljs-selector-class">.circle4</span>,<br><span class="hljs-selector-class">.circle5</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.circle1</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: red;<br>    <span class="hljs-attribute">left</span> :<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.circle2</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: green;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">130px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-selector-class">.circle3</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: yellow;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">260px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.circle4</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: blue;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">65px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">70px</span>;<br>&#125;<br><span class="hljs-selector-class">.circle5</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: purple;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">195px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">70px</span>;<br>&#125;<br><span class="hljs-comment">/*居中五环必须居中容器*/</span><br><span class="hljs-selector-class">.plat</span>&#123;<br>    <span class="hljs-comment">/*border: 5px solid black;*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">186px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">380px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">190px</span>;<span class="hljs-comment">/*一半*/</span><br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">93px</span>;<span class="hljs-comment">/*一半*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九-两栏布局"><a href="#九-两栏布局" class="headerlink" title="(九)两栏布局"></a>(九)两栏布局</h2><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<span class="hljs-comment">/*黑的就能上去*/</span><br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*粉的右边*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcc</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<span class="hljs-comment">/*粉的让出来*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#123</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">如果这样：<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十-两个经典-bug"><a href="#十-两个经典-bug" class="headerlink" title="(十)两个经典 bug"></a>(十)两个经典 bug</h2><p>弥补不能解决</p><h3 id="margin-塌陷"><a href="#margin-塌陷" class="headerlink" title="margin 塌陷:"></a>margin 塌陷:</h3><p>垂直方向的 margin 父子元素是结合到一起的，他俩取最大值</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid red;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<span class="hljs-comment">/*不相对于父级往下走。只有比父级设置的margin还大，带着父级一起动，取最大值*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>不能用的解决方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid red;<span class="hljs-comment">/*因为缺一个棚子，有了此方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>专业手法</p><p>BFC——block format content(块级格式化上下文)：改变盒子的语法规则</p><p>overflow : hidden;溢出部分隐藏——引发新的问题：隐藏了</p><p>demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">75px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决：改变父级的渲染规则，让父级变成 BFC</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 针对需求选择</p><ol><li>父级加上 display: inline-block;</li><li>父级加上 position: absolute;</li><li>父级加上 float: left;或 right</li><li>父级加上 overflow : hidden</li></ol><h3 id="margin-合并"><a href="#margin-合并" class="headerlink" title="margin 合并"></a>margin 合并</h3><p>两个 demo 兄弟之间，垂直方向的 margin 是合并的，一个 100，一个 200，加起来才 200</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.box1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.box2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决：BFC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.box1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.box2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结</p><p>margin 塌陷：更改 CSS<br>margin 合并：更改 HTML CSS<br>但是，不能因为该 bug 加 html 结构，影响很大<br>不用解决 margin 合并：数学计算解决，多写点像素</p><h2 id="十一-浮动模型"><a href="#十一-浮动模型" class="headerlink" title="(十一)浮动模型"></a>(十一)浮动模型</h2><p>盒模型<br>层模型<br>浮动模型</p><p>（浮动）:left/right 元素站队</p><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*块级元素不能独占一行了*/</span><span class="hljs-comment">/**改为right顺序变为321/</span><br><span class="hljs-comment">    color: #fff;</span><br><span class="hljs-comment">    background-color: black;</span><br><span class="hljs-comment">    width: 100px;</span><br><span class="hljs-comment">    height: 100px;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>如果变多，1-9，left,在盒子里面变成九宫格；right,则 321 654 987</p><p>网页淘宝 app 展示项目——九宫格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*块级元素不能独占一行了*/</span><br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>浮动元素产生了浮动流（并不是简单地分层），所有产生了浮动流的元素，只有块级元素看不到他们（分层）， 产生了 BFC 的元素和文本类属性（inline 属性）的元素以及文本都能看到浮动元素（不分层）</p><p>清除浮动流的 clear：</p><p>现象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    <span class="hljs-comment">/*父级抱不住了：父级是块级元素，看不到浮动元素*/</span><br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>加上一个 p 元素，产生的浮动流影响在 p 身上，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="css">                <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是不能用，因为 html 不能随便添，结构不能顺便添</p><p>最优实现方式</p><p><strong>伪元素</strong>：元素结构存在，没写在 html 里面，可以被 CSS 操作，没有 html 结构，<strong>实现父级元素包住子集元素</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS">把标签里面的最前面的伪元素选出来<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123;&#125;，最后面<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span>&#123;&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;ChengGe&quot;</span>;<br>&#125;<br>伪元素是行级元素，so不能加宽高，要<span class="hljs-attribute">display</span>: inline-block;来改成块级元素<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br>还是没生效<br></code></pre></td></tr></table></figure><p>方法一：因为能清除浮动的是块级元素，所以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br>不能管用 So改为<br><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br>以上为清除浮动法<br></code></pre></td></tr></table></figure><p>方法二：所有产生了浮动流的元素，只有块级元素看不到他们，反之，能看到的有 BFC,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<br>    <span class="hljs-comment">/*display:inline-block*/</span><br>    <span class="hljs-comment">/*position: absolute;*/</span><br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-comment">/*以上三种触发了BFC*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 content 设置了 float : left——&gt;父级不能把她包住了，因为父级块级，块级元素看不到浮动元素<br>原理：产生了浮动流——解决：干掉浮动流<br>去掉 p 所受最后一个 content 的浮动流</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br><br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">border-top</span>:<span class="hljs-number">10px</span> solid green;<br>    <span class="hljs-attribute">clear</span> : both;<br>&#125;<br></code></pre></td></tr></table></figure><p>蹬开：border-top:0px solid green; 包住了，不管多少个，都在最后一个元素的位置撑开</p><p>但是凡是设置了 position：absolute；和 float：left/right；的元素，打内部把元素转换成 Inline-block——导致宽高由内容决定</p><p>演示 demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;把内部转换成inline-block<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>报纸布局 之前的浮动用于：文字环绕图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*就能实现*/</span><br>    <span class="hljs-comment">/*margin-right:10px*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个标准导航栏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;</span><br><span class="css">                <span class="hljs-attribute">font-family</span>: arial;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.list-item</span><span class="hljs-comment">/*空格*/</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="css">                <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">                <span class="hljs-comment">/*border: 1px solid black;*/</span></span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.list-item</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-comment">/*a行级元素，要变成块级元素，才能*/</span></span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">                <span class="hljs-attribute">display</span>: inline-block;<span class="hljs-comment">/*实现选择后全部包住*/</span></span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.list-item</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-comment">/*清除此处的浮动流，以免对后面产生影响——但凡写在他后面的都会排在他后面*/</span></span><br><span class="css">            <span class="hljs-selector-class">.nav</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">                <span class="hljs-attribute">display</span>: block;</span><br><span class="css">                <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>天猫<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>聚划算<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>天猫超市<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十二-文字溢出处理"><a href="#十二-文字溢出处理" class="headerlink" title="(十二)文字溢出处理"></a>(十二)文字溢出处理</h2><p>溢出容器，打点展示</p><p>1． 单行文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Web前端开发之HTML+CSS零基础教学，适合想入门前端开发的同学们。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br><span class="hljs-attribute">font-family</span>: arial;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现一行打点：三件套</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS">（<span class="hljs-number">1</span>）失去换行功能：<br><span class="hljs-attribute">white-space</span>: nowrap;<br>（<span class="hljs-number">2</span>）溢出部分不能展示：<br><span class="hljs-attribute">overflow</span>: hidden;<br>（<span class="hljs-number">3</span>）打点：<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure><p>2.多行文本</p><p>手写的 多行截断：溢出部分隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Web前端开发之HTML+CSS零基础教学，适合想入门前端开发的同学们。Web前端开发之HTML+CSS零基础教学，适合想入门前端开发的同学们<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">font-family</span>: arial;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么保证两行，其余文字隐藏：height 与 Line-height 倍数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">200px</span> <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;不能盛满就平铺<br>不让他平铺：<span class="hljs-attribute">background-repeat</span>: no-repeat;<br><span class="hljs-attribute">background-repeat</span>: repeat-x;//x轴平铺<br><span class="hljs-attribute">background-position</span> : x y;自己定位置。也能填<span class="hljs-attribute">background-position</span> : left top/center;<br></code></pre></td></tr></table></figure><p>淘宝案例 实现网速不好，展现文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank_&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">190px</span> <span class="hljs-number">90px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大型网站，网速不行，只展示 html——怎么实现只有 html<br>图片代替文字：去掉 CSS，一样展示；有 CSS，不影响图片</p><p>方法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank_&quot;</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">190px</span> <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">190px</span>;<span class="hljs-comment">/*首行缩进容器的宽*/</span><br>    <span class="hljs-attribute">white-space</span>: nowrap;<span class="hljs-comment">/*不换行*/</span><br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><p>盒子有三部分，加上背景颜色，padding 变色，背景图片也能加载 padding 上，只是内容不能写在 padding 上。So 有 CSS 就没有文字</p><p>淘宝实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank_&quot;</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">190px</span> <span class="hljs-number">90px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十三-淘宝项目提示"><a href="#十三-淘宝项目提示" class="headerlink" title="(十三)淘宝项目提示"></a>(十三)淘宝项目提示</h2><p>行级元素只能嵌套行级元素<br>块级元素可以嵌套任何元素（p 特殊） （p 标签不能套块级元素）</p><p>不允许 1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不允许 2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.淘宝两侧的留白：屏幕缩小，留白减少，内容不变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;!-- 父子级都是块级 --&gt;<br>*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#123</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<span class="hljs-comment">/*auto:自适应*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>文本类属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS">inline block inline-block<br>inline inline-block——文本类元素：凡是带有inline的元素，都有文本类特点<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML">eg:<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>与<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>相差一个文本分隔符<br>图片同理<br></code></pre></td></tr></table></figure><p>position : absolute; float : left/right;一旦设置了一个，元素会在内部转换成 display : inline-block;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    啦啦啦,<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>呵呵<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一行文本里面，文本底对齐，文本图片同理<br>但是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>345<br><span class="hljs-comment">&lt;!-- 如果span里面有文字，就和文本底对齐，没有文字，就和内容对齐 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>调整对齐线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">vertical-align</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><h2 id="十四-公司实战项目"><a href="#十四-公司实战项目" class="headerlink" title="(十四)公司实战项目"></a>(十四)公司实战项目</h2><p>基教授贴吧项目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>姬教授贴吧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to)<br>        color:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.8</span>);<br><br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>        <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">11px</span>;<br>        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>();<br>        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>        <span class="hljs-comment">/*vertical-align: -1px;/*控制台调*/</span><br>    &#125;<br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">6.5px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">11.5px</span>;<br>        <span class="hljs-attribute">float</span>: right;<br>        <span class="hljs-comment">/*margin-top: 3px;*/</span><br>        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><p>阿里巴巴笔试题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content1&quot;</span>&gt;</span>wenzi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content2&quot;</span>&gt;</span>wenzi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">320px</span>;<br>    <span class="hljs-comment">/*border: 2px solid black;*/</span><br>&#125;<br><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.img</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>&#125;<br><span class="hljs-selector-class">.content1</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;<br>&#125;<br><span class="hljs-selector-class">.content2</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.2em</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML4.0 基础</title>
    <link href="/2019/10/14/HTML4.0%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/10/14/HTML4.0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="(一)简介"></a>(一)简介</h2><p>专业素养：超文本标记语言 Hyper Text Markup Language</p><h2 id="二-HTML-标签"><a href="#二-HTML-标签" class="headerlink" title="(二)HTML 标签"></a>(二)HTML 标签</h2><p>1.根标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.段落标签:只能有一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.h 标签 独成一段，逐次减少。更改字体大小，加粗字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>——<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.加粗字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.原价 50 元</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7.地址标签 &lt;——&gt;p+em:成段展示和斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure><p>8.容器 ，捆绑操作，独行展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>9.没作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>10.单标签</p><p>(1). 回车：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2).水平线：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(3).标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br></code></pre></td></tr></table></figure><p>11.有序列表</p><p>(1).喜欢看的电影</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>marvel<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>速度与激情8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>返老还童<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2)五种排序方式:只能这五种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;I&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>倒序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">reversed</span>=<span class="hljs-string">&quot;”&quot;</span> <span class="hljs-attr">reversed</span>”&gt;</span><br>  从第几个开始排序：<br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;”2”&quot;</span>&gt;</span><br>    从2开始排序<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;”2”&quot;</span>&gt;</span><br>      b(第几个)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>12.无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（1）实心圆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;disc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2） 方块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）圆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>天猫<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>聚划算<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>天猫超市<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>14.图片</p><p>（1）网上 url</p><p>​ 新标签页中打开图，拷贝网址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）本地绝对路径，相对路径</p><p>相对路径：直接写 a.jpg 就行</p><p>D:/A/B/a</p><p>D:/A/B/b</p><p>绝对路径：写全 D:/A/B/b/c</p><p>D:/A/B/a</p><p>D:/A/B/b/c</p><p>alt：图片占位符 挽回错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px;&quot;</span>  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;这是什么&quot;</span> <span class="hljs-attr">title:</span>&quot;图片提示符&quot;&gt;</span><br></code></pre></td></tr></table></figure><ol start="15"><li>a 标签功能</li></ol><p>（1）超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>新标签页中打开：<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;”_blank”&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）锚 anchor</p><p>demo1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: green;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo1&quot;</span>&gt;</span>find demo1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo2&quot;</span>&gt;</span>find demo2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: green;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:block;position:fixed;bottom:100px;right:100px;border:1px solid black;height:50px;width:200px;background-color:#fcc;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo1&quot;</span>&gt;</span>find demo1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:block;position:fixed;bottom:150px;right:100px;border:1px solid black;height:50px;width:200px;background-color:#ffc;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo2&quot;</span>&gt;</span>find demo2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）打电话，发邮件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:1669248141@qq.com&quot;</span>&gt;</span>发邮件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:19811715506&quot;</span>&gt;</span>打电话<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）协议限定符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:while(1)&#123;alert(&#x27;让你手欠&#x27;)&#125;&quot;</span>&gt;</span>点我呀<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>16.form 表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>能发送数据<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 提取密码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsBytagName(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(div.value);<br></code></pre></td></tr></table></figure><p>大型公司密码加密：保密协议 md5 不可破解</p><p><strong>没有真正的安全</strong></p><p>2G 网：安全性低，抓包工具</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        你们喜欢的明星？<br>        1.mike<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>        2.tom<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>        3.tilla<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请输入用户名 demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #999&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;if(this.value==&#x27;请输入用户名&#x27;)&#123;this.value=&#x27;&#x27;;this.style.color=&#x27;#424242&#x27;&#125;&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;if(this.value==&#x27;&#x27;)&#123;this.value=&#x27;请输入用户名&#x27;;this.style.color=&#x27;#999&#x27;&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span></span><br><span class="hljs-tag">               &lt;/<span class="hljs-attr">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">1.mike<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>2.tom<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot; checkbox &quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>3.tilla<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot; checkbox &quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>企业开发经验 : 性别：（互联网思维：用户懒）用户体验，用户粘性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>choose your sex<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        male:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>        female:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下拉菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>  province<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>beijing<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>tianjin<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>加上value,就会以value为准<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> province<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>beijing<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>tianjin<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三-编码"><a href="#三-编码" class="headerlink" title="(三)编码"></a>(三)编码</h2><p>防止乱码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>charset:编码字符集<br>编码字符集：<br>1.gb2132 中国国家标准第 2132 条：只能识别简体，不认识繁体<br>2.gbk 国家标准扩展版本 只包含繁体（亚洲也有）<br>3.unicode 万国码<br>4.utf-8 8 比特版本，还有 16 比特的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>lang=”en”：告诉搜索引擎爬虫，我们的网站是关于什么内容的<br>除了英文，其他都汉语拼音表示<br>关于百度搜索：关键字协议 IP 段锁定 生物行为</p><p>SEO 搜索引擎爬虫：搜素引擎优化技术</p><p>网站靠前概率更大</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;服装&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;这是一个你穿了就不想拖的衣服&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3 个 HTML 编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">打空格：实际上是英文单词文字分隔符 1.<span class="hljs-symbol">&amp;nbsp;</span>==空格 2.打印<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>:<span class="hljs-symbol">&amp;lt;</span>div<span class="hljs-symbol">&amp;gt;</span> 3.回车 <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四）三个单标签"><a href="#四）三个单标签" class="headerlink" title="(四）三个单标签"></a>(四）三个单标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五-专业知识"><a href="#五-专业知识" class="headerlink" title="(五)专业知识"></a>(五)专业知识</h2><p>主流浏览器及其内核</p><p>要求</p><p>1.市场份额</p><p>2.独立研发的内核</p><table><thead><tr><th>IE</th><th>trident</th></tr></thead><tbody><tr><td>Firefox</td><td>Gecko</td></tr><tr><td>Google chrome</td><td>Webkit</td></tr><tr><td>Safari</td><td>Webkit/blink</td></tr><tr><td>Opera</td><td>presto</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Front end article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
