<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端网络</title>
    <link href="/2021/10/15/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/10/15/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-互联网起源"><a href="#1-互联网起源" class="headerlink" title="1.互联网起源"></a>1.互联网起源</h1><p>1969年起源  加利福尼亚大学洛杉矶分校   斯坦福大学    加利福尼亚大学    犹他州大学<br>互联网——Internet（因特网、英特网），网际网路<br>1989年，欧洲粒子物理研究所——协议（格式）WWW（world wide web)万维网<br>1991年，普及应用</p><blockquote><p>查看ip：</p></blockquote><ul><li>mac：ifconfig  </li><li>window：pconfig</li></ul><p>图灵：计算机科学之父<br>冯诺依曼：计算机之父<br>手机和平板也算计算机——冯诺依曼式计算机</p><blockquote><p>冯诺依曼式计算机一一冯诺依曼（面试题）</p></blockquote><p>运算器:<br>CPU ,GPU(显卡)<br>存储器:<br>内存（断电数据清空,读写速度快)，<br>硬盘（辅存):（数据可以持久化，读写速度，相对较慢)<br>控制器:<br>主板上的一些器件<br>输入设备:<br>键盘，鼠标，麦克风，网口<br>输出设备:<br>显示器，耳机，网口</p><h1 id="2-局域网"><a href="#2-局域网" class="headerlink" title="2. 局域网"></a>2. 局域网</h1><blockquote><p>局域网</p></blockquote><p>局域网：跨局域网不能访问<br>邓哥和成哥连接共同的路由器依旧不能互相访问？——ip<br>IP地址格式：分为四个段：xxx.xxx.xxx.xxx。每个段0-255，每个段都是由8个0/1组成的。<br>IP地址分类：一个IP地址分为两个部分：网络ID， 主机ID<br>A类：0.0.0.0-127.255.255.255（一个网络能有1600+万台）<br>B类：128.0.0.0-191.255.255.255<br>C类：192.0.0.0-223.255.255.255（私有网络）<br>D类：多播地址<br>E类：<br>​</p><p>127.0.0.1代表本机<br>0.0.0.0代表不知道ip，默认打到自己本机上<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240678545-3fd64b1a-8ec2-4b73-909a-4392db20cda5.png#height=190&id=Mn49N&margin=%5Bobject%20Object%5D&name=image.png&originHeight=297&originWidth=900&originalType=binary&ratio=1&size=38535&status=done&style=none&width=575" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240688781-0958dc55-d6ae-49d7-b15c-8e91a5933735.png#height=181&id=zVDYP&margin=%5Bobject%20Object%5D&name=image.png&originHeight=281&originWidth=846&originalType=binary&ratio=1&size=32357&status=done&style=none&width=545" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240702157-219d2898-adee-4d5e-9361-84e99a24e3e6.png#height=349&id=XwIc0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=485&originWidth=762&originalType=binary&ratio=1&size=44091&status=done&style=none&width=548" alt="image.png"></p><h1 id="3-ip地址与公网"><a href="#3-ip地址与公网" class="headerlink" title="3. ip地址与公网"></a>3. ip地址与公网</h1><blockquote><p>ip地址</p></blockquote><p>邓哥家不能向成哥家发信息，会发到自己的计算机上。因为是路由器转发出来的是私有网络。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240741148-1dec3f16-49ec-4ac4-8a06-e7283dc9b9c6.png#height=379&id=vPlFC&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=766&originalType=binary&ratio=1&size=63935&status=done&style=none&width=554" alt="image.png"><br>公网图示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240757627-86809967-3f6f-48b3-97c9-b4ed7498306d.png#height=392&id=cX3C9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=455&originWidth=557&originalType=binary&ratio=1&size=28420&status=done&style=none&width=480" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240767180-6dfa82e2-603e-4a39-a954-5bd4e5fac96d.png#height=468&id=VYuK4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=598&originWidth=783&originalType=binary&ratio=1&size=94067&status=done&style=none&width=612.5" alt="image.png"></p><h1 id="4-域名和DNS解析过程"><a href="#4-域名和DNS解析过程" class="headerlink" title="4. 域名和DNS解析过程"></a>4. 域名和DNS解析过程</h1><blockquote><p>域名与DNS解析</p></blockquote><p><a href="http://www.baidu.com叫做域名/">www.baidu.com叫做域名</a><br>问:能通过域名直接访问到一台机器吗?答:不可以的。网络只认得ip地址<br>实际上时用域名和IP形成对应关系。<br>首先，计算机是不知道域名对应的IP的。<br>问路由器，如果路由器认识这个域名，就返回一个IP，然后计算机访问这个IP。如果路由器不认识，他就问上一层路由器。<br>如果问到了城市这个级别的路由器的时候，DNS服务器。<br>如果DNS服务器不认识这个域名，继续向上级DNS服务器查找。<br>互联网建立的时候，13台总的DNS服务器。</p><blockquote><p>当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么?</p></blockquote><p>比如输入的是123.xyz</p><ol><li>看浏览器的缓存。</li><li>本机host。</li></ol><p>C:windows/system32/drivers/etc/host<br>127.0.0.1默认指的是当前这台机器 localhost<br>0.0.0.0：不知道IP地址，默认自己本机</p><ol start="3"><li>家里路由器</li><li>上级路由、城市的LDNS服务器</li><li>继续向上级的DNS服务器找。</li><li>globalDNS服务器。(一定有)</li></ol><p>在浏览器地址栏中输入一个页面地址，按下回车键后发生了什么？</p><ol><li><p>浏览器将url地址补充完整：没有书写协议，添加上协议</p></li><li><p>浏览器对url地址进行url编码：如果url地址中出现非ASCII字符，则浏览器会对其进行编码</p></li><li><p>浏览器构造一个没有消息体的GET请求，发送至服务器，等待服务器的响应，此时浏览器标签页往往会出现一个等待的图标</p></li><li><p>服务器接收到请求，将一个HTML页面代码组装到消息体中，响应给浏览器</p></li><li><p>浏览器拿到服务器的响应后，丢弃掉当前页面，开始渲染消息体的html代码。浏览器之所以直到这是一个html代码，是因为服务器的响应头指定了消息类型为text/html</p></li><li><p>浏览器在渲染页面的过程中，发现有其他的嵌入资源，如CSS、JS、图片等</p></li><li><p>浏览器使用不阻塞渲染的方式，重新向服务器发送对该资源的请求，拿到响应结果后根据Content-Type做相应处理</p></li><li><p>当所有的资源都已下载并处理后，浏览器触发window.onload事件</p><blockquote><p>答案：</p></blockquote></li><li><p> 客户端发给DNS（域名解析服务器）服务器 查询对应的ip (应用层) </p></li><li><p> 客户端向ip对应的服务器进行建立连接（三次握手） （建立连接的发起是在传输层） </p></li><li><p> 建立好连接之后 进行数据传递 传输层 </p></li><li><p> 数据传递完成 断开连接 （四次挥手）传输层 </p></li><li><p> 渲染页面 —— 文件按行解析执行 </p></li><li><p> 解析执行的过程中生成DOM树 接着根据css 生成CSS树 </p></li><li><p> 合并成为 渲染树 </p></li><li><p> 根据渲染树开始渲染页面 展示出来 </p></li><li><p> 遇到script标签（会执行script标签里面的代码）会阻碍后面的代码执行 </p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1627800315472-613e2b4b-2e70-443f-9b7f-d0ea816eec15.png#clientId=ufeb47678-109f-4&from=paste&height=355&id=u82b783b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=710&originWidth=1219&originalType=binary&ratio=1&size=236462&status=done&style=none&taskId=u70557be3-c6bd-4330-b95f-4eaa33bafbf&width=609.5" alt="image.png"></p><blockquote><p>思考：</p></blockquote><p>本机host不缓存，没有权限往里面写，用户自己可以写，可以篡改域名，浏览器缓存<br>所以输入url按下回车：至少往外发出2个信息</p><ol><li>通过域名找到ip </li><li>然后访问ip<h1 id="5-五层网络模型"><a href="#5-五层网络模型" class="headerlink" title="5. 五层网络模型"></a>5. 五层网络模型</h1><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1619599717527-bb15ce85-5673-4e4f-bed1-969031916b9c.png#clientId=u1c2533ba-82f3-4&from=paste&height=419&id=u7280d8f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=580&originWidth=468&originalType=binary&ratio=1&size=56608&status=done&style=none&taskId=u931aa44a-1a8d-4300-8c19-56165630864&width=338" alt="image.png"><br>物理层传输方式：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240859648-db487d9b-8d11-42ea-b056-f6752d3645e6.png#height=200&id=TzjbL&margin=%5Bobject%20Object%5D&name=image.png&originHeight=226&originWidth=634&originalType=binary&ratio=1&size=15473&status=done&style=none&width=562" alt="image.png"><br>UDP与TCP区别：<br>TCP协议：安全可靠，发出请求在线等<br>UDP协议：发出请求不管了<br>​</li></ol><p>url不一定都展示在地址栏里面</p><p><strong>发出去的是http协议，伴随着TCP,IP协议</strong><br>比如要想传送一个hello，但是根据http协议，我不能直接传，需要有一个格式<br>http协议格式：</p><blockquote><p>HTTP协议分为两个部分：</p></blockquote><p>请求：Request<br>请求头(Request Headers)<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1619600955796-1ca0b2f8-8094-4094-8f5b-adb30962203c.png#clientId=u1c2533ba-82f3-4&from=paste&height=135&id=gDVBG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=270&originWidth=1110&originalType=binary&ratio=1&size=39860&status=done&style=none&taskId=uad16198d-cb3b-45e3-bf5b-c1ae25821f2&width=555" alt="image.png"><br>请求头：<strong>请求方式 路径 协议版本</strong><br>两种请常用的请求方式：GET POST，还有HEAD, PUT, DELETE<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240883003-4ac4cb39-83c1-4e1d-86d1-62a8188f69f9.png#height=29&id=KAebj&margin=%5Bobject%20Object%5D&name=image.png&originHeight=46&originWidth=670&originalType=binary&ratio=1&size=14851&status=done&style=none&width=429" alt="image.png"><br>响应：Response<br>要想解析hello，要经过层层包装加密（自上而下），层层解析（自下而上）的过程<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240904399-7acdc09b-7113-4b94-a19f-451dee3d7453.png#height=557&id=bNj28&margin=%5Bobject%20Object%5D&name=image.png&originHeight=557&originWidth=769&originalType=binary&ratio=1&size=53685&status=done&style=none&width=769" alt="image.png"></p><h1 id="6-简述HTTP协议"><a href="#6-简述HTTP协议" class="headerlink" title="6. 简述HTTP协议"></a>6. 简述HTTP协议</h1><blockquote><p>请求</p></blockquote><p>两个部分：请求头、请求体<br>HTTP源码格式：POST/path?a=1&amp;b=2 HTTP1.1<br>Request Headers</p><ul><li>Host: <a href="http://www.baidu.com/">www.baidu.com</a></li><li>Connection: keep-alive</li><li>User-Agent: asdasdasd</li><li>Cookie</li></ul><p>GET特点：web环境下的http ，请求的参数都在url里</p><blockquote><p>响应：</p></blockquote><p>两个部分：响应头、数据体<br>响应头：协议版本 状态码 message<br>属性：值<br>Cache-Control:max-age=864000 在一天内相同的请求就会取缓存</p><h1 id="7-GET-POST区别"><a href="#7-GET-POST区别" class="headerlink" title="7. GET POST区别"></a>7. GET POST区别</h1><ol><li>是基于什么前提的?如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议。</li></ol><p>GET和POST几乎没有什么区别，只有名字不一样。</p><ol start="2"><li>如果是基于RFC规范的。（RFC组织来决定是否收纳一些协议规范）</li></ol><p>（1）理论上的(Specification) : GET和POST具有相同语法的，但是有不同的语义。get是用来获取数据的，post是用来发送数据的，其他方面没有区别。<br>（2）实现上的(lmplementation) ︰各种浏览器（web环境下的），就是这个规范的实现者。<br>所以才有了常见的那些不同</p><ol><li>GET的数据在URL是可见的。POST请求不显示在URL中。</li><li>GET对长度是有限制的，POST长度是无限的。</li><li>GET请求的数据可以收藏为书签，POST请求到的数据不可收藏为书签。</li><li>GET请求后，按后退按钮、刷新按钮无影响，POST数据会被重新提交。</li><li>GET编码类型:application/x-www-form-url，</li></ol><p>POST的编码类型:有很多种。<br>encodeapplication/x-www-form-urlencoded加密的<br>multipart/form-data(传输文件的一些信息:POST 这种就可以发送文件)</p><ol start="6"><li>GET历史参数会被保留在浏览器里，POST不会保存在浏览器中的。</li><li>GET只允许ASCll。POST没有编码限制，允许发二进制的。</li><li>GET与POST相比，GET安全性较差，GET所发的数据是URL的一部分，POST都在数据体里。但是<strong>HTTP协议是种明文协议，都不安全。</strong></li></ol><p>纠正想法：地址栏！=URL，URL不一定都展示在地址栏里面</p><p>请求方式 ： 为了告知服务器请求意图是什么</p><ul><li> GET : 获取资源 </li><li> POST：传输实体主体(详细信息) </li><li> PUT： 传输文件  （使用的场景： 1. 传递文件  2. 修改实体数据） </li><li> DELETE ： 删除文件 </li><li> HEAD： 获得报文首部 （不传递里面的数据） </li><li> OPTIONS：询问支持的方式 </li></ul><p>详细版：<br>1 GET 请求指定的页面信息，并返回实体主体。<br>2 HEAD 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头<br>3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。    POST 请求可能会导致新的资源的建立和/或已有资源的修改。<br>4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>5 DELETE 请求服务器删除指定的页面。<br>6 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。<br>7 OPTIONS 允许客户端查看服务器的性能。<br>8 TRACE 回显服务器收到的请求，主要用于测试或诊断。<br>9 PATCH 是对 PUT 方法的补充，用来对已知资源进行局部更新 。</p><p>get 和post的区别</p><ul><li> get请求会把数据拼接在地址栏当中  post不会， 会放在请求体当中 </li><li> get请求的数据量较小（地址栏大小限制）大约为4kb  post请求的数据量较大 也有限制 5m </li><li> get请求会有缓存（数据也会被缓存下来）  post不会 </li><li> post相对安全 </li><li> 编码类型： get请求数据只能用ASCII编码  post请求没有限制 </li></ul><p>POST一般可以发送什么类型的文件，数据处理的问题</p><ul><li>文本、图片、视频、音频等都可以</li><li>text/image/audio/ 或 application/json 等<h1 id="8-cookie与session"><a href="#8-cookie与session" class="headerlink" title="8. cookie与session"></a>8. cookie与session</h1><blockquote><p>Cookie 与 Session</p></blockquote></li></ul><ol><li>如果我们用JS的变量来存数据，那么在页面关闭的时候，数据就消失了。</li><li>保持登录状态是怎么做到的呢?</li></ol><p>按照正常的HTTP协议来说，是做不到的。因为HTTP协议，上下文无关协议。</p><ol start="3"><li>所以说前端页面上，有可以持久化存储数据的东西。一旦登录成功，我就记载在这个里面。</li></ol><p>Cookie是有限制的，自己只能往自己的域名下种cookie。<br>Cookie是存在浏览器里的，不是存在某个页面上的。是可以长期存储的。Cookie即使是保存在浏览器里，也    是存放在不同的域名下的。</p><blockquote><p>自动登录过程</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617240995705-ece7a77a-7b1b-4ea8-9e2d-7dc20f748d66.png#height=362&id=NlrvL&margin=%5Bobject%20Object%5D&name=image.png&originHeight=398&originWidth=771&originalType=binary&ratio=1&size=124879&status=done&style=none&width=702" alt="image.png"> <img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617241009887-b46a8f41-8181-4104-8a87-00f76f662a74.png#height=493&id=uO6Ng&margin=%5Bobject%20Object%5D&name=image.png&originHeight=493&originWidth=709&originalType=binary&ratio=1&size=81742&status=done&style=none&width=709" alt="image.png"><br>不同JS文件不能互相访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(a);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自己只能往自己的域名下种cookie；<br>cookie可以跨页面，关闭页面不会消失，不能跨域存储<br>cookie信息存在浏览器上，session信息存在服务器上</p><h1 id="9-发送网络请求"><a href="#9-发送网络请求" class="headerlink" title="9. 发送网络请求"></a>9. 发送网络请求</h1><p>方式：</p><ol><li><p>在浏览器直接输入网址（无法用代码控制）</p></li><li><p>location.herf=”url”，可以发出网络请求，但是页面会跳转（页面会跳转）</p></li><li><p>带有src属性的标签。请求是可以发出的，服务端可以处理，也可以返回，但是返回之后能否被应用还要看浏览器       img，script（页面无法处理返回结果）</p></li><li><p>带有href属性的标签，请求是可以发出的，服务端可以处理，也可以返回，但是返回之后能否被应用还要看浏览器 link（页面无法处理返回结果）</p></li><li><p>带有action属性的标签。比如form表单，也可以向后端发出网络请求，但是form表单发出请求后也会页面跳转（页面会跳转）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>希望有一种方式，可以用代码控制，页面不会跳转，服务器返回的结果我可以用js继续处理</p></li><li><p><strong>ajax</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求要素</span><br><span class="hljs-comment">// (1).请求方式:get post</span><br><span class="hljs-comment">// (2).url</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<span class="hljs-comment">// 兼容IE6</span><br>&#125;<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjax&quot;</span>);<br>xhr.send();<span class="hljs-comment">// No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.跨域</span><br></code></pre></td></tr></table></figure><h1 id="10-跨域"><a href="#10-跨域" class="headerlink" title="10. 跨域"></a>10. 跨域</h1><blockquote><p>跨域发生在浏览器(接受的时候)，不是服务器</p></blockquote></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617241076884-9a8719ed-8008-41af-9734-e5a6c9849f6b.png#height=397&id=We9ml&margin=%5Bobject%20Object%5D&name=image.png&originHeight=470&originWidth=757&originalType=binary&ratio=1&size=112936&status=done&style=none&width=640" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617241095470-6e9e0a78-96e5-4bc1-9f82-dc99318bde58.png#height=491&id=XGhHW&margin=%5Bobject%20Object%5D&name=image.png&originHeight=573&originWidth=796&originalType=binary&ratio=1&size=195722&status=done&style=none&width=682" alt="image.png"><br>演示：<br>新的接口，后端设置了Access-Control-Allow-Origin，就可以跨域了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<br>&#125;<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjaxCrossOrigin&quot;</span>);<span class="hljs-comment">//初始化建立连接</span><br></code></pre></td></tr></table></figure><p><strong>JSONP</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<br>&#125;<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonP?callback=asd&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="11-页面正确打开方式"><a href="#11-页面正确打开方式" class="headerlink" title="11. 页面正确打开方式"></a>11. 页面正确打开方式</h1><p><strong>两个概念</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617241040688-6696a2b2-36e0-436f-bbd7-555ad5aadfe7.png#height=518&id=YmOlk&margin=%5Bobject%20Object%5D&name=image.png&originHeight=538&originWidth=789&originalType=binary&ratio=1&size=144314&status=done&style=none&width=760" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1617241062029-f5de5e19-1d7e-4af3-b037-69afa699712d.png#height=234&id=A719y&margin=%5Bobject%20Object%5D&name=image.png&originHeight=236&originWidth=767&originalType=binary&ratio=1&size=69606&status=done&style=none&width=759" alt="image.png"></p><blockquote><p>三种编辑器的server插件安装</p></blockquote><h1 id="12-原生JS发送-ajax"><a href="#12-原生JS发送-ajax" class="headerlink" title="12. 原生JS发送 ajax"></a>12. 原生JS发送 ajax</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(xhr.readyState);<span class="hljs-comment">//刚创建时候readyState为0</span><br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjaxCrossOrigin&quot;</span>);<br><span class="hljs-built_in">console</span>.log(xhr.readyState);<span class="hljs-comment">//1</span><br>xhr.send();<span class="hljs-comment">//执行发送</span><br><span class="hljs-built_in">console</span>.log(xhr.readyState);<span class="hljs-comment">//1,发送之后状态没变</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//当readystate变化时候，就执行</span><br>  <span class="hljs-comment">// readyState == 4表示请求已完成，已经接收到数据</span><br>  <span class="hljs-built_in">console</span>.log(xhr.readyState);<br>&#125;<br></code></pre></td></tr></table></figure><p>readyState == 4表示请求已完成，已经接收到数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>    alert(xhr.responseText);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>HTTP状态码</p></blockquote><p>2表示成功<br>3表示重定向(迁移的新地址)<br>4表示客户端错误,404页面没找到。<br>5表示服务端错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//readyState == 4表示请求完成，已经接收到数据。</span></span><br><span class="javascript">    <span class="hljs-comment">//status == 200  网络请求，结果都会有一个状态码。来表示这个请求是否正常</span></span><br><span class="javascript">    <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>).innerText = xhr.responseText;<span class="hljs-comment">// 可以展示在页面上</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText);<span class="hljs-comment">// 转成JSON</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上方法不规范：网速很快，send瞬间返回结果，function还没完成，会返回null。<br>改进：send()放在后面</p><blockquote><p>总结：原生JS发送ajax</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHttp&quot;</span>);<span class="hljs-comment">//兼容IE6</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(xhr.readyState);<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testAjaxCrossOrigin&quot;</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">console</span>.log(xhr.readyState);<br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>).innerText = xhr.responseText;<br>    <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText);<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;<br>&#125;<br>xhr.send();<span class="hljs-comment">//如果open第三个参数传true，或者不传，为异步模式。会导致后面的同步代码先执行。</span><br><span class="hljs-comment">// 如果传false，为同步模式。</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;====&quot;</span>);<span class="hljs-comment">// 先执行的</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;+++&quot;</span>);<span class="hljs-comment">// 先执行的</span><br></code></pre></td></tr></table></figure><p>在计算机的世界里，异步与同步和现实世界中是相反的。<br>在计算机的世界里，同步表示串行。异步表示同时进行。可以理解为同线程和异线程。</p><h1 id="13-JSONP使用与特性"><a href="#13-JSONP使用与特性" class="headerlink" title="13. JSONP使用与特性"></a>13. JSONP使用与特性</h1><p>jsonp格式哪里特殊?</p><ol><li>发送的时候，会带上一个参数callback(回调)</li><li>返回的结果不是json</li><li>callback的名 + ( + json + );</li><li>jsonp跨域，只能使用get方法，如果我们设置的是post方法，jquery会自动转为get方法。</li></ol><p>是不是在jsonp里面我只能使用get方法？是不是我设置的post方法都会转为get方法？<br>不是。jquery会先判断是否同源，如果同源，那么设置的是get就是get，设置的post就是post。如果不是同源，无论设置的什么，都改为get.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="14-JSONP原理"><a href="#14-JSONP原理" class="headerlink" title="14. JSONP原理"></a>14. JSONP原理</h1><p><strong>因为我想从一个接口获取一个数据，但是这个接口和当前页面不是同源的。（也就是跨域了）。但是这个接口是支持JSONP的。可以用 script标签，有src属性，所以可以发出网络请求</strong><br><strong>script标签，虽然可以引用其他域的资源，浏览器不限制。但是，浏览器会将返回的内容，作为js代码执行。</strong><br><strong>如果访问：</strong><a href="https://developer.duyiedu.com/edu/testJsonp?callback=asd">https://developer.duyiedu.com/edu/testJsonp?callback=asd</a><br><strong>把 asd({“status”:”ok”,”msg”:”Hello! There is DuYi education!”}) 作为JS代码执行：相当于调用了asd方法，传入了一个json对象作为参数。但是asd is not defined。这时候如果定义了asd函数，则执行该函数。另外，asd函数定义的时候可以传一个参数，这个参数就是服务器的返回结果。虽然服务器返回的是asd({“status”:”ok”,”msg”:”Hello! There is DuYi education!”}) ，但是经过了asd函数，所以最终返回{“status”:”ok”,”msg”:”Hello! There is DuYi education!”}</strong><br><strong>​</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asd</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;asd执行&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://developer.duyiedu.com/edu/testJsonp?callback=asd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>JSONP原理：</strong></p></blockquote><p><strong>1. 判断请求与当前页面的域，是否同源，如果同源则发送正常的ajax，就没有跨域的事情了。</strong><br><strong>2. 如果不同源，生成一个script标签</strong><br><strong>3. 生成一个随机的callback名字，还得创建一个名为这个的方法。</strong><br><strong>4. 设置script标签的src，设置为要请求的接口。</strong><br><strong>5. 将callback作为参数拼接在后面。</strong><br><strong>============以上是前端部分================</strong><br><strong>6. 后端接收到请求后，开始准备要返回的数据</strong><br><strong>7. 后端拼接数据，将要返回的数据用callback的值和括号包裹起来</strong><br>**             例如：callback=asd123456，要返回的数据为{“a”:1, “b”:2},**<br>**             就要拼接为：asd123456({“a”:1, “b”:2});**<br><strong>8. 将内容返回。</strong><br><strong>============以上是后端部分================</strong><br><strong>9. 浏览器接收到内容，会当做js代码来执行。</strong><br><strong>10. 从而执行名为asd123456的方法。这样我们就接收到了后端返回给我们的对象。</strong></p><blockquote><p>封装JSONP</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = &#123;<br>  <span class="hljs-attr">ajax</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> url = options.url;<br>    <span class="hljs-keyword">var</span> type = options.type;<br>    <span class="hljs-keyword">var</span> dataType = options.dataType;<br>    <span class="hljs-comment">//判断是否同源（协议，域名，端口号）</span><br>    <span class="hljs-comment">//获取目标url的域</span><br>    <span class="hljs-keyword">var</span> targetProtocol = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//目标接口的协议</span><br>    <span class="hljs-keyword">var</span> targetHost = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//目标接口的host，host是包涵域名和端口的</span><br>    <span class="hljs-comment">//如果url不带http，那么访问的一定是相对路径，相对路径一定是同源的。</span><br>    <span class="hljs-keyword">if</span> (url.indexOf(<span class="hljs-string">&quot;http://&quot;</span>) == <span class="hljs-number">0</span> || url.indexOf(<span class="hljs-string">&quot;https://&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">var</span> targetUrl = <span class="hljs-keyword">new</span> URL(url);<br>      targetProtocol = targetUrl.protocol;<br>      targetHost = targetUrl.host;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 否则同源</span><br>      targetProtocol = location.protocol;<br>      targetHost = location.host;<br>    &#125;<br>    <span class="hljs-comment">//首先判断是否为jsonp，因为不是jsonp不用做其他的判断，直接发送ajax</span><br>    <span class="hljs-keyword">if</span> (dataType == <span class="hljs-string">&quot;jsonp&quot;</span>) &#123;<br>      <span class="hljs-comment">//要看是否同源</span><br>      <span class="hljs-keyword">if</span> (location.protocol == targetProtocol &amp;&amp; location.host == targetHost) &#123;<span class="hljs-comment">//表示同源</span><br>        <span class="hljs-comment">//此处省略。因为同源，jsonp会当做普通的ajax做请求</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不同源，跨域</span><br>        <span class="hljs-comment">//随机生成一个callback</span><br>        <span class="hljs-keyword">var</span> callback = <span class="hljs-string">&quot;cb&quot;</span> + <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1000000</span>);<br>        <span class="hljs-comment">//给window上添加一个方法</span><br>        <span class="hljs-built_in">window</span>[callback] = options.success;<br>        <span class="hljs-comment">//生成script标签。</span><br>        <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>);<br>        <span class="hljs-keyword">if</span> (url.indexOf(<span class="hljs-string">&quot;?&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//表示已经有参数了</span><br>          script.src = url + <span class="hljs-string">&quot;&amp;callback=&quot;</span> + callback;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//表示没有参数</span><br>          script.src = url + <span class="hljs-string">&quot;?callback=&quot;</span> + callback;<br>        &#125;<br>        script.id = callback;<br>        <span class="hljs-built_in">document</span>.head.appendChild(script);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//http://developer.duyiedu.com/edu/testJsonp?callback</span><br>$.ajax(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<span class="hljs-comment">// 成功后的回调</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="15-HTTP状态码"><a href="#15-HTTP状态码" class="headerlink" title="15. HTTP状态码"></a>15. HTTP状态码</h1><blockquote><p>MDN更标准的解析</p></blockquote><ol><li> 200  任何以2开头的请求成功并且后台服务器已经返回结果 </li><li> 301 以3开头的都代表重令项   301永久性重定向 </li><li> 302  临时重定向 </li><li> 303  重定向  确认了请求方式，必须是GET方法 </li><li> 400 错误请求（原因可能是传递的参数类型不对或参数不对）</li><li> 403  以4开头的代表客户端  被服务器禁止访问资源:  （没有权限） </li><li> 404  页面没有找到 （地址错误） </li><li> 503  服务器错误（服务器宕机了或者代码有误） </li></ol><h1 id="16-什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个jsonp原理"><a href="#16-什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个jsonp原理" class="headerlink" title="16. 什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个jsonp原理"></a>16. 什么情况下会遇到跨域，描述一下前端常见处理跨域的几种方式。并封装一个jsonp原理</h1><p>产生跨域的原因：浏览器内部存在的安全机制——同源策略（只能是同源之间才允许数据交互）  不满足同源策略就会产生跨域<br>不满足同源策略的情况：协议、域名、端口号  其中有一个不相同都算是跨域（不同的域名但是对应相同的IP  两个域名之间也属于跨域）</p><p>跨域问题的解决方案</p><ul><li> JSONP </li><li> CORS </li><li> 服务器代理 </li></ul><p><strong>JSONP和CORS是怎样实现的？</strong></p><p>封装jsonp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@params <span class="hljs-type">&#123;String&#125;</span> </span>url:  请求地址</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@params <span class="hljs-type">&#123;String&#125;</span> </span>data: 请求数据  key=value&amp;key1=value1;</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@params <span class="hljs-type">&#123;String&#125;</span> </span>callbackName: 接收响应数据的函数名称</span><br><span class="hljs-comment">**/</span><br><span class="hljs-comment">// 把callback当成数据传递更省事</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonp</span>(<span class="hljs-params">url, data</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> oScript = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>  oScript.src = url + <span class="hljs-string">&#x27;?&#x27;</span> + data;<span class="hljs-comment">//地址和数据之间用问号分割</span><br>  <span class="hljs-built_in">document</span>.body.appendChild(oScript);<br>  <span class="hljs-comment">// 已经append了，就会插到执行队列，不怕remove</span><br>  <span class="hljs-built_in">document</span>.body.removeChild(oScript);<span class="hljs-comment">// 输入的时候不断插入script标签，页面太多的script</span><br>&#125;<br><span class="hljs-comment">/* callback和data分开传递</span><br><span class="hljs-comment">function jsonp(url, data, callbackName) &#123;</span><br><span class="hljs-comment">oScript.src = url + &#x27;?&#x27; + data + &#x27;callback&#x27; + callbackName;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br>jsonp(<span class="hljs-string">&quot;https://www.baidu.com/sugrec&quot;</span>, <span class="hljs-string">&quot;pre=1&amp;p=3&amp;ie=utf-8&amp;json=1&amp;prod=pc&amp;from=pc_web&amp;sugsid=34298,33801,34322,31253,34331,34004,34072,34092,26350,34246&amp;wd=duy&amp;req=2&amp;bs=x&amp;pbs=x&amp;csor=3&amp;pwd=du&amp;cb=success&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1627798762664-03b344fe-a239-4952-861a-362b50b7e3a3.png#clientId=ufeb47678-109f-4&from=paste&height=88&id=uba6fdf31&margin=%5Bobject%20Object%5D&name=image.png&originHeight=175&originWidth=1111&originalType=binary&ratio=1&size=37283&status=done&style=none&taskId=u1ba5757f-2fc6-4245-949a-1db2dec56ae&width=555.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1627798770199-353f0ac8-4fca-4d6c-9d32-75f3fb670eb1.png#clientId=ufeb47678-109f-4&from=paste&height=27&id=uab506674&margin=%5Bobject%20Object%5D&name=image.png&originHeight=53&originWidth=604&originalType=binary&ratio=1&size=7008&status=done&style=none&taskId=u5991388a-24e6-4eec-8efa-6ac7348f820&width=302" alt="image.png"><br>自己可以实现搜索框</p><h1 id="17-Web前端应该从哪些方面来优化网站性能"><a href="#17-Web前端应该从哪些方面来优化网站性能" class="headerlink" title="17. Web前端应该从哪些方面来优化网站性能"></a>17. Web前端应该从哪些方面来优化网站性能</h1><p>书：高性能（薄：看精通面试）</p><p>图解http</p><p>网站性能 —— 时间的问题  ——&gt; 加载时间 （文件的加载基于网络的 ）</p><blockquote><p><strong>网络加载时间的问题</strong></p></blockquote><ol><li> 减小文件的体积  —— 压缩文件webpack </li><li> 就近取材 —— 使用cdn加载 </li><li> 使用静态资源缓存 </li><li> 网络请求可以使用异步请求资源 </li></ol><blockquote><p><strong>渲染的时间问题</strong></p></blockquote><ol><li>减少重绘重排</li></ol><p>需要构建  domtree  +  cssTree = 渲染树 renderTree</p><ol><li> 把script标签写在最后（不阻碍其他资源加载） </li><li> css样式通过外部引入的方式实现  并且将 link标签写在 head标签下面 </li><li> 按需加载（懒加载），预加载（提前加载影响性能） </li></ol><h1 id="18-浏览器端缓存有哪些，并描述他们的区别。"><a href="#18-浏览器端缓存有哪些，并描述他们的区别。" class="headerlink" title="18. 浏览器端缓存有哪些，并描述他们的区别。"></a>18. 浏览器端缓存有哪些，并描述他们的区别。</h1><p>Cookies: 一般用来保存用户的信息比如自动登录。</p><p>Session:主要作用是通过服务端记录用户的状态。</p><p>浏览器缓存</p><ul><li>cookie</li></ul><ol><li>存储时间可以设置</li><li>会携带在网络请求的请求头当中</li><li>数据量较小  4kb</li><li>存储数据格式都是字符串</li></ol><ul><li>localStorage</li></ul><ol><li>存储时间是永久性的  除非手动删除 否则一直存在URL</li><li>不会携带在网络请求头当中</li><li>数据量很大  5m</li><li>存储数据格式是对象{key: value}  数据对应的数据值要求是字符串  window.localStorage</li></ol><ul><li>sessionStorage</li></ul><ol><li>存储时间是当前会话</li><li>不会携带在网络请求头当中</li><li>数据量很大  5m</li><li>存储数据格式是对象{key: value}  数据对应的数据值要求是字符串</li></ol><h1 id="19-请描述TCP三次握手与四次挥手？"><a href="#19-请描述TCP三次握手与四次挥手？" class="headerlink" title="19. 请描述TCP三次握手与四次挥手？"></a>19. 请描述TCP三次握手与四次挥手？</h1><p>三次握手和四次挥手是传输层中TCP协议当中的两个概念<br>TCP（Transmission control protocol）： 传输控制协议  <br>特点：</p><ol><li>可靠的连接协议</li><li>面向字节流</li><li>点对点的连接(一对一，一问一答)</li><li>全双工通信：双方均可以在任何时刻进行数据交互<br>（原因： 在两端都设有缓存（发送缓存和接收缓存））<br>可靠连接的前提条件就是通信双方是均需要有接收和发送信息的能力的<h2 id="判断前提条件的方法就是先进行建立连接，-建立连接的过程称之为三次握手"><a href="#判断前提条件的方法就是先进行建立连接，-建立连接的过程称之为三次握手" class="headerlink" title="判断前提条件的方法就是先进行建立连接， 建立连接的过程称之为三次握手"></a>判断前提条件的方法就是先进行建立连接， 建立连接的过程称之为三次握手</h2>A-&gt;B<br>第一次握手 ： A -&gt; B （建立连接请求发出）（我要向你发送信息了，你能接收到我的信息吗？）<br>（如果B端接收到这个信息了 可以明确A 有发送数据的能力）<br>过程当中的报文标记：SYN = 1 代表建立一个新的连接   当前报文编号为seq = x<br>第二次握手：  B -&gt; A （B给A发出信息，我收到你的建立连接的信息了， 我可以收到， 你可以收到吗?）<br>（如果A收到这个信息了， A可以确定B可以发出信息 也可以收到信息）<br>代表的是回应seq=x的报文 ack = x + 1<br>当前的报文编号 seq = y<br>ack和seq可能相等，因为是独立的。ack是对对方报文进行回应；seq对当前这一端发出请求的编号<br>SYN = 1  代表当前的连接是B的新的连接<br>ACK = 1  代表接收到的连接报文是有效的<br>第三次握手： A -&gt; B （A给B发出回应信息  我可以接收到你的信息  我开始发了）<br>（如果B接收到这个信息了， B就明确了A有收到信息的能力了）<br>ACK = 1 : 代表接收到的B给出的回应报文是有效的<br>ack=y+1： 代表回应的是B发给A的报文编号为y的报文<br>seq = x+1： 代表当前报文的编号<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616830220465-e0a55ba9-bbd2-4429-b889-6b4f9be8b8e9.png#height=347&id=r93d8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=686&originWidth=1236&originalType=binary&ratio=1&size=39363&status=done&style=none&width=626" alt="image.png"><br>通俗来说：我要给你发信息，你能收到吗？我能收到，但是你能收到吗？我能收到。<br>​</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1631663691111-128f414a-8b84-48e5-988f-5d820331d808.png#clientId=u13d1dbe2-837a-4&from=paste&height=559&id=u2e1a9329&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1118&originWidth=728&originalType=binary&ratio=1&size=870900&status=done&style=none&taskId=u24a1afa8-368c-4c0e-87a5-d9043d7e9eb&width=364" alt="image.png"><br>只有第三次握手才可以携带数据<br>接下来数据传递：<br>A -&gt;B  B-&gt;A 互相传递数据</p><h2 id="A-传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手"><a href="#A-传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手" class="headerlink" title="A 传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手"></a>A 传递完数据之后需要进行断开连接的操作，断开连接的过程为四次挥手</h2><p>第一次挥手：<br>A -&gt; B （A发出断开连接的请求） （我的数据发完了，我要断开了）<br>(如果B接收到这个请求了，能明确的是A已经把所有的数据给完了要断开了)<br>FIN = 1, seq=u<br>第二次挥手<br>B  -&gt; A （B要对A断开连接请求进行响应）（我知道你传完了，但是我还没有处理完）<br>ACK = 1,ack=u+1, seq=v<br>(如果A接收到这个响应了，能明确B接收到我的断开连接请求了， 等待断开)<br>…….继续B给A发出数据…….<br>第三次挥手<br>B -&gt;  A  （B要对A发出断开连接请求） （我已经把生活费给你了，咱俩分手吧）<br>FIN = 1, seq=w, ack=u+1, ACK=1<br>（如果A接收到这个断开连接的信息了，能明确B已经传递完了，）<br>第四次挥手<br>A -&gt; B   （A对B断开连接请求进行响应） （我知道你已经传完了，我要断开了）<br>ACK = 1, ack=w+1, seq=u+1<br>（如果B收到这个信息了，能明确，对方知道我要断开了，接下来B断开连接）<br>第一次挥手可以携带数据，<br>​</p><p>三次握手过程中可以携带数据么?</p><h2 id="跨域问题的解决方案"><a href="#跨域问题的解决方案" class="headerlink" title="跨域问题的解决方案"></a>跨域问题的解决方案</h2><p>跨域产生的原因：前端一般会使用ajax进行网络交互（客户端和服务器端数据交互）<br>ajax的缺点：会受到同源策略的限制<br>同源策略：就是浏览器提出的一种安全策略。要求只有同源下面的信息才能进行数据交互。<br>同源： 协议，域名，端口号都相同<br>http端口号：默认（隐藏）80<br>https端口号：默认443<br>客户端和服务器端的网络请求<br>解决方案：<br>1.CORS跨域： cross origin resource sharing 跨域资源共享（只需要后端设置响应头）(IE10 之前不兼容)<br>Access-Control-Allow-Origin: *</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">简单请求<br>- 请求方式只能是<span class="hljs-keyword">get</span> post head<br><br>- 请求头字段要求只能有：<br><br>Accept<br><br>Accept/<span class="hljs-keyword">language</span><br><br><span class="hljs-keyword">language</span><br><br>Content-<span class="hljs-keyword">Type</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>  key=<span class="hljs-keyword">value</span>&amp;key1=value1 <br><span class="hljs-string">&#x27;text/plain&#x27;</span>  纯文本<br><br><span class="hljs-string">&#x27;multipart/form-data&#x27;</span>  二进制文件<br><br>对于上述简单请求的跨域只需要在服务端设置响应头<br><br><span class="hljs-keyword">Access</span>-Control-Allow-Origin: *<br><br><br>请求方式的区别： put(一般是对已有数据修改的时候用) <br><br><span class="hljs-keyword">delete</span>（一般是对已有的数据进行删除的时候会用到） <br><br><span class="hljs-keyword">options</span> （自动选择）<br><br>head （只进行请求头的发送 不传递请求体）<br><br>非简单请求<br><br>不是简单请求的请求<br><br>对于非简单请求的跨域需要在服务端设置响应头<br><br>值中的<span class="hljs-string">&#x27;*&#x27;</span> 代表所有<br><br><span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br><br><span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class="hljs-string">&#x27;PUT,DELETE&#x27;</span>,<br><br><span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="hljs-string">&#x27;token&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>JSONP: json and padding  代表的是返回的数据加上包裹层<br>‘callback(“{name:”xxx”,age:18}”)’’<br>​</li></ol><p>原理： script标签身上的src属性 在拿取外部资源的时候是不受同源策略的限制的<br>缺点：</p><ol><li><p>请求方式只能是get</p></li><li><p>返回的数据格式是特殊的</p></li><li><p>传递的数据大小有限<br>​</p></li><li><p>服务器代理<br>服务器与服务器之间没有同源限制，浏览器有同源策略<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1616832694169-7fcd949c-01fa-483b-a3b6-5f873de4a57b.png#height=266&id=bUhNT&margin=%5Bobject%20Object%5D&name=image.png&originHeight=680&originWidth=1282&originalType=binary&ratio=1&size=52554&status=done&style=none&width=501" alt="image.png"><br>其他跨域<br>客户端和客户端的跨域：iframe 子窗口之间的跨域问题<br>eg: h5 postMessage</p></li></ol><p><strong>面试：拥塞控制</strong><br>一个场景：<br>当前系统嵌套了一个学生管理系统， 在学生管理系统当中存在一个按钮 这个按钮 代表当前窗口隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;oIfr&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:5501/index.html&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oIfr = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;oIfr&#x27;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">window</span>.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e)</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (e.data.hide) &#123;</span><br><span class="javascript">      oIfr.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oIfr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    oIfr.contentWindow.postMessage(a, <span class="hljs-string">&#x27;http://127.0.0.1:5501&#x27;</span>)</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="20-TCP与UDP的区别"><a href="#20-TCP与UDP的区别" class="headerlink" title="20. TCP与UDP的区别"></a>20. TCP与UDP的区别</h1><p>TCP (传输控制协议) ： 为了提供可靠的字节流服务的</p><pre><code>1. 以字节流（小的数据包）的形式传递2. 可靠的连接 有问有答 必须确认一问一答3. 点对点的4. 有三次握手和四次挥手的过程5. 报文的头部信息量大 syn ack...</code></pre><p>UDP（用户数据报协议）</p><ol><li>以数据报文的形式传递</li><li>不可靠的  不需要确认对方是否收到</li><li>一对一  一对多  多对多</li><li>没有三次握手四次挥手</li><li>报文的头部信息量小</li></ol><h1 id="21-http是什么"><a href="#21-http是什么" class="headerlink" title="21.http是什么?"></a>21.http是什么?</h1><p>HTTP是超文本传输协议是一种通信协议，它允许将超文本标记语言（HTML）文档从Web服务器传送到客户端的浏览器。</p><p>所有WEB服务的一个协议，HTTP协议属于TCP/IP协议族的一个子集</p><blockquote><p>HTTP协议：</p></blockquote><ol><li><p>对于传递过程当中数据报文格式的约定</p></li><li><p>用于客户端与服务器端的数据通讯</p></li><li><p>无状态协议： 没有记忆功能 （不保存之前的记录）</p></li><li><p>可以做持久连接： （在一端没有发起断开连接请求的时候  就会一直连接着）</p><blockquote><p>HTTP协议的缺点：</p></blockquote></li><li><p>传递的过程是明文传递的 （容易被窃取）</p></li><li><p>通信双方的身份不能确定 （容易遭遇伪装）</p></li><li><p>传递的过程当中容易被篡改<br>安全：<br>攻击会发生在五层网络模型和物理层之间（客户端和服务端的物理层之间）的过程中<br>HTTPS = HTTP + (SSL (安全套阶层) + TLS（安全传输协议))</p><h1 id="22-http与https的区别"><a href="#22-http与https的区别" class="headerlink" title="22.http与https的区别"></a>22.http与https的区别</h1></li></ol><p>为什么不普遍去用HTTPS</p><ol><li>成本开销大</li><li>加密通信的过程很消耗内存资源以及CPU  消耗资源</li></ol><p>标答：</p><ol><li>为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><h1 id="23-重排（回流）和重绘是什么-什么情况下会触发重排和重绘。"><a href="#23-重排（回流）和重绘是什么-什么情况下会触发重排和重绘。" class="headerlink" title="23.重排（回流）和重绘是什么?什么情况下会触发重排和重绘。"></a>23.重排（回流）和重绘是什么?什么情况下会触发重排和重绘。</h1><p>重排 ：重新排列  （页面结构发生变化） 改变dom树<br>重绘： 重新绘制  （样式发生改变）  改变css树<br>offsetHeight，offsetWidth，offsetLeft，offsetTop，scrollHeight，scrollTop<br>client不会吗<br>​</p><h1 id="直播课补充"><a href="#直播课补充" class="headerlink" title="直播课补充"></a>直播课补充</h1><p>ajax ===&gt; 封装ajax函数 ajax 用来请求资源 可以使页面局部刷新<br>网络的基础知识</p><p>(1). 五层网络模型： 物理层 —》 数据链路层 —-》网络层—》 传输层—》 应用层<br>duing 邓哥奇遇记<br>七层网络模型：<br>应用层: 网络服务与最终用户的一个接口。协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP<br>表示层: 数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）格式有，JPEG、ASCll、DECOIC、加密格式等<br>会话层: 建立、管理、终止会话。（在五层模型里面已经合并到了应用层） 对应主机进程，指本地主机与远程主机正在进行的会话<br>[</p><p>](<a href="http://www.baidu.com/">http://www.baidu.com:80/</a>)<br>(3). 三次握手 和 四次挥手 发生在传输层 TCP/IP协议 TCP 和 UDP<br>(4). 请求方式： GET(获取数据的时候会用到) POST（新建数据保存的时候用到） HEAD PUT（修改数据的时候会用到） DELETE（删除数据的时候会用到）</p><p>(7). 客户端和服务器端的跨域：<br>&lt;1&gt; jsonp —》 不是w3c标准里的<br>原理： script标签身上的src属性是不受同源策略的限制的<br>src=”<a href="http://www.baicu.com/">http://www.baicu.com</a>?”<br>&lt;2&gt; 服务器代理<br>&lt;3&gt; iframe<br>iframe + window.name —》 父页面请求子页面的数据 儿子给父亲数据<br>iframe + location.hash —-》 子页面请求父页面的数据 父亲给儿子数据<br>iframe + window.postMessage —》 双向请求<br>&lt;4&gt; CORS —》cross-origin resource sharing 跨域资源共享<br>后端来设置一个响应头 access-control-allow-origin: ‘<a href="http://www.duyiedu.com/">http://www.duyiedu.com</a>‘<br>浏览器先发出请求到服务器 返回的过程中 判断是否是同源的<br>如果不是同源的会去看响应报文的响应头是否有 access-control-allow-origin: * / 当前页面的域名<br>w3c标准里面提出的<br>&lt;5&gt; document.domain —》 基础域名相同的页面 可以跨域<br>浏览器将 CORS 请求分成两类：<br>简单请求和非简单请求，只要同时满足下面两个条件就属于简单请求<br>( 1 ) 请求的方法只能是 HEAD，GET，POST<br>( 2 ) HTTP 的头信息不超出以下几种字段<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain<br>只要不满足以上两个条件就属于非简单请求，浏览器对于非简单请求会进行一次预检<br>对于简单请求<br>非简单请求<br>预检请求<br>非简单请求指的是对服务器有特殊要求，比如请求方法为 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。<br>非简单请求的 CORS 请求会在通信之前，增减一次 HTTP 查询的请求，成为 “预检”。<br>浏览器会先询问服务器，当前网页所在的域名是否在服务器许可的名单之中，<br>以及可以使用哪些 HTTP 请求和头部字段。如果通过服务器的校验，才会发起正式的 XMLHttpRequest 请求，否则就报错<br>非简单请求的响应头里面必须含有以下字段：<br>Allow-Control-Access-Origin 必需，表示可以请求的源。<br>Access-Control-Allow-Methods 必需，表示支持的所有方法，以逗号分隔<br>Access-Control-Allow-Headers 如果浏览器请求包括 Access-Control-Req方法，以逗号分隔<br>Access-Control-Allow-Headers 如果浏览器请求包括 Access-Control-Request-Headers 字段，则 Access-Control-Allow-Headers 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段。<br>（8） HTTP请求的发出经历了什么<br>​</p><h1 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h1><p>HTTP 缓存又分为强缓存和协商缓存：</p><ul><li> 首先通过 Cache-Control 验证强缓存是否可用，如果强缓存可用，那么直接读取缓存 </li><li> 如果不可以，那么进入协商缓存阶段，发起 HTTP 请求，服务器通过请求头中是否带上 If-Modified-Since 和 If-None-Match 这些条件请求字段检查资源是否更新： </li><li> 若资源更新，那么返回资源和 200 状态码 </li><li> 如果资源未更新，那么告诉浏览器直接使用缓存获取资源 <h1 id="你知道-302-状态码是什么嘛？你平时浏览网页的过程中遇到过哪些-302-的场景？"><a href="#你知道-302-状态码是什么嘛？你平时浏览网页的过程中遇到过哪些-302-的场景？" class="headerlink" title="你知道 302 状态码是什么嘛？你平时浏览网页的过程中遇到过哪些 302 的场景？"></a>你知道 302 状态码是什么嘛？你平时浏览网页的过程中遇到过哪些 302 的场景？</h1></li></ul><p>而 302 表示临时重定向，这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问，一般是访问某个网站的资源需要权限时，会需要用户去登录，跳转到登录页面之后登录之后，还可以继续访问。</p><p>301 类似，都会跳转到一个新的网站，但是 301 代表访问的地址的资源被永久移除了，以后都不应该访问这个地址，搜索引擎抓取的时候也会用新的地址替换这个老的。可以在返回的响应的 location 首部去获取到返回的地址。301 的场景如下：</p><ul><li>比如从 <a href="http://baidu.com/">baidu.com</a>，跳转到 <a href="https://baidu.com/">baidu.com</a></li><li>域名换了<h1 id="Fetch-API与传统Request的区别"><a href="#Fetch-API与传统Request的区别" class="headerlink" title="Fetch API与传统Request的区别"></a>Fetch API与传统Request的区别</h1></li></ul><ul><li> fetch 符合关注点分离，使用 Promise，API 更加丰富，支持 Async/Await </li><li> 语意简单，更加语意化 </li><li> 可以使用 isomorphic-fetch ，同构方便 <h1 id="对称加密和非对称加密的区别"><a href="#对称加密和非对称加密的区别" class="headerlink" title="对称加密和非对称加密的区别"></a>对称加密和非对称加密的区别</h1></li></ul><h1 id="HTTP2-0提升有哪些"><a href="#HTTP2-0提升有哪些" class="headerlink" title="HTTP2.0提升有哪些"></a>HTTP2.0提升有哪些</h1><ol><li>cookies和session的区别</li><li>get和post的区别</li><li>Ajax、fetch、axios的区别</li><li>http和https的区别</li><li>解释 ajax 的工作原理 </li></ol><h1 id="https加密方式"><a href="#https加密方式" class="headerlink" title="https加密方式"></a>https加密方式</h1><h1 id="常见Http请求头和响应头"><a href="#常见Http请求头和响应头" class="headerlink" title="常见Http请求头和响应头"></a>常见Http请求头和响应头</h1><h1 id="几种常见的content-type"><a href="#几种常见的content-type" class="headerlink" title="几种常见的content-type"></a>几种常见的content-type</h1><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ol><li><p> 必考：HTTP 状态码知道哪些？分别什么意思？ </p></li><li><p> 大公司必考：HTTP 缓存有哪几种？ </p></li><li><p> 必考：GET 和 POST 的区别 </p></li><li><p> Cookie V.S. LocalStorage V.S. SessionStorage V.S. Session </p><h1 id="集训面试题"><a href="#集训面试题" class="headerlink" title="集训面试题"></a>集训面试题</h1><h1 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h1><p>服务器在不同的语境下可能表达了不同的含义：</p></li><li><p>一台独立的计算机</p></li><li><p>一个应用程序</p></li></ol><p>绝大部分使用，作为开发者，通常把服务器看作是一个应用程序<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1619407751509-efd1451e-d5a9-4c16-9b12-eef93e281517.png#clientId=u1711e650-48ff-4&from=paste&height=268&id=XgEjc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=536&originWidth=769&originalType=binary&ratio=1&size=161029&status=done&style=none&taskId=u786363a5-7b6e-4547-bafe-ba3f8dfde45&width=384.5" alt="image.png"><br>如果一个服务器（应用程序），它仅仅为一个浏览器访问网站服务，我们称它为<strong>web服务器</strong></p><blockquote><p>实际上，目前的web服务器和游戏服务器界限已经非常模糊，可以认为，凡是在互联网中提供服务的服务器都是web服务器</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1619407772466-cf179707-7968-4b79-933f-9ff187da184a.png#clientId=u1711e650-48ff-4&from=paste&height=183&id=CbbnR&margin=%5Bobject%20Object%5D&name=image.png&originHeight=366&originWidth=453&originalType=binary&ratio=1&size=29462&status=done&style=none&taskId=u6453da3f-701e-4616-abb1-17411e8ea00&width=226.5" alt="image.png"><br>通常，我们把访问服务器的程序，称之为客户端</p><blockquote><p>实际上，web服务器不仅限于为浏览器提供服务，还可以为手机app、小程序、小游戏等常见互联网应用提供服务</p></blockquote><p>常见的web服务器有：nginx、apache、iis<br>在开发阶段，web服务器往往安装在本地计算机，通常也称之为本地服务器</p><blockquote><p>vscode有一个live server插件，其实它就是一个轻量级的web服务器</p></blockquote><h1 id="如何访问服务器"><a href="#如何访问服务器" class="headerlink" title="如何访问服务器"></a>如何访问服务器</h1><p>服务器程序可能在本机，也可能在远程，它一定运行在某一台计算机上<br>要在茫茫互联网中访问到服务器程序，就必须：</p><ol><li>精确的定位到服务器所在的计算机</li><li>精确定位到计算机中的服务器程序</li><li>精确定位到程序中的某个功能</li></ol><p>通常，我们使用url地址来描述以上3个信息<br><code>url</code>地址全称为<code>Uniform Resource Locator</code>，统一资源定位符，是一个字符串，它的格式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">protocol:<span class="hljs-regexp">//</span>hostname:port/path?query<span class="hljs-comment">#hash</span><br></code></pre></td></tr></table></figure><ul><li><code>protocal</code>: 使用的协议，选择不同的协议，会导致和服务器之间消息交互格式、连接方式不同，大部分都服务器支持 http 和 https 两种协议。如果选择了服务器不支持的协议，会导致访问失败。</li><li><code>hostname</code>：主机名，可以是 <code>ip</code>、域名<ul><li><code>ip</code>：每台计算机在网络中的唯一编号，<code>127.0.0.1</code>表示本机</li><li>域名：网络中容易记忆的唯一单词，通过<code>DNS</code>服务器可以将域名解析成<code>IP</code>，<code>localhost</code>会被解析为<code>127.0.0.1</code></li></ul></li><li><code>port</code>：端口号，0~65535之间的数字，相当于服务器计算机上的房号，使用不同的端口号相当于敲不同房间的门。计算机上的程序可以监听一个或多个端口号，如果访问的端口号有程序被监听，则计算机会将到达的网络访问交给对应的程序来处理<ul><li>端口号可以不写，使用默认值</li><li><code>http</code>协议默认值80</li><li><code>https</code>协议默认值443</li></ul></li><li><code>path</code>: 一个普通的字符串，该字符串会交给web服务器处理，主要用于定位服务<ul><li>如果<code>path</code>为<code>/</code>，则表示根路径，如<code>http://www.baidu.com/</code>的path就是<code>/</code></li></ul></li><li><code>query</code>: 一种特殊格式的字符串，该字符串会交给web服务器处理，主要用于向服务器某个服务传递一些信息<ul><li>格式为：<code>属性名=属性值&amp;属性名=属性值</code></li></ul></li></ul><p>不同服务器不一样，那百度举例子：<a href="https://www.baidu.com/s?wd=html%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%A1%E7%94%A8query,%E5%88%99https://www.baidu.com/s/html">https://www.baidu.com/s?wd=html。如果没用query,则https://www.baidu.com/s/html</a><br>不同公司给出文档：<br>path:/api/movie<br>query:<br>名字    含义   默认值<br>page   页码   1<br>limit   页容量 100<br>/api/movie?page=2?limit=20</p><ul><li><code>hash</code>：一个普通的字符串，在浏览器的地址栏中，如果url其他位置的信息保持不变，仅变动hash，浏览器不会重新访问服务器，因此通常用于不刷新的页面内跳转</li></ul><p>可以看出：</p><ul><li><code>hostname</code>是用于精准定位计算机的</li><li><code>port</code>是用于精准定位服务器的</li><li><code>protocal</code>是用于告诉服务器使用哪种协议进行传输数据</li><li><code>path</code>是用于精准定位服务器上的服务的</li><li><code>query</code>是在使用服务的时候传递的额外信息，具体看服务器要求</li><li><code>hash</code>是一些额外信息，服务器要不要用具体看服务器要求</li></ul><p>示例：分析出下面url地址的各部分内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>baike.baidu.com<span class="hljs-regexp">/item/</span>HTML?a=<span class="hljs-number">1</span><span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure><p>注意：url仅支持ASCII字符，如果是包含非ASCII字符，会被现代浏览器自动进行编码<br>例如：<code>https://www.baidu.com/s?wd=http协议</code><br>会被编码为<code>https://www.baidu.com/s?wd=http%E5%8D%8F%E8%AE%AE</code></p><blockquote><p>url地址不能过长，因为很多浏览器对url地址长度是有限制的，chrome对url的长度限制为8182个ASCII字符</p></blockquote><h1 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h1><p>我们可以通过url地址访问服务器，但是，浏览器和服务器之间的数据到底是怎么交互的，数据的格式是什么，这取决于使用什么协议<br>最常见的协议，就是http协议<br>http协议将和服务器的一次交互看作是两段简单的过程组成：<strong>请求 request</strong>和<strong>响应 response</strong></p><ul><li>请求：客户端通过url地址发送数据到服务器的过程</li><li>响应：服务器收到请求数据后回馈数据给客户端的过程</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1619407833688-b57441ff-cfa9-4d34-8c5e-1a1e5fc1affe.png#clientId=u1711e650-48ff-4&from=paste&height=149&id=dVmuz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=1278&originalType=binary&ratio=1&size=52515&status=done&style=none&taskId=u4c1efbae-85ec-4ee7-b895-cc8321ed416&width=639" alt="image.png"><br>当 请求-响应 完成后，本次交互结束，如果需要得到额外的服务，则需要重新发送新的请求<br>同时，http协议约定了请求的消息格式和响应的消息格式</p><h2 id="请求消息格式"><a href="#请求消息格式" class="headerlink" title="请求消息格式"></a>请求消息格式</h2><p>请求消息格式有两部分组成：<strong>请求头 request headers</strong> 和 <strong>请求体 request body</strong></p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>请求头是一个多行文本的字符串<br>比如我们请求 <a href="http://www.baidu.com/s?wd=html">http://www.baidu.com/s?wd=html</a>, 得到的请求头可能如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/s?wd=html HTTP/</span><span class="hljs-number">1.1</span><br>Host: www.baidu.com<br>User-Agent: Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/79.0.3945.88 Safari/</span><span class="hljs-number">537.36</span><br>...<br></code></pre></td></tr></table></figure><p>可以看出，该字符串有两个部分组成</p><ol><li>请求行：请求方法 path 协议<ol><li>请求方法：一个普通的字符串，会被服务器读取到。常见的请求方法：<strong>GET</strong>、<strong>POST，（可以自定义请求方法）</strong></li><li>path：即url中的 path + search + hash，服务器可能会用到path中的信息</li><li>协议：协议以及版本号，目前固定为 HTTP/1.1</li></ol></li><li>键值对：大量的属性名和属性值组合，可以自定义。<ol><li>Host：url地址中的hostname</li><li>User-Agent：客户端信息描述</li><li>其他键值对</li></ol></li></ol><p>请求头描述了请求的<strong>元数据</strong>信息，这里的元数据信息是指与业务无关的额外信息<br>当我们在浏览器地址栏输入一个url按下回车后，浏览器会自动构建一个请求头，请求方法为GET，然后向服务器发送请求</p><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/s?wd=html HTTP/</span><span class="hljs-number">1.1</span><br>Host: www.baidu.com<br>User-Agent: Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/79.0.3945.88 Safari/</span><span class="hljs-number">537.36</span><br>Content-Type: <br>...<br>请求体中的数据<br></code></pre></td></tr></table></figure><p>包含业务数据的字符串<br>理论上，请求体可以是任意格式的字符串，但习惯上，服务器普遍能识别以下格式：</p><ul><li>application/x-www-form-urlencoded：<code>属性名=属性值&amp;属性名=属性值...</code></li><li>application/json：<code>&#123;&quot;属性名&quot;:&quot;属性值&quot;, &quot;属性名&quot;:&quot;属性值&quot;&#125;</code></li><li>multipart/form-data：使用某个随机字符串作为属性之间的分隔符，通常用于文件上传</li></ul><p>由于请求体格式的多样性，服务器在分析请求体时可能无法知晓具体的格式，从而不知道如何解析请求体，因此，服务器往往要求在请求头中附带一个属性<code>Content-Type</code>来描述请求体使用的格式<br>例如</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br>Content-<span class="hljs-keyword">Type</span>: application/json<br>Content-<span class="hljs-keyword">Type</span>: multipart/<span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span><br></code></pre></td></tr></table></figure><h3 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="GET 和 POST"></a>GET 和 POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- POST请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    账号：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginId&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    密码：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginPwd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- GET请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./b.html&quot;</span>&gt;</span>去页面b<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然http协议并没有规定请求方法必须是什么，但随意的请求方法服务器可能无法识别<br>服务器一般都能识别GET和POST请求，并做出以下的差异化处理</p><ol><li>如果是GET请求，不读取请求体，业务数据从path或query中读取</li><li>如果是POST请求，读取请求体，业务数据从请求体中获取，关于请求体的格式，不同的服务器、同一个服务器的不同服务要求不同<blockquote><p>在浏览器地址栏中输入url地址是不能产生POST请求的，可以使用表单提交产生POST请求</p></blockquote></li></ol><p>由于服务器对GET和POST处理的差异，造成了GET和POST请求的差异：</p><ol><li>GET请求一般没有请求体，POST请求有</li><li>GET请求的业务数据放在地址中，安全性较差</li><li>GET请求传递的业务数据量是有限的，POST是无限的（除非服务器限制）</li><li>GET请求利于分享页面结果，POST不行</li></ol><p>响应消息格式<br>和请求类似，响应消息也分为<strong>响应头</strong>(response headers)和响应体(response body)</p><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>比如我们请求 <a href="http://www.baidu.com/s?wd=html">http://www.baidu.com/s?wd=html</a>, 得到的响应头可能如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Content-Type: text/html;charset=utf<span class="hljs-number">-8</span><br><span class="hljs-built_in">Server</span>: BWS/<span class="hljs-number">1.1</span><br>...<br></code></pre></td></tr></table></figure><p>可以看出，该字符串有两个部分组成</p><ol><li>响应行：协议 状态码 状态文本<ol><li>协议：协议以及版本号，目前固定为 HTTP/1.1</li><li>状态码和状态文本：一个数字和数字对应的单词，来描述服务器的响应状态，浏览器会根据该状态码做不同的处理。<ol><li>200 OK：一切正常。你好，<code>我好，大家好。</code></li><li>301 Moved Permanently：资源已被永久重定向。<code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></li><li>302 Found：资源已被临时重定向。<code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></li><li>304 Not Modified：文档内容未被修改。<code>你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事</code></li><li>400 Bad Request：语义有误，当前请求无法被服务器理解。<code>你给我发的是个啥啊，我听都听不懂</code></li><li>403 Forbidden：服务器拒绝执行。<code>你的请求我已收到，但是我就是不给你东西</code></li><li>404 Not Found：资源不存在。<code>你的请求我收到了，但我没有你要的东西</code></li><li>500 Internal Server Error：服务器内部错误。<code>你的请求我已收到，但这道题我不会，解不出来，先睡了</code></li><li>通常认为，0~399之间的状态码都是正常的，其他是不正常的</li></ol></li></ol></li><li>键值对：大量的属性名和属性值组合，可以在服务器响应的时候自定义。<ol><li>Content-Type：响应体中的数据格式，常见格式如下<ol><li>·: 普通的纯文本，浏览器通常会将响应体原封不动的显示到页面上</li><li><code>text/html</code>：html文档，浏览器通常会将响应体作为页面进行渲染</li><li><code>text/javascript</code>或<code>application/javascript</code>：js代码，浏览器通常会使用JS执行引擎将它解析执行</li><li><code>text/css</code>：css代码，浏览器会将它视为样式</li><li><code>image/jpeg</code>：浏览器会将它视为jpg图片</li><li><code>attachment</code>：附件，浏览器看到这个类型，通常会触发下载功能</li><li>其他<code>MIME</code>类型</li></ol></li><li>Server：web服务器类型<h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3>响应消息的正文<br>网络请求：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1620130012973-a46376bb-a5b7-4f80-96ac-3a10098acc07.png#clientId=u99ad9c12-82ce-4&from=paste&height=295&id=JBHo7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=590&originWidth=1023&originalType=binary&ratio=1&size=75852&status=done&style=none&taskId=ue58271e8-ea59-45de-8040-d6d45ab1127&width=511.5" alt="image.png"><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1>不仅仅是浏览器可以发出请求并获得响应，任何具有网络通信能力的程序均可以这样做。<br>过去，在浏览器中，只有浏览器本身有发送请求的能力，直到ajax的出现。<br>ajax是一种技术，让JS语言在浏览器环境中获得了新的API，通过该API，JS代码拥有了和服务器通信的能力<br>传统的ajax代码如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest(); <span class="hljs-comment">//创建发送请求的对象</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//当请求状态发生改变时运行的函数</span><br>    <span class="hljs-comment">// xhr.readyState： 一个数字，用于判断请求到了哪个阶段</span><br>    <span class="hljs-comment">// 0: 刚刚创建好了请求对象，但还未配置请求（未调用open方法）</span><br>    <span class="hljs-comment">// 1: open方法已被调用</span><br>    <span class="hljs-comment">// 2: send方法已被调用</span><br>    <span class="hljs-comment">// 3: 正在接收服务器的响应消息体</span><br>    <span class="hljs-comment">// 4: 服务器响应的所有内容均已接收完毕</span><br>    <span class="hljs-comment">// xhr.responseText： 获取服务器响应的消息体文本</span><br>    <span class="hljs-comment">// xhr.getResponseHeader(&quot;Content-Type&quot;) 获取响应头Content-Type</span><br>&#125;<br>xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>); <span class="hljs-comment">//设置请求头</span><br>xhr.open(<span class="hljs-string">&quot;请求方法&quot;</span>, <span class="hljs-string">&quot;url地址&quot;</span>); <span class="hljs-comment">//配置请求</span><br>xhr.send(<span class="hljs-string">&quot;请求体内容&quot;</span>); <span class="hljs-comment">//构建请求体，发送到服务器</span><br></code></pre></td></tr></table></figure><blockquote><p>使用ajax访问：<a href="http://yuanjin.tech:5100/api/movie">http://yuanjin.tech:5100/api/movie</a></p></blockquote></li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;movies&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getMovies()&quot;</span>&gt;</span>加载电影<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncConnect</span>(<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="javascript">          xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//当请求状态发生改变时运行的函数</span></span><br><span class="javascript">            <span class="hljs-comment">// xhr.readyState： 一个数字，用于判断请求到了哪个阶段</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">              <span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText); <span class="hljs-comment">// 将json格式的字符串转换为js对象</span></span><br><span class="javascript">              resolve(obj);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;;</span><br><span class="javascript">          xhr.open(<span class="hljs-string">&quot;get&quot;</span>, url); <span class="hljs-comment">//配置请求</span></span><br><span class="javascript">          xhr.send(<span class="hljs-literal">null</span>); <span class="hljs-comment">//构建请求体，发送到服务器</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;movies&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest(); <span class="hljs-comment">//创建发送请求的对象</span></span><br><span class="javascript">      <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMovies</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> movies = <span class="hljs-keyword">await</span> asyncConnect(<span class="hljs-string">&quot;http://yuanjin.tech:5100/api/movie&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; movies.data.length; i++) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">var</span> m = movies.data[i];</span><br><span class="javascript">          <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">          li.innerHTML = <span class="hljs-string">&quot;&lt;img src=&#x27;&quot;</span> + m.poster + <span class="hljs-string">&quot;&#x27; /&gt; &quot;</span> + m.name;</span><br><span class="javascript">          ul.appendChild(li);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>怎么验证是否登录 cookie</p><ol><li>CORS需要设置什么头 </li><li>哈西和history区别<a href="https://juejin.cn/post/6844903625169502216">https://juejin.cn/post/6844903625169502216</a><ol><li>ajax 跨域 解决方案  cors分两种，简单和复杂 </li><li>http缓存 expire, cache-control  <a href="https://blog.csdn.net/zhouziyu2011/article/details/71312452">https://blog.csdn.net/zhouziyu2011/article/details/71312452</a></li><li>304缓存原理 ETag LastModified JSONP请求特殊的参数名 <strong>callback</strong>jq里面datatype:”jsonp”JSONP和普通AJAX有什么区别和优缺点？JSONP支持跨域，支持POST请求，支持patch请求？axios拦截器 axios 好好学一下 。拦截器。读一下如何封装axios文章如何取消axios重复请求<ol><li>说一下 web worker</li><li>HTML5的离线储存怎么使用，它的工作原理是什么</li><li>浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</li></ol></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript完美收官</title>
    <link href="/2021/10/15/JavaScript%E5%AE%8C%E7%BE%8E%E6%94%B6%E5%AE%98/"/>
    <url>/2021/10/15/JavaScript%E5%AE%8C%E7%BE%8E%E6%94%B6%E5%AE%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1-快速掌握-BOM-核心技能"><a href="#1-快速掌握-BOM-核心技能" class="headerlink" title="1-快速掌握 BOM 核心技能"></a>1-快速掌握 BOM 核心技能</h1><h2 id="1-什么是-BOM"><a href="#1-什么是-BOM" class="headerlink" title="1.什么是 BOM?"></a>1.什么是 BOM?</h2><p>DOM：document object model 文档对象模型<br>BOM：browser object model     浏览器对象模型<br>主要处理浏览器窗口（window）和框架（iframe），描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，不过通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。扩展如下： 1.弹出新的浏览器窗口 2.移动、关闭浏览器窗口以及调整窗口大小 3.提供 Web 浏览器详细信息的定位对象 4.提供用户屏幕分辨率详细信息的屏幕对象 5.对 cookie 的支持<br>6.IE 扩展了 BOM，加入了 ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象</p><h2 id="2-BOM-的核心—window"><a href="#2-BOM-的核心—window" class="headerlink" title="2.BOM 的核心—window"></a>2.BOM 的核心—window</h2><p>window 对象是 BOM 的顶层(核心)对象，玩转 BOM，就是玩转 window 的属性和方法<br>助记：DOM：document. ； BOM：window.<br>Window 对象它具有双重角色，既是通过 js 访问浏览器窗口的一个接口，又是一个全局对象。这意味着在网页中定义的任何对象，变量和函数，都是 window 的属性</p><h2 id="3-BOM-和-DOM-的关系"><a href="#3-BOM-和-DOM-的关系" class="headerlink" title="3.BOM 和 DOM 的关系"></a>3.BOM 和 DOM 的关系</h2><p>JavaScript 语法的标准化组织是 ECMA（原生 JS）<br>DOM 的标准化组织是 W3C——html css<br>BOM…(很尴尬)——浏览器</p><p><img src="/img/1-1.png"></p><h2 id="4-BOM-的组成"><a href="#4-BOM-的组成" class="headerlink" title="4.BOM 的组成"></a>4.BOM 的组成</h2><p>归纳：都是对象<br>Window JavaScript 层级中的顶层对象表示浏览器窗口<br>Navigator 包含客户端浏览器的信息<br>History 包含了浏览器窗口访问过的 URL<br>Location 包含了当前 URL 的信息<br>Screen 包含客户端显示屏的信息（兼容差）</p><h3 id="详解-window"><a href="#详解-window" class="headerlink" title="详解 window"></a>详解 window</h3><p>window.innerHeight: 返回窗口的文档显示区高度：包括滚动条<br>window.innerWidth: 返回窗口的文档显示区宽度：包括滚动条<br>document.clientHeight: 不包括滚动条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">console.log(window.pageXOffset); console.log(window.pageYOffset);<br>//可以赋值，但是不能操控滚动条<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3000px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">3000px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>iframe：父子页面。子能取爹，反之不行<br>引入了另外一个页面（有完整的 html 结构）<br>跨域，同源策略<br>name：给显示内容无关，这是窗口的名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.name = &#x27;123&#x27;; window.name;//可以取出来;窗口名字<br></code></pre></td></tr></table></figure><p>alert()警告框<br>confirm()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">window.confirm(&#x27;邓哥虚否&#x27;)//点确定则true<br>window.confirm(&#x27;邓哥虚否&#x27;)//点取消则false<br></code></pre></td></tr></table></figure><p>prompt()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.prompt(&#x27;hello&#x27;)//输入<br></code></pre></td></tr></table></figure><p>关闭广告：是否要关闭的提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.onbeforeunload = function () &#123; return &#x27;hhh&#x27; &#125;<br></code></pre></td></tr></table></figure><p>open()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>, <span class="hljs-string">&quot;duyi&quot;</span>, <span class="hljs-string">&quot;width=200, heigth:200&quot;</span>);<br><span class="hljs-keyword">var</span> newWindow = <span class="hljs-built_in">window</span>.open(<br>  <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,<br>  <span class="hljs-string">&quot;duyi&quot;</span>,<br>  <span class="hljs-string">&quot;width=200, heigth:200&quot;</span><br>);<br><span class="hljs-keyword">var</span> newWindow = <span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;./child.html&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;width=200, height=200&quot;</span>);<br>newWindow;<br></code></pre></td></tr></table></figure><p>close()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">window.close()<br></code></pre></td></tr></table></figure><h3 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h3><p>浏览器详解_计算机素养<br>onLine：是否联网——做离线应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.navigator.onLine) &#123;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">//取缓存</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><p>一个窗口，多次变动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">history.length history.back() history.forward() history.go(2)向前2个<br></code></pre></td></tr></table></figure><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><p>url:资源定位器<br>组成：协议，域名，端口号(https 默认 443,http 默认 80)，路径，参数，锚点（#）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">协议location.protocol 域名location.host 路径location.pathname<br>参数location.search 锚点location.hash//必须# // 改 location.href =<br>&#x27;https://www.taobao.com&#x27; location.search = &#x27;?wd=lol&#x27;;<br></code></pre></td></tr></table></figure><p>改域名/参数——页面刷新<br>改锚点——不刷新————应用：单页面应用</p><h1 id="2-javascript-必会常用知识点"><a href="#2-javascript-必会常用知识点" class="headerlink" title="2-javascript 必会常用知识点"></a>2-javascript 必会常用知识点</h1><h1 id="一、浏览器的基本组成"><a href="#一、浏览器的基本组成" class="headerlink" title="一、浏览器的基本组成"></a>一、浏览器的基本组成</h1><blockquote><p>要说 DOCTYPE (改变渲染模式)，其和最后页面被展示的效果有关系，那我们深入浅出一下吧</p></blockquote><p>浏览器请求页面大致经历了哪些过程</p><ol><li>发送 url，DNS 查询，请求 IP 地址</li><li>TCP 三次握手</li><li>服务器响应内容 js html css img</li><li>按照成哥讲的 js 时间线理解 js 解析执行的过程就好</li><li>渲染页面： DOM 树 CSSDOM 树，生成 RENDER 树，布局，渲染</li><li>TCP 四次挥手</li></ol><p>这一过程有很多部分参与，说一下浏览器的组成，和组成部分的功能。<br>这里着重说一下渲染页面这部分，有渲染引擎主要参与<br>以下我们主要来说其渲染的过程</p><h2 id="1-浏览器的基本组成"><a href="#1-浏览器的基本组成" class="headerlink" title="1.浏览器的基本组成"></a>1.浏览器的基本组成</h2><ol><li>用户界面——外壳</li><li>浏览器引擎——程序</li><li>渲染引擎</li><li>网络</li><li>UI 后端</li><li>Js 引擎——解释执行 js</li><li>数据存储</li></ol><h2 id="2-页面展示过程分析"><a href="#2-页面展示过程分析" class="headerlink" title="2.页面展示过程分析"></a>2.页面展示过程分析</h2><p><img src="/img/1-2.png"><br>上图解析：输入 url：先 onLine 是否脱机，脱机取缓存，没脱机进行下一步</p><h2 id="3-浏览器基本组成"><a href="#3-浏览器基本组成" class="headerlink" title="3.浏览器基本组成"></a>3.浏览器基本组成</h2><p><img src="/img/1-3.png"><br>在布局这块 是由不同渲染模式来定义不同的规则的<br>拿一个举例子  IE6 怪异模式盒子模型 和 标准模式盒子模型    IE6 怪异模式和标准模式的 margin: 100 auto 0;<br>总结一下: 渲染的最后效果，由于采取模式的不同而产生了不同的效果<br>我们能大概了解了渲染模式是什么意思有什么样的作用。</p><p>IE6 怪异模式其实现在主流浏览器都已经不然兼容了（不去迎合了，被废弃掉了）但我们可以见到了解一下历史以及上述的过程吗。为什么要有怪异模式和标准模式的区别-》向前兼容如何控制显示页面的浏览器采取什么样的模式来渲染  DOCTYPE<br>​</p><h1 id="面试题：浏览器渲染原理"><a href="#面试题：浏览器渲染原理" class="headerlink" title="面试题：浏览器渲染原理"></a>面试题：浏览器渲染原理</h1><ul><li>介绍一下你对浏览器内核的理解？</li></ul><p>主要分成两部分：渲染引擎和 JS 引擎。 渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，<strong>渲染引擎</strong>可以显示 html、xml 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型 数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。 <strong>JS 引擎</strong>：解析和执行 javascript 来实现网页的动态效果。最开始渲染引擎和 JS 引擎并 没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎</p><ul><li>浏览器的渲染原理？</li></ul><p>（1）首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元 素及属性节点组成的。 （2）然后对 CSS 进行解析，生成 CSSOM 规则树。</p><p>（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象， 渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种 对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM 元素对应 几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</p><p>（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲 染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是 要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</p><p>（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们 的内容显示在屏幕上，绘制使用 UI 基础组件。值得注意的是，这个过程是逐步完成的，为 了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同 时，可能还在通过网络下载其余内容</p><ul><li>渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）</li></ul><p>JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎， 等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。 也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都 建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放 在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</p><ul><li>CSS 如何阻塞文档解析？（浏览器解析过程）</li></ul><p>理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而， 存在一个问题，JavaScript 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还 没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么 浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM 的下载和构建。也就 是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续 文档的解析。</p><h1 id="二、渲染引擎-渲染模式"><a href="#二、渲染引擎-渲染模式" class="headerlink" title="二、渲染引擎-渲染模式"></a>二、渲染引擎-渲染模式</h1><h2 id="1-什么是渲染？-渲染引擎，渲染过程"><a href="#1-什么是渲染？-渲染引擎，渲染过程" class="headerlink" title="1.什么是渲染？ 渲染引擎，渲染过程"></a>1.什么是渲染？ 渲染引擎，渲染过程</h2><p>渲染: 在电脑绘图中是指用软件从模型生成图像的过程。<br>渲染引擎: 其职责就是渲染，即在浏览器窗口中显示所请求的内容。<br>过程：解析 html 从而构建 DOM 树-&gt;CSS Rule 树-&gt;构建 Render 树-&gt;布局 Render 树-&gt;绘制 Render 树<br>DOMtree 没有样式；CSStree 没有结构<br><img src="/img/1-4.png"></p><h2 id="2-渲染模式的历史意义"><a href="#2-渲染模式的历史意义" class="headerlink" title="2.渲染模式的历史意义"></a>2.渲染模式的历史意义</h2><p>在多年以前（IE6 诞生以前），各浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。<br>随着 WEB 的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如 IE6 就是其中之一。<br>但是考虑到以前建设的网站并不支持标准模式，所以各浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）。<br>向前兼容网页，向后兼容浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.compatMode);<br><span class="hljs-comment">//1.&lt;!DOCTYPE html&gt;写——CSS1compat  标准</span><br><span class="hljs-comment">//2.&lt;!DOCTYPE html&gt;不写——Backcompat 怪异，虽说是怪异了，但是也不是完全怪异，区别不是很大，google怪异也变不成IE那种</span><br></code></pre></td></tr></table></figure><h2 id="3-渲染模式如何控制"><a href="#3-渲染模式如何控制" class="headerlink" title="3.渲染模式如何控制"></a>3.渲染模式如何控制</h2><p>三种标准模式的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">1.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>2.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br>3.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/1-5.png"></p><h1 id="三、Label-标签"><a href="#三、Label-标签" class="headerlink" title="三、Label 标签"></a>三、Label 标签</h1><p>应用:鼠标聚焦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关联触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLabel = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;label&quot;</span>)[<span class="hljs-number">0</span>];<br>oLabel.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br><span class="hljs-keyword">var</span> oInput = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>);<br>oInput.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="四、属性和特性"><a href="#四、属性和特性" class="headerlink" title="四、属性和特性"></a>四、属性和特性</h1><h3 id="属性和特性"><a href="#属性和特性" class="headerlink" title="属性和特性"></a>属性和特性</h3><p>特性：天生就可以具有的如 id type class value checked   有映射关系 js 对象-&gt;html 标签<br>属性包含特性  <br>非特性的属性： data cst log times 等等     无映射关系 js 对象-&gt;html 标签<br>在行间加属性：setAttribute getAttribute 。<br>是属性就能赋值<br>jq 源码  attr prop 底层原理就是这个。prop 是正常 JS 操作，点…。attr 是 setAttribute getAttribute。<br>​</p><h3 id="图片预加载和懒加载"><a href="#图片预加载和懒加载" class="headerlink" title="图片预加载和懒加载"></a>图片预加载和懒加载</h3><p>图片预加载 有充裕的能力时可以这么做<br>加载图片一点点出现，用户体验比较差<br>懒加载：按需加载：<br>写一个预加载：还没加载完不展示（不让她一点一点展示），下载完在展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建方法1</span><br><span class="hljs-comment">// var oImage = document.createElement(&#x27;img&#x27;);</span><br><span class="hljs-comment">// 创建方法2</span><br><span class="hljs-keyword">var</span> oImage = <span class="hljs-keyword">new</span> Image();<br>oImage.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>);<br>  appendChild(<span class="hljs-built_in">this</span>);<br>&#125;;<br>oImage.src =<br>  <span class="hljs-string">&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2187922730,604631233&amp;fm=27&amp;gp=0.jpg&quot;</span>;<br></code></pre></td></tr></table></figure><p>懒加载<br>淘宝 图片预加载+懒加载<br>监控滑轮位置；不断判断当前 div 位置；采用预加载；把图片正式的添加到页面中<br>Math.random()∈[0, 1)<br>12~36 随机数：<br>12+24*Math.random()<br>文档碎片 docuemnt.createDocumentFragment();<br>集中操作减少布局计算（重排）和绘制次数（重绘）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oF = <span class="hljs-built_in">document</span>.createDocumentFragment();<br><span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;wrapper&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-keyword">var</span> newLi = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;li&quot;</span>);<br>  newLi.innerText = i + <span class="hljs-string">&quot;&quot;</span>;<br>  oF.appendChild(newLi);<br>&#125;<br>oUl.appendChild(oF);<br></code></pre></td></tr></table></figure><p>理想很丰满显示很骨干,并未提高多少效率<br>其实可以采用字符串拼接的方式<br>现在还没学 vue，现在可以用字符串拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlStr = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;wrapper&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  htmlStr += <span class="hljs-string">&quot;&lt;li&gt;&quot;</span> + i + <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>;<br>&#125;<br>oUl.innerHTML = htmlStr;<br></code></pre></td></tr></table></figure><p>封装 className <br>document.getElementsByClassName()<br>​</p><h1 id="Bug-调试方法"><a href="#Bug-调试方法" class="headerlink" title="Bug 调试方法"></a>Bug 调试方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.页面一开始就报错了控制台直接显示错误信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length, i++) &#123;<span class="hljs-comment">//error</span><br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      update(<span class="hljs-built_in">this</span>, index);<br>    &#125;<br>  &#125;)(i);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.页面一开始没报错，执行中报错了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      update(<span class="hljs-built_in">this</span>, index);<br>    &#125;;<br>  &#125;)(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updata</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  <span class="hljs-comment">//error</span><br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.没有报错和预想不一样   结果反推</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// console.log(i);//10</span><br>      <span class="hljs-comment">// update(i);//error</span><br>    &#125;;<br>  &#125;)(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  <span class="hljs-comment">// dom可变量</span><br>  <span class="hljs-comment">// console.log(dom, index);//10 undefined</span><br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><p>断点调试.写上 debugger</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oLiArray = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;l&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; oLiArray.length; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>    oLiArray[index].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      update(<span class="hljs-built_in">this</span>, index);<br>    &#125;;<br>  &#125;)(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">dom, index</span>) </span>&#123;<br>  dom.innerText = <span class="hljs-built_in">parseInt</span>(dom.innerText) + index;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h1><ol><li> 字符串长度<code>str.length</code></li><li>查找字符串中的字符串<br> <code>indexOf</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;The full name of China is the People&#x27;s Republic of China.&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.indexOf(<span class="hljs-string">&quot;China&quot;</span>); <span class="hljs-comment">// 首次出现索引的地方:17</span><br></code></pre></td></tr></table></figure><pre><code> `lastIndexOf()` 指定文本在字符串中_最后_一次出现的索引</code></pre><p>两种方法</p><ol><li>没找到返回-1</li><li>可以传第二个参数（ 作为检索起始位置 ）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;The full name of China is the People&#x27;s Republic of China.&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.indexOf(<span class="hljs-string">&quot;China&quot;</span>, <span class="hljs-number">18</span>); <span class="hljs-comment">// 51</span><br></code></pre></td></tr></table></figure><ol start="3"><li>检索字符串中的字符串<code>search()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;The full name of China is the People&#x27;s Republic of China.&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.search(<span class="hljs-string">&quot;full&quot;</span>); <span class="hljs-comment">// 返回匹配的位置 4</span><br></code></pre></td></tr></table></figure><blockquote><p>两种方法，indexOf() 与 search()，是<em>相等的</em>。</p></blockquote><p>这两种方法是不相等的。区别在于：</p><ul><li>search() 方法无法设置第二个开始位置参数。</li><li>indexOf() 方法无法设置更强大的搜索值（正则表达式）。</li></ul><ol start="4"><li>提取部分字符串<br> 有三种提取部分字符串的方法：</li></ol><ul><li><code>slice(start, end)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">7</span>, <span class="hljs-number">13</span>); <span class="hljs-comment">// Banana</span><br></code></pre></td></tr></table></figure><p>如果某个参数为负，则从字符串的结尾开始计数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.slice(-<span class="hljs-number">13</span>, -<span class="hljs-number">7</span>); <span class="hljs-comment">// Banana</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则该方法将裁剪字符串的剩余部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>从结尾计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> res = str.slice(-<span class="hljs-number">13</span>);<br></code></pre></td></tr></table></figure><ul><li><code>substring(start, end)</code></li></ul><p>substring() 类似于 slice()。不同之处在于 substring() 无法接受负的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.substring(<span class="hljs-number">7</span>, <span class="hljs-number">13</span>); <span class="hljs-comment">// &#x27;Banana&#x27;</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则该 substring() 将裁剪字符串的剩余部分。</p><ul><li><code>substr(start, length)</code></li></ul><p>substr() 类似于 slice()。不同之处在于第二个参数规定被提取部分的<em>长度</em>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.substr(<span class="hljs-number">7</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">// Banana</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。</p><p>如果首个参数为负，则从字符串的结尾计算位置。 第二个参数不能为负，因为它定义的是长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apple, Banana, Mango&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.substr(-<span class="hljs-number">5</span>); <span class="hljs-comment">// Mango</span><br></code></pre></td></tr></table></figure><ol start="5"><li>替换字符串内容<code>replace()</code></li></ol><p>replace() 方法不会改变调用它的字符串。它返回的是新字符串。</p><p>默认地，replace() 只替换首个匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;Please visit Microsoft!&quot;</span>;<br><span class="hljs-keyword">var</span> n = str.replace(<span class="hljs-string">&quot;Microsoft&quot;</span>, <span class="hljs-string">&quot;W3School&quot;</span>);<br></code></pre></td></tr></table></figure><p>如需执行大小写不敏感的替换，请使用正则表达式 /i（大小写不敏感）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;Please visit Microsoft!&quot;</span>;<br><span class="hljs-keyword">var</span> n = str.replace(<span class="hljs-regexp">/MICROSOFT/i</span>, <span class="hljs-string">&quot;W3School&quot;</span>);<br></code></pre></td></tr></table></figure><p>如需替换所有匹配，请使用正则表达式的 g 标志（用于全局搜索）：</p><ol start="6"><li>转换为大写和小写</li></ol><p><code>toUpperCase()</code>: 把字符串转换为大写：</p><p><code>toLowerCase ()</code>: 把字符串转换为小写：</p><ol start="7"><li><code>concat()</code>方法 连接两个或多个字符串</li></ol><p>所有字符串方法都会返回新字符串。它们不会修改原始字符串。</p><p>正式地说：字符串是不可变的：字符串不能更改，只能替换。</p><ol start="8"><li> <code>String.trim()</code> 删除字符串两端的空白符：</li><li>提取字符串字符<br> 这是两个提取字符串字符的<em>安全</em>方法：</li></ol><ul><li>charAt(position)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>str.charAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// 返回 H</span><br></code></pre></td></tr></table></figure><ul><li>charCodeAt(position)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>str.charCodeAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// 返回 72</span><br></code></pre></td></tr></table></figure><h2 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h2><p>ECMAScript 5 (2009) 允许对字符串的属性访问 [ ]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>str[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 返回 H</span><br></code></pre></td></tr></table></figure><p>使用属性访问有点不太靠谱</p><ul><li>它让字符串看起来像是数组（其实并不是）</li><li>如果找不到字符，[ ]返回 undefined，而 charAt()返回空字符串。</li><li>它是只读的。str[0] = “A”不会产生错误（但也不会工作！）<blockquote><p>如果您希望按照数组的方式处理字符串，可以先把它转换为数组。</p></blockquote></li></ul><p>把字符串转换为数组<br>split()</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ol><li>直接字面量</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><ol start="2"><li>构造器构造</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//arr=[1,2,3,4];</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// arr=[empty*10]</span><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// arr=[1,2,3,4]</span><br></code></pre></td></tr></table></figure><p>构造器构造的数组，如果构造函数的参数传递一个数字代表的是数组的长度，数组当中每一项默认为 empty.</p><ol start="3"><li>Array.of</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//[1,2,3];</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// [3]</span><br></code></pre></td></tr></table></figure><p>Array.of 是返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。Array.of()出现的目的是为了解决构造器构造中因参数个数不同，导致的行为有差异的问题。</p><ol start="4"><li>Array.from(Array.from 是将类数组转换成数组的方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">Array</span>.from(obj); <span class="hljs-comment">//arr=[1,2,3]</span><br></code></pre></td></tr></table></figure><h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><h2 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h2><p>splice</p><p>arr.splice(从第几位开始，剪切多少长度，在切口处添加新的数据)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>];<br>arr.splice(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]; <span class="hljs-comment">//实现把4填进去</span><br>arr.splice(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//鼠标光标在前面</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.splice(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//倒数第一位</span><br></code></pre></td></tr></table></figure><p>push</p><p>把数组的最后一位增加</p><p>unshift</p><p>和 push 方向相反，在前面加东西</p><p>pop</p><p>把数组的最后一位剪切出去   不能传参</p><p>shift</p><p>把前面减 arr.shift()</p><p>reverse</p><p>逆反</p><p>sort 排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b; <span class="hljs-comment">//升序</span><br>  <span class="hljs-comment">//return b - a;//降序</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>copyWithin</p><p>复制数组中某些连接的数据到指定位置</p><p>fill</p><p>填充数组</p><h2 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h2><p>concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> c = arr.concat(arr1);<br></code></pre></td></tr></table></figure><p>toString<br>数组变成字符串<br>Slice<br>截取数组中部分连接数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-comment">// 1.两个参数，slice（从该位开始截取，截取到该位）</span><br><span class="hljs-comment">// var newArr = arr.slice(1,3);</span><br><span class="hljs-comment">// 2.一个参数slice（从第几位开始截取，截取到最后）</span><br><span class="hljs-keyword">var</span> newArr = arr.slice(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> newArr = arr.slice(-<span class="hljs-number">4</span>); <span class="hljs-comment">//-4+6位</span><br><span class="hljs-comment">// 3.没参数：全截取</span><br></code></pre></td></tr></table></figure><p>join<br>实现字符串连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.join(<span class="hljs-string">&quot;-&quot;</span>); <span class="hljs-comment">//必须是字符串形式</span><br>arr = [<span class="hljs-number">1</span> - <span class="hljs-number">2</span> - <span class="hljs-number">3</span> - <span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><p>split()</p><p>互逆方法：按照什么拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span> - <span class="hljs-number">2</span> - <span class="hljs-number">3</span> - <span class="hljs-number">4</span>];<br>arr.split(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">//必须是字符串形式</span><br></code></pre></td></tr></table></figure><p>数组转字符串 join<br>字符串转数组 split</p><p>forEach<br>遍历<br>indexOf<br>lastIndexOf<br>includes<br>toLocalString</p><p>是不是数组：isArray</p><h1 id="数组遍历方法"><a href="#数组遍历方法" class="headerlink" title="数组遍历方法"></a>数组遍历方法</h1><p>es5<br>forEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">arr1.forEach(<span class="hljs-function">(<span class="hljs-params">ele, index, arr1</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(ele)<br>&#125;)<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><pre><code>map</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = arr1.map(<span class="hljs-function">(<span class="hljs-params">ele, index, arr1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> ele * <span class="hljs-number">2</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code>filter</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = arr1.filter(<span class="hljs-function">(<span class="hljs-params">ele, index, arr1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> ele &gt; <span class="hljs-number">2</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code>everysomereducereduceRight</code></pre><p>es6<br>find<br>findIndex<br>keys<br>values<br>entries</p><h1 id="数组开头-结尾添加元素"><a href="#数组开头-结尾添加元素" class="headerlink" title="数组开头/结尾添加元素"></a>数组开头/结尾添加元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myArray = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>];<br>方法<span class="hljs-number">1</span>;<br>myArray.push(<span class="hljs-string">&quot;end&quot;</span>);<br>myArray.unshift(<span class="hljs-string">&quot;start&quot;</span>);<br>方法<span class="hljs-number">2</span>;<br>myArray = [<span class="hljs-string">&quot;start&quot;</span>, ...myArray];<br>myArray = [...myArray, <span class="hljs-string">&quot;end&quot;</span>];<br></code></pre></td></tr></table></figure><h1 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.slice.call(arrayLike);<br>返回的是一个<span class="hljs-built_in">Array</span>类型对象;<br></code></pre></td></tr></table></figure><p>已知数组 var stringArray = [“This”, “is”, “Baidu”, “Campus”]  This is Baidu Campus”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> stringArray = [<span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;baidu&quot;</span>];<br>stringArray = stringArray.join(<span class="hljs-string">&quot; &quot;</span>);<br>stringArray = stringArray.toString();<br><span class="hljs-built_in">console</span>.log(stringArray);<br></code></pre></td></tr></table></figure><p>Foreach<br>初探</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>];<br><span class="hljs-comment">// 数组方法：定义在Array.prototype</span><br><span class="hljs-comment">// forEach:参数：函数</span><br><span class="hljs-comment">// personArr.forEach(</span><br><span class="hljs-comment">//     // 不断调用，执行几次取决于数组元素的个数</span><br><span class="hljs-comment">//     function (ele, index, self) &#123;</span><br><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// );</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(ele, index, self);<br>&#125;<br>personArr.forEach(deal);<br></code></pre></td></tr></table></figure><p>小应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oLiArray = oUl.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">//类数组</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> personArr = [</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">  ];</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;</span><br><span class="javascript">    oLiArray[index].innerText = ele.name;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  personArr.forEach(deal);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>深入源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      <span class="hljs-keyword">var</span> oLiArray = oUl.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">//类数组</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> personArr = [</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">        &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">      ];</span><br><span class="javascript">      <span class="hljs-comment">// 目的：数组实例可以调用该方法，要达到循环遍历的作用</span></span><br><span class="javascript">      <span class="hljs-comment">// 参数：需要一个函数，最后实现我们一系列功能，函数执行的时候也会接受参数 ele(元素) index(该元素在数组中的索引) self(数组本身)</span></span><br><span class="javascript">      <span class="hljs-built_in">Array</span>.prototype.myForEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 实现功能：执行多少次取决于数组的个数</span></span><br><span class="javascript">        <span class="hljs-comment">// this =&gt; personArr</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;</span><br><span class="javascript">          <span class="hljs-comment">// this[i] 等价于 personArr[0]</span></span><br><span class="javascript">          func(<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(ele, index, self);</span></span><br><span class="javascript">        oLiArray[index].innerText = ele.name;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      personArr.myForEach(deal);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(ele, index, self, <span class="hljs-built_in">this</span>);<br>  <span class="hljs-comment">// this是谁取决于：是否传第二个参数，不传则window</span><br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br>personArr.forEach(deal, obj);<br></code></pre></td></tr></table></figure><p>源码实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oUl = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;ul&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oLiArray = oUl.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>); <span class="hljs-comment">//类数组</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> personArr = [</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,</span><br><span class="javascript">    &#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,</span><br><span class="javascript">      <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,</span><br><span class="javascript">  ];</span><br><span class="javascript">  <span class="hljs-built_in">Array</span>.prototype.myForEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;</span><br><span class="javascript">    <span class="hljs-comment">// 实际参数列表</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] != <span class="hljs-literal">undefined</span> ? <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] : <span class="hljs-built_in">window</span>;</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;</span><br><span class="javascript">      func.apply(_this, [<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deal</span>(<span class="hljs-params">ele, index, self</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// this =&gt; window</span></span><br><span class="javascript">    oLiArray[index].innerText = ele.name;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(ele, index, self, <span class="hljs-built_in">this</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;</span><br><span class="javascript">  personArr.myForEach(deal, obj);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Filter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>];<br><br><span class="hljs-comment">// Array.prototype.filter 对数组过滤作用，基于遍历的</span><br><span class="hljs-comment">// filter 参数 函数</span><br><span class="hljs-comment">// filter执行完后，会返回一个新的数组</span><br><span class="hljs-keyword">var</span> newArray = personArr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-comment">// if (ele.sex == &quot;m&quot;) &#123;</span><br>  <span class="hljs-comment">//     return true;</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//     return false;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">return</span> ele.sex == <span class="hljs-string">&quot;m&quot;</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newArray);<br></code></pre></td></tr></table></figure><p>封装 filter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span> &#125;,<br>];<br><span class="hljs-built_in">Array</span>.prototype.myFilter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = [];<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>; <span class="hljs-comment">//遇到真的直接返回</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    func.apply(_this, [<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]) &amp;&amp; arr.push(<span class="hljs-built_in">this</span>[i]); <span class="hljs-comment">//如果前面正确，就用后面的</span><br>    <span class="hljs-comment">// 写法2</span><br>    <span class="hljs-comment">// if (func.apply(_this, [this[i], i, this])) &#123;</span><br>    <span class="hljs-comment">//     arr.push(this[i]);</span><br>    <span class="hljs-comment">// &#125;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br><span class="hljs-keyword">var</span> newArr = personArr.myFilter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-comment">// this</span><br>  <span class="hljs-keyword">return</span> ele.sex == <span class="hljs-string">&quot;f&quot;</span>;<br>&#125;, obj);<br><span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><p>Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><br><span class="hljs-comment">// Array.prototype.map映射作用 返回新数组</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> newNameArr = personArr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-comment">// this=obj</span><br>  <span class="hljs-comment">// console.log(ele, index, self, this);</span><br>  <span class="hljs-keyword">return</span> ele.name;<br>&#125;, obj);<br><span class="hljs-built_in">console</span>.log(newNameArr);<br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><br><span class="hljs-built_in">Array</span>.prototype.myMap = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = [];<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    arr.push(func.call(_this, <span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>));<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> newNameArr = personArr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">return</span> ele.name;<br>&#125;, obj);<br><span class="hljs-built_in">console</span>.log(newNameArr);<br></code></pre></td></tr></table></figure><p>Every</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><span class="hljs-comment">// Array.prototype.every</span><br><span class="hljs-comment">// 目的：判断数组元素是否都符合条件 true false</span><br><span class="hljs-keyword">var</span> flag = personArr.every(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">if</span> (ele.age &gt; <span class="hljs-number">18</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;<br>);<br><span class="hljs-built_in">console</span>.log(flag);<br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;,<br>];<br><span class="hljs-built_in">Array</span>.prototype.myEvery = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">if</span> (func.apply(_this, [<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]) == <span class="hljs-literal">false</span>) &#123;<br>      flag = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> flag;<br>&#125;;<br><span class="hljs-keyword">var</span> flag = personArr.myEvery(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">if</span> (ele.age &gt; <span class="hljs-number">18</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;<br>);<br><span class="hljs-built_in">console</span>.log(flag);<br></code></pre></td></tr></table></figure><p>Some</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> personArr = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王港&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/3.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;颈椎不好&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘莹&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/5.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我是谁&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王秀莹&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/4.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;我很好看&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘金雷&quot;</span>,<br>    <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/1.png&quot;</span>,<br>    <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;你没有见过陌生的脸&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘飞翔&quot;</span>, <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;./src/img/2.png&quot;</span>, <span class="hljs-attr">des</span>: <span class="hljs-string">&quot;瓜皮刘&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">var</span> flag = personArr.some(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index, self</span>) </span>&#123;<br>    <span class="hljs-comment">// 一真则真</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">if</span> (ele.age &lt; <span class="hljs-number">18</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;<br>);<br><span class="hljs-built_in">console</span>.log(flag);<br></code></pre></td></tr></table></figure><p>Reduce 从左向右遍历<a href="https://segmentfault.com/a/1190000017420042">https://segmentfault.com/a/1190000017420042</a><br>应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.cookie);<br><span class="hljs-keyword">var</span> cookieStr =<br>  <span class="hljs-string">&quot;BIDUPSID=5B95EF6FA42E8383ED0DF3B230A443E4; PSTM=1604537657; BAIDUID=5B95EF6FA42E8383AAD0F65E4D7F2E56:FG=1; H_WISE_SIDS=107319_110085_127969_128698_131423_132548_151533_154213_165135_165935_166148_167537_168389_168490_168542_169060_169308_169770_170036_170817_170872_171159_171235_171706_171930_172385_172499_172678_172871_172897_172938_172996_173016_173033_173125_173127_173129_173202_173221_173244_173369_173387_173414_173564_173609_173711_8000097_8000106_8000129_8000139_8000145; MSA_WH=375_667; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BD_UPN=12314753; H_PS_PSSID=34298_33801_34322_31253_34331_34004_34072_34092_26350_34246; BAIDUID_BFESS=5B95EF6FA42E8383AAD0F65E4D7F2E56:FG=1; delPer=0; BD_CK_SAM=1; PSINO=1; H_PS_645EC=00aeqYdOwo0pndDhzUfhp00eoOoEcL5cDeqOEhDW1M7FqfrhZGt8gXfo6mNS3VkB7bbR; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; BD_HOME=1; BA_HECTOR=8g04210g0g0g2l2h5i1ggab600q&quot;</span>;<br><span class="hljs-comment">// name =&gt; value</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseCookieStr</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> cookieArr = str.split(<span class="hljs-string">&quot;; &quot;</span>);<br>  <span class="hljs-keyword">return</span> cookieArr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">preValue, icurValue, index, self</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(preValue, icurValue)</span><br>    <span class="hljs-keyword">var</span> arr = icurValue.split(<span class="hljs-string">&quot;=&quot;</span>);<br>    preValue[arr[<span class="hljs-number">0</span>]] = arr[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> preValue;<br>  &#125;, obj);<br>  <span class="hljs-comment">// console.log(cookieArr)</span><br>&#125;<br><br><span class="hljs-comment">// console.log(parseCookieStr(cookieStr));</span><br><span class="hljs-keyword">var</span> cookieObj = parseCookieStr(cookieStr);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.myReduce = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func, initialValue</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">this</span>.length,<br>    _this = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>] || <span class="hljs-built_in">window</span>,<br>    nextValue = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    nextValue = func.apply(_this, [nextValue, <span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> nextValue;<br>&#125;;<br></code></pre></td></tr></table></figure><p>ReduceRight 从右向左遍历</p><h1 id="题"><a href="#题" class="headerlink" title="题"></a>题</h1><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;baidu&quot;</span>];<br><span class="hljs-built_in">console</span>.log(arr.toString()); <span class="hljs-comment">//this,is,baidu</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//this is baidu</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//已知有字符串 foo=&quot;get-element-by-id&quot;,写一个 function 将其转化成驼峰表示法&quot;getElementById&quot;。</span><br>答案：<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combo</span>(<span class="hljs-params">msg</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> arr = msg.split(<span class="hljs-string">&quot;-&quot;</span>);<br>  <span class="hljs-keyword">var</span> len = arr.length; <span class="hljs-comment">//将 arr.length 存储在一个局部变量可以提高 for 循环效</span><br>  率<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)&#123;<br>    arr[i]=arr[i].charAt(<span class="hljs-number">0</span>).toUpperCase()+arr[i].substr(<span class="hljs-number">1</span>,arr[i].length-<span class="hljs-number">1</span>);<br>  &#125;<br>  msg=arr.join(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">specify(‘hello,world’)<span class="hljs-comment">//=&gt;’h,e,l,l,o,w,o,r,l,d’ 实 现 specify</span><br>函<br></code></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="你不知道的-JS"><a href="#你不知道的-JS" class="headerlink" title="你不知道的 JS"></a>你不知道的 JS</h1><h1 id="一、UI-多线程"><a href="#一、UI-多线程" class="headerlink" title="一、UI 多线程"></a>一、UI 多线程</h1><h2 id="1-浏览器常驻的线程"><a href="#1-浏览器常驻的线程" class="headerlink" title="1.浏览器常驻的线程"></a>1.浏览器常驻的线程</h2><blockquote><p>js 引擎线程 （解释执行 js 代码、用户输入、网络请求）<br>GUI 线程 （绘制用户界面、与 js 主线程是互斥的）<br>http 网络请求线程 （处理用户的 get、post 等请求，等返回结果后将回调函数推入任务队列）<br>定时触发器线程 （setTimeout、setInterval 等待时间结束后把执行函数推入任务队列中）<br>浏览器事件处理线程 （将 click、mouse 等交互事件发生后将这些事件放入事件队列中）</p></blockquote><h2 id="2-UI-主线程负责协调运转"><a href="#2-UI-主线程负责协调运转" class="headerlink" title="2.UI 主线程负责协调运转"></a>2.UI 主线程负责协调运转</h2><p><img src="/img/1-6.png"></p><h2 id="3-JS-引擎线程和-GUI-线程-互斥"><a href="#3-JS-引擎线程和-GUI-线程-互斥" class="headerlink" title="3.JS 引擎线程和 GUI 线程-互斥"></a>3.JS 引擎线程和 GUI 线程-互斥</h2><p>JS 可以操作 DOM 元素，进而会影响到 GUI 的渲染结果，因此 JS 引擎线程与 GUI 渲染线程是互斥的。也就是说当 JS 引擎线程处于运行状态时，GUI 渲染线程将处于冻结状态。<br>JS 单线程：当死循环，点击事件永远失效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">  <span class="hljs-comment">// dieLoop();//这里因为是死循环，所以执行点击的时候，不会触发UI，按钮样式不会变化</span></span><br><span class="javascript">  oBtn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;0&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dieLoop</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;&#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-Js-执行机制-单线程"><a href="#4-Js-执行机制-单线程" class="headerlink" title="4.Js 执行机制-单线程"></a>4.Js 执行机制-单线程</h2><p>单线程-同一时间只能做一件事</p><blockquote><p>Js 执行机制-多线程不好吗？</p></blockquote><p>js 设计出来就是为了与用户交互，处理 DOM，假如 js 是多线程，同一时间一个线程想要修改 DOM，另一个线程想要删除 DOM，问题就变得复杂许多，浏览器不知道听谁的，如果引入“锁”的机制，这不就又回到了被其他语言尴尬的困境了吗。</p><h2 id="5-大量数据操作怎么办？"><a href="#5-大量数据操作怎么办？" class="headerlink" title="5.大量数据操作怎么办？"></a>5.大量数据操作怎么办？</h2><p>单线程计算能力有限，大量数据需要计算渲染的话，我们可以配合后端进行操作，比如我们后期进阶班里降到的 VUE 与 nodejs 配合，也就是传说中的 SSR 技术。</p><h2 id="6-Js-执行机制"><a href="#6-Js-执行机制" class="headerlink" title="6.Js 执行机制"></a>6.Js 执行机制</h2><p>JavaScript 是基于单线程运行的，同时又是可以异步执行的，一般来说这种既是单线程又是异步的语言都是基于事件来驱动的，恰好浏览器就给 JavaScript 提供了这么一个环境<br>导图要表达的内容用文字来表述的话：<br><img src="/img/1-7.png"><br>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数。<br>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。<br>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</p><p>上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</p><blockquote><p>同步任务</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params">ot</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params">it</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(it);<br>  &#125;<br>  inner(<span class="hljs-number">20</span>);<br>  <span class="hljs-built_in">console</span>.log(ot);<br>&#125;<br>outer(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><ol><li>代码没有执行的时候，执行栈为空栈</li><li>foo 函数执行时，创建了一帧，这帧中包含了形参、局部变量（预编译过程），然后把这一帧压入栈中</li><li>然后执行 foo 函数内代码，执行 bar 函数</li><li>创建新帧，同样有形参、局部变量，压入栈中</li><li>bar 函数执行完毕，弹出栈</li><li>foo 函数执行完毕，弹出栈</li><li>执行栈为空<br>执行栈其实相当于 js 主线程<blockquote><p>异步任务</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>  <span class="hljs-attr">url</span>: ‘localhost:<span class="hljs-regexp">/js/</span>demo.json’,<br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br>       <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(‘run’);<br></code></pre></td></tr></table></figure><p>Ajax 进入 Event Table，注册回调函数 success<br>执行 console.log(‘run’)<br>ajax 事件完成 http 网络请求线程把任务放入 Event Queue 中<br>主线程（调用栈）读取任务下执行 success 函数<br>换一张图理解一下<br>用定时器举个栗子<br><img src="/img/1-8.png"></p><h2 id="7-重新理解定时器"><a href="#7-重新理解定时器" class="headerlink" title="7.重新理解定时器"></a>7.重新理解定时器</h2><p>setTimeout 的等待时间结束后并不是直接执行的而是先推入浏览器<br>的一个任务队列，在同步队列结束后在依次调用任务队列中的任务。<br>setTimeout(function(){}, 0)Js 主线程中的执行栈为空时，0 毫秒实际上也达不到的，根据 HTML 标准，最低 4 毫秒。<br>setInterval 是每隔一段时间把任务放到 Event Queue 之中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> statTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//+:直接调用getTime</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">time</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; time; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(statTime);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - statTime);<br>&#125;, <span class="hljs-number">100</span>);<br>sleep(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></figure><p>定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(‘time’)&#125;, <span class="hljs-number">400</span>);<br>outer(<span class="hljs-number">100000</span>);<br><span class="hljs-built_in">console</span>.log(‘hello world’);<br></code></pre></td></tr></table></figure><p>真正了解底层原理，才能是持续化发展之路。</p><h1 id="二、Bind-的模拟实现"><a href="#二、Bind-的模拟实现" class="headerlink" title="二、Bind 的模拟实现"></a>二、Bind 的模拟实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = &#123;<br>  <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.message = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-built_in">this</span>.bindEvent();<br>  &#125;,<br>  <span class="hljs-attr">bindEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this = list</span><br>    <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)[<span class="hljs-number">0</span>];<br>    oDiv.onclick = <span class="hljs-built_in">this</span>.show; <span class="hljs-comment">// div</span><br>  &#125;,<br>  <span class="hljs-comment">// show : function () &#123;</span><br>  <span class="hljs-comment">// console.log(this);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-attr">show</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.target);<br>  &#125;,<br>&#125;;<br>list.init();<br></code></pre></td></tr></table></figure><h2 id="1-Bind-的使用"><a href="#1-Bind-的使用" class="headerlink" title="1.Bind 的使用"></a>1.Bind 的使用</h2><p>Func.bind(x1, x2, x3, …..)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;width: 100px; height: 100px;background-color: red;&quot;</span>&gt;&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">var</span> list = &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.message = <span class="hljs-string">&#x27;hello&#x27;</span>;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.bindEvent();</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">bindEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">// this = list</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span></span><br><span class="javascript"><span class="xml">    oDiv.onclick = <span class="hljs-built_in">this</span>.show.bind(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//即执行show的功能，this又指向list</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">show</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(e.target, <span class="hljs-built_in">this</span>);</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;;</span></span><br><span class="javascript"><span class="xml">list.init();</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);<br>  <span class="hljs-built_in">console</span>.log(name, age);<br>&#125;<br><span class="hljs-comment">// show(obj, &#x27;cc&#x27;, 19)</span><br><span class="hljs-keyword">var</span> newShow = show.bind(obj); <span class="hljs-comment">//改变了this</span><br>newShow(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>继续传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);<br>  <span class="hljs-built_in">console</span>.log(name, age);<br>&#125;<br><span class="hljs-keyword">var</span> newShow = show.bind(obj, <span class="hljs-string">&quot;sc&quot;</span>);<br>newShow(<span class="hljs-number">19</span>);<br><span class="hljs-comment">//也可传三个参数</span><br><span class="hljs-keyword">var</span> newShow = show.bind(obj, <span class="hljs-string">&quot;sc&quot;</span>, <span class="hljs-number">19</span>);<br>newShow();<br><span class="hljs-comment">// 可以传null</span><br><span class="hljs-keyword">var</span> newShow = show.bind(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;sc&quot;</span>, <span class="hljs-number">19</span>);<br>newShow();<br><span class="hljs-keyword">var</span> newShow = show.bind(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;sc&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-keyword">new</span> newShow(); <span class="hljs-comment">//新对象   undefined</span><br></code></pre></td></tr></table></figure><h2 id="2-Instanceof"><a href="#2-Instanceof" class="headerlink" title="2.Instanceof"></a>2.Instanceof</h2><p>var obj = new Object();</p><p>obj instanceof Object == true</p><h1 id="三、惰性函数"><a href="#三、惰性函数" class="headerlink" title="三、惰性函数"></a>三、惰性函数</h1><p>针对于优化频繁使用的函数</p><p>常用于，函数库的编写，单例模式之中</p><p>写一个 test 函数，这个函数返回首次调用时的 new Date().getTime()时间，注意是首次。</p><p>惰性函数-全局污染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (t) &#123;<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;<br>  t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><p>惰性函数-非调用时计算时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test1 = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>惰性函数-未解决判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test2 = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> t;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (t) <span class="hljs-keyword">return</span> t;<br>    t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>惰性函数-完美</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> t;<br>  t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> test();<br>&#125;;<br></code></pre></td></tr></table></figure><p>惰性函数</p><p>事件函数的封装</p><p>滚动条偏移量函数的封装</p><p>jQuery 函数库的封装</p><h1 id="四、防抖-amp-节流"><a href="#四、防抖-amp-节流" class="headerlink" title="四、防抖&amp;节流"></a>四、防抖&amp;节流</h1><p>在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于 DOM 操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流(throttle)和函数防抖(debounce)就是为了解决类似需求应运而生的。</p><p>函数节流就是预定一个函数只有在大于等于执行周期时才执行，周期内调用不执行。好像水滴攒到一定重量才会落下一样。</p><p>场景：</p><pre><code>窗口调整（resize）页面滚动（scroll）抢购疯狂点击（mousedown）</code></pre><h1 id="五、柯里化"><a href="#五、柯里化" class="headerlink" title="五、柯里化"></a>五、柯里化</h1><p>函数式编程之柯里化</p><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p><h2 id="1-前端-why？柯里化"><a href="#1-前端-why？柯里化" class="headerlink" title="1. 前端 why？柯里化"></a>1. 前端 why？柯里化</h2><p>前端使用柯理化的用途主要就应该是简化代码结构，提高系统的维护性，一个方法，只有一个参数，强制了功能的单一性，很自然就做到了功能内聚，降低耦合。<br>柯理化的优点就是降低代码的重复，提高代码的适应性</p><h2 id="2-调用形式"><a href="#2-调用形式" class="headerlink" title="2.调用形式"></a>2.调用形式</h2><p>function add(a,b,c){} ;<br>var newAdd = Curry(add);<br>newAdd(1)(2)(3)</p><h1 id="3-柯里化前奏-需要固定数量参数"><a href="#3-柯里化前奏-需要固定数量参数" class="headerlink" title="3.柯里化前奏-需要固定数量参数"></a>3.柯里化前奏-需要固定数量参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b, c, d</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b + c + d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FixedParamsCurry</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-comment">// [add, 1, 2]</span><br>  <span class="hljs-keyword">var</span> _arg = [].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// arguments [2, 3]</span><br>    <span class="hljs-comment">// [1,2,2,3]</span><br>    <span class="hljs-keyword">var</span> newArg = _arg.concat([].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, newArg); <span class="hljs-comment">//this就是函数环境</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> newAdd = FixedParamsCurry(add, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(newAdd(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h2 id="4-实现柯里化-期待固定数量参数（不是必须这次，可以下次）"><a href="#4-实现柯里化-期待固定数量参数（不是必须这次，可以下次）" class="headerlink" title="4. 实现柯里化-期待固定数量参数（不是必须这次，可以下次）"></a>4. 实现柯里化-期待固定数量参数（不是必须这次，可以下次）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b, c, d</span>) </span>&#123;<br>  <span class="hljs-comment">// add.length</span><br>  <span class="hljs-keyword">return</span> a + b + c + d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FixedParamsCurry</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> _arg = [].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> newArg = _arg.concat([].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, newArg);<br>  &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Curry</span>(<span class="hljs-params">fn, length</span>) </span>&#123;<br>  <span class="hljs-comment">// length:4</span><br>  <span class="hljs-keyword">var</span> length = length || fn.length;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length &lt; length) &#123;<br>      <span class="hljs-comment">// [fn].concat([1])  [fn,1]</span><br>      <span class="hljs-keyword">var</span> combined = [fn].concat([].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>));<br>      <span class="hljs-keyword">return</span> Curry(<br>        FixedParamsCurry.apply(<span class="hljs-built_in">this</span>, combined),<br>        length - <span class="hljs-built_in">arguments</span>.length<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> newAdd = Curry(add);<br><span class="hljs-comment">// console.log(newAdd(1,2,3,4));</span><br><span class="hljs-comment">// console.log(newAdd(1)(2,3,4));// FixedParamsCurry</span><br><span class="hljs-comment">// console.log(newAdd(1)(2)(3)(4));//外部包裹Curry</span><br><br><span class="hljs-comment">// 应用于ajax</span><br><span class="hljs-comment">// POST www.test1.com &#x27;name=cst&amp;code=111&#x27;</span><br><span class="hljs-comment">// POST www.test1.com &#x27;key=222&#x27;</span><br><span class="hljs-comment">// POST www.test2.com &#x27;name=cst&amp;code=111&#x27;</span><br><span class="hljs-comment">// POST www.test2.com &#x27;key=111&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">method, url, data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(method);<br>  <span class="hljs-built_in">console</span>.log(url);<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test1.com&#x27;, &#x27;name=cst&amp;code=111&#x27;)</span><br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test1.com&#x27;, &#x27;key=222&#x27;)</span><br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test2.com&#x27;, &#x27;name=cst&amp;code=111&#x27;)</span><br><span class="hljs-comment">// ajax(&#x27;POST&#x27;, &#x27;www.test2.com&#x27;, &#x27;key=222&#x27;)</span><br><br><span class="hljs-keyword">var</span> ajaxCurry = Curry(ajax);<br><span class="hljs-keyword">var</span> PostAjax = ajaxCurry(<span class="hljs-string">&quot;POST&quot;</span>);<br>PostAjax(<span class="hljs-string">&quot;www.test1.com&quot;</span>, <span class="hljs-string">&quot;key=222&quot;</span>);<br>PostAjax(<span class="hljs-string">&quot;www.test1.com&quot;</span>, <span class="hljs-string">&quot;name=cst&amp;code=111&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="五、节流"><a href="#五、节流" class="headerlink" title="五、节流"></a>五、节流</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;show&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">  oBtn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    oDiv.innerText = <span class="hljs-built_in">parseInt</span>(oDiv.innerText) + <span class="hljs-number">1</span>;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-comment">// 写一个恶意脚本，点击button</span></span><br><span class="javascript">  <span class="hljs-comment">// for (var i = 0; i &lt; 9000; i++) &#123;</span></span><br><span class="javascript">  <span class="hljs-comment">//     oBtn.onclick()</span></span><br><span class="javascript">  <span class="hljs-comment">// &#125;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>封装节流</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;show&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> oBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">handler, wait</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//返回出去改函数让OBtn调用</span></span><br><span class="javascript">      <span class="hljs-comment">//arguments第0位即[event]</span></span><br><span class="javascript">      <span class="hljs-comment">// 这里的this是oBtn</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (nowTime - lastTime &gt; wait) &#123;</span><br><span class="javascript">        handler.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);</span><br><span class="javascript">        lastTime = nowTime;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, e);</span><br><span class="javascript">    oDiv.innerText = <span class="hljs-built_in">parseInt</span>(oDiv.innerText) + <span class="hljs-number">1</span>;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oBtn.onclick = throttle(buy, <span class="hljs-number">1000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="六、防抖"><a href="#六、防抖" class="headerlink" title="六、防抖"></a>六、防抖</h1><p>在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于 DOM 操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流(throttle)和函数防抖(debounce)就是为了解决类似需求应运而生的。<br>场景：<br>实时搜索(keyup)<br>拖拽(mousemove)<br>初级防抖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oInp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;inp&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//时间对象</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e, <span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oInp.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>,</span><br><span class="javascript">      _arg = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">    <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      ajax.apply(_self, _arg);</span><br><span class="javascript">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>封装防抖：便于所有函数应用防抖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> oInp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;inp&quot;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">hander, delay</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>,</span><br><span class="javascript">        _arg = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">      <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        hander.apply(_self, _arg);</span><br><span class="javascript">      &#125;, delay);</span><br><span class="javascript">    &#125;;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//时间对象</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(e, <span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  oInp.oninput = debounce(ajax, <span class="hljs-number">2000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="七、纯函数"><a href="#七、纯函数" class="headerlink" title="七、纯函数"></a>七、纯函数</h1><p>纯函数：对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态<br>依赖外部 num：不是纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> x &gt; num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(compare(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>纯函数：不影响外界，不依赖于外界</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">18</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(compare(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">x, num</span>) </span>&#123;<br>  <span class="hljs-comment">// AO -&gt; num 是自己的num，不是外部的。此处的num是实参传进来的</span><br>  <span class="hljs-keyword">return</span> x &gt; num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(compare(<span class="hljs-number">20</span>, num));<br></code></pre></td></tr></table></figure><p>对外部 arr 产生了影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">_arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br>  _arr.push(obj);<br>&#125;<br>add(arr);<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>想变成纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;duyi&quot;</span> &#125;];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">_arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cst&quot;</span> &#125;;<br>  <span class="hljs-keyword">var</span> newArr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; _arr.length; i++) &#123;<br>    newArr[i] = _arr[i]; <span class="hljs-comment">//尽量深克隆</span><br>  &#125;<br>  newArr.push(obj);<br>  <span class="hljs-keyword">return</span> newArr;<br>&#125;<br><span class="hljs-keyword">var</span> newArr = add(arr);<br></code></pre></td></tr></table></figure><p>纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-comment">// x, y</span><br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">2</span>;<br>add(num1, num2);<br></code></pre></td></tr></table></figure><p>作用<br>在 JavaScript 中你可以很容易的创建全局变量，这些变量可以在所有函数中访问到。<br>这也是一个导致 bug 的常见原因，因为程序中的任何部分都可能修改全局变量从而导致函数的行为出现异常。<br>纯函数非常容易进行单元测试,因为不需要考虑上下文环境.只需要考虑输入和输出<br>纯函数是健壮的，改变执行次序不会对系统造成影响,因此纯函数的操作可以并行执行。<br>组件化开发-状态共享<br>数组过滤：满足完性王的，返回之后还能满足找性刘的<br>​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Regular Expression</title>
    <link href="/2021/10/15/Regular-Expression/"/>
    <url>/2021/10/15/Regular-Expression/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a></p><h2 id="一-课前补充-字符串"><a href="#一-课前补充-字符串" class="headerlink" title="(一).课前补充  字符串"></a>(一).课前补充  字符串</h2><p>转义字符 “\”</p><p>反斜杠会强制把后面的东西强制转换成文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc\&quot;snj&quot;</span>;<span class="hljs-comment">//双引号里面打印出双引号</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">\n</th><th align="center">换行</th></tr></thead><tbody><tr><td align="center">\r</td><td align="center">正常下，一个回车代表\r+\n 行结束+行换行</td></tr><tr><td align="center">\t</td><td align="center">缩进</td></tr></tbody></table><p>多行字符串    打印多行文本——编程上让字符串换行</p><p>系统规定字符串不能多行展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> test = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">&lt;div&gt;&lt;/div&gt;\</span><br><span class="hljs-string">&lt;span&gt;&lt;span&gt;\</span><br><span class="hljs-string">&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="二-RegExp正则表达式"><a href="#二-RegExp正则表达式" class="headerlink" title="(二).RegExp正则表达式"></a>(二).RegExp正则表达式</h2><p>正则表达式的作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择。</p><p>用户输入用户名密码格式校验，例如：输入XXYY才符合</p><p>API字典   参考w3school   参考正则表达式pdf</p><h2 id="1-两种创建方式"><a href="#1-两种创建方式" class="headerlink" title="1.两种创建方式"></a>1.两种创建方式</h2><p>1.直接量（推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/</span>;   <span class="hljs-comment">//匹配这个字符串的规则叫abc </span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reg.test(str));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>2.new RegExp();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd/m&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;m&quot;</span>);<br></code></pre></td></tr></table></figure><p>w3c上面有这么一段话<br>返回值：一个新的 RegExp 对象，具有指定的模式和标志。如果参数 <em>pattern</em> 是正则表达式而不是字符串，那么 RegExp() 构造函数将用与指定的 RegExp 相同的模式和标志创建一个新的 RegExp 对象。如果不用 new 运算符，而将 RegExp() 作为函数调用，那么它的行为与用 new 运算符调用时一样，只是当 <em>pattern</em> 是正则表达式时，它只返回 <em>pattern</em>，而不再创建一个新的 RegExp 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//不同人</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//同一个人</span><br></code></pre></td></tr></table></figure><h2 id="2-三个属性"><a href="#2-三个属性" class="headerlink" title="2.三个属性"></a>2.三个属性</h2><p>(1) 忽视大小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/i</span>;<br></code></pre></td></tr></table></figure><p>(2) 全局匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span>  reg = <span class="hljs-regexp">/ab/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br></code></pre></td></tr></table></figure><p>加上全局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br></code></pre></td></tr></table></figure><p>(3) 执行多行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/g</span>;<span class="hljs-comment">//一行里面以a开头的a</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcde\na&quot;</span>;<br><span class="hljs-comment">// console.log(str.match(reg));-----&gt;&quot;a&quot;依旧是一个a</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/gm</span>;<span class="hljs-comment">//加上m才具有多行匹配功能</span><br></code></pre></td></tr></table></figure><p>两个方法：</p><p>reg.test(); 有没有符合要求额片 段—-true/false<br>str.match(reg); 直观匹配</p><p>方括号：表达式</p><p>匹配三个数字相连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[1234567890][1234567890][1234567890]/g</span>;<span class="hljs-comment">//一个方括号代表一位</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123jbh987jkbjbnjik&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str.match(reg)&quot;</span>)<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[ab][cd][d]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str.match(reg)&quot;</span>)<span class="hljs-comment">//可以取bcd</span><br></code></pre></td></tr></table></figure><p>演示：非</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^a][^b]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;ab1cd&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str.match(reg)&quot;</span>)<span class="hljs-comment">//可以取b1 cd 返回的是数组</span><br></code></pre></td></tr></table></figure><p>括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)/g</span>;<span class="hljs-comment">//匹配abc或者bcd</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd&quot;</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>括号升级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)[0-9]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd&quot;</span><br></code></pre></td></tr></table></figure><p>元字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\w/g</span>;<br><span class="hljs-comment">//\w===[0-9A-z_]</span><br><span class="hljs-comment">//\W===[^\w]</span><br><span class="hljs-comment">//\d===[0-9]</span><br><span class="hljs-comment">//\D===[^\d]</span><br><span class="hljs-comment">//\s===[\t\n\r\v\f]</span><br><span class="hljs-comment">//\S===[^\s]</span><br><span class="hljs-comment">//\b===单词边界</span><br><span class="hljs-comment">//\B===非单词边界</span><br><span class="hljs-comment">// var reg = /\bcde/g;</span><br><span class="hljs-comment">// var str = &quot;abc ada ads&quot;;</span><br><span class="hljs-comment">// </span><br></code></pre></td></tr></table></figure><p>unicode编码</p><p>一般是6位</p><p>量词</p><p>Doctype</p><p>1.渲染模式</p><p>在多年以前（IE6诞生以前），各浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。随着WEB的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如IE6就是其中之一。但是考虑到以前建设的网站并不支持标准模式，所以各浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）。</p><p>三种标准模式的写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">1.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>2.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br>3.<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>待穿插知识点</p><p><label>   for 属性  —  &gt; js中表示htmlFor<br>属性映射 HTML属性 映射到Element属性<br>讲事件的时候，阻止默认事件记得要拿form提交举例，阻止提交，也要拿a举例，组织跳转—&gt;同时引出javascript:void(0);<br>img图片预加载<br>byClassName 自己定义的写法还没写呢<br>Math.random() 和彩票程序  0-36的随机数</label></p><p>要打印多行字符串    打印多行文本——编程上让字符串换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">方法一：<br><span class="hljs-keyword">var</span> test = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">            &lt;div&gt;&lt;/div&gt;\</span><br><span class="hljs-string">            &lt;span&gt;&lt;span&gt;\</span><br><span class="hljs-string">            &quot;</span>;<span class="hljs-comment">//将文本形式的回车转义掉，让他不再是回车</span><br>方法二：<br><span class="hljs-keyword">var</span> test = <span class="hljs-string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span> +<br>    <span class="hljs-string">&quot;&lt;span&gt;&lt;/span&gt;&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>两种创建方式</p><p>1.直接量（个人推荐用直接量）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/</span>;   <span class="hljs-comment">//匹配这个字符串的规则叫abc </span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reg.test(str));<span class="hljs-comment">//test()正则表达式的方法</span><br><br></code></pre></td></tr></table></figure><p>2.new RegExp();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd/m&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;m&quot;</span>);<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//长得一样，实际不一样</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-built_in">RegExp</span>(reg);<span class="hljs-comment">//引用</span><br><br></code></pre></td></tr></table></figure><p>三个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS">i<br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/i</span>;  <span class="hljs-comment">//忽视大小写</span><br>g<br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/g</span>; <span class="hljs-comment">//全局匹配</span><br><span class="hljs-comment">// demo：</span><br><span class="hljs-keyword">var</span>  reg = <span class="hljs-regexp">/ab/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<span class="hljs-comment">//只会匹配出来一个</span><br><span class="hljs-comment">// 加上全局匹配：</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br>m<br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/abc/m</span>;  <span class="hljs-comment">//执行多行匹配</span><br>demo<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/g</span>;<span class="hljs-comment">//以a开头的a</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcde\na&quot;</span>;<br><span class="hljs-comment">// console.log(str.match(reg));-----&gt;&quot;a&quot;依旧是一个a，没有多行匹配功能</span><br><span class="hljs-comment">//一旦加上m------:</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a/gm</span>;<span class="hljs-comment">//才具有多行匹配功能</span><br><br><br></code></pre></td></tr></table></figure><p>reg.test();//有没有符合要求额片段—-true/false<br>str.match();//直观匹配</p><p>方括号：表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 匹配三个数字相连接   </span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[1234567890][1234567890][1234567890]/g</span>;<span class="hljs-comment">//一个方括号代表一位</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[ab][cd][d]/g</span>;<span class="hljs-comment">//可以取bcd??????????????</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[0-9A-z][cd][d]/g</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^a][^b]/g</span>;<span class="hljs-comment">//非</span><br>括号：<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd&quot;</span>;<br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(abc|bcd)[0-9]/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;bcd2&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>量词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS">n+ : (<span class="hljs-number">1</span>, <span class="hljs-literal">Infinity</span>)<br>n* : (<span class="hljs-number">0</span>, <span class="hljs-literal">Infinity</span>)<br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d*/g</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\w*/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>n? : (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>n&#123;X&#125; : (X)<br>n&#123;x,y&#125; : (x, y)<br>n&#123;x, &#125; : 不写，默认<span class="hljs-literal">Infinity</span><br><span class="hljs-attr">n$</span> : 开头<br>    ^n : 结尾<br><br></code></pre></td></tr></table></figure><p>阿里巴巴： 写一个正则表达式，检验字符串首尾是否含有数字(首或尾)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d|\d$/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123abc&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>// 写一个正则表达式，检验字符串首尾是否都含有数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d[\s\S]*\d$/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123abc&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>正则表达式对象属性</p><p>global<br>ignoreCase<br>lastIndex<br>multiline<br>source</p><p>正则表达式对象方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS">reg.test();<span class="hljs-comment">//检索字符串中指定的值，返回true/false</span><br>reg.compile();<span class="hljs-comment">//编译正则表达式</span><br>reg.exec();<span class="hljs-comment">//检索字符串中指定的值，并确定位置</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abababab&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><span class="hljs-built_in">console</span>.log(reg.lastIndex);<br><span class="hljs-comment">//lastIndex可以手动更改值</span><br><br><span class="hljs-comment">// 如果不加g</span><br><span class="hljs-comment">// lastIndex不移动，永远在第一位开始匹配</span><br><br></code></pre></td></tr></table></figure><p>小知识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<span class="hljs-comment">//想匹配四个一样的东西</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(a)\1/g</span>;<span class="hljs-comment">//反向引用第一个子表达式中的匹配的内容</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(a)\1/g</span>;<span class="hljs-comment">//\w匹配出来的那个东西，后面要拷贝一个一样的</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(a)\1\1\1/g</span>;<br><span class="hljs-comment">// 变式：</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><br></code></pre></td></tr></table></figure><p>jQuery会深入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-built_in">console</span>.log(reg.exec(str));<br><br><br></code></pre></td></tr></table></figure><p>字符串方法：match</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br></code></pre></td></tr></table></figure><p>字符串方法：search</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-built_in">console</span>.log(str.search(reg));<br></code></pre></td></tr></table></figure><p>字符串方法：split</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aadnsndcbbccdsvwsnkdd&quot;</span>;<span class="hljs-comment">//双向重复拆分</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1/g</span>;<br><span class="hljs-built_in">console</span>.log(str.split(reg));<br></code></pre></td></tr></table></figure><p>字符串方法：relpace</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa&quot;</span>;<br>str.replace(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//ba  只能匹配一个</span><br><br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa&quot;</span>;<br>str.replace(reg, <span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//ba 没写全局匹配</span><br><br>demo:aabb---&gt;bbaa<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-string">&quot;$2$2$1$1&quot;</span>));<br>demo变式:xyxy---&gt;yxyx<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1(\w)\2/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aabb&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$, $<span class="hljs-number">1</span>, $<span class="hljs-number">2</span></span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> $<span class="hljs-number">2</span> + $<span class="hljs-number">2</span> + $<span class="hljs-number">1</span> + $<span class="hljs-number">1</span>;<span class="hljs-comment">//规则随便拼</span><br>&#125;));<br><br>str.toUpperCase();<span class="hljs-comment">// 变大写方法</span><br>str.toUpperCase().toLowerCase();<span class="hljs-comment">//变小写</span><br><br></code></pre></td></tr></table></figure><p>demo // the-first-name—&gt;theFirstName;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/-(\w)/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;the-first-name&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$, $<span class="hljs-number">1</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> $<span class="hljs-number">1.</span>toUpperCase();<br>&#125;))<br><br></code></pre></td></tr></table></figure><p>正向预查、正向断言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abaaaaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a(?=b)/g</span>;<span class="hljs-comment">//后面跟着b</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a(?!b)/g</span>;<span class="hljs-comment">//后面不跟着b</span><br><br></code></pre></td></tr></table></figure><p>贪婪匹配&amp;&amp;非贪婪匹配</p><p>正则表达式默认贪婪匹配</p><p>变成非贪婪：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a+?/g</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a&#123;1,3&#125;?/g</span>;<span class="hljs-comment">//有1不取23</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a??/g</span>;<span class="hljs-comment">//能取0不取1</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a*?/g</span>;<span class="hljs-comment">//能取0不取1</span><br><br></code></pre></td></tr></table></figure><p>正则表达式专题文档</p><p>匹配空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaa aaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/ /g</span>;<br><br></code></pre></td></tr></table></figure><p><strong>精通计划</strong></p><p>匹配\</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa\\aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\\/g</span>;<br><br></code></pre></td></tr></table></figure><p>匹配*+-?()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aa?aaaa&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\?/g</span>;<br><br></code></pre></td></tr></table></figure><p>高难——字符串去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;aaaaaabbbbbbbbbbcccccccc&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w)\1*/g</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg, <span class="hljs-string">&quot;$1&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>百度顶级难题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;100000000&quot;</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(reg,<span class="hljs-string">&quot;.&quot;</span>));<br><br><span class="hljs-comment">//100.000.000</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM BOM</title>
    <link href="/2021/10/15/DOM-BOM/"/>
    <url>/2021/10/15/DOM-BOM/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="1-DOM操作演示"><a href="#1-DOM操作演示" class="headerlink" title="1.DOM操作演示"></a>1.DOM操作演示</h2><p>Document Object Model</p><p>插件emmet学习</p><p>DOM定义了表示和修改文档所需的对象、这些对象的行为和属性以及这些对象之间的关系。DOM对象即为宿主对象，由浏览器厂商定义，用来操作<strong>html和xml</strong>功能的一类对象的集合(不能修改CSS样式表，可以改变行间样式，即通过改变html间接修改css)。也有人称DOM是对HTML以及XML的标准编程接口。</p><p>demo案例</p><p>项目1：实现点击一下发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.style.width = <span class="hljs-string">&quot;200px&quot;</span>;<br>    <span class="hljs-built_in">this</span>.style.height = <span class="hljs-string">&quot;50px&quot;</span>;<br>    <span class="hljs-built_in">this</span>.style.borderRadius = <span class="hljs-string">&quot;50%&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目2：实现点击变色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    count++;<br>    <span class="hljs-keyword">if</span>(count % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&quot;green&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;red&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一定要多练，编程思想</strong></p><p>项目3：实现选项卡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>finish js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">display</span>: none;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> solid red;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-comment">/*注意权重*/</span></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block&quot;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>邓哥...2222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btn.length; i++)&#123;</span><br><span class="javascript">                (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="javascript">                    btn[n].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; btn.length; j++)&#123;</span><br><span class="javascript">                            btn[j].className = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">                            div[j].style.display = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&quot;active&quot;</span>;</span><br><span class="javascript">                        div[n].style.display = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;(i))<span class="hljs-comment">//立即执行函数，防止I互相污染</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目4：实现木块运动停止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.appendChild(div);</span><br><span class="javascript">            div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">            div.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;</span><br><span class="javascript">            div.style.left = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            div.style.top = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> speed = <span class="hljs-number">1</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                speed += speed/<span class="hljs-number">7</span>;</span><br><span class="javascript">                div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(div.style.top) &gt; <span class="hljs-number">200</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(div.style.left) &gt; <span class="hljs-number">200</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,<span class="hljs-number">50</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目5.实现俄罗斯方块基础</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(div);<br>div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;<br>div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>div.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;<br>div.style.left = <span class="hljs-string">&quot;0&quot;</span>;<br>div.style.top = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-keyword">switch</span>(e.which) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">38</span>:<br>            div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) - <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">40</span>:<br>            div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) + <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">37</span>:<br>            div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) - <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">39</span>:<br>            div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) + <span class="hljs-number">5</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目6.实现按住方向键，加速（待做——js运动）</p><p>项目7.实现点击加速，改变左右键移动速度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:50px;</span></span><br><span class="hljs-string"><span class="hljs-tag">                       background:linear-gradient(to left, #999, #000, #432,#fcc);</span></span><br><span class="hljs-string"><span class="hljs-tag">                       position: fixed;right:0;</span></span><br><span class="hljs-string"><span class="hljs-tag">                       top:50%;text-align:center;line-height:50px;color:#fff;font-famliy:arial;&quot;</span>&gt;</span>加速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.appendChild(div);</span><br><span class="javascript">            div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">            div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">            div.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;</span><br><span class="javascript">            div.style.left = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            div.style.top = <span class="hljs-string">&quot;0&quot;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> speed = <span class="hljs-number">5</span>;</span><br><span class="javascript">            btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                speed++;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">switch</span>(e.which) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">38</span>:</span><br><span class="javascript">                        div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) - speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">40</span>:</span><br><span class="javascript">                        div.style.top = <span class="hljs-built_in">parseInt</span>(div.style.top) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">37</span>:</span><br><span class="javascript">                        div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) - speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-number">39</span>:</span><br><span class="javascript">                        div.style.left = <span class="hljs-built_in">parseInt</span>(div.style.left) + speed + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目8：扫雷项目基础：刮奖效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">*&#123;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css"><span class="hljs-attribute">box-sizing</span>: border-box;<span class="hljs-comment">/*盒模型合理展示*/</span></span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="css"><span class="hljs-comment">/*border: 1px solid black;*/</span></span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="css"><span class="hljs-attribute">list-style</span>: none;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">img-date</span> = <span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">img-date</span> = <span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>//此处省略400行li样式<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;ul&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">ul.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-comment">//鼠标移入触发什么</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> event = e||<span class="hljs-built_in">window</span>.event;</span><br><span class="javascript"><span class="hljs-keyword">var</span> target = event.target || event.srcElement;</span><br><span class="javascript">target.style.backgroundColor = <span class="hljs-string">&quot;rgb(0,255,&quot;</span> + target.getAttribute(<span class="hljs-string">&#x27;img-date&#x27;</span>) +<span class="hljs-string">&quot;)&quot;</span>;</span><br><span class="javascript">target.setAttribute(<span class="hljs-string">&#x27;img-date&#x27;</span>, <span class="hljs-built_in">parseInt</span>(target.getAttribute(<span class="hljs-string">&#x27;img-date&#x27;</span>))+ <span class="hljs-number">6</span>);</span><br><span class="javascript">&#125; </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>高级轮播图</p><p>H5 C3高级动画</p><h2 id="2-对节点的增删改查"><a href="#2-对节点的增删改查" class="headerlink" title="2.对节点的增删改查"></a>2.对节点的增删改查</h2><h2 id="（1）查看节点"><a href="#（1）查看节点" class="headerlink" title="（1）查看节点"></a>（1）查看节点</h2><p>document代表整个文档(是一个对象)：位于html标签上层的</p><p>document的方法：<strong>IE不支持说的是IE9及以下</strong></p><table><thead><tr><th>document.getElementById()</th><th align="center">元素id 在Ie8以下的浏览器，不区分id大小写，而且也返回匹配name属性的元素</th></tr></thead><tbody><tr><td>getElementsByTagName()</td><td align="center">标签名放在<strong>类数组</strong>里面</td></tr><tr><td>getElementByName();</td><td align="center">只有部分标签name可生效（表单，表单元素，img，iframe）</td></tr><tr><td>getElementsByClassName()</td><td align="center">类名 -&gt; ie8和ie8以下的ie版本中没有，可以多个class一起</td></tr><tr><td>querySelector()</td><td align="center">css选择器   在ie7和ie7以下的版本中没有</td></tr><tr><td>querySelectorAll()</td><td align="center">css选择器 在ie7和ie7以下的版本中没有</td></tr></tbody></table><p>页面里面所有的div拿出来——&gt;扔到一个类数组里面去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.length);<span class="hljs-comment">//放在类数组里面了</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>选择div里面的p</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(p);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开发经验：尽量不用id写东西，用class<br>读懂代码——布局，处理细节，居中，两栏布局， 反着布局（淘宝）<br>商业逻辑编程逻辑相互配合<br>jQuery:：实现CSS选择模式选择JS：就是识别CSS<br>query演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&gt;span strong.demo&#x27;</span>);<span class="hljs-comment">//选一个</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong1 = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&gt;span strong.demo&#x27;</span>);<span class="hljs-comment">//选一组</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而强大的querySelector()和querySelectorAll()不能用<br>原因：<br>1.在ie7和ie7以下的版本中没有<br>2.实时性：他们选出的不是实时的<br>实时的是这样：男生全占起来，一会来了一个迟到的，也算进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> demo = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> newDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(newDiv);<br></code></pre></td></tr></table></figure><p>querySelector不是实时性，改的是副本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> demo = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> newDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.body.appendChild(newDiv);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>var div = document.querySelectorAll(&#x27;div&#x27;);<br></code></pre></td></tr></table></figure><h2 id="（2）遍历节点树"><a href="#（2）遍历节点树" class="headerlink" title="（2）遍历节点树"></a>（2）遍历节点树</h2><table><thead><tr><th>parentNode</th><th align="center">父节点  (最顶端的parentNode为#document);</th></tr></thead><tbody><tr><td>childNodes</td><td align="center">子节点们（直系的）</td></tr><tr><td>firstChild</td><td align="center">第一个子节点</td></tr><tr><td>lastChild</td><td align="center">最后一个子节点</td></tr><tr><td>nextSibling</td><td align="center">后一个兄弟元素</td></tr><tr><td>previousSibling</td><td align="center">前一个兄弟元素</td></tr></tbody></table><h3 id="节点的类型"><a href="#节点的类型" class="headerlink" title="节点的类型"></a>节点的类型</h3><p>元素节点   —— 1<br>属性节点   —— 2<br>文本节点   —— 3<br>注释节点   —— 8<br>document  —— 9<br>DocumentFragment  ——  11 </p><p>parentNode演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(strong.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode.parentNode.parentNode);<br><span class="hljs-built_in">console</span>.log(strong.parentNode.parentNode.parentNode.parentNode.parentNode);<br></code></pre></td></tr></table></figure><p>childNodes 演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-comment">// 要是按照直系元素来说，应该长度为3，但是实际为7,遍历节点数(节点不一定都是html)</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>节点讲解demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    123sabchiabs<br>    <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.childNodes);<span class="hljs-comment">//7个</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>nextSibling演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    123sabchiabs<br>    <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 下一个兄弟节点，不是下一个兄弟元素节点</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(strong.nextSibling);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(strong.nextSibling.nextSibling);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(strong.nextSibling.nextSibling.nextSibling);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="（3）遍历元素节点数"><a href="#（3）遍历元素节点数" class="headerlink" title="（3）遍历元素节点数"></a>（3）遍历元素节点数</h2><p>去掉乱七八糟节点</p><table><thead><tr><th align="center">parentElement</th><th align="center">返回当前元素的父元素节点 (IE不兼容)</th></tr></thead><tbody><tr><td align="center">children</td><td align="center">只返回当前元素的元素子节点</td></tr><tr><td align="center">node.childElementCount=== node.children.length</td><td align="center">当前元素节点的子元素节点个数(IE不兼容)</td></tr><tr><td align="center">firstElementChild</td><td align="center">返回的是第一个元素节点(IE不兼容)</td></tr><tr><td align="center">lastElementChild</td><td align="center">返回的是最后一个元素节点(IE不兼容)</td></tr><tr><td align="center">nextElementSibling / previousElementSibling</td><td align="center">返回后一个/前一个兄弟元素节点（IE不兼容)</td></tr></tbody></table><h3 id="节点的四个属性"><a href="#节点的四个属性" class="headerlink" title="节点的四个属性"></a>节点的四个属性</h3><table><thead><tr><th align="center">nodeName</th><th align="center">元素的标签名，以大写形式表示,只读</th></tr></thead><tbody><tr><td align="center">nodeValue重要</td><td align="center">Text节点或Comment节点的文本内容,可读写</td></tr><tr><td align="center">nodeType</td><td align="center">该节点的类型，只读</td></tr><tr><td align="center">attributes</td><td align="center">Element 节点的属性集合</td></tr></tbody></table><p>节点的一个方法  Node.hasChildNodes()——有没有子节点（true/false)</p><p>获取节点类型   nodeType （）</p><p>案例：实现输入数据的节点数返回</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>123<br><span class="hljs-comment">&lt;!-- This is comment --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retElementChild</span>(<span class="hljs-params">node</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//no children</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> temp =  &#123;</span><br><span class="javascript"><span class="hljs-attr">length</span> : <span class="hljs-number">0</span>,</span><br><span class="javascript"><span class="hljs-attr">push</span> : <span class="hljs-built_in">Array</span>.prototype.push,</span><br><span class="javascript"><span class="hljs-attr">splice</span> : <span class="hljs-built_in">Array</span>.prototype.splice<span class="hljs-comment">//实现看出来像数组</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript">child = node.childNodes,</span><br><span class="javascript">len = child.length;</span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(child[i].nodeType === <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">temp.push(child[i]);</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">return</span> temp;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(retElementChild(div));</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="（4）DOM树"><a href="#（4）DOM树" class="headerlink" title="（4）DOM树"></a>（4）DOM树</h2><p>Document<br>Document返回一个函数,document代表整个页面<br>注意：Document是一个构造函数，但是我不能new，只允许系统new<br>好处：原形：Document写东西，document也适用，继承关系<br>构造关系：document—-&gt;HTMLDocument.prototype—-&gt;Document.prototype<br>所以：Document.prototype.abc可以受益到document上，且就近继承<br>关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">HTMLDocument.prototype=&#123;<br>    <span class="hljs-attr">__proto__</span>:Document.prototype<br>&#125;<br></code></pre></td></tr></table></figure><p>最后一列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">HTMLBodyElement.prototype.abc = <span class="hljs-string">&quot;demo&quot;</span>;<br><span class="hljs-keyword">var</span> body = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;body&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.log(head.abc);------&gt;<span class="hljs-literal">undefined</span><br><span class="hljs-built_in">console</span>.log(body.abc);------&gt;demo<br></code></pre></td></tr></table></figure><h2 id="（5）DOM操作"><a href="#（5）DOM操作" class="headerlink" title="（5）DOM操作"></a>（5）DOM操作</h2><ol><li><p>getElementById方法定义在Document.prototype上，即Element节点上不能使用。</p></li><li><p>getElementsByName方法定义在HTMLDocument.prototype上，即非html中的document以外不能使用(xml document,Element)</p></li><li><p>getElementsByTagName方法定义在Document.prototype 和 Element.prototype上</p></li></ol><p>实现选第一个span</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//整个文档上找element</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> span = div.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//div下面的span</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通配符选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;*&#x27;</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//选择所有标签</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>HTMLDocument.prototype定义了一些常用的属性，body,head,分别指代HTML文档中的body head标签。</p></li><li><p>Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，他总是指代html元素</p></li><li><p>getElementsByClassName、querySelectorAll、querySelector在Document,Element类中均有定义</p></li></ol><h2 id="3-课堂练习"><a href="#3-课堂练习" class="headerlink" title="3.课堂练习"></a>3.课堂练习</h2><p>1.遍历元素节点树，要求不能用children属性</p><p>题意1.给出父节点，遍历出子节点ChildNodes</p><p>题意2.打印树形结构：div子元素节点们，判断子元素节点是否还有子元素节点，有的话一直递归</p><p>网络参考答案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> div=<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)</span><br><span class="javascript">            <span class="hljs-keyword">var</span> a=[];</span><br><span class="javascript">            HTMLElement.prototype.allElements=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> dom=<span class="hljs-built_in">this</span></span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;dom.children.length;i++)&#123;</span><br><span class="javascript">                    a.push(dom.children[i])</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(dom.children[i].hasChildNodes())&#123;</span><br><span class="javascript">                        <span class="hljs-comment">// console.log(this.children[i].children[i])</span></span><br><span class="javascript">                        dom.children[i].allElements();</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> a;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> list = [];<span class="hljs-comment">//用来后面储存获取的元素</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHDeles</span>(<span class="hljs-params">ele</span>) </span>&#123;<span class="hljs-comment">//ele是形参,代表需要求打印哪个dom树</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> children = ele.children;<span class="hljs-comment">//获取ele下的子元素</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<span class="hljs-comment">//遍历children</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> child = children[i]<span class="hljs-comment">//children每一个子代存起来</span></span><br><span class="javascript">            list.push(child)<span class="hljs-comment">//每一个子代存入数组当中</span></span><br><span class="javascript">            getHDeles(child);<span class="hljs-comment">//子代也要求子代,继续调用这个函数</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    getHDeles(<span class="hljs-built_in">document</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(list)<span class="hljs-comment">//会打印document下的所有dom树:html,head,meta,body.....</span></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.封装函数，返回元素e的第n层祖先元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retParent</span>(<span class="hljs-params">elem, n</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">while</span>(elem &amp;&amp; n) &#123;<span class="hljs-comment">//elem == null时候 </span></span><br><span class="javascript">                elem = elem.parentElement;</span><br><span class="javascript">                n --;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> elem;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;i&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.封装函数，返回元素e的第n个兄弟节点，n为正，返回后面的兄弟节点，n为负，返回前面的，n为0，返回自己。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retSibkling</span>(<span class="hljs-params">e, n</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">while</span>(e &amp;&amp; n)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                e = e.nextElementSibling;</span><br><span class="javascript">                n --;</span><br><span class="javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                e = e.previousElementSibling;</span><br><span class="javascript">                n ++;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> e;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br></code></pre></td></tr></table></figure><p>想兼容IE</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retSibling</span>(<span class="hljs-params">e, n</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">while</span> (e &amp;&amp; n) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (e.nextElementSibling) &#123;</span><br><span class="javascript">                            e = e.nextElementSibling;</span><br><span class="javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                            <span class="hljs-keyword">for</span> (e = e.nextSibling; e &amp;&amp; e.nodeType != <span class="hljs-number">1</span>; e = e.nextSibling);<span class="hljs-comment">//这里的e兼容的是null</span></span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        n--;</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        <span class="hljs-keyword">if</span> (e.previousElementSibling) &#123;</span><br><span class="javascript">                            e = e.previousElementSibling;</span><br><span class="javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                            <span class="hljs-keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType != <span class="hljs-number">1</span>; e = e.previousSibling);</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        n++;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> e;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;strong&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.编辑函数，封装children功能，子元素节点。解决以前部分浏览器的兼容性问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    abc<br>    <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    Element.prototype.myChildren = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> child = <span class="hljs-built_in">this</span>.childNodes;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> len = child.length;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> arr = [];</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(child[i].nodeType == <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">                arr.push(child[i]);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> arr;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.自己封装hasChildren()方法，不可用children属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>abc<br>    <span class="hljs-comment">&lt;!-- this is comment --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        Element.prototype.myChildren = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> child = <span class="hljs-built_in">this</span>.childNodes;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> len = child.length;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> arr = [];</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(child[i].nodeType == <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><blockquote><p>增</p></blockquote><blockquote><p>增加创建元素节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.body.appendChild(div);<br>div.innerHTML = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><blockquote><p>创建文本节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;邓宝宝&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>创建注释节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> comment = <span class="hljs-built_in">document</span>.createComment(<span class="hljs-string">&#x27;this is comment&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>创建文档碎片节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure><blockquote><p>删</p></blockquote><p>他杀</p><p>parent.removeChild();其实是剪切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.removeChild(i);<br></code></pre></td></tr></table></figure><p>自杀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">i.remove()<br></code></pre></td></tr></table></figure><p>替换parent.replaceChild(new, origin);剪切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.replaceChild(<span class="hljs-keyword">new</span>, origin);<br></code></pre></td></tr></table></figure><blockquote><p>插</p></blockquote><p>appendChild类似push</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;邓宝宝&#x27;</span>);<br><span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;span&#x27;</span>);<br>div.appendChild(text);<br>div.appendChild(span);<br><span class="hljs-keyword">var</span> text1 = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;demo&#x27;</span>);<br>span.appendChild(text1);<br>span.appendChild(text);<span class="hljs-comment">//剪切插入</span><br></code></pre></td></tr></table></figure><p>为了证明是appendChild剪切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.appendChild(span);<br></code></pre></td></tr></table></figure><p>insertBefore     div.insertBefore(a, b)     ==   div insert a before b</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;i&gt;&lt;/i&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;strong&gt;&lt;/strong&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> strong = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;strong&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;i&#x27;</span>);</span><br><span class="javascript">    div.insertBefore(strong, span);<span class="hljs-comment">//strong插入到span前面</span></span><br><span class="javascript">    div.insertBefore(i, strong);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Element节点的一些属性</p><p>innerHTML:取，写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.innerHTML = <span class="hljs-string">&#x27;123&#x27;</span>;<span class="hljs-comment">//覆盖</span><br>div.innerHTML += <span class="hljs-string">&#x27;456&#x27;</span><span class="hljs-comment">//追加</span><br>div.innerHTML = <span class="hljs-string">&quot;&lt;span style=&quot;</span>background-color:red;color:#fff;font-size:20px<span class="hljs-string">&quot;&gt;123&lt;/span&gt;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>innerText(火狐不兼容) / textContent(老版本IE不好使)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.innerText<span class="hljs-comment">//取出里面东西</span><br>div.innerText = <span class="hljs-number">123</span><span class="hljs-comment">//覆盖</span><br></code></pre></td></tr></table></figure><p>Element节点的一些方法</p><p>ele.setAttribute()设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>,<span class="hljs-string">&#x27;demo&#x27;</span>);<br></code></pre></td></tr></table></figure><p>ele.getAttribute();取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.getAttribute(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.setAttribute(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;only&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://m.sm.cn/">https://m.sm.cn/</a></p><p>实战项目data-log实现统计点击多少次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">data-log</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>hehe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">&#x27;data-log&#x27;</span>));</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>小操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> all = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;*&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="javascript">        all[i].setAttribute(<span class="hljs-string">&#x27;this.name&#x27;</span>, all[i].nodeName);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>课堂练习</p><p>请编写一段JavaScript脚本生成下面这段DOM结构。要求：使用标准的DOM方法或属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slogan&quot;</span>&gt;</span>姬成，你最帅!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示 dom.className 可以读写class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);<br>div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;example&#x27;</span>);<br>p.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;slogan&#x27;</span>);<br><span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;最帅&#x27;</span>);<br>p.appendChild(text);<br>div.appendChild(p);<br><span class="hljs-built_in">document</span>.body.appendChild(div);<br></code></pre></td></tr></table></figure><p>简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">div.innerHTML =<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>改变class/id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.className = <span class="hljs-string">&quot;&quot;</span><br>div.id = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>小练习</p><ol><li>封装remove(); 使得child.remove()直接可以销毁自身</li><li>将目标节点内部的节点顺序逆序。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">eg:<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>封装函数insertAfter;功能类似insertBefort();可忽略老版本浏览器，直接在Element.prototype上编程</p><p>原型链上编程好处：this可以表示任何要表示的东西；可以实现继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            Element.prototype.insertAfter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">targetNode, afterNode</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> beforeNode = afterNode.nextElementSibling;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(beforeNode == <span class="hljs-literal">null</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.appendChild(targetNode);</span><br><span class="javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.insertBefore(targetNode, beforeNode);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;b&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将目标节点内部节点顺序逆序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    Element.prototype.eNiXu = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> child = <span class="hljs-built_in">this</span>.children;</span><br><span class="javascript">        len = child.length;</span><br><span class="javascript">        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>; i &lt;= len; i++)&#123;         <span class="hljs-comment">//这里要把循环圈数写对（只需循环len-1次），不然下文的剪切就会报错</span></span><br><span class="javascript">            <span class="hljs-built_in">this</span>.appendChild(child[len-i]);     <span class="hljs-comment">//剪切掉并且增加到this最后面</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.eNiXu());                   </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="日期对象-Date"><a href="#日期对象-Date" class="headerlink" title="日期对象 Date()"></a>日期对象 Date()</h1><p>封装函数，打印当前是何年何月何日何时，几分几秒</p><p>官方文档<a href="https://www.w3school.com.cn/jsref/jsref_obj_date.asp">https://www.w3school.com.cn/jsref/jsref_obj_date.asp</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 日期对象，是系统提供好的</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>具体知识看看文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>getTime() 性能优化验证工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 时间戳</span><br><span class="hljs-comment">// 纪元时间：1970-1-1</span><br><span class="hljs-comment">// 买电脑验证性能</span><br><span class="hljs-keyword">var</span> firstTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>&#125;<br><span class="hljs-keyword">var</span> lastTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-built_in">console</span>.log(lastTime - firstTime);<br></code></pre></td></tr></table></figure><p>闹铃：倒计时秒杀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>date.setMinutes(<span class="hljs-number">13</span>);<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - date.getTime() &gt; <span class="hljs-number">1000</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老邓是宝宝&#x27;</span>)<br>    &#125;<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>封装函数，打印当前何年何月何日何时几分几秒——一顿get</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> retMyDate=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>    <span class="hljs-keyword">var</span> year=date.getFullYear();<br>    <span class="hljs-keyword">var</span> month=date.getMonth()+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> day=date.getDate();<br>    <span class="hljs-keyword">var</span> hour=date.getHours()<br>    <span class="hljs-keyword">var</span> Mi=date.getMinutes()<br>    <span class="hljs-keyword">var</span> se=date.getSeconds()<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;今天是&quot;</span>+year+<span class="hljs-string">&quot;年&quot;</span>+month+<span class="hljs-string">&quot;月&quot;</span>+day+<span class="hljs-string">&quot;日&quot;</span>+hour+<span class="hljs-string">&quot;时&quot;</span>+Mi+<span class="hljs-string">&quot;分&quot;</span>+se+<span class="hljs-string">&quot;秒&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>识别time只识别一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> time = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,time);<br><span class="hljs-comment">// time = 200;不起作用</span><br></code></pre></td></tr></table></figure><p>计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    i++;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>准不准：应该都是1000才准</p><p>为什么不准</p><p><a href="https://blog.csdn.net/qq_41494464/article/details/99944633">https://blog.csdn.net/qq_41494464/article/details/99944633</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> firstTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>    <span class="hljs-built_in">console</span>.log(lastTime - firstTime);<br>    firstTime = lastTime;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p><strong>必看书：高性能JS ； 你不知道的JS学透了</strong></p><p>setInterval();隔多长时间执行</p><p>清除定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// clearInterval();</span><br><span class="hljs-comment">// 定时器唯一标识</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<span class="hljs-number">2000</span>);<br><span class="hljs-comment">// 清除唯一标识</span><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i++);<br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;<br>&#125;,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>setTimeout(); 多长时间后执行，只执行一次</p><p>电影5min试看时间</p><p>clearInterval();<br>clearTimeout();<br>全局对象window上的方法，内部函数this指向window<br>注意也可以这样 ：setInterval(“func()”,1000);<br>写一个计时器，到一分钟停止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.8</span>);</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: right;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        minutes : <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        seconds : <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> min = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>]; </span><br><span class="javascript">            <span class="hljs-keyword">var</span> sec = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">1</span>]; </span><br><span class="javascript">            <span class="hljs-keyword">var</span> seconds = <span class="hljs-number">0</span>,</span><br><span class="javascript">                minutes = <span class="hljs-number">0</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                seconds++;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(seconds == <span class="hljs-number">60</span>)&#123;</span><br><span class="javascript">                    seconds = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    minutes++;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                sec.value = seconds;</span><br><span class="javascript">                min.value = minutes;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(minutes == <span class="hljs-number">3</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,<span class="hljs-number">10</span>)</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p>查看滚动条的滚动距离</p><blockquote><p>window.pageXOffset/pageYOffset</p></blockquote><p>IE8及IE8以下不兼容</p><blockquote><p>document.body/documentElement.scrollLeft/scrollTop</p><p>兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// &lt;!-- IE8和IE8以下浏览器 --&gt;</span><br><span class="hljs-comment">// document.body.scrollLeft/Top  ie?</span><br><span class="hljs-comment">// document.documentElement.scrollLeft/Top ie?</span><br><span class="hljs-comment">// 以上，只要一个好使，另一个一定为0</span><br><span class="hljs-built_in">document</span>.body.scrollLeft + <span class="hljs-built_in">document</span>.documentElement.scrollLeft<br></code></pre></td></tr></table></figure><p>封装兼容性方法，g求滚动轮滚动距离getScrollOffset()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScrollOffset</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.pageXOffset) &#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">x</span> : <span class="hljs-built_in">window</span>.pageXOffset,<br>            <span class="hljs-attr">y</span> : <span class="hljs-built_in">window</span>.pageYOffset<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">x</span> : <span class="hljs-built_in">document</span>.body.scrollLeft + <span class="hljs-built_in">document</span>.documentElement.scrollLeft,<br>            <span class="hljs-attr">y</span> : <span class="hljs-built_in">document</span>.body.scrollTop + <span class="hljs-built_in">document</span>.documentElement.scrollTop<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查看视口的尺寸"><a href="#查看视口的尺寸" class="headerlink" title="查看视口的尺寸"></a>查看视口的尺寸</h2><p>window.innerWidth/innerHeight<br>IE8及IE8以下不兼容</p><blockquote><p>document.documentElement.clientWidth/clientHeight<br>标准模式下，任意浏览器都兼容<br>document.body.clientWidth/clientHeight<br>适用于怪异模式下的浏览器。去掉<code>&lt;!DOCTYPE html&gt;</code>就变成怪异模式</p></blockquote><p>浏览器两种渲染模式：标准模式；怪异模式（混杂模式，为了兼容之前版本）</p><p>封装兼容性方法，返回浏览器视口尺寸getViewportOffset()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getViewportOffset</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.innerWidth)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">w</span> : <span class="hljs-built_in">window</span>.innerWidth,<br>            <span class="hljs-attr">h</span> : <span class="hljs-built_in">window</span>.innerHeight<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.compatMode === <span class="hljs-string">&quot;BackCompat&quot;</span>)&#123;<span class="hljs-comment">//向后兼容</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">w</span> : <span class="hljs-built_in">document</span>.body.clientWidth,<br>                <span class="hljs-attr">h</span> : <span class="hljs-built_in">document</span>.body.clientHeight<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">w</span> : <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>                <span class="hljs-attr">h</span> : <span class="hljs-built_in">document</span>.documentElement.clientHeight<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查看元素的几何尺寸"><a href="#查看元素的几何尺寸" class="headerlink" title="查看元素的几何尺寸"></a>查看元素的几何尺寸</h2><p>domEle.getBoundingClientRect();</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 100px; position: absolute; top:100px;right: 200px; bottom: 200px; left: 100px;background-color: aqua;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.getBoundingClientRect());</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>兼容性很好<br>该方法返回一个对象，对象里面有left,top,right,bottom等属性。left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标<br>height和width属性老版本IE并未实现<br>返回的结果并不是“实时的”</p><h2 id="查看元素的尺寸（可视区）"><a href="#查看元素的尺寸（可视区）" class="headerlink" title="查看元素的尺寸（可视区）"></a>查看元素的尺寸（可视区）</h2><p>dom.offsetWidth，dom.offsetHeight返回的是可视区</p><blockquote><p>想求内容区宽高</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style.height<br></code></pre></td></tr></table></figure><h2 id="查看元素的位置"><a href="#查看元素的位置" class="headerlink" title="查看元素的位置"></a>查看元素的位置</h2><p>dom.offsetLeft, dom.offsetTop</p><p>求的是相对于父级的位置演示。忽略自身是否是定位元素，而是距离他有定位的父级的距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px;height:300px;border:2px solid black;position:relative;top:100px;left:100px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;position:absolute;margin-left:100px;margin-top:100px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。</p><p>把position:static;默认值，父级不设置定位演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px;height:300px;border:2px solid black;position:static;margin-left: 100px;margin-top: 100px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;position:absolute;margin-left:100px;margin-top:100px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;demo&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>div.offsetLeft<br>210：=body8+border2<br>div.offsetTop<br>202   塌陷了<br></code></pre></td></tr></table></figure><p>dom.offsetParent返回最近的有定位的父级，如无，返回body, body.offsetParent 返回null</p><p>eg：求元素相对于文档的坐标getElementPositoin。不知有没有定位父级也不知有定位的父级多少层</p><p>思路：看是不是有定位的父级，有定位的父级继续看是不是还有父级，父级在相对于文档</p><h1 id="脚本化CSS"><a href="#脚本化CSS" class="headerlink" title="脚本化CSS"></a>脚本化CSS</h1><h2 id="1-读写元素css属性"><a href="#1-读写元素css属性" class="headerlink" title="1.读写元素css属性"></a>1.读写元素css属性</h2><p>dom.style.prop:必须是写在行间的  可读可写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style<span class="hljs-comment">//这个div所有css ；类数组</span><br>div.style.width = <span class="hljs-string">&#x27;200px&#x27;</span><br>div.style.[<span class="hljs-string">&#x27;width&#x27;</span>]<br></code></pre></td></tr></table></figure><p>可读写行间样式，没有兼容性问题，碰到float这样的关键字属性，前面应加css</p><p>没写在行间的看不到</p><p>保留字尽量float — &gt; cssFloat<br>复合属性必须拆解，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style.borderWidth<br></code></pre></td></tr></table></figure><p>组合单词变成小驼峰式写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span><br></code></pre></td></tr></table></figure><p>写入的值必须是字符串格式</p><h2 id="2-查询计算样式"><a href="#2-查询计算样式" class="headerlink" title="2.查询计算样式"></a>2.查询计算样式</h2><p>window.getComputedStyle(ele,null); IE8 及 IE8以下不兼容</p><p>获取的是当前这个元素 所展示出的一切css属性的<strong>显示值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span><span class="hljs-meta">!important</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;float: left;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div,<span class="hljs-literal">null</span>).width);<span class="hljs-comment">//200px</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(div.style.width)<span class="hljs-comment">//100px</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>null：解决伪元素问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: orangered;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-comment">/*默认inline*/</span><br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div, <span class="hljs-string">&#x27;after&#x27;</span>).width);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改变伪元素：点击div， 绿色方块变黄</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: orangered;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.green</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.yellow</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;green&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            div.className = <span class="hljs-string">&#x27;yellow&#x27;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改变两个状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.style.width = <span class="hljs-string">&#x27;200px&#x27;</span>;<br>    div.style.height = <span class="hljs-string">&#x27;200px&#x27;</span>;<br>    div.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;<span class="hljs-comment">//这些点DOM操作浪费效率</span><br>&#125;<br></code></pre></td></tr></table></figure><p>更好的写法–一个<code>.style</code>就会浪费一点效率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.className = <span class="hljs-string">&quot;active&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: palegreen;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算样式只读<br>返回的<strong>计算样式</strong>的值都是绝对值，没有相对单位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div,<span class="hljs-literal">null</span>).width);<span class="hljs-comment">//160px</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(div,<span class="hljs-literal">null</span>).backgroundColor);<span class="hljs-comment">//rga()</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>IE独有的属性<br>ele.currentStyle<br>计算样式只读<br>返回的计算样式的值不是经过转换的绝对值</p></blockquote><p>封装兼容性方法getStyle(obj,prop);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Var div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStyle</span>(<span class="hljs-params">elem, prop</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.getComputedStyle) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.getComputedStyle(elem, <span class="hljs-literal">null</span>)[prop];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> elem.currentStyle[prop];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>小项目：让方块运动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red;position: absolute;left:0;top:0;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- left:默认auto --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStyle</span>(<span class="hljs-params">elem, prop</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.getComputedStyle) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.getComputedStyle(elem, <span class="hljs-literal">null</span>)[prop];</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> elem.currentStyle[prop];</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> speed = <span class="hljs-number">3</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        speed += speed / <span class="hljs-number">7</span>;</span><br><span class="javascript">        div.style.left = <span class="hljs-built_in">parseInt</span>(getStyle(div, <span class="hljs-string">&#x27;left&#x27;</span>)) + speed + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(div.style.left) &gt; <span class="hljs-number">500</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;, <span class="hljs-number">10</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="让滚动条滚动"><a href="#让滚动条滚动" class="headerlink" title="让滚动条滚动"></a>让滚动条滚动</h2><p>window上有三个方法<br>scroll(),scrollTo(),scrollBy();<br>三个方法功能类似，用法都是将x,y坐标传入。即实现让滚动轮滚动<strong>到当前位置。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">window</span>.scroll(x,y)<span class="hljs-comment">//当前位置</span><br><span class="hljs-built_in">window</span>.scrollTo(x,y)<span class="hljs-comment">//当前位置</span><br><span class="hljs-built_in">window</span>.scrollBy(x,y)<span class="hljs-comment">//累加滚动</span><br></code></pre></td></tr></table></figure><p>区别：scrollBy()会在之前的数据基础之上做累加。</p><p>收起展开项目：收起的时候回到原地。用scroll(),scrollTo()。</p><p>思路：点击展开的时候记录当前滚动距离，收起就回来</p><p>利用scrollBy() 快速阅读的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.demo1</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">                <span class="hljs-attribute">bottom</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">                <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.demo2</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">                <span class="hljs-attribute">color</span>: green;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">                <span class="hljs-attribute">bottom</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">                <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>stop<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> start = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> stop = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">1</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-number">0</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> key = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            start.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (key) &#123;</span><br><span class="javascript">                    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-built_in">window</span>.scrollBy(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">                    &#125;, <span class="hljs-number">100</span>);</span><br><span class="javascript">                    key = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            stop.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">                key = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">// 多次点击start不好使——加锁</span></span><br><span class="javascript"></span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>定义：Browser Object Model，定义了操作浏览器的接口<br>BOM对象: Window, History,Navigator,Screen, Location等<br>由于浏览器厂商的不同，Bom对象的兼容性极低。一般情况下，我只用其中的部分功能<br>Window<br>History对象<br>Navigator对象<br>    <a href="http://www.w3school.com.cn/jsref/dom_obj_navigator.asp">http://www.w3school.com.cn/jsref/dom_obj_navigator.asp</a><br>Screen对象<br>Location对象<br>    location.hash<br>    “#”后是对浏览器操作的，对服务器无效，实际发出的请求也不包含”#”后面的部分<br>    “#”被算作历史记录</p><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>JSON是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json是用来传输的，属性名加上双引号）</p><p>表示形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;name&quot; : &quot;deng&quot;,</span><br><span class="hljs-string">    &quot;age&quot; : 19</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>JSON.parse();  string — &gt; json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;&#123;&quot;</span>name<span class="hljs-string">&quot;:&quot;</span>abc<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:112&#125;&quot;</span><br>JSON.parse(str)<br></code></pre></td></tr></table></figure><p>JSON.stringify(); json — &gt; string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">112</span><br>&#125;<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(obj)<br>---&gt;<span class="hljs-string">&quot;&#123;&quot;</span>name<span class="hljs-string">&quot;:&quot;</span>abc<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:112&#125;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h1><p>HTML 解析：深度优先原则</p><p>domTree + cssTree = randerTree<br>避免 reflow 重排 dom节点删除，添加<br>dom节点宽高变化，位置变化，display none<br>offsetWidth  offsetLeft</p><p>repaint  重绘  </p><h1 id="异步加载js"><a href="#异步加载js" class="headerlink" title="异步加载js"></a>异步加载js</h1><p>js加载的缺点：加载工具方法没必要阻塞文档，过得js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。<br>有些工具方法需要按需加载，用到再加载，不用不加载。<br>javascript 异步加载 的 三种方案</p><blockquote><p>1.defer 异步加载，但要等到dom文档全部解析完才会被执行。只有IE能用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;tools.js&quot;</span> <span class="hljs-attr">defer</span>=<span class="hljs-string">&quot;defer&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//变成了异步JS，不会阻断HTML CSS，并行下载</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.async 异步加载，加载完就执行，async只能加载外部脚本，不能把js写在script 标签里。</p></blockquote><blockquote><p>1.2 执行时也不阻塞页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;tools.js&quot;</span> <span class="hljs-attr">aysnc</span>=<span class="hljs-string">&quot;aysnc&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//里面不能写东西</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>3.创建script，插入到DOM中，加载完毕后callBack（常用）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="javascript">    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;</span><br><span class="javascript">    script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.head.appendChild(script);</span><br><span class="javascript">    外部js   alert(<span class="hljs-string">&#x27;老邓&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等待下载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<span class="hljs-comment">//创建</span></span><br><span class="javascript">    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<span class="hljs-comment">//设置</span></span><br><span class="javascript">    script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<span class="hljs-comment">//读到直接异步下载 </span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.head.appendChild(script);</span><br><span class="javascript">    <span class="hljs-comment">// test();----还没下载完</span></span><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        test();</span><br><span class="javascript">    &#125;,<span class="hljs-number">1000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示下载</p><p> safari chrome firefox opera</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<br>script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    test();<br>&#125;<span class="hljs-comment">//确保下载完执行，下载不完不执行</span><br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><p>IE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<br><span class="hljs-comment">// script.readyState = &quot;loading&quot;;&quot;completed&quot; &quot;loaded&quot;</span><br>script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>    <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>        test();<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><p>合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>script.src = <span class="hljs-string">&quot;alert.js&quot;</span>;<br><span class="hljs-keyword">if</span>(script.readyState)&#123;<br>    script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>        <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>            test();<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        test();<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><p>封装函数</p><p>外部函数alert.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> tools = &#123;<br><span class="hljs-attr">test</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,<br><span class="hljs-attr">demo</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadScript</span>(<span class="hljs-params">url, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>    <span class="hljs-keyword">if</span>(script.readyState)&#123;<br>        script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>            <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>                callback();<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            callback();<br>        &#125;<br>    &#125;<br>    script.src = url;<span class="hljs-comment">//放在后面的原因：先执行绑定事件，在加载文件</span><br>    <span class="hljs-built_in">document</span>.head.appendChild(script);<br>&#125; <br><span class="hljs-comment">// loadScript(&#x27;alert.js&#x27;,test);还没解析，不知test是谁</span><br>loadScript(<span class="hljs-string">&#x27;alert.js&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    test();<br>&#125;);<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadScript</span>(<span class="hljs-params">url, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>    <span class="hljs-keyword">if</span>(script.readyState)&#123;<br>        script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>            <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>                <span class="hljs-built_in">eval</span>(callback);<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">eval</span>(callback);<br>        &#125;<br>    &#125;<br>    script.src = url;<span class="hljs-comment">//放在后面的原因：先执行绑定事件，在加载文件</span><br>    <span class="hljs-built_in">document</span>.head.appendChild(script);<br>&#125; <br><span class="hljs-comment">// loadScript(&#x27;alert.js&#x27;,test);还没解析，不知test是谁</span><br>loadScript(<span class="hljs-string">&#x27;alert.js&#x27;</span>,<span class="hljs-string">&quot;test()&quot;</span>);<br></code></pre></td></tr></table></figure><p>最终异步加载写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadScript</span>(<span class="hljs-params">url, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;<br>    <span class="hljs-keyword">if</span>(script.readyState)&#123;<br>        script.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//IE</span><br>            <span class="hljs-keyword">if</span>(script.readyState == <span class="hljs-string">&quot;completed&quot;</span>||script.readyState == <span class="hljs-string">&quot;loaded&quot;</span>)&#123;<br>                tools[callback]();<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        script.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            tools[callback]();<br>        &#125;<br>    &#125;<br>    script.src = url;<span class="hljs-comment">//放在后面的原因：先执行绑定事件，在加载文件</span><br>    <span class="hljs-built_in">document</span>.head.appendChild(script);<br>&#125; <br><span class="hljs-comment">// loadScript(&#x27;alert.js&#x27;,test);还没解析，不知test是谁</span><br>loadScript(<span class="hljs-string">&#x27;alert.js&#x27;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="js加载时间线"><a href="#js加载时间线" class="headerlink" title="js加载时间线"></a>js加载时间线</h1><blockquote><p>优化基础</p></blockquote><p>1、创建Document对象，开始解析web页面。解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = ‘loading’。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    <span class="hljs-comment">// window.onload = function()&#123;</span></span><br><span class="javascript">    <span class="hljs-comment">// console.log(document.readyState);</span></span><br><span class="javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.readyState);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、遇到link外部css，创建线程加载，并继续解析文档。</p><p>3、遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。</p><p>4、遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档。<br>对于async属性的脚本，脚本加载完成后立即执行。（异步禁止使用document.write()）<br>5、遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。<br>6、当文档解析完成，document.readyState = ‘interactive’。<br>7、文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()）;<br>8、document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。<br>9、当所有async的脚本加载完成并执行后、img等加载完成后，document.readyState = ‘complete’，window对象触发load事件。<br>10、从此，以异步响应方式处理用户输入、网络事件等。</p><h1 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h1><h2 id="1-事件：交互体验的核心功能"><a href="#1-事件：交互体验的核心功能" class="headerlink" title="1.事件：交互体验的核心功能"></a>1.事件：交互体验的核心功能</h2><h3 id="1-如何绑定事件处理函数"><a href="#1-如何绑定事件处理函数" class="headerlink" title="(1).如何绑定事件处理函数"></a>(1).如何绑定事件处理函数</h3><p>如何绑定事件处理函数，不是绑定事件，事件本身就有</p><blockquote><p>1.ele.onxxx = function (event) {}<br>兼容性很好，但是一个元素只能绑定一个处理程序</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;</span><br><span class="javascript">    &#125;<span class="hljs-comment">//一个对象一个事件 多次赋值会覆盖</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>基本等同于写在HTML行间上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background-color</span>: red<span class="hljs-string">&quot; onclick=&quot;</span>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-string">&quot;&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.obj.addEventListener(type, fn, false);<br>IE9以下不兼容（w3c标准），可以为一个事件绑定多个处理程序</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件监听机制：不是Js引擎干的，而是webstore做的</p><p>可以为一个事件绑定多个处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">    &#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript">    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>演示：打印2个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>演示：打印一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, test, <span class="hljs-literal">false</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, test, <span class="hljs-literal">false</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.obj.attachEvent(‘on’ + type, fn);<br>IE独有，一个事件同样可以绑定多个处理程序</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            * &#123;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;    </span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n) &#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;   </span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n-<span class="hljs-number">1</span>) &#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> liCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; liCollection.length; i++) &#123;</span><br><span class="javascript">                (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) </span>&#123;</span><br><span class="javascript">                    liCollection[j].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(j);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;(i));</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件处理程序的运行环境</p><blockquote><p>1.ele.onxxx = function (event) {}<br>程序this指向是dom元素本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.obj.addEventListener(type, fn, false);<br>程序this指向是dom元素本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = docuemnt.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><blockquote><p>3.obj.attachEvent(‘on’ + type, fn);<br>程序this指向window</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = docuemnt.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.attchEvent(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// console.log(this);---window</span><br>    handle.call(div);<span class="hljs-comment">//让this指向div</span><br>&#125;);<br><span class="hljs-comment">// 想让this指向div</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// this.</span><br>    <span class="hljs-comment">//事件处理程序</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-解除事件处理程序"><a href="#2-解除事件处理程序" class="headerlink" title="(2).解除事件处理程序"></a>(2).解除事件处理程序</h3><blockquote><p>ele.onclick = false/‘’/null;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.onclick = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ele.removeEventListener(type, fn, false);</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.addEventListener(<span class="hljs-string">&#x27;click,test,false&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">div.addEventListener(&#x27;click,function ()&#123;&#125;,false&#x27;);</span><br><span class="hljs-comment">这样用不了，永远接触不掉了，匿名函数</span><br><span class="hljs-comment">*/</span><br>div.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,test,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><blockquote><p>ele.detachEvent(‘on’ + type, fn);同上</p></blockquote><blockquote><p>注:若绑定匿名函数，则无法解除</p></blockquote><h2 id="2-事件处理模型"><a href="#2-事件处理模型" class="headerlink" title="2.事件处理模型"></a>2.事件处理模型</h2><h3 id="1-事件冒泡："><a href="#1-事件冒泡：" class="headerlink" title="(1).事件冒泡："></a>(1).事件冒泡：</h3><p><strong>结构上</strong>（<strong>非视觉上</strong>）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><br><span class="javascript">            wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapper&#x27;</span>);</span><br><span class="javascript">            &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">            content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;content&#x27;</span>);</span><br><span class="javascript">            &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">            box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;box&#x27;</span>);</span><br><span class="javascript">            &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结：结构上嵌套，而不是视觉上</strong></p><h3 id="2-事件捕获："><a href="#2-事件捕获：" class="headerlink" title="(2).事件捕获："></a>(2).事件捕获：</h3><p>结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自底向上）和冒泡区别：<strong>改成true</strong>，与冒泡正好相反，先抓父级，后子元素<br>IE没有捕获事件</p><p>一个对象的一个事件类型只能存在一个事件模型，要么时间冒泡，要么事件捕获</p><p>说法：点击最外层，最外面捕获事件并且执行，中间捕获并且执行，最里面叫事件执行</p><blockquote><p>同一个对象的同一事件类型上面绑定了两个事件处理函数，一个叫事件冒泡，一个事件捕获这两个执行顺序如何？</p></blockquote><p><strong>触发顺序，先捕获，后冒泡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapper&#x27;</span>)</span><br><span class="javascript">    &#125;,<span class="hljs-literal">true</span>);</span><br><span class="javascript">    content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;content&#x27;</span>)</span><br><span class="javascript">    &#125;,<span class="hljs-literal">true</span>);</span><br><span class="javascript">    box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;box&#x27;</span>)</span><br><span class="javascript">    &#125;,<span class="hljs-literal">true</span>);</span><br><span class="javascript"></span><br><span class="javascript">    wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapperBubble&#x27;</span>)</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">    content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;contentBubble&#x27;</span>)</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">    box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;boxBubble&#x27;</span>)</span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果换换顺序：两个捕获结束，到了黄色区域的执行，谁先绑定谁先执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;content&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];<br>wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapperBubble&#x27;</span>)<br>&#125;,<span class="hljs-literal">false</span>);<br>content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;contentBubble&#x27;</span>)<br>&#125;,<span class="hljs-literal">false</span>);<br>box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;boxBubble&#x27;</span>)<br>&#125;,<span class="hljs-literal">false</span>);<br>wrapper.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;wrapper&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>);<br>content.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;content&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>);<br>box.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;box&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>focus，blur，change，submit，reset，select 等事件不冒泡</strong></p><h3 id="3-取消冒泡和阻止默认事件"><a href="#3-取消冒泡和阻止默认事件" class="headerlink" title="(3).取消冒泡和阻止默认事件"></a>(3).取消冒泡和阻止默认事件</h3><p>取消冒泡：</p><p>W3C标准 event.stopPropagation()；但不支持ie9以下版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你闲的呀&#x27;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">div.onclick =  <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">e.stopPropagation();<span class="hljs-comment">//取消冒泡</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.style.background = <span class="hljs-string">&quot;green&quot;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IE，谷歌有 event.cancelBubble = true;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.onclick =  <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    e.cancelBubble = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件:"></a>阻止默认事件:</h3><p>默认事件 — 表单提交，a标签跳转，右键菜单等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1.return false;  以对象属性的方式注册的事件才生效,只有句柄绑定的事件才好使</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.event.preventDefault(); W3C标注，IE9以下不兼容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    e.preventDefault();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.event.returnValue = false; 兼容IE</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    e.returnValue = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>a标签默认跳转事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- br*100 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- br*100 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cancelHandler</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(event.preventDefault) &#123;</span><br><span class="javascript">            event.preventDefault();</span><br><span class="javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">            event.returnValue = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以这样，相当于return</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- &lt;a href=&quot;javascript:alert(&#x27;a&#x27;)&quot;&gt;demo&lt;/a&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(false)&quot;</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>event || window.event 用于IE</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px;background-color: green&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-comment">// 事件源对象</span></span><br><span class="javascript">    wrapper.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件源对象<br>event.target   火狐独有的<br>event.srcElement  Ie独有的<br>这俩chrome都有</p><p>兼容性写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px;background-color: green&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;wrapper&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">    <span class="hljs-comment">// 事件源对象</span></span><br><span class="javascript">    wrapper.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> target = event.target || event.srcElement;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(target);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>点那个出那个内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> len = li.length;</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;</span><br><span class="javascript">            li[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.innerText);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>优化实现：子元素就能冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;ul&#x27;</span>)[<span class="hljs-number">0</span>];<br>ul.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>.event;<br>    <span class="hljs-keyword">var</span> target = event.target || event.srcElement;<br>    <span class="hljs-built_in">console</span>.log(target.innerText);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用事件冒泡，和事件源对象进行处理<br>优点：</p><ol><li><p>性能 不需要循环所有的元素一个个绑定事件</p></li><li><p>灵活 当有新的子元素时不需要重新绑定事件</p></li></ol><p><strong>职业生涯课老师</strong></p><p><strong>5期写的打飞机游戏源码</strong>    不卡优化</p><p>老面试官会问：什么是事件捕获，三个参数为true，还有没有其他形式的捕获：</p><p>真实的事件处理的过程用于解决拖拽鼠标容易出来div这样的麻烦事</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 只在IE好使</span><br>div.setCapture();<span class="hljs-comment">//任何地方发生的任何事件都获取到自己身上</span><br>div.releaseCapture();<span class="hljs-comment">//释放</span><br></code></pre></td></tr></table></figure><h4 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h4><p>鼠标事件<br>click、mousedown、mousemove、mouseup、contextmenu</p><p>click = mousedown + mouseup</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onmousedown&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onmouseup&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>mouseover、mouseout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;yellow&quot;</span>;<br>&#125;<br>div.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>h5新规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">div.onmouseenter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;yellow&quot;</span>;<br>&#125;<br>div.onmouseleave = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.style.background = <span class="hljs-string">&quot;green&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用button来区分鼠标的按键，0/1/2<br>DOM3标准规定:click事件只能监听左键,只能通过mousedown 和 mouseup来判断鼠标键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(e.button == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;right&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.button == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;left&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//中间滚动轮是1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>拖拽影响click，click不影响拖拽，基于这个，实现拖拽不等于点击：时间差</p><p>如何解决mousedown和click的冲突</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> firstTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> key = <span class="hljs-literal">false</span>;<span class="hljs-comment">//开关</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        firstTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        lastTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(lastTime - firstTime &lt; <span class="hljs-number">300</span>)&#123;</span><br><span class="javascript">            key = <span class="hljs-literal">true</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(key)&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);</span><br><span class="javascript">            key = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>随机移动方块项目：鼠标放上去，随机向四面八方移动</p><h2 id="事件分类-1"><a href="#事件分类-1" class="headerlink" title="事件分类"></a>事件分类</h2><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><blockquote><p>移动端onmouseon就不好使了，得用touchstart touchmove touchend</p></blockquote><p>keydown keyup keypress</p><p>猜想：</p><p>keydown+keyup=keypress</p><p>但是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onkeypress = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;keypress&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;keydown&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">document</span>.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;keyup&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>触发顺序： keydown &gt; keypress &gt; keyup</p><h4 id="keydown和keypress的区别"><a href="#keydown和keypress的区别" class="headerlink" title="keydown和keypress的区别"></a>keydown和keypress的区别</h4><p>keydown 可以响应任意键盘按键(除了fn都有)，keypress只可以相应字符类键盘按键（字符时候用它大小写区分开）<br>keypress返回ASCII码，可以转换成相应字符</p><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onkeypress = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e);<br>&#125;<br><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>ASCII转化成字母（验证的时候按空白区域，不是console区域）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>.onkeypress = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>.fromCharCode(e.charCode));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文本操作事件"><a href="#文本操作事件" class="headerlink" title="文本操作事件"></a>文本操作事件</h2><h4 id="input-change"><a href="#input-change" class="headerlink" title="input change"></a>input change</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#01f</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//改变</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">            input.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">//聚焦+状态改变才触发</span></span><br><span class="javascript">            input.change = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="focus-blur"><a href="#focus-blur" class="headerlink" title="focus,blur"></a>focus,blur</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#01f</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#999&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;if(this.value == &#x27;请输入用户名&#x27;)</span></span><br><span class="hljs-string"><span class="hljs-tag">                                                                      &#123;this.value=&#x27;&#x27;&#125;&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;if(this.value==&#x27;&#x27;)&#123;this.value=&#x27;请输入用户名&#x27;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="窗体操作类-window上的事件"><a href="#窗体操作类-window上的事件" class="headerlink" title="窗体操作类(window上的事件)"></a>窗体操作类(window上的事件)</h4><p>scroll(当滚动条一滚动就触发)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML">br*100<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.pageXOffset + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">window</span>.pageYOffset);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>load</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> div  = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(div);</span><br><span class="javascript">        div.style.width = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">        div.style.height = <span class="hljs-string">&quot;100px&quot;</span>;</span><br><span class="javascript">        div.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>div在下面，肯定读不到娶不到，用onload就能用<br></code></pre></td></tr></table></figure><p>为什么不用？</p><p>浏览器时间线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xx.solarge&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器先认出来就行了，具体加载先不管，认出来直接放树上(见图片)<br>先解析完，立刻开启新线程异步下载<br>html刚刚解析完JS就能操作了，不用等HTML解析完<br>window.onload要等解析完下载完才执行，效率太低</p><p>小练习:用position:absoluted模拟fixed定位 js兼容版(IE6没有fixed )</p><p>position:top + 原来的top===他原来位置</p><p><a href="https://blog.csdn.net/longyin0528/article/details/80777809">https://blog.csdn.net/longyin0528/article/details/80777809</a></p><p>完成：</p><p>1.完善轮播图，加按钮<br>2.提(qie)取密码框的密码——监听：边写边监听打印<br>3.输入框功能完善<br>4.贪食蛇游戏—-项目公演<br>5.扫雷游戏—-项目公演：注意闭包</p><p>6.N阶菜单栏：display:none/block</p><p>7.打方块游戏</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对象包装类原形原型链</title>
    <link href="/2021/10/15/%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB%E5%8E%9F%E5%BD%A2%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2021/10/15/%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB%E5%8E%9F%E5%BD%A2%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>用已学的知识点，描述一下你心目中的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> mrDeng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;mrDeng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">health</span> : <span class="hljs-number">100</span>,<span class="hljs-comment">//可在控制台更改</span><br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am smoking&#x27;</span>);<br>        mrDeng.health --;<br>    &#125;,<br>    <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am drink&#x27;</span>);<br>        mrDeng.health ++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进  第一人称：this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> mrDeng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;mrDeng&quot;</span>,   千万别是等于号<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">health</span> : <span class="hljs-number">100</span>,<span class="hljs-comment">//可在控制台更改</span><br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am smoking&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.health --;<br>    &#125;,<br>        <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am drink&#x27;</span>);<br>            <span class="hljs-built_in">this</span>.health ++;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-属性的增、删、改、查"><a href="#1-属性的增、删、改、查" class="headerlink" title="1.属性的增、删、改、查"></a>1.属性的增、删、改、查</h2><p>增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS">drink:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am drinking&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.health ++;<br>&#125;<br>meDeng.wife = <span class="hljs-string">&quot;xiaowang&quot;</span>;<br><span class="hljs-comment">// console.log(mrDeng.wife = &quot;xiaoliu&quot;);</span><br><span class="hljs-comment">// console.log(mrDeng);</span><br></code></pre></td></tr></table></figure><p>改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(mrDeng);<br><span class="hljs-built_in">console</span>.log(mrDeng.sex = <span class="hljs-string">&quot;male&quot;</span>);<br><span class="hljs-built_in">console</span>.log(mrDeng.sex);<br></code></pre></td></tr></table></figure><p>删 delete + 属性</p><p><strong>当一个变量没有声明就是用报错，对象的属性没有就访问打印undefined，不会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">prepareWife</span> : <span class="hljs-string">&quot;xiaowang&quot;</span>,<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;laodeng&quot;</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">gf</span> : <span class="hljs-string">&quot;xiaoliu&quot;</span>,<br>    <span class="hljs-attr">wife</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">divorce</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.wife;<br>        <span class="hljs-built_in">this</span>.gf = <span class="hljs-built_in">this</span>.PrepareWife;<br><br>    &#125;,<br>    <span class="hljs-attr">getMarried</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.wife = <span class="hljs-built_in">this</span>.gf;<br><br>    &#125;,<br>    <span class="hljs-attr">changePrepareWife</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">someone</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.PrepareWife = someone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象的创建方法"><a href="#2-对象的创建方法" class="headerlink" title="2.对象的创建方法"></a>2.对象的创建方法</h2><p>1.var obj = {}   叫plainObject     对象字面量/对象直接量</p><p>2.构造函数</p><p>（1） 系统自带的构造函数 new Object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>obj.sex = <span class="hljs-string">&#x27;female&#x27;</span>;<br>obj.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>系统提供的：new Object();Array();Number();Boolean();Date();</p><p>（2） 自定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//方便使用-人为的，构造函数特点：大驼峰式命名规则，只要是单词，首字母大写（小驼峰式：第一个外的首字母大写）</span><br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;BMW&quot;</span>;<br>    <span class="hljs-built_in">this</span>.height = <span class="hljs-string">&quot;1400&quot;</span>;<br>    <span class="hljs-built_in">this</span>.lang = <span class="hljs-string">&quot;4900&quot;</span>;<br>    <span class="hljs-built_in">this</span>.weight = <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">this</span>.health = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.health --;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car();<span class="hljs-comment">//每个都一样，但是每个都独立</span><br><span class="hljs-keyword">var</span> car1 = <span class="hljs-keyword">new</span> Car();<span class="hljs-comment">//不是一个人，不互通</span><br><span class="hljs-built_in">console</span>.log(car.run());<br><span class="hljs-built_in">console</span>.log(car1.health);<br><span class="hljs-built_in">console</span>.log(car.health);<br></code></pre></td></tr></table></figure><p>demo</p><p>实现自己选配颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.color = color;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;BMW&quot;</span>;<br>    <span class="hljs-built_in">this</span>.height = <span class="hljs-string">&quot;1400&quot;</span>;<br>    <span class="hljs-built_in">this</span>.lang = <span class="hljs-string">&quot;4900&quot;</span>;<br>    <span class="hljs-built_in">this</span>.weight = <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">this</span>.health = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.health --;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>);<br><span class="hljs-keyword">var</span> car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;green&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(car/car1);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.grade = <span class="hljs-number">2017</span>;<br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意事项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Object</span>(<span class="hljs-params"></span>)</span>&#123;<br>    obj.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    obj.sex = <span class="hljs-string">&#x27;female&#x27;</span>;<br>    obj.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//冒号</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>构造函数内部原理</p></blockquote><p>有new  则发生三步</p><p>1.在函数体最前面隐式的加上var this = {}<br>2.执行 this.xxx = xxx;<br>3.隐式的返回this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-comment">//var this = &#123;</span><br>    <span class="hljs-comment">// name : &quot;&quot;</span><br>    <span class="hljs-comment">// age : </span><br>    <span class="hljs-comment">// &#125;;</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.grade = <span class="hljs-number">2017</span>;<br>    <span class="hljs-comment">// return this;</span><br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, height</span>)</span>&#123;<br>    <span class="hljs-comment">// var this = &#123;&#125;</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.height = height;<br>    <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.say);<br>    &#125;<br>    <span class="hljs-comment">// return this;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaoliu&#x27;</span>,<span class="hljs-number">180</span>).name);<br></code></pre></td></tr></table></figure><p>模拟构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, height</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> that = &#123;&#125;;<br>    that.name = name;<br>    that.height = height;<br>    <span class="hljs-keyword">return</span> that;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaowang&#x27;</span>, <span class="hljs-number">180</span>);<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaozhang&#x27;</span>,<span class="hljs-number">175</span>);<br></code></pre></td></tr></table></figure><p>冷门知识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, height</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">this</span> = &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.height = height;<br>    <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.say);<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<span class="hljs-comment">//显示返回空对象,so person很person1都返回空对象</span><br>    <span class="hljs-comment">// return this;</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaowang&#x27;</span>, <span class="hljs-number">180</span>);<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xiaozhang&#x27;</span>,<span class="hljs-number">175</span>);<br><span class="hljs-comment">// 但是return一个原始值不允许</span><br></code></pre></td></tr></table></figure><p>Object.create(原型)方法</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="1-小知识"><a href="#1-小知识" class="headerlink" title="1.小知识"></a>1.小知识</h2><p><strong>原始值不能有属性和方法，只有对象能有，对象包括对象自己，数组，function。</strong><br><strong>数字不一定是原始值。数字分两种：原始值数字才是原始值。数字，字符串分为两种。</strong><br>var num = 123;数字<br>Var num = new number(123);也数字，对象123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(num);<br><span class="hljs-built_in">console</span>.log(num.abc=<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(num.abc);<br><span class="hljs-built_in">console</span>.log(num);<br><span class="hljs-built_in">console</span>.log(num*<span class="hljs-number">2</span>);<span class="hljs-comment">//成了数字，没有了对象属性，同理字符串，布尔</span><br></code></pre></td></tr></table></figure><p>不能有属性的两个原始值：<strong>undefined null</strong></p><p>String();<br>Boolean();<br>Number();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>);<br><span class="hljs-keyword">var</span> bol = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;true&#x27;</span>);<br><span class="hljs-comment">// undefined与null不可以有属性</span><br><span class="hljs-built_in">console</span>.log(num.abc);<br></code></pre></td></tr></table></figure><h2 id="2-现象："><a href="#2-现象：" class="headerlink" title="2.现象："></a>2.现象：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = “abcd”;<br>str.length = <span class="hljs-number">4</span>;<span class="hljs-comment">//理论上不可以</span><br>str.abc = ‘a’;<br>str.abc = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><p>原始值不可能有属性和方法，因为经历了一个过程——包装类，才能调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">4</span>;<span class="hljs-comment">//包装类</span><br><span class="hljs-built_in">console</span>.log(num.len = <span class="hljs-number">3</span>);<br><span class="hljs-comment">//new Number(4).len = 3;  delete</span><br><span class="hljs-comment">// new Number(4).len</span><br><span class="hljs-built_in">console</span>.len(num.len);<span class="hljs-comment">//undefined</span><br><span class="hljs-comment">// num没有length</span><br></code></pre></td></tr></table></figure><blockquote><p>考题</p></blockquote><p>基于一个理论：数组截断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [a,b,c,d];<br><span class="hljs-built_in">console</span>.log(arr.length = <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><p>成哥真题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br>str.length = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// new String(&#x27;abcd&#x27;).length = 2;delete</span><br><span class="hljs-built_in">console</span>.log(str);<span class="hljs-comment">//abcd</span><br></code></pre></td></tr></table></figure><p>变式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcd&quot;</span>;<br>str.length = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// new String(&#x27;abcd&#x27;).length = 2;delete</span><br><span class="hljs-comment">// new String(&#x27;abcd&#x27;).length</span><br><span class="hljs-built_in">console</span>.log(str.length);<span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h1 id="原形"><a href="#原形" class="headerlink" title="原形"></a>原形</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>原型是function对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。</p><p>构造函数产生的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// Person.prototype = &#123;&#125; 是祖先</span><br>Person.prototype.name = <span class="hljs-string">&quot;hehe&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>应用：</p><p>实例一：自己有取自己的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br>Person.prototype.say  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hehe&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this.LastName = &#x27;ji&#x27;;先看自己后看父亲</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>实例二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br>Person.prototype.say  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hehe&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xuming&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-提取共有属性。"><a href="#2-提取共有属性。" class="headerlink" title="2.提取共有属性。"></a>2.提取共有属性。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color,owner</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.owner = owner;<br>    <span class="hljs-built_in">this</span>.carName = <span class="hljs-string">&quot;BMW&quot;</span>;<span class="hljs-comment">//每次生产都得执行这三句，耦合</span><br>    <span class="hljs-built_in">this</span>.height = <span class="hljs-number">1400</span>;<br>    <span class="hljs-built_in">this</span>.lang = <span class="hljs-number">8900</span>;<br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;prof.ji&#x27;</span>);<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Car.prototype.height = <span class="hljs-number">1400</span>;<br>Car.prototype.lang = <span class="hljs-number">8900</span>;<br>Car.prototype.carName = <span class="hljs-string">&quot;BMW&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color,owner</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.owner = owner;<br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;prof.ji&#x27;</span>);<br><span class="hljs-keyword">var</span> car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;laodeng&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="3-原形的增删改查"><a href="#3-原形的增删改查" class="headerlink" title="3.原形的增删改查"></a>3.原形的增删改查</h2><p>增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<span class="hljs-comment">//原形属性没有改，想改，就要调用Person.prototyoe.lastName</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;xuming&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(person.lastName=<span class="hljs-string">&quot;james&quot;</span>);<span class="hljs-comment">//这不叫修改，这叫增加</span><br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(person.lastName);<br></code></pre></td></tr></table></figure><p>删</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> person.name);<br><span class="hljs-built_in">console</span>.log(person.name);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> person.lastName);<br><span class="hljs-built_in">console</span>.log(person.lastName);<span class="hljs-comment">//删除失效</span><br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Car.prototype.height = <span class="hljs-number">1400</span>;<br>Car.prototype.lang = <span class="hljs-number">8900</span>;<br>Car.prototype.carName = <span class="hljs-string">&quot;BMW&quot;</span>;<br>一步到位<br>Car.prototype = &#123;<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">1400</span>,<br>    <span class="hljs-attr">lang</span> : <span class="hljs-number">4900</span>,<br>    <span class="hljs-attr">carName</span> : <span class="hljs-string">&quot;BMW&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>改</p><p>2.对象如何查看对象的构造函数 — &gt; constructor构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-comment">//可以手动更改</span><br><span class="hljs-comment">//构造器constructor：谁生的</span><br>Car.prototype = &#123;<br>    <span class="hljs-attr">constructor</span> : Person<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car();<br><span class="hljs-built_in">console</span>.log(car.constructor);<br></code></pre></td></tr></table></figure><p>查</p><ol><li>对象如何查看原型 — &gt; 隐式属性 <strong>proto</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<span class="hljs-comment">//浅紫色，隐式命名规则</span><br><span class="hljs-built_in">console</span>.log(person);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS">person.prototype.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-comment">// 私人属性：var __pravite</span><br><span class="hljs-built_in">console</span>.log(person.__proto__)<span class="hljs-comment">//__proto__里面放的是原形</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">this</span> = &#123;<br>        <span class="hljs-comment">// __proto__: Person.prototype</span><br>    &#125;<br>&#125;<span class="hljs-comment">//先看看自己有没有name属性，没有的话沿着proto指向找</span><br><span class="hljs-keyword">var</span> perosn = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(perosn.name);<br></code></pre></td></tr></table></figure><p>改变proto指向会使得指向更改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// var this = &#123;</span><br>    <span class="hljs-comment">// // __proto__: Person.prototype</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sunny&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<span class="hljs-comment">//换爹</span><br>person.__proto__ = obj;<br></code></pre></td></tr></table></figure><p>演示1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>Person.prototype.name = <span class="hljs-string">&quot;cherry&quot;</span>;<br>person.name; <br>分析:自己没有，找proto，是Person.prototype：sunny，最后又改成cherry<br></code></pre></td></tr></table></figure><p>演示2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br>Person.prototype.name = <span class="hljs-string">&quot;cherry&quot;</span>;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.name); <br>同理分析cherry<br></code></pre></td></tr></table></figure><p>演示3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>Person.prototype = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;cherry&quot;</span><br>&#125;<br>person.name; <br>答案：sunny。        <br>.的写法是原有的基础上把原有的值改了，这一次是把原形改了，换了个新对象<br></code></pre></td></tr></table></figure><p>简化:引用值的互相赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;a&quot;</span>&#125;;<br><span class="hljs-keyword">var</span> obj1 = obj;<br>obj = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;b&quot;</span>&#125;;<br>obj1:a,<span class="hljs-attr">obj</span>:b     <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.Prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//var this = &#123;__proto__:Person.prototype&#125;</span><br>&#125;<span class="hljs-comment">//proto指向不变还是sunny</span><br><span class="hljs-keyword">var</span> person  = <span class="hljs-keyword">new</span> Person();<br>Person.prototype = &#123;<span class="hljs-comment">//把自己空间换了</span><br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;cherry&#x27;</span><br>&#125;<br><span class="hljs-comment">// 更加简化</span><br><span class="hljs-comment">// Perosn.prototype = &#123;name:&quot;a&quot;&#125;;</span><br><span class="hljs-comment">// __proto__ = Person.Prototype;</span><br><span class="hljs-comment">// Person.Prototype = &#123;name:&quot;b&quot;&#125;;</span><br></code></pre></td></tr></table></figure><p>演示4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br>Person.prototype = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cherry&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>person.name;<br>答案：cherry<br>预编译：函数 <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123; &#125; 提升到最上面，然后顺序执行，执行到最后一行，有<span class="hljs-keyword">new</span>了，<br>就有<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">var</span> <span class="hljs-built_in">this</span> = __proto__ Person.prototype &#125; ，再访问：下面的把上覆盖<br></code></pre></td></tr></table></figure><p>原型链引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS">Grand.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Gand</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name  = <span class="hljs-string">&quot;xuming&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.hobbit = <span class="hljs-string">&quot;somke&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-built_in">console</span>.log(son.hobbit);<br><span class="hljs-built_in">console</span>.log(son.name);<span class="hljs-comment">//顺着链找</span><br><span class="hljs-built_in">console</span>.log(son.toString);<br>Grand.prototype.__proto__=<span class="hljs-built_in">Object</span>.prototype是所有对象的最终原形<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__);proto没了，so就是终端<br></code></pre></td></tr></table></figure><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>如何构成原型链?  </p><h2 id="1-原型链上属性的增删改查"><a href="#1-原型链上属性的增删改查" class="headerlink" title="1.原型链上属性的增删改查"></a>1.原型链上属性的增删改查</h2><p>增，删，修改：只有本人有权限，子孙没有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> Father.prototype.n);<span class="hljs-comment">//删不了</span><br></code></pre></td></tr></table></figure><p>特例：引用值调用修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;xuming&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.fortune = &#123;<br>        <span class="hljs-attr">card1</span> : <span class="hljs-string">&#x27;visa&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.hobbit = <span class="hljs-string">&quot;somoke&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> son =  <span class="hljs-keyword">new</span> Son();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(son.fortune);<br>son.fortune = <span class="hljs-number">200</span>;<br><span class="hljs-built_in">console</span>.log(son);<br><span class="hljs-built_in">console</span>.log(father.fortune);<br>son.fortune.card2 = <span class="hljs-string">&#x27;master&#x27;</span>;<br>cons.log(father);<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS">Grand.prototype.LastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Grand</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;xuming&quot;</span>;<br>    <span class="hljs-built_in">this</span>.forture = &#123;<br>        <span class="hljs-attr">card1</span> : <span class="hljs-string">&#x27;visa&#x27;</span><br>    &#125;;<br>    <span class="hljs-built_in">this</span>.num = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.hobbit = <span class="hljs-string">&quot;smoke&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(son.num++);<span class="hljs-number">100</span><br><span class="hljs-built_in">console</span>.log(father);<span class="hljs-number">100</span><br><span class="hljs-built_in">console</span>.log(son.num);<span class="hljs-number">101</span><br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<span class="hljs-comment">//答案：a</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;b&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>小常识：<br>a.sayName()<br>sayName里面的this指向是，谁调用的这个方法，this就指向谁<br>person.sayName();    person调用的，b<br>如果Person.prototype.sayName();    a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype = &#123;<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.eat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.height ++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(person.eat);<br>person.eat();<br><span class="hljs-built_in">console</span>.log(person.eat);<span class="hljs-comment">//默認return：undefined 查看要写代码</span><br></code></pre></td></tr></table></figure><p>公司规范：数组，对象都用字面量创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<span class="hljs-comment">//对象自变量创建形式，有原形</span><br><span class="hljs-comment">//与var obj1 = new Object();相同</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;内部来一个<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>所以要写对象字面量<br></code></pre></td></tr></table></figure><blockquote><p>绝大多数对象的最终都会继承自Object.prototype</p></blockquote><p>（选择题真题）<br>例外：由于Object.create</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.create());<span class="hljs-comment">//报错，不写代码</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>));<br></code></pre></td></tr></table></figure><blockquote><p>Object.create(原型)也能创造对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var obj = Object(原形);</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;sunny&quot;</span>, <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>&#125;;<br><span class="hljs-keyword">var</span> obj1 = <span class="hljs-built_in">Object</span>.create(obj);<br><span class="hljs-comment">// obj1成为了对象，obj1的原形是obj,所以obj1.name就是obj.name</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">Person.prototype.name = <span class="hljs-string">&quot;sunny&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-built_in">Object</span>.create(Person.prototype);<br></code></pre></td></tr></table></figure><h2 id="2-关于toString"><a href="#2-关于toString" class="headerlink" title="2.关于toString:"></a>2.关于toString:</h2><p><strong>只有undefined与null不能调用toString</strong><br>数字可以，因为经过包装类一层层访问123.toString();<br>undefined没有包装类，是个原始值，没有原形，不能调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span>.toString);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>.toString);<br>obj.__proto__ = &#123; <span class="hljs-attr">name</span>: sunny&#125;;<br><span class="hljs-built_in">console</span>.log(obj.name);<span class="hljs-comment">//自己加原形不管用</span><br></code></pre></td></tr></table></figure><p>各个变量各个属性值调用toString返回结果不一样   变成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(num.toString);<span class="hljs-comment">//字符串</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123.</span>toString);<span class="hljs-comment">//识别成浮点型</span><br></code></pre></td></tr></table></figure><p>现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj.toString();----&gt;[object <span class="hljs-built_in">Object</span>]<br></code></pre></td></tr></table></figure><p>原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-comment">// num.toString();--&gt;new Number(num).toString();</span><br><span class="hljs-built_in">Number</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-comment">// Number.prototype.__proto__ = Object.prototype</span><br></code></pre></td></tr></table></figure><p>重写笔试题:写一个方法重写形式，写一个和系统同样的名，不同功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// Object.prototype.toString = function ()&#123;</span><br><span class="hljs-comment">// &#125; </span><br>Person.prototype = &#123;<br>    <span class="hljs-attr">toString</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hehhe&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> Person = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><blockquote><p><strong>本集多看弱项</strong></p></blockquote><h2 id="3-小bug"><a href="#3-小bug" class="headerlink" title="3.小bug"></a>3.小bug</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.4</span>*<span class="hljs-number">100</span>);<span class="hljs-comment">//js精度不准</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">123.234</span>));<span class="hljs-comment">//向上取整</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">123.99999</span>));<span class="hljs-comment">//下</span><br></code></pre></td></tr></table></figure><p>随机生成0-100随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Math</span>.random();<span class="hljs-comment">//随机数生成函数(0,1)</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    <span class="hljs-keyword">var</span> num  = <span class="hljs-built_in">Math</span>.random().toFixed(<span class="hljs-number">2</span>)*<span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">console</span>.log(num);<span class="hljs-comment">//会出现偏差</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解决:先*100后取整</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">console</span>.log(num);<br>&#125;<br><span class="hljs-comment">// 总结：可正常那个计算的范围：小数点前16后16</span><br></code></pre></td></tr></table></figure><h1 id="call-apply-必考"><a href="#call-apply-必考" class="headerlink" title="call/apply 必考"></a>call/apply <code>必考</code></h1><h2 id="1-call"><a href="#1-call" class="headerlink" title="1.call"></a>1.call</h2><p><strong>作用，改变this指向。借用别人的函数实现自己的功能</strong><br><strong>区别，后面传的参数形式不同。</strong><br>call需要把实参按照形参的个数传出去    apply需要传一个arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>test()===test.call();<span class="hljs-comment">//后面隐式默认</span><br></code></pre></td></tr></table></figure><p>call里面可以传东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;deng&#x27;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">var</span> obj = &#123;<br>&#125;<br><span class="hljs-comment">// Person.call(obj);</span><br><span class="hljs-comment">// 会让Person里所有的this变成obj 即this=obj</span><br><span class="hljs-comment">// 怎么传参：Person.call(obj,&#x27;cheng&#x27;,300);</span><br>Person.call(obj,<span class="hljs-string">&#x27;cheng&#x27;</span>,<span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure><p>企业级开发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//开发讲究快准狠，A写的代码能实现B的功能，省时</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, sex, tel, grade</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.tel = tel;<br>    <span class="hljs-built_in">this</span>.grade = grade;<span class="hljs-comment">//后面覆盖前面</span><br>&#125;<br><span class="hljs-comment">// call 借用别人的函数实线自己的功能</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, sex, tel, grade</span>)</span>&#123;<br>    <span class="hljs-comment">// var this = &#123;name : &quot;&quot;, age : &quot;&quot;,sex : &quot;&quot;&#125;</span><br>    Person.call(<span class="hljs-built_in">this</span>, name, age, sex);<br>    <span class="hljs-built_in">this</span>.tel = tel;<br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;sunny&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-number">139</span>,<span class="hljs-number">2017</span>);<br></code></pre></td></tr></table></figure><p>造车举例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Wheel</span>(<span class="hljs-params">wheelSize,style</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.style = style;<br>    <span class="hljs-built_in">this</span>.wheelSize = wheelSize;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Sit</span>(<span class="hljs-params">c,sitColor</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.c = c;<br>    <span class="hljs-built_in">this</span>.sitColor = sitColor;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Model</span>(<span class="hljs-params">height,width,len</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.height = height;<br>    <span class="hljs-built_in">this</span>.width = width;<br>    <span class="hljs-built_in">this</span>.len = len;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">wheelSize, style, c, sitColor, height, width, len</span>) </span>&#123;<br>    Wheel.call(<span class="hljs-built_in">this</span>, wheelSize,style);<br>    Sit.call(<span class="hljs-built_in">this</span>,c,sitColor);<br>    Model.call(<span class="hljs-built_in">this</span>, height, width, len);<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;花里胡哨的&#x27;</span>,<span class="hljs-string">&#x27;真皮&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-number">1800</span>,<span class="hljs-number">1900</span>,<span class="hljs-number">4900</span>);<br></code></pre></td></tr></table></figure><h2 id="2-apply："><a href="#2-apply：" class="headerlink" title="2.apply："></a>2.apply：</h2><p>apply只能传送一个数组形式的实参<br>Wheel.apply(this, [wheelSize,style]);</p><p>总结：</p><p>call：<strong>需要把实参按照形参的个数传进去</strong></p><p>apply: <strong>需要传一个arguments</strong></p><p>作业:电子书js设计模式0-35页上部分</p><p>笔试题：用友2017校招前端</p><h1 id="继承发展史"><a href="#继承发展史" class="headerlink" title="继承发展史"></a>继承发展史</h1><h2 id="1-传统形式"><a href="#1-传统形式" class="headerlink" title="1.传统形式"></a>1.传统形式</h2><blockquote><p>过多的继承了没用的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS">Grand.prototype.lastName = <span class="hljs-string">&quot;Ji&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Grand</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> grand = <span class="hljs-keyword">new</span> Grand();<br>Father.prototype = grand;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;hehe&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br>Son.prototype = father;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<span class="hljs-comment">//一系列从头到尾继承，导致不想继续的也继承了</span><br></code></pre></td></tr></table></figure><h2 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2.借用构造函数"></a>2.借用构造函数</h2><p>不能继承借用构造函数的原型<br>每次构造函数都要多走一个函数实际浪费效率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age,sex</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<span class="hljs-comment">//实际上call apply不是继承</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, sex, grade</span>) </span>&#123;<br>    Person.call(<span class="hljs-built_in">this</span>,name,age,sex);<br>    <span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><span class="hljs-keyword">var</span> student = <span class="hljs-keyword">new</span> Student();<br></code></pre></td></tr></table></figure><h2 id="3-共享原型"><a href="#3-共享原型" class="headerlink" title="3.共享原型"></a>3.共享原型</h2><p>不能随便改动自己的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// Son想继承father的prototype</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现方法</p><ol><li><p>原型链</p><p>function Son()上面放上var father…</p></li><li><p>共有原形</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br>Son.prototype = Father.prototype<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br></code></pre></td></tr></table></figure><p>抽象成函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    Target.prototype = Origin.prototype;<br>&#125;<br>inherit(Son, Father);<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<span class="hljs-comment">//son.LastName = &quot;Deng&quot;;</span><br></code></pre></td></tr></table></figure><p>要先继承后使用，Son.lastName指向原来的空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    Target.prototype = Origin.prototype;<br><br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>inherit(Son, Father);<span class="hljs-comment">//先继承，后该原形不管用 son.lastName = undefined</span><br></code></pre></td></tr></table></figure><p>不足：</p><p>son给自己多加一个属性，方便后续生产出的对象使用，不能个性实现，继承了，但是影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS">Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>)</span>&#123;<br>    Target.prototype = Origin.prototype;<br><br>&#125;<br>inherit(Son, Father);<br>Son.prototype.sex = <span class="hljs-string">&quot;male&quot;</span>;<span class="hljs-comment">//与father的prototype一致，一个变，都变</span><br>Father.prototype<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br><span class="hljs-comment">// 要实现：想继承但不相互影响</span><br></code></pre></td></tr></table></figure><h2 id="4-圣杯模式"><a href="#4-圣杯模式" class="headerlink" title="4.圣杯模式"></a>4.圣杯模式</h2><h3 id="通过原型链"><a href="#通过原型链" class="headerlink" title="通过原型链"></a>通过原型链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>    F.prototype = Origin.prototype;<br>    Target.prototype = <span class="hljs-keyword">new</span> F();<br>&#125;<br>Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br>inherit(Son,Father);<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son;<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br><span class="hljs-built_in">console</span>.log(Son.prototype.sex = <span class="hljs-string">&quot;male&quot;</span>);<br><span class="hljs-built_in">console</span>.log(son.sex);<br><span class="hljs-built_in">console</span>.log(father.sex);<br><span class="hljs-built_in">console</span>.log(Father.prototype);<br></code></pre></td></tr></table></figure><p>但是，constructor应该指向构造函数，然而，son.constructor = ƒ Father()？？？？怎么回事？</p><blockquote><p>原形上系统自带的一个属性叫constructor，<strong>默认指向他的构造函数</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">son.__proto__ ---&gt;<span class="hljs-keyword">new</span> F().__proto__---&gt;Father.prototype<br><span class="hljs-comment">//指向紊乱了</span><br></code></pre></td></tr></table></figure><p>实现继承：必会圣杯模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>    F.prototype = Origin.prototype;<br>    Target.prototype = <span class="hljs-keyword">new</span> F();<br>    Target.prototype.constructor = Target;<br>    Target.prototype.uber = Origin.prototype;<span class="hljs-comment">//超级父级：超类</span><br>&#125;<br>Father.prototype.lastName = <span class="hljs-string">&quot;Deng&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>inherit(Son, Father);<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-keyword">var</span> father = <span class="hljs-keyword">new</span> Father();<br></code></pre></td></tr></table></figure><p>颠倒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">F.prototype = Origin.prototype;<br>Target.prototype = <span class="hljs-keyword">new</span> F();<span class="hljs-comment">//不能颠倒，一定要在new之前改原形</span><br></code></pre></td></tr></table></figure><h3 id="类雅虎"><a href="#类雅虎" class="headerlink" title="类雅虎"></a>类雅虎</h3><p>闭包的作用：可以实现封装，属性私有化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Deng</span>(<span class="hljs-params">name, wife</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> prepareWife = <span class="hljs-string">&quot;xiaozhang&quot;</span>;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.wife = wife;<br>    <span class="hljs-built_in">this</span>.divorce = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.wife = prepareWife;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.changePrepareWife = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>)</span>&#123;<br>        prepareWife = target;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.sayPreparewife = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(prepareWife);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> deng = <span class="hljs-keyword">new</span> Deng(<span class="hljs-string">&#x27;deng&#x27;</span>,<span class="hljs-string">&#x27;xiaoliu&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(deng.sayPreparewife());<br><span class="hljs-built_in">console</span>.log(deng.Preparewife)<span class="hljs-comment">//直接看看不到  即私有化变量</span><br></code></pre></td></tr></table></figure><p>F变成了私有化变量 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> inherit = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<span class="hljs-comment">//F放在闭包，私有化变量</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Target,Origin</span>)</span>&#123;<br>        F.prototype = Origin.prototype;<br>        Target.prototype = <span class="hljs-keyword">new</span> F();<br>        Target.prototype.constuctor = Target;<br>        Target.prototype.uber = Origin.prototype;<br>    &#125;<br>&#125;());<br></code></pre></td></tr></table></figure><p><strong>离散数学</strong>（重要）——&gt;CS专业（计算机专业），，，，概率论,人工智能</p><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><blockquote><p>就是对象</p></blockquote><p>管理变量，防止污染全局，适用于模块化开发</p><p>一个页面，多人协作，合并冲突</p><h2 id="1-老办法：命名空间"><a href="#1-老办法：命名空间" class="headerlink" title="1.老办法：命名空间"></a>1.老办法：命名空间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> org = &#123;<br>    <span class="hljs-attr">department1</span> : &#123;<br>        <span class="hljs-attr">jicheng</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;abc&quot;</span>;<br>            age : <span class="hljs-number">123</span>;<br>        &#125;,<br>        <span class="hljs-attr">xuming</span> : &#123;<br><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">department2</span> : &#123;<br>        <span class="hljs-attr">zhangsan</span> : &#123;<br><br>        &#125;,<br>        <span class="hljs-attr">lisi</span> : &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> jicheng = org.department1.jicheng;<br>jicheng.name;<br></code></pre></td></tr></table></figure><h2 id="2-新方法：闭包私有化变量"><a href="#2-新方法：闭包私有化变量" class="headerlink" title="2.新方法：闭包私有化变量"></a>2.新方法：闭包私有化变量</h2><p>webpack</p><blockquote><p>闭包（实现变量私有化）+立即执行函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;bac&quot;</span>;<br><span class="hljs-keyword">var</span> init = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callName();<br>    &#125;<br>&#125;())<br>init();<br></code></pre></td></tr></table></figure><p>协作也不冲突</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;bac&quot;</span>;<br><span class="hljs-keyword">var</span> init = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callName();<br>    &#125;<br>&#125;())<br><span class="hljs-keyword">var</span> initDeng = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-number">123</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callName();<br>    &#125;<br>&#125;())<br></code></pre></td></tr></table></figure><blockquote><p>如何实现链式调用模式（模仿jquery）<br>obj.eat().smoke().drink().eat().sleep();</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">$(<span class="hljs-string">&#x27;div&#x27;</span>).css(<span class="hljs-string">&#x27;background-color&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>).width(<span class="hljs-number">100</span>).height(<span class="hljs-number">100</span>).<br>html(<span class="hljs-number">123</span>).css(<span class="hljs-string">&#x27;position&#x27;</span>,<span class="hljs-string">&#x27;absolute&#x27;</span>).<br>css(<span class="hljs-string">&#x27;left&#x27;</span>,<span class="hljs-string">&#x27;100px&#x27;</span>).css(<span class="hljs-string">&#x27;top&#x27;</span>,<span class="hljs-string">&#x27;100px&#x27;</span>);<br></code></pre></td></tr></table></figure><p>模拟jQuery实现连续调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Smoking...xuan cool!!!&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Drinking...good&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">perm</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;perming...cool&#x27;</span>);<br>    &#125;<br>&#125;<br>deng.smoke();<br>deng.drink();<br>deng.perm();<span class="hljs-comment">//怎么实现JQ一样连续调用</span><br></code></pre></td></tr></table></figure><p>为什么不能连续调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Smoking...xuan cool!!!&#x27;</span>);<br><span class="hljs-comment">// return undefined;</span><br></code></pre></td></tr></table></figure><p>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">smoke</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Smoking...xuan cool!!!&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">drink</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Drinking...good&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">perm</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;perming...cool&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br>deng.smoke().drink().perm().smoke().drink();<br></code></pre></td></tr></table></figure><h1 id="查看属性"><a href="#查看属性" class="headerlink" title="查看属性"></a>查看属性</h1><p>想实现num为几，就叫哪个媳妇</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">wife1</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaoliu&quot;</span>&#125;,<br>    <span class="hljs-attr">wife2</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaozhang&quot;</span>&#125;,<br>    <span class="hljs-attr">wife3</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaowang&quot;</span>&#125;,<br>    <span class="hljs-attr">wife4</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaoli&quot;</span>&#125;,<br>    <span class="hljs-attr">sayWife</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>&#123;<br>        <span class="hljs-keyword">switch</span>(num) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.wife1;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>把上述代码简化：变量拼接属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;abc&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>**obj.name—-&gt;obj[‘name’];**内部会转换成方括号，so这样写也对<br>方括号可以字符串拼接<br>功能实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">wife1</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaoliu&quot;</span>&#125;,<br>    <span class="hljs-attr">wife2</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaozhang&quot;</span>&#125;,<br>    <span class="hljs-attr">wife3</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaowang&quot;</span>&#125;,<br>    <span class="hljs-attr">wife4</span> : &#123;<span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaoli&quot;</span>&#125;,<br>    <span class="hljs-attr">sayWife</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>&#123;<br>        <span class="hljs-keyword">switch</span>(num) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[<span class="hljs-string">&#x27;wife&#x27;</span> + num];<span class="hljs-comment">//字符串加啥都是字符串</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(deng.sayWife(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h1 id="对象的枚举"><a href="#对象的枚举" class="headerlink" title="对象的枚举"></a>对象的枚举</h1><blockquote><p>for in 循环</p></blockquote><p>数据组的遍历：想知道十个人的信息，挨个知道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br><span class="hljs-comment">//遍历 枚举 enumeration</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<span class="hljs-comment">//遍历</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果想查找（遍历）对象的呢（不知道啥类型，编辑器角度）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;123&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">75</span><br>    <span class="hljs-comment">//prop:123</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-built_in">console</span>.log(obj.prop);<span class="hljs-comment">//不好使---obj.prop---&gt;obj[&#x27;prop&#x27;]当成属性了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span><span class="hljs-comment">//也会把原形东西拿出来，不想把原形拿出来————hasOwnProperty</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-built_in">console</span>.log(obj[prop]);<br>    <span class="hljs-comment">//console.log(obj[&#x27;prop&#x27;]);//跟obj.prop一样，这样也不对</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现obj1里面属性+1返回<br>错误示范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">a</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">b</span> : <span class="hljs-number">234</span>,<br>    <span class="hljs-attr">c</span> : <span class="hljs-number">456</span><br>&#125;<br><span class="hljs-keyword">var</span> key;<br><span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> obj1) &#123;<span class="hljs-comment">//这样写也行</span><br>    obj1.key ++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-hasOwnProperty（重点）"><a href="#1-hasOwnProperty（重点）" class="headerlink" title="1.hasOwnProperty（重点）"></a>1.hasOwnProperty（重点）</h2><p>过滤性方法</p><p>判断这个属性是否是<strong>自己</strong>的(不是原形链的)<br>true<br>false</p><p>不想把原形拿出来demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span>(obj.hasOwnProperty(prop))&#123;<br>        <span class="hljs-built_in">console</span>.log(obj[prop]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自己设的一定能打印，系统设的一定不能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span>,<br>        <span class="hljs-attr">__proto__</span> : <span class="hljs-built_in">Object</span>.prototype<span class="hljs-comment">//一旦延展的原型链的最顶端，不会打印最顶端</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-in"><a href="#2-in" class="headerlink" title="2.in"></a>2.in</h2><p> 和hasOwnProperty类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;13&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">height</span> : <span class="hljs-number">180</span>,<br>    <span class="hljs-attr">weight</span> : <span class="hljs-number">178</span>,<br>    <span class="hljs-attr">__proto__</span> : &#123;<br>        <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;deng&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//console.log(height in obj)//height叫变量</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;height&#x27;</span> <span class="hljs-keyword">in</span> obj)<span class="hljs-comment">//height这个属性名存不存在于obj</span><br>concole.log(<span class="hljs-string">&#x27;lastName&#x27;</span> <span class="hljs-keyword">in</span> obj)<br></code></pre></td></tr></table></figure><p>和hasOwnProperty的区别：<br>In判断能不能访问到这个属性或者原形（只能判断对象上能不能访问到这个属性，也可以在父级找）<br>hasOwnProperty判断属性属不属于这个对象<br>开发从来不用</p><h2 id="3-instanceof（重点）"><a href="#3-instanceof（重点）" class="headerlink" title="3.instanceof（重点）"></a>3.instanceof（重点）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-comment">// A对象是不是B构造函数构造出来的</span><br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> Person);<br><span class="hljs-comment">// ----&gt;ture</span><br></code></pre></td></tr></table></figure><p>看A对象的的原型链上有么有B的原形（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);<br>----&gt;ture<br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>);<br>----&gt;ture<br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);<br>----&gt;ture<br><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>);<br>----&gt;<span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> Person);<br>----&gt;<span class="hljs-literal">false</span> <span class="hljs-comment">//两个没关系</span><br></code></pre></td></tr></table></figure><p>解决的问题</p><blockquote><p>判断变量是数组还是对象（机器识别）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">typeof</span>([])<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span>(&#123;&#125;)<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-comment">//需求：</span><br><span class="hljs-keyword">var</span> arr = [] || &#123;&#125;;<br></code></pre></td></tr></table></figure><p>第一种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<span class="hljs-comment">//var obj = [];</span><br>obj.constructor<span class="hljs-comment">//直接区分出来了</span><br></code></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>第三种方法：toString</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Object</span>.prototype.toString.call([]);<br><span class="hljs-comment">//Object.prototype.toString = function ()&#123;</span><br><span class="hljs-comment">//谁调用，this就是谁</span><br><span class="hljs-comment">//识别this:</span><br><span class="hljs-comment">//返回相应结果</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// obj.toString();</span><br><span class="hljs-comment">// call.toString();</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call([]);<span class="hljs-comment">//数组会替换this</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">123</span>);<br><span class="hljs-built_in">Object</span>.prototype.toString.call(&#123;&#125;);<span class="hljs-comment">//区别数组和对象</span><br></code></pre></td></tr></table></figure><p>控制台验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Object</span>.prototype.toString.call([]);<br><span class="hljs-string">&quot;[object Array]&quot;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(&#123;&#125;)<br><span class="hljs-string">&quot;[object Object]&quot;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">123</span>);<br><span class="hljs-string">&quot;[object Number]&quot;</span><br></code></pre></td></tr></table></figure><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="1-函数预编译过程-this-—-gt-window"><a href="#1-函数预编译过程-this-—-gt-window" class="headerlink" title="1.函数预编译过程 this —&gt; window"></a>1.函数预编译过程 this —&gt; window</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">c</span>) </span>&#123;<br>    <span class="hljs-comment">//var this = Object.create(test.prototype);</span><br>    <span class="hljs-comment">//相当于</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">// __proto__ : test.prototype</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//AO&#123;</span><br><span class="hljs-comment">//  arguments : [1],//自带的</span><br><span class="hljs-comment">//  this : window,//自带的</span><br><span class="hljs-comment">//  c : 1,</span><br><span class="hljs-comment">//  a : undefined,</span><br><span class="hljs-comment">//  b : function() &#123;&#125;</span><br><span class="hljs-comment">//&#125;</span><br>test(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">new</span> test();<span class="hljs-comment">//new导致this指向发生了改变，不在是window了</span><br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><h2 id="2-全局作用域里-this-—-gt-window"><a href="#2-全局作用域里-this-—-gt-window" class="headerlink" title="2.全局作用域里 this —&gt; window"></a>2.全局作用域里 this —&gt; window</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>);<br></code></pre></td></tr></table></figure><h2 id="3-call-apply-可以改变函数运行时this指向"><a href="#3-call-apply-可以改变函数运行时this指向" class="headerlink" title="3.call/apply 可以改变函数运行时this指向"></a>3.call/apply 可以改变函数运行时this指向</h2><h2 id="4-obj-f-f-里面的this指向obj"><a href="#4-obj-f-f-里面的this指向obj" class="headerlink" title="4.obj.f();   f()里面的this指向obj)"></a>4.obj.f();   f()里面的this指向obj)</h2><p>谁调用的方法，this就指向谁，如果没人调用这个方法，空执行，this是window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<span class="hljs-comment">//谁调用，就用谁的name </span><br>    &#125;,<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span><br>&#125;<br>obj.a();<span class="hljs-comment">//obj调用</span><br></code></pre></td></tr></table></figure><h2 id="5-this题"><a href="#5-this题" class="headerlink" title="5.this题"></a>5.this题</h2><p>条件判断为假的情况有： 0 、false 、’’ 、 null 、undefined 、未定义对象。<br>函数声明写在运算符中，其为 true，但 放在运算符中的函数声明在执行阶段时找不到的 。<br>另外，对未声明的变量执行 typeof 不会报错，会返回 undefined</p><p>this一马平川题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;222&quot;</span>;<br><span class="hljs-keyword">var</span> a = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;111&quot;</span>,<br>    <span class="hljs-attr">say</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fun = a.say;<span class="hljs-comment">//a.say代表function的函数引用，fun在全局上执行，相当于函数在全局执行</span><br>fun()<span class="hljs-comment">//222全局执行也没人调用</span><br>a.say()<span class="hljs-comment">//111</span><br><span class="hljs-keyword">var</span> b = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;333&quot;</span>,<br>    <span class="hljs-attr">say</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fun</span>)</span>&#123;<br>        <span class="hljs-comment">//this----&gt;b</span><br>        fun();<span class="hljs-comment">//不是this.fun(),谁也没调用,预编译，上面得this---&gt;window,222</span><br>    &#125;<br>&#125;<br>b.say(a.say);<span class="hljs-comment">//a.say---是上面的函数体，       222</span><br>b.say = a.say;<span class="hljs-comment">//a.say上面的函数拷贝到b.say(代替b.say)</span><br>b.say();<span class="hljs-comment">//333</span><br></code></pre></td></tr></table></figure><h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><blockquote><p>arguments.callee</p></blockquote><blockquote><p>func.caller</p></blockquote><p>arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br> &#125;<br>test();<span class="hljs-comment">//返回自己的函数体</span><br></code></pre></td></tr></table></figure><p>应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n*阶乘(n-<span class="hljs-number">1</span>);<br>&#125;(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>立即执行函数的阶乘：只能用callee做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n*<span class="hljs-built_in">arguments</span>.callee(n-<span class="hljs-number">1</span>);<br>&#125;(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>在那个函数里面，就打印哪个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>    &#125;<br>    demo();<br>&#125;<br></code></pre></td></tr></table></figure><p>caller: demo在哪个环境调用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>demo();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(demo.caller);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><h1 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h1><h2 id="1-浅层克隆"><a href="#1-浅层克隆" class="headerlink" title="1.浅层克隆"></a>1.浅层克隆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin,target</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin)&#123;<br>        target[prop] = origin[prop];<br>    &#125;<br>&#125;<br>clone(obj,obj1);<br><span class="hljs-comment">//打印obj1显示已经copy过去了</span><br></code></pre></td></tr></table></figure><p>实现容错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin,target</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin)&#123;<br>        target[prop] = origin[prop];<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br>clone(obj,obj1);<br></code></pre></td></tr></table></figure><p>原始值没问题，但是引用值拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>, <span class="hljs-string">&#x27;unionpay&#x27;</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin,target</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin)&#123;<br>        target[prop] = origin[prop];<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br>clone(obj,obj1);<br></code></pre></td></tr></table></figure><h2 id="2-深层克隆"><a href="#2-深层克隆" class="headerlink" title="2.深层克隆"></a>2.深层克隆</h2><p>两个人，克隆，只考虑引用值的数组、对象    核心：区分数组和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;female&#x27;</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>,<span class="hljs-string">&#x27;unionpay&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">card</span> : [obj.card[<span class="hljs-number">0</span>],obj.card[<span class="hljs-number">1</span>],[]]<br>&#125;<br>clone(obj, obj1);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>, <span class="hljs-string">&#x27;master&#x27;</span>],<br>    <span class="hljs-attr">wife</span> : &#123;<br>        <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>        <span class="hljs-attr">son</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;aaa&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span> : obj.name,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">card</span> : []<span class="hljs-comment">//重新开始循环，发现里面都是原始值，card : [obj.card[0],obj.card[1]],</span><br>    <span class="hljs-attr">wife</span> : &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>    <span class="hljs-attr">son</span> : &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>    <span class="hljs-attr">son</span> : <br>&#125;<br>&#125;<span class="hljs-comment">//里面是不是原始值，第一个是，第二个不是， 建立新的对象,进行循环</span><br>&#125;<br></code></pre></td></tr></table></figure><p>遍历对象 for(var prop in obj)<br>遍历除了可以遍历对象，还可以遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> arr) &#123;<br>    arr[prop]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p></blockquote><p>1.判断是不是原始值 typeof()如果是object引用值，不是obj,基本是原始值 null最后讲<br>2.数组还是对象 三种方法: instanceof toString constructor,建议使用toString,因为<br>另外两个有小问题，不会遇到<br>父子域：一个页面里面可能还有个子页面    跨父子域   [] instanceof Array ——&gt;false应该ture<br>3.建立相应的数组和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 递归</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin,target</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<span class="hljs-comment">//容错</span><br>    toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>        arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<span class="hljs-comment">//比对</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">card</span> : [<span class="hljs-string">&#x27;visa&#x27;</span>, <span class="hljs-string">&#x27;master&#x27;</span>],<br>    <span class="hljs-attr">wife</span> : &#123;<br>        <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;bcd&quot;</span>,<br>        <span class="hljs-attr">son</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;aaa&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br><br>&#125;       <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin,target</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> target = target || &#123;&#125;;<span class="hljs-comment">//容错</span><br>    toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>        arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>        <span class="hljs-keyword">if</span>(origin.hasOwnProperty(prop)) &#123;<span class="hljs-comment">//防止原型链上的</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(origin[prop]) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span>(toStr.call(origin[prop]) == arrStr) &#123;<br>                    target[prop] = [];<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    target[prop] = &#123;&#125;;<br>                &#125;<br>                deepClone(origin[prop],target[prop]);<span class="hljs-comment">//递归</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                target[prop] = origin[prop];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin, target</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> target = target || &#123;&#125;,<br>            toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>            arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>            <span class="hljs-keyword">if</span>(origin.hasOwnProperty(prop)) &#123;<span class="hljs-comment">//null问题</span><br>                <span class="hljs-keyword">if</span>(origin[prop] !== <span class="hljs-string">&quot;null&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span>(origin[prop]) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                    <span class="hljs-comment">//绝对不等于，隐式类型转换也不行</span><br>                    <span class="hljs-keyword">if</span>(toStr.call(origin[prop]) == arrStr) &#123;<br>                        target[prop] == [];<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        target[prop] = &#123;&#125;;<br>                    &#125;<br>                    deepClone(origin[prop],target[prop]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    target[prop] = origin[prop];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br></code></pre></td></tr></table></figure><p>三目运算符简化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin, target</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> target = target || &#123;&#125;,<br>            toStr = <span class="hljs-built_in">Object</span>.prototype.toString,<br>            arrStr = <span class="hljs-string">&quot;[object Array]&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> origin) &#123;<br>            <span class="hljs-keyword">if</span>(origin.hasOwnProperty(prop)) &#123;<span class="hljs-comment">//null问题</span><br>                <span class="hljs-keyword">if</span>(origin[prop] !== <span class="hljs-string">&quot;null&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span>(origin[prop]) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                    <span class="hljs-comment">//绝对不等于，隐式类型转换也不行</span><br><br>                    target[prop] = (toStr.call(origin[prop]) == arrStr) ? [] : &#123;&#125;;<br>                    deepClone(origin[prop],target[prop]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    target[prop] = origin[prop];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组的定义</p><p>区分对象的定义方式<br>（1）    自面量<br>（2）    构造函数——系统自带<br>（3）    自定义构造函数<br>（4）    Var Obect.create()</p><p>数组<br>1.数组字面量   var arr = [];</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,,,<span class="hljs-number">5</span>];<span class="hljs-comment">//稀松数组</span><br></code></pre></td></tr></table></figure><p>2.new Array(length/content);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">构造方法   <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//返回长度为10的稀松数组</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">10</span>]; <br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10.2</span>);<span class="hljs-comment">//长度为10.2 报错</span><br></code></pre></td></tr></table></figure><p>数组的读和写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr[num] <span class="hljs-comment">//不可以溢出读   结果undefined</span><br>arr[num] = xxx;<span class="hljs-comment">//可以溢出写，撑长数组</span><br></code></pre></td></tr></table></figure><p>JS中，数组就算没有第10位也不报错，因为数组是基于对象的<br>数组常用的方法</p><h2 id="1-改变原数组7个"><a href="#1-改变原数组7个" class="headerlink" title="1.改变原数组7个"></a>1.改变原数组7个</h2><p>reverse,sort,push,pop,shift,unshift,</p><blockquote><p>push把数组的最后一位增加</p></blockquote><p>封装push()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//不能写形参，因为不知道有几个，所以只能用arguments</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>        <span class="hljs-built_in">this</span>[<span class="hljs-built_in">this</span>.length] = <span class="hljs-built_in">arguments</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>pop删除：把数组的最后一位剪切出去</p></blockquote><p>arr.pop(); 不能传参</p><blockquote><p>shift：把前面减 arr.shift()    </p></blockquote><blockquote><p>unshift:和push方向相反，在前面加东西</p></blockquote><p>封装unshift</p><p>数组不能向前面放东西，所以用新数组，在拼接起来(concat)</p><blockquote><p>reverse:逆反</p></blockquote><blockquote><p>sort</p></blockquote><p>arr.sort();//升序排序</p><p>arr.sort().reverse()//降序</p><p><strong>但是这个排序是按ASCII排的</strong>，so<br>var arr = [1,2,10,2,4,5];不能实现想要的排序<br>实现排序：(冒泡排序)<br>1.必须两个形参<br>2.看返回值</p><p> (1)返回值为负数，前面的数放在前面<br> (2)为正数，后面的数在前<br> (3)为0，不动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);   <br></code></pre></td></tr></table></figure><p>简化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(a - b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最终</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a - b;<span class="hljs-comment">//升序</span><br>    <span class="hljs-comment">//return b - a;//降序</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>给一个有序数组乱序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Math</span>.random()    返回(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)随机数<br><span class="hljs-comment">// var arr = [1,2,3,4,5,6,7];</span><br><span class="hljs-comment">// arr.sort(function () &#123;</span><br><span class="hljs-comment">// return Math.random() - 0.5;//实现可正可负</span><br><span class="hljs-comment">// &#125;);</span><br></code></pre></td></tr></table></figure><p>对象年龄排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> cheng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;cheng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-string">&#x27;male&#x27;</span>,<br>    <span class="hljs-attr">face</span> : <span class="hljs-string">&quot;handsome&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;deng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">face</span> : <span class="hljs-string">&quot;amazing&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> zhang = &#123;<br>    name = <span class="hljs-string">&quot;zhang&quot;</span>,<br>    age = <span class="hljs-number">20</span>,<br>    sex = <span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> arr = [cheng, deng, zhang];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-comment">// if(a.age &gt; b.age) &#123;</span><br>    <span class="hljs-comment">// return 1;</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">// return -1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> a.age - b.age;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串长度排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;ac&#x27;</span>,<span class="hljs-string">&#x27;bcd&#x27;</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>,<span class="hljs-string">&#x27;asfsadshilk&#x27;</span>,<span class="hljs-string">&#x27;casuicbniasbnciuas&#x27;</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a.length - b.length;<br>&#125;)<br></code></pre></td></tr></table></figure><p>字节长度排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retBytes</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = str.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(str.charCodeAt(i) &gt; <span class="hljs-number">255</span>)&#123;<br>            num ++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a邓&#x27;</span>,<span class="hljs-string">&#x27;ba邓&#x27;</span>,<span class="hljs-string">&#x27;cc邓cc&#x27;</span>,<span class="hljs-string">&#x27;老邓&#x27;</span>,<span class="hljs-string">&quot;残邓&quot;</span>,<span class="hljs-string">&#x27;asdoifqwoeiur&#x27;</span>,<span class="hljs-string">&#x27;asdf&#x27;</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> retBytes(a)-retBytes(b);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>splice:切片</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// arr.splice(从第几位开始，剪切多少长度，在切口处添加新的数据)</span><br>arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>demo<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];<br>arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>];<span class="hljs-comment">//实现把4填进去</span><br>arr.splice(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//鼠标光标在前面</span><br><br><br>arr.splice(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//倒数第一位</span><br></code></pre></td></tr></table></figure><p>-1倒数第一位；1倒数   第二位怎么实现的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">splice = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>) </span>&#123;<br>pos += pos&gt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:<span class="hljs-built_in">this</span>.length;<span class="hljs-comment">//负数</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-不改变原数组"><a href="#2-不改变原数组" class="headerlink" title="2.不改变原数组"></a>2.不改变原数组</h2><p>concat,join—&gt;split,toString</p><blockquote><ol><li>concat连接</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>arr.concat(arr1);<br></code></pre></td></tr></table></figure><blockquote><p>toString</p></blockquote><p>把数组变成字符串</p><blockquote><p>Slice截取</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-comment">// 1.两个参数，slice（从该位开始截取，截取到该位）</span><br><span class="hljs-comment">// var newArr = arr.slice(1,3);</span><br><span class="hljs-comment">// 2.一个参数slice（从第几位开始截取，截取到最后）</span><br><span class="hljs-keyword">var</span> newArr = arr.slice(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> newArr = arr.slice(-<span class="hljs-number">4</span>)<span class="hljs-comment">//-4+6位</span><br><span class="hljs-comment">// 3.没参数：全截取</span><br></code></pre></td></tr></table></figure><blockquote><p>join</p></blockquote><p>实现字符串连接    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr.join(<span class="hljs-string">&quot;-&quot;</span>)<span class="hljs-comment">//必须是字符串形式</span><br>arr = [<span class="hljs-number">1</span>-<span class="hljs-number">2</span>-<span class="hljs-number">3</span>-<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><blockquote><p>split()互逆方法：按照什么拆分</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>-<span class="hljs-number">2</span>-<span class="hljs-number">3</span>-<span class="hljs-number">4</span>];<br>arr.split(<span class="hljs-string">&quot;3&quot;</span>)<span class="hljs-comment">//必须是字符串形式</span><br></code></pre></td></tr></table></figure><h1 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h1><p>是对象，可以当数组一样用</p><blockquote><p>类数组<br>1.可以利用属性名模拟数组的特性<br>2.可以动态的增长length属性<br>3.如果强行让类数组调用push方法，则会根据length属性值的位置进行属性的扩充。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-built_in">arguments</span>.push(<span class="hljs-number">7</span>);<span class="hljs-comment">//报错</span><br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><p>现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//完成类数组的基本形态构建</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span> : <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&quot;length&quot;</span> : <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;push&quot;</span> : <span class="hljs-built_in">Array</span>.prototype.push<br>&#125;<br>obj.push(<span class="hljs-string">&#x27;d&#x27;</span>);<br><span class="hljs-comment">//导致length=4并且&quot;3&quot;:d</span><br></code></pre></td></tr></table></figure><p>类数组：是对象，可以当数组一样用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span> : <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&quot;length&quot;</span> : <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;push&quot;</span> : <span class="hljs-built_in">Array</span>.prototype.push,<br>    <span class="hljs-string">&quot;splice&quot;</span> : <span class="hljs-built_in">Array</span>.prototype.splice<span class="hljs-comment">//加上他就变成可以当数组用了,像数组了</span><br>&#125;<br><span class="hljs-comment">//类数组组成部分:属性要为索引（数字）属性，必须有length属性，最好加上push</span><br></code></pre></td></tr></table></figure><p>length内部操作手法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>[<span class="hljs-built_in">this</span>.length] = target;<br>    <span class="hljs-built_in">this</span>.length ++;<br>&#125;<br><span class="hljs-comment">//如果对象调用，则</span><br><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    obj[obj.length] = target;<br>    obj.length ++;<br>&#125;<br></code></pre></td></tr></table></figure><p>类数组所有元素遍历出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&quot;b&quot;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span> : <span class="hljs-string">&quot;c&quot;</span>,<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">123</span>,<br>    <span class="hljs-attr">length</span> : <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">push</span> : <span class="hljs-built_in">Array</span>.prototype.push,<br>    <span class="hljs-attr">splice</span> : <span class="hljs-built_in">Array</span>.prototype.splice<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-built_in">console</span>.log(obj[prop])<br>&#125;<br></code></pre></td></tr></table></figure><p>封装type</p><p>typeof([])– array<br>typeof({})– object<br>typeof(function)– function<br>typeof(new Number())– new Object<br>typeof(123)– number<br>分两类：1、原始值 引用值   2、区分引用值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">type</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> template = &#123;<br>        <span class="hljs-string">&quot;[object Array]&quot;</span> : <span class="hljs-string">&quot;array&quot;</span>,<br>        <span class="hljs-string">&quot;[object Object]&quot;</span> : <span class="hljs-string">&quot;object&quot;</span>,<br>        <span class="hljs-string">&quot;[object Number]&quot;</span> : <span class="hljs-string">&quot;number - object&quot;</span>,<br>        <span class="hljs-string">&quot;[object Boolean]&quot;</span> : <span class="hljs-string">&#x27;boolean - object&#x27;</span>,<br>        <span class="hljs-string">&quot;[object String]&quot;</span> : <span class="hljs-string">&#x27;string - object&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(target === <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// if(typeof(target) == &#x27;function&#x27;) &#123;</span><br>    <span class="hljs-comment">// return &#x27;function&#x27;;</span><br>    <span class="hljs-comment">// &#125;else if(typeof(target) == &quot;object&quot;) = &#123;</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(target) == <span class="hljs-string">&quot;object&quot;</span>)&#123;<br>        <span class="hljs-comment">// 数组；</span><br>        <span class="hljs-comment">// 对象；</span><br>        <span class="hljs-comment">// 包装类Object.prototype.toString</span><br>        <span class="hljs-keyword">var</span> str = <span class="hljs-built_in">Object</span>.prototype.toString.call(target);<br>        <span class="hljs-keyword">return</span> template[str];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//原始值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span>(target);<br>    &#125;<br></code></pre></td></tr></table></figure><p>数组去重，在原型链上编程​    hash哈西         </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<br><span class="hljs-built_in">Array</span>.prototype.unique = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> temp = &#123;&#125;,<br>        arr = [],<br>        len = <span class="hljs-built_in">this</span>.length;<span class="hljs-comment">//也是优化，不用每次都this了</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!temp[<span class="hljs-built_in">this</span>[i]]) &#123;<span class="hljs-comment">//如果有0，!0==true，所以还是&quot;abc&quot;吧</span><br>            temp[<span class="hljs-built_in">this</span>[i]] = <span class="hljs-string">&quot;abc&quot;</span>;<br>            arr.push(<span class="hljs-built_in">this</span>[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p>形式：判断语句? 若为真，执行，并返回结果：若为假，执行，并返回结果<br>三目运算符其实就是简化版的if(){…}else{}语句<br>条件判断？是 ：否 并且会返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">2</span> + <span class="hljs-number">2</span> : <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> ? (<span class="hljs-string">&quot;10&quot;</span> &gt; <span class="hljs-string">&quot;9&quot;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>) : <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h1><p>try{}catch(e) {}一行代码报错影响后面代码执行</p><p>finally{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//try...catch</span><br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(e) &#123;<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;d&#x27;</span>);<br><span class="hljs-comment">//执行到b就不执行了，在try里面发生的错误，不会执行错误后的try里面的代码，打印ad</span><br></code></pre></td></tr></table></figure><p>关于catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<span class="hljs-comment">//error  error.message  error.name ---&gt; error</span><br>    <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot; : &quot;</span> + e.message);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>小问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//虽然错误，但是不执行</span><br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>    <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot; : &quot;</span> + e.message);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>Error.name的六种值对应的信息：<br>1.EvalError：eval()的使用与定义不一致<br>2.RangeError：数值越界<br>3.ReferenceError：非法或不能识别的引用数值<br>4.SyntaxError：发生语法解析错误<br>5.TypeError：操作数类型错误<br>6.URIError：URI处理函数使用不当</p><h1 id="es5严格模式"><a href="#es5严格模式" class="headerlink" title="es5严格模式"></a>es5严格模式</h1><p>如今：基于es3.0+<strong>es5.0的新增方法</strong> 使用的，如果产生冲突，则遵循es3.0的<br>要讲的是怎么让他遵循es5.0解决，即es5.0的严格模式，则产生冲突的部分用es5.0，否则es3.0<br>“use strict”<br>不再兼容es3的一些不规则语法。使用全新的es5规范。<br>demo1：es5不允许使用arguments.callee</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// es5.0严格模式的启动</span><br><span class="hljs-meta">&quot;use strict&quot;</span><span class="hljs-comment">//放在逻辑的最顶端</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>demo2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>&#125;<br>demo();<span class="hljs-comment">//es3.0</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-meta">    &quot;use strict&quot;</span><span class="hljs-comment">//内部es5.0</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>两种用法：<br>全局严格模式<br>局部函数内严格模式（推荐）<br>就是一行字符串，不会对不兼容严格模式的浏览器产生影响<br>为什么用字符串”use strict”：可能在老浏览器执行，浏览器版本问题——向后兼容<br>es5不允许用with(){}  with可以改变作用域链，with(obj) obj作为最顶端的AO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;obj&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;window&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;scope&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params">obj</span>)</span> &#123;<span class="hljs-comment">//如果with里面添加了对象，with(obj),会把对象当做with要执行的代码体的作用域链的最顶端</span><br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;obj&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">234</span><br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;window&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">123</span>;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;scope&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<span class="hljs-comment">//obj</span><br>        <span class="hljs-built_in">console</span>.log(age);<span class="hljs-comment">//234</span><br>    &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>with作用：简化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> org = &#123;<br>    <span class="hljs-attr">dp1</span> : &#123;<br>        <span class="hljs-attr">jc</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;abc&#x27;</span>,<br>            <span class="hljs-attr">age</span> : <span class="hljs-number">123</span><br>        &#125;,<br>        <span class="hljs-attr">deng</span> : &#123;<br>            <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;xiaodneg&quot;</span>,<br>            <span class="hljs-attr">age</span> : <span class="hljs-number">234</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">dp2</span> : &#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params">org.dp1.jc</span>)</span> &#123;<span class="hljs-comment">//直接访问org.dp1.jc里面的</span><br>    <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>应用：document也是对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">document</span>&#123;<br>    <span class="hljs-attr">write</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params"><span class="hljs-built_in">document</span></span>)</span> &#123;<br>    write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>不支持with,arguments.callee,func.caller,变量赋值前必须声明，局部this必须被赋值,(Person.call(null/undefined) 赋值什么就是什么),拒绝重复属性和参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//undefined</span><br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>new了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//控制台显示constructor的名</span><br>&#125;<br><span class="hljs-keyword">new</span> Test();<br></code></pre></td></tr></table></figure><p>预编译在es5严格模式下this不在指向window，没有指向（空），this必须被赋值，赋值什么就是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>Test.call(&#123;&#125;);<br></code></pre></td></tr></table></figure><p>赋值123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>Test.call(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>123是原始值:ES3就会变成包装类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>Test.call(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>严格模式，在全局，this指向window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><p>es5拒绝重复<strong>属性和参数</strong>。。es3里面重复属性和参数是不报错的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">name , name</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br><span class="hljs-comment">//test(1,2);</span><br><span class="hljs-comment">//test(2);</span><br></code></pre></td></tr></table></figure><p>参数报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params">name , name</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>属性不报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span><br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;112&#x27;</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;111&#x27;</span><br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>关于eval：</p><ol><li><p>es3不能用eval();——能改变作用域</p></li><li><p>eval能执行字符串</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;console.log(a)&#x27;</span>);<span class="hljs-comment">//字符串在eval里面执行</span><br></code></pre></td></tr></table></figure><p>面试题：为什么不用with();</p><p>with可以改变作用域链，改变作用域链，都会降低效率</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2021/10/15/%E9%97%AD%E5%8C%85/"/>
    <url>/2021/10/15/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h1 id="一、作用域初探"><a href="#一、作用域初探" class="headerlink" title="一、作用域初探"></a>一、作用域初探</h1><p>作用域定义：变量（变量作用于又称上下文）和函数生效（能被访问）的区域<br>互相嵌套的函数，里面可以访问外面的，外面不能访问里面</p><p>外面不访问里面演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">123</span>;<br>&#125;<br>test();<span class="hljs-comment">//</span><br><span class="hljs-built_in">document</span>.write(b);<br></code></pre></td></tr></table></figure><p>里面能访问外面演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">234</span>;<br>        <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//0</span><br>        <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//123</span><br>    &#125;<br>    demo();<br>    <span class="hljs-comment">// document.write(c);//报错</span><br>&#125;<br>test();<br></code></pre></td></tr></table></figure><h1 id="二、js运行三部曲"><a href="#二、js运行三部曲" class="headerlink" title="二、js运行三部曲"></a>二、js运行三部曲</h1><p>JS逼格：单线程；解释性语言</p><p>语法分析，通篇扫描—–&gt;预编译——-&gt;解释执行</p><h2 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1.预编译"></a>1.预编译</h2><h3 id="引入demo"><a href="#引入demo" class="headerlink" title="引入demo"></a>引入demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//123</span><br><br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>函数声明整体提升</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>变量   声明提升</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a;<br><span class="hljs-built_in">document</span>.write(a);<br>a = <span class="hljs-number">123</span>;<br><span class="hljs-comment">//var a  = 123;相当于var a;a = 123</span><br></code></pre></td></tr></table></figure><blockquote><p>两句话不能解决的问题        </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">234</span>;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>    a();<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><h3 id="预编译前奏："><a href="#预编译前奏：" class="headerlink" title="预编译前奏："></a>预编译前奏：</h3><p>1.imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为<strong>全局对象window</strong>所有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b =<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//先b赋值1(未声明)，在声明a，在赋值a</span><br>&#125;<br>test();<br><span class="hljs-comment">//var a = 123;先声明a,后赋值 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<br></code></pre></td></tr></table></figure><p>2.一切声明的全局变量，全是window的属性。<br>window就是全局的域；window就是全局：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//----&gt;window.a等价</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">window</span> &#123;<br>    <span class="hljs-attr">a</span> : <span class="hljs-number">123</span> <span class="hljs-comment">//相当</span><br>&#125;<br></code></pre></td></tr></table></figure><p>经典demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = <span class="hljs-number">123</span>;<br>&#125;<br>test();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<span class="hljs-comment">//undefined，局部，不是全局</span><br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>声明局部变量不行demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">123</span>;<br>&#125;<br>test();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<br><span class="hljs-built_in">console</span>.log(b);<br></code></pre></td></tr></table></figure><h3 id="预编译四部曲"><a href="#预编译四部曲" class="headerlink" title="预编译四部曲"></a>预编译四部曲</h3><p>预编译发生在函数执行的前一刻</p><p>1.创建AO对象(Activation object)执行期上下文<br>2.找形参和变量声明，将变量和形参名作为AO属性名，值为undefined<br>3.将实参值和形参统一（GO没有）<br>4.在函数体里面找<strong>函数声明</strong>，值赋予<strong>函数体</strong></p><p>例子1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">// function a()&#123;&#125;</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    <span class="hljs-comment">// var a看过了不看了 直接a=123;</span><br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">// 123</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-comment">// 早已看过不看了</span><br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">// 123</span><br>    <span class="hljs-keyword">var</span> b=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<span class="hljs-comment">//叫函数表达式</span><br>    <span class="hljs-comment">// var b不用看了，看过了，直接b=function()&#123;&#125;</span><br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-comment">// function()&#123;&#125;</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br>fn(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>例子2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a,b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> c;<br>    a = <span class="hljs-number">3</span>;<br>    b = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-built_in">console</span>.log(b);<br>&#125;<br>test(<span class="hljs-number">1</span>);<span class="hljs-comment">// 答案122</span><br></code></pre></td></tr></table></figure><p>例子3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>    <span class="hljs-built_in">console</span>.log(b);<br>    a = <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-keyword">var</span> a;<br>    b = <span class="hljs-number">234</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>预编译不止发生在函数体系里面，还发生在全局，全局叫生成了一个GO对象，名字不同，步骤一样。 window就是GO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">// b : 123;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b);<span class="hljs-comment">//能访问</span><br>&#125;<br>test();<br><span class="hljs-comment">//AO &#123;</span><br>    <span class="hljs-comment">// a:undefiend</span><br>    <span class="hljs-comment">// 对b不起作用</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// 但是GO里没有a,so window.a没有</span><br></code></pre></td></tr></table></figure><p>先生成GO（全局），后AO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">//     test:function()&#123;...&#125;</span><br><span class="hljs-comment">// &#125;   </span><br><span class="hljs-built_in">console</span>.log(test);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">test</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(test);<br>    <span class="hljs-keyword">var</span> test = <span class="hljs-number">234</span>;<br>    <span class="hljs-built_in">console</span>.log(test);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    &#125;<br>&#125;<br>test(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> test = <span class="hljs-number">123</span>;<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">//     //test执行的前一刻</span><br><span class="hljs-comment">//     // GO,AO里面都有test，要AO的</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>难度1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">// global : undefined----&gt;100</span><br><span class="hljs-comment">// fn : function ()&#123;...&#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">global</span> = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>&#125;<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">// 没东西了，就打印把，global自己里面没有，再去GO里面找到了</span><br><span class="hljs-comment">// &#125;</span><br>fn();<br></code></pre></td></tr></table></figure><p>难度2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">global</span> = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>    <span class="hljs-built_in">global</span> = <span class="hljs-number">200</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">global</span> = <span class="hljs-number">300</span>;<br>&#125;<br>fn();<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">global</span>;<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">//  global:undefined</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//答案：undefined 200 有自己的先用自己的</span><br></code></pre></td></tr></table></figure><p>难度3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">//     //GO里面才有a</span><br><span class="hljs-comment">//     a : undefined</span><br><span class="hljs-comment">//     c : 234暗示全局变量</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-keyword">if</span>(a) &#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined,因为if不走</span><br>    c = <span class="hljs-number">234</span>;<span class="hljs-comment">//暗示全局变量</span><br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//234</span><br>&#125;   <br><span class="hljs-keyword">var</span>  a;<br>test();<br><span class="hljs-comment">// AO&#123;</span><br><span class="hljs-comment">//  b : undefined</span><br><span class="hljs-comment">// &#125;</span><br>a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//234</span><br></code></pre></td></tr></table></figure><p>百度题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> foo;<br>    foo = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-number">11</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(bar());<br><span class="hljs-comment">//答案：function foo()&#123;&#125;return 下面有函数，返回函数</span><br></code></pre></td></tr></table></figure><p>百度题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(bar());<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;<br>    foo = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">return</span> foo;<br>    <span class="hljs-comment">//return 前面覆过值，就11</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>变量   声明提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>顶级难度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// GO&#123;</span><br><span class="hljs-comment">// a : undefined,</span><br><span class="hljs-comment">// demo : function () &#123;&#125;</span><br><span class="hljs-comment">// 然后a:100;在demo执行的前一刻，产生AO</span><br><span class="hljs-comment">// f :123</span><br><span class="hljs-comment">// &#125;</span><br>a = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(e);<span class="hljs-comment">//2</span><br>    <span class="hljs-keyword">if</span>(a) &#123;<span class="hljs-comment">//如今if里面不能放函数声明了//a是undefined，里面语句不走了</span><br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//猪都能做出来</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> c;<br>    a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">var</span> a;<br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//undefined</span><br>    f = <span class="hljs-number">123</span>;<span class="hljs-comment">//f AO里面没有，扔给GO 暗示全局变量</span><br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//func  unde</span><br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//10</span><br>&#125;<br><span class="hljs-keyword">var</span> a;<br>AO&#123;<br>    <span class="hljs-comment">//形参</span><br>    <span class="hljs-attr">e</span> : <span class="hljs-literal">undefined</span>---&gt;<span class="hljs-number">1</span>----&gt;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>)</span>&#123;&#125;---&gt;<span class="hljs-number">2</span><br>    <span class="hljs-attr">b</span> : <span class="hljs-literal">undefined</span><br>    <span class="hljs-attr">c</span> : <span class="hljs-literal">undefined</span>---&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;&#125;)<br>    <span class="hljs-attr">a</span> : <span class="hljs-literal">undefined</span>---&gt;<span class="hljs-number">10</span><br>&#125;<br>demo(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 以下为函数外面了，全局了，GO</span><br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//100</span><br><span class="hljs-built_in">console</span>.log(f);<span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><p>姬成题目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//typeof(null);----object</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-literal">false</span> + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span>.write(str);<span class="hljs-comment">//1</span><br><span class="hljs-keyword">var</span> demo = <span class="hljs-literal">false</span> == <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span>.write(demo);<span class="hljs-comment">//false</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(a)&amp;&amp;-<span class="hljs-literal">true</span> + (+<span class="hljs-literal">undefined</span>) + <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;基础扎实&#x27;</span>);<br>&#125;<span class="hljs-comment">//&quot;undefined&quot;&amp;&amp;-1 + &quot;NAN&quot;字符串类型 +&quot;&quot;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">11</span> + <span class="hljs-string">&quot;11&quot;</span> * <span class="hljs-number">2</span> == <span class="hljs-number">33</span>) &#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;基础扎实&#x27;</span>);<br>&#125;<br>!!<span class="hljs-string">&quot; &quot;</span> + !!<span class="hljs-string">&quot;&quot;</span> - !!<span class="hljs-literal">false</span>||<span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;你觉得能打印，你就是猪&#x27;</span>);<br><span class="hljs-comment">// &quot; &quot;空格字符串true</span><br><span class="hljs-comment">// &quot;&quot;空串 false</span><br><span class="hljs-comment">// true + false - false == 1就停了</span><br><span class="hljs-comment">// 1||(被省略了)</span><br></code></pre></td></tr></table></figure><p>笔试题：</p><p>1.css中,display属性几种,列出来<br>display : none/block/inline-block/inline……<br>2.css中list-style的属性有几种，分别是什么</p><p>3.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box_1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box_r&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>平行排列，并且均分父级，并且没有间距//两栏布局<br>4.使用CSS HTML三角形<br>5.水平垂直居中<br>6.写出window.foo值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">(<span class="hljs-built_in">window</span>.foo || <span class="hljs-built_in">window</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>);<span class="hljs-comment">//这样报错，这样先计算或，优先级高</span><br>(<span class="hljs-built_in">window</span>.foo || (<span class="hljs-built_in">window</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>));<span class="hljs-comment">//先看括号，bar</span><br></code></pre></td></tr></table></figure><h1 id="三、作用域精解-不扎实16-19节"><a href="#三、作用域精解-不扎实16-19节" class="headerlink" title="三、作用域精解(不扎实16-19节)"></a>三、作用域精解(不扎实16-19节)</h1><p>1.单线程<br>2.解释性语言（翻译一句解释一句）<br>[[scope]]:每个javascript函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供javascript引擎存取，[[scope]]就是其中一个。[[scope]]指的就是我们所说的作用域,其中存储了运行期上下文的集合。<br>作用域链：[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。<br>3.运行期上下文:当函数执行时，会创建一个称为执行期上下文的内部对象AO。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。<br>查找变量：从作用域链的顶端依次向下查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">234</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//自己里面有，就不要GO,无论如何说明AO与GO有某种联系</span><br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>小例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    b();<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-keyword">var</span> glob = <span class="hljs-number">100</span>;<br>a();<br><span class="hljs-comment">// a defined a.[[scope]]---&gt; 0:GO&#123;&#125;</span><br><span class="hljs-comment">// a.doing   a.[[scope]]---&gt; 0:AO&#123;&#125;</span><br><span class="hljs-comment">//                           1:GO&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>两个AO是引用，指向同一个房间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> bb = <span class="hljs-number">234</span>;<br>        aa = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>    b();<br>    <span class="hljs-built_in">console</span>.log(aa);<br>&#125;<br><span class="hljs-keyword">var</span> glob = <span class="hljs-number">100</span>;<br>a();<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>)</span>&#123;<br>        &#125;<br>        c();<br>    &#125;<br>    b();<br>&#125;<br>a();<br>a defined a.[[scope]] ---&gt; <br><span class="hljs-number">0</span>:GO<br>a doing a.[[scope]] ---&gt; <br><span class="hljs-number">0</span> : aAO<br><span class="hljs-number">1</span> : GO<br>b defined b.[[scope]] ---&gt; <br><span class="hljs-number">0</span>:aAO<br><span class="hljs-number">1</span>:GO<br>b doing   b.[[scope]] ---&gt; <br><span class="hljs-number">0</span>:bAO<br><span class="hljs-number">1</span>:aAO<br><span class="hljs-number">2</span>:GO<br>c defind c.[[scope]] ---&gt; <br><span class="hljs-number">0</span>:bAO<br><span class="hljs-number">1</span>:aAO<br><span class="hljs-number">2</span>:GO<br>c doing c.[[scope]] ---&gt; <br><span class="hljs-number">0</span>:cAO<br><span class="hljs-number">1</span>:bAO<br><span class="hljs-number">2</span>:aAO<br><span class="hljs-number">3</span>:GO<br></code></pre></td></tr></table></figure><h1 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h1><h2 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h2><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露</p><h2 id="2-闭包例子"><a href="#2-闭包例子" class="headerlink" title="2.闭包例子"></a>2.闭包例子</h2><p>例子1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">234</span>;<br>        <span class="hljs-built_in">console</span>.log(aaa);<span class="hljs-comment">//123</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> aaa = <span class="hljs-number">123</span>;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-keyword">var</span> glob = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> demo = a();<br>demo();<br></code></pre></td></tr></table></figure><p>例子2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>        num ++;<br>        <span class="hljs-built_in">console</span>.log(num);<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-keyword">var</span> demo = a();<br>demo();<span class="hljs-comment">//101</span><br>demo();<span class="hljs-comment">//102</span><br></code></pre></td></tr></table></figure><h2 id="3-闭包的作用"><a href="#3-闭包的作用" class="headerlink" title="3.闭包的作用"></a>3.闭包的作用</h2><blockquote><p>实现公有变量<br>eg:函数累加器，之前依赖外部变量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        count++;<br>        <span class="hljs-built_in">console</span>.log(count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> demo;<br>&#125;<br><span class="hljs-keyword">var</span> counter = add();<br>counter();<br>counter();<br>counter();<br>counter();<br>counter();<br></code></pre></td></tr></table></figure><blockquote><p>可以做缓存<br>eg:eater</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>        num++;<br>        <span class="hljs-built_in">console</span>.log(num);<br>    &#125;<br>    <span class="hljs-comment">// a defined  a.[[scope]] 0 : testAO</span><br>    <span class="hljs-comment">//    1 : GO</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>        num--;<br>        <span class="hljs-built_in">console</span>.log(num);<br>    &#125;<br>    <span class="hljs-comment">// b defined b.[[scope]] 0 : testAO</span><br>    <span class="hljs-comment">//    1 : GO</span><br>    <span class="hljs-keyword">return</span> [a,b];<br>&#125;<br><span class="hljs-keyword">var</span> MyArr = test();<br>MyArr[<span class="hljs-number">0</span>]();<br><span class="hljs-comment">// a doing a.[[scope]] 0 : aAO</span><br><span class="hljs-comment">// 1 : testAO  *</span><br><span class="hljs-comment">// 2. GO</span><br>MyArr[<span class="hljs-number">1</span>]();<br><span class="hljs-comment">// b doing b.[[scope]]  0 : bAO</span><br><span class="hljs-comment">// 1 : testAO*</span><br><span class="hljs-comment">// 2. GO</span><br><span class="hljs-comment">// 因为a,b是一个爹，环境一样，a=b</span><br></code></pre></td></tr></table></figure><p>缓存演示demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eater</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> food = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>        <span class="hljs-attr">eat</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;i am eating &quot;</span> + food);<br>            food = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;,<br>        <span class="hljs-attr">push</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">myFood</span>) </span>&#123;<br>            food = myFood;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> eater1 = eater();<br>eater1.push(<span class="hljs-string">&#x27;banana&#x27;</span>);<br>eater1.eat();<br></code></pre></td></tr></table></figure><blockquote><p>可以实现封装，属性私有化<br>    eg: Person();</p></blockquote><blockquote><p>模块化开发，防止污染全局变量</p></blockquote><p><strong>函数声明&amp;&amp;函数表达式区别</strong></p><h2 id="4-闭包的防范"><a href="#4-闭包的防范" class="headerlink" title="4.闭包的防范"></a>4.闭包的防范</h2><p>闭包会导致多个执行函数共用一个公有变量，如果不是特殊需要，应尽量防止这种情况发生</p><h1 id="五、立即执行函数"><a href="#五、立即执行函数" class="headerlink" title="五、立即执行函数"></a>五、立即执行函数</h1><blockquote><p>定义：此类函数没有声明，在一次执行过后即释放。适合做初始化工作</p></blockquote><blockquote><p>针对初始化功能的函数。立即执行函数用完销毁和函数没区别</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> d = a + b + c;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><blockquote><p>立即执行函数的两种写法：</p></blockquote><ol><li>(function (){}());  W3C建议第一种</li><li>(function (){})();</li></ol><blockquote><p>现象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//函数声明</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>&#125;();<span class="hljs-comment">//语法解析错误</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>&#125;<br>test();<span class="hljs-comment">//test是表达式，就可以</span><br></code></pre></td></tr></table></figure><p>以上，只有表达式才能被执行符号执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>&#125;<span class="hljs-comment">//函数声明</span><br><span class="hljs-number">123</span>;<span class="hljs-comment">//函数表达式</span><br>test();<span class="hljs-comment">//函数表达式</span><br><br><span class="hljs-comment">// 函数表达式可以</span><br><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;();<br><br><span class="hljs-comment">// 能被执行符号执行的表达式，这个函数名字就会被自动忽略</span><br><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;();<span class="hljs-comment">//立即执行</span><br><br>+ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;();<span class="hljs-comment">//减号，叹号，乘除不行（加减代表正负），&amp;&amp;，||</span><br><br><span class="hljs-comment">// 惊悚的</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;)()<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;())<br><span class="hljs-comment">// 因为被执行符号执行的表达式，这个函数名字就会被自动忽略</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;())<br><span class="hljs-comment">//立即执行函数很多形式</span><br></code></pre></td></tr></table></figure><p>立即执行函数探索到底层了<br>写博客——广度or深度<br>看渡一文章<br>阿里巴巴</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a,b,c,d</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b+c+d);<br>&#125;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><span class="hljs-comment">//相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a,b,c,d</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b+c+d);<br>&#125;<br><br>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><blockquote><p>重点引入样例：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = [];<span class="hljs-comment">//里面存了十个函数</span><br>    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> myArr = test();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>    myArr[j]();<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么是10<br>i++<br>为什么全是10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>是一个赋值语句，把一个函数引用赋给数组当前位，函数体document.write(i + ‘ ‘);没调用前不执行，直到调用，才执行，恰好执行的时候全是十。<br>执行位置！=定义位置<br>怎么解决（唯一方法）  十个小立即执行函数吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = [];<span class="hljs-comment">//里面存了十个函数</span><br>    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>)</span>&#123;<br>            arr[j] =  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">document</span>.write(j + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> myArr = test();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)&#123;<br>    myArr[j]();<br>&#125;<span class="hljs-comment">//打印i依旧是10,</span><br><span class="hljs-comment">//立即执行函数是读到马上执行</span><br></code></pre></td></tr></table></figure><h1 id="六、闭包"><a href="#六、闭包" class="headerlink" title="六、闭包"></a>六、闭包</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> demo;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> abc = <span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(abc);<br>    &#125;<br>    demo = a;<br>&#125;<br>test();<br>demo();<br><span class="hljs-comment">//里面的保存到外部，生成闭包</span><br></code></pre></td></tr></table></figure><p>阿里巴巴笔试题（UC移动事业群）社招题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> liCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i  = <span class="hljs-number">0</span>; i &lt; liCollection.length; i++)&#123;<br>        liCollection[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(i);<br>        &#125;<br>    &#125;<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hehe<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n)&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>n+<span class="hljs-number">1</span>)&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> liCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i  = <span class="hljs-number">0</span>; i &lt; liCollection.length; i++)&#123;</span><br><span class="javascript">                    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)</span>&#123;</span><br><span class="javascript">                        liCollection[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(j);</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;(i))</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            test();</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>笔试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;&#125;)&#123;<br>    x += <span class="hljs-keyword">typeof</span> f;<br>&#125;<br><span class="hljs-built_in">console</span>.log(x);<span class="hljs-comment">//1undefined</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript</title>
    <link href="/2021/10/15/ECMAScript/"/>
    <url>/2021/10/15/ECMAScript/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><h1 id="一、js浏览器历史"><a href="#一、js浏览器历史" class="headerlink" title="一、js浏览器历史"></a>一、js浏览器历史</h1><h2 id="1-web发展史"><a href="#1-web发展史" class="headerlink" title="1.web发展史"></a>1.web发展史</h2><p>Mosaic，是互联网历史上第一个获普遍使用和能够显示<strong>图片</strong>的网页浏览器。于1993年问世<br>1994年4月，马克.安德森和Silicon Graphics（简称为SGI，中译为“视算科技”或“硅图”）公司的创始人吉姆·克拉克（Jim Clark）在美国加州设立了“Mosaic Communication Corporation”。<br>Mosaic公司成立后，由于伊利诺伊大学拥有Mosaic的商标权，且伊利诺伊大学已将技术转让给Spy Glass公司，开发团队必须彻底重新撰写浏览器程式码，且浏览器名称更改为Netscape Navigator，公司名字于1994年11月改名为“Netscape Communication Corporation”，此后沿用至今，中译为“网景”。<br>微软的Internet Explorer及Mozilla Firefox等，其早期版本皆以Mosaic为基础而开发。微软随后买下Spy Glass公司的技术开发出Internet Explorer浏览器，而Mozilla Firefox则是网景通讯家开放源代码后所衍生出的版本。</p><h2 id="2-js历史"><a href="#2-js历史" class="headerlink" title="2.js历史"></a>2.js历史</h2><p>JavaScript作为Netscape Navigator浏览器的一部分首次出现在1996年。它最初的设计目标是改善网页的用户体验。<br>作者：Brendan Eich<br>期初JavaScript被命名为，LiveScript，后因和Sun公司合作，因市场宣传需要改名JavaScript。后来Sun公司被Oracle收购，JavaScript版权归Oracle所有。</p><h2 id="3-浏览器组成"><a href="#3-浏览器组成" class="headerlink" title="3.浏览器组成"></a>3.浏览器组成</h2><p>1.shell部分<br>2.内核部分<br>​    1.渲染引擎（语法规则和渲染）<br>​    2.js引擎<br>​        2001年发布ie6，首次实现对js引擎的优化。<br>​        2008年Google发布最新浏览器Chrome，它是采用优化后的javascript引擎，引擎代号V8，因能把js代码直接        转化为机械码来执行，进而以速度快而闻名。<br>​        后Firefox也推出了具备强大功能的js引擎<br>​        Firefox3.5   TraceMonkey（对频繁执行的代码做了路径优化）<br>​        Firefox4.0   JeagerMonkey<br>​    3.其他模块</p><h2 id="4-js的逼格"><a href="#4-js的逼格" class="headerlink" title="4.js的逼格"></a>4.js的逼格</h2><p>1.<strong>解释性语言</strong>   —   (不需要像编译性语言一样编译成文件）跨平台</p><p>优缺点</p><p>编译：快——开发游戏引擎，操作系统；不能跨平台，移植性不好</p><p>解释性：稍慢；跨平台</p><p><strong>2.单线程</strong></p><p>异步下载</p><p>ECMA标注 —  为了取得技术优势，微软推出了JScript，CEnvi推出ScriptEase，与JavaScript同样可在浏览器上运行。为了统一规格JavaScript兼容于ECMA标准，因此也称为ECMAScript。</p><h2 id="5-js执行队列"><a href="#5-js执行队列" class="headerlink" title="5.js执行队列"></a>5.js执行队列</h2><blockquote><p>类似吃饭</p></blockquote><p>js三大部分<br>​    ECMAScript、DOM、BOM<br>如何引入js?<br>​    页面 内嵌 script标签<br>外部引入<br>​    为符合web标准（w3c标准中的一项）结构、样式、行为相分离，通常会采用外部引入<br>同时外部引入，页面内嵌<br>外部好使，内部失效</p><h1 id="二、js基本语法"><a href="#二、js基本语法" class="headerlink" title="二、js基本语法"></a>二、js基本语法</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><p>变量声明<br>声明、赋值分解<br>单一var声明法</p><p>命名规则</p><p>1.变量名必须以英文字母、_ 、$ 开头<br>2.变量名可以包括英文字母、_、$、数字<br>3.不可以用系统的关键字、保留字作为变量名(关键字，保留字)</p><p>开发规范：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>,</span><br><span class="javascript">        b = <span class="hljs-number">20</span>,</span><br><span class="javascript">        d;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(a,b,c,d);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-值类型"><a href="#2-值类型" class="headerlink" title="2.值类型"></a>2.值类型</h2><blockquote><p>原始值（不可改变的;栈数据）</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Number</td><td align="center">var a = 123.12</td></tr><tr><td align="center">String</td><td align="center">var b = “abc”</td></tr><tr><td align="center">Boolean</td><td align="center">var b = false; var a = ture; 输出结果就是本身</td></tr><tr><td align="center">Undefined</td><td align="center">var b = undefined;  输出结果就是本身：没有定义的</td></tr><tr><td align="center">Null</td><td align="center">var b = null; 空值占位</td></tr></tbody></table><p>两个数据类型的区别：</p><p>原始值：stack（栈） 先进去的最后出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b = a;<br>a = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">document</span>.write(b);<br></code></pre></td></tr></table></figure><p>栈内存与栈内存之间是拷贝</p><blockquote><p>引用值（堆数据） </p></blockquote><p>array, object, function  </p><p>Date,RegExp</p><p><strong>以上栈内存、堆内存底层原理见视频</strong></p><p>JS是动态语言，解释一行，执行一行</p><h1 id="三、js基本语句"><a href="#三、js基本语句" class="headerlink" title="三、js基本语句"></a>三、js基本语句</h1><p>语句后面要用分号结束“；”</p><p>不加分号</p><ol><li>function test(){}</li><li>for(){}</li><li>if(){}</li></ol><p>js不同文件变量可以互相访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(a);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js语法错误会引发后续代码终止，但不会影响其它js代码块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(c);</span><br><span class="javascript">    <span class="hljs-comment">//20</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> b = <span class="hljs-number">20</span>;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(b);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>几种错误</p></blockquote><ol><li><p>低级错误（语法解析错误） 一行也不执行</p></li><li><p>逻辑错误</p><p>先扫描全局，没有低级错误后，解释一行，执行一行</p></li></ol><p>书写格式要规范，“= + / -”两边都应该有空格</p><h2 id="1-js运算符"><a href="#1-js运算符" class="headerlink" title="1.js运算符"></a>1.js运算符</h2><blockquote><p>运算操作符</p></blockquote><p>“+”</p><p>1.数学运算、字符串链接</p><p>2.任何数据类型加字符串都等于字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span> .write(a); a1<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span> .write(a); <span class="hljs-comment">//自左向右：a11</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;a&quot;</span> + ture + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">document</span> .write(a); ature1<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span> / <span class="hljs-number">0</span>;<br>NAN——not a number<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>/ <span class="hljs-number">0</span>;<br><span class="hljs-literal">Infinity</span><br></code></pre></td></tr></table></figure><p>“-”，“*”，“/“，“%”，”=“，“()”</p><p>优先级”=“最弱，”()”优先级较高</p><p>“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”</p><p>a ++;先执行语句，后++</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">document</span> .write(a ++);<br><span class="hljs-comment">//先document .write (a)后++  因为先打印，所以出来10</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">document</span> .write(a ++);<br><span class="hljs-built_in">document</span> .write(a);<br><span class="hljs-comment">//则10 11</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b = ++a - <span class="hljs-number">1</span> + a++;<br><span class="hljs-built_in">document</span> .write(b + <span class="hljs-string">&quot;&quot;</span> + a);  <br><span class="hljs-comment">//11（a变成了11）-1+11        b:21   a:12（a最后的++）</span><br></code></pre></td></tr></table></figure><blockquote><p>比较运算符</p></blockquote><p>​    “&gt;”，”&lt;”，”==”，“&gt;=”，“&lt;=”，”!=”<br>​    比较结果为boolean值</p><blockquote><p>逻辑运算符</p></blockquote><p>​    “&amp;&amp;”，“||”，“!“<br>​    运算结果为真实的值</p><h2 id="2-false"><a href="#2-false" class="headerlink" title="2.false"></a>2.false</h2><p>undefined， null， NaN， “”(空串)， 0， false</p><h2 id="3-条件语句"><a href="#3-条件语句" class="headerlink" title="3.条件语句"></a>3.条件语句</h2><p>布尔值</p><p>1.什么都能比较大小（字符串比较ASCII顺序）</p><p>2.只要左右一样，则一样</p><p>特例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a =NAN == NAN;<br><span class="hljs-built_in">document</span> .write(a);<br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>3.逻辑运算符：&amp;&amp; || !</p><p>&amp;&amp;: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span>;<br><span class="hljs-built_in">document</span> .write(a);      <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>两个表达式：</p><p>先看前面表达式转换成布尔值是否为真，（false: undefined， null， NaN， “”， 0， false<br>），真则看第二个表达式转换成布尔值的结果，如果只有两个表达式，只要看到第二个表达式，就可以返回第二个表达式的值了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span>; <span class="hljs-comment">//1为真，故返回2</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">2</span>;<span class="hljs-comment">//直接把第一个表达式的原本的值返回， 故返回0</span><br></code></pre></td></tr></table></figure><p>多个表达式：</p><p>先看第一个表达式，如果真，看第二个，也真，看第三个，一旦假的，就返回假的</p><p>&amp;&amp;：如果前面是零，就不看了；真，就下一句。</p><p>开发应用（短路语句）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">document</span> .write(<span class="hljs-string">&quot;成哥很帅&quot;</span>)<br><span class="hljs-keyword">var</span> data = …;<br>data &amp;&amp; 执行一个语句，会用到data, 如果data空值，就不能执行下面<br></code></pre></td></tr></table></figure><p>&amp;</p><p>开发没卵用（有卵用）var num = 1 &amp; 3;即01 &amp; 11 即01</p><p>||</p><p>第一个是不是真，真，就返回真的原始值，假的话，返回第二个</p><h2 id="4-写兼容应用"><a href="#4-写兼容应用" class="headerlink" title="4.写兼容应用"></a>4.写兼容应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS">div. onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br><span class="hljs-comment">// 把e的值取出来非ie浏览器</span><br><span class="hljs-keyword">var</span> event = e;<br>&#125;<br>div. onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br><span class="hljs-comment">// 把e的值取出来ie浏览器</span><br><span class="hljs-keyword">var</span> event = e;<br><span class="hljs-built_in">window</span>. event;<br>&#125;<br>兼容：<br>div. onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br><span class="hljs-comment">// 把e的值取出来</span><br><span class="hljs-keyword">var</span> event = e || <span class="hljs-built_in">window</span>. event;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-if、if-else-if"><a href="#5-if、if-else-if" class="headerlink" title="5.if、if  else if"></a>5.if、if  else if</h2><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> score = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">window</span> .prompt(<span class="hljs-string">&#x27;input&#x27;</span>));<br><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;alibaba&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">90</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;tencent&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> score = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">window</span> .prompt(<span class="hljs-string">&#x27;input&#x27;</span>));<br><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;alibaba&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">90</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;tencent&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>等价关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br>与<br><span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="6-for"><a href="#6-for" class="headerlink" title="6.for"></a>6.for</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">document</span> .write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(; i; )&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    count ++;<br>    <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span>) &#123;<br>        i = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思维拓展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">for</span>(; i --; )&#123;<br>    <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-while-do-while"><a href="#7-while-do-while" class="headerlink" title="7.while, do while"></a>7.while, do while</h2><p>带7和7的倍数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">10</span> ==<span class="hljs-number">7</span>)&#123;<br>        <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-switch-case"><a href="#8-switch-case" class="headerlink" title="8.switch case"></a>8.switch case</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span>(n) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span>(n)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;b&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);<br>    <span class="hljs-keyword">case</span> ture:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> data = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">switch</span>(data)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;monday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tuesday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;wednesday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;thursday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;firday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;saturday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sunday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> data = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">switch</span>(data)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;monday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tuesday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;wednesday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;thursday&quot;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;firday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;working&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;saturday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sunday&quot;</span>:<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;relaxing&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-break"><a href="#9-break" class="headerlink" title="9.break"></a>9.break</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    i++;<br>    <span class="hljs-built_in">console</span>.log(i);<br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">100</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-continue"><a href="#10-continue" class="headerlink" title="10.continue"></a>10.continue</h2><blockquote><p>中止本次循环，进行下一循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">10</span> == <span class="hljs-number">7</span>)&#123;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i ++)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">10</span> == <span class="hljs-number">7</span>)&#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、初识引用值"><a href="#四、初识引用值" class="headerlink" title="四、初识引用值"></a>四、初识引用值</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-literal">undefined</span>];<br></code></pre></td></tr></table></figure><p>array后来赋值即更改</p><p>demo取出每一位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&quot;acv&quot;</span>,<span class="hljs-literal">undefined</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象object"><a href="#2-对象object" class="headerlink" title="2.对象object"></a>2.对象object</h2><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> deng = &#123;<br>    <span class="hljs-attr">lastName</span> : <span class="hljs-string">&quot;Deng&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">sex</span> : <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">Wife</span> : <span class="hljs-string">&quot;xaioliu&quot;</span>,<br>    <span class="hljs-attr">father</span> : <span class="hljs-string">&quot;dengge&quot;</span>,<br>    <span class="hljs-attr">son</span> : <span class="hljs-string">&quot;dengxiaobao&quot;</span>,<br>    <span class="hljs-attr">handsome</span> : <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(deng.lastName);<br>deng.lastName = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-built_in">console</span>.log(deng.lastName);<br></code></pre></td></tr></table></figure><h2 id="3-编程形式的区别"><a href="#3-编程形式的区别" class="headerlink" title="3.编程形式的区别"></a>3.编程形式的区别</h2><p>1.面向过程</p><p>2.面向对象</p><h1 id="六、typeof"><a href="#六、typeof" class="headerlink" title="六、typeof"></a>六、typeof</h1><p>六种数据类型： <strong>number、string、boolean、undefined、object、function</strong></p><p>false <strong>undefined， null， NaN， “”， 0， false</strong></p><p>类型转换</p><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> * <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//s数字类型的1</span><br><br><span class="hljs-keyword">var</span> num = <span class="hljs-string">&quot;2&quot;</span> * <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//数字类型2</span><br></code></pre></td></tr></table></figure><p>具体玩法</p><p>typeof：typeof(num)或者typeof num</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num));<br><span class="hljs-comment">// number</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-string">&quot;true&quot;</span>;<span class="hljs-comment">//字符串true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num));<br><span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure><p>谁返回object</p><p>引用值：对象、数组、null(历史遗留问题)</p><h1 id="七、类型转换"><a href="#七、类型转换" class="headerlink" title="七、类型转换"></a>七、类型转换</h1><h2 id="1-显示类型转换"><a href="#1-显示类型转换" class="headerlink" title="1.显示类型转换"></a>1.显示类型转换</h2><blockquote><p>Number(mix)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot; : &quot;</span> + num);<br><span class="hljs-comment">// number:123</span><br><span class="hljs-comment">//Null:0</span><br><span class="hljs-comment">//Underfined: NAN</span><br><span class="hljs-comment">//“a”: NAN</span><br><span class="hljs-comment">//False:0</span><br><span class="hljs-comment">//“123”:123</span><br></code></pre></td></tr></table></figure><blockquote><p>parseInt(string,radix)</p></blockquote><p>基础用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">“<span class="hljs-number">123.9</span>”:<span class="hljs-number">123</span><br><span class="hljs-attr">ture</span>:NAN<br><span class="hljs-attr">Null</span>:NAN<br><span class="hljs-attr">Underfined</span>: NAN<br><span class="hljs-number">123.9</span>:<span class="hljs-number">123</span><br>123abc:<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>基底</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> dmeo = <span class="hljs-string">&quot;10&quot;</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">parseInt</span>(demo, <span class="hljs-number">16</span>);<span class="hljs-comment">//转成16进制</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-keyword">var</span> demo = <span class="hljs-string">&quot;10&quot;</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-built_in">parseInt</span>(demo, <span class="hljs-number">16</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br></code></pre></td></tr></table></figure><p>radix∈（2-36）</p><blockquote><p>parseFloat(string)</p></blockquote><p>转换成浮点型（正常数字）参数只能是字符串</p><p>100.2:100.2<br>100.2.2:100.2            </p><p>100.2abs:100.2</p><blockquote><p>toString(radix)</p></blockquote><p>转换成字符串    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> demo = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> num = demo.toString();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//string:123</span><br></code></pre></td></tr></table></figure><p>Radix：进制，demo里面转换成进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> demo = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> num = demo.toString();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot;:&quot;</span> + num);<br><span class="hljs-comment">//string : 123</span><br></code></pre></td></tr></table></figure><p>特殊点：<br>    underfined 和null不能用</p><blockquote><p>String(mix)</p></blockquote><p>同number       string 是转换成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">underfined: underfined<br><span class="hljs-comment">//123:123</span><br><span class="hljs-comment">//ture:ture</span><br></code></pre></td></tr></table></figure><blockquote><p>Boolean()</p></blockquote><p>除了这些，都是ture  :  undefined， null， NaN， “”， 0， false</p><p>题目:10101010转换成16进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// parseInt       toString</span><br><span class="hljs-comment">// 2        10      16</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10101010</span>;<br><span class="hljs-keyword">var</span> test = <span class="hljs-built_in">parseInt</span>(num, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(test.toString(<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><h2 id="2-隐式类型转换"><a href="#2-隐式类型转换" class="headerlink" title="2.隐式类型转换"></a>2.隐式类型转换</h2><blockquote><p>isNaN () ——调用number </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//console.log(isNAN(NAN));   ture</span><br><br><span class="hljs-comment">//123 false</span><br><span class="hljs-comment">//“123” false</span><br><span class="hljs-comment">//null false</span><br><span class="hljs-comment">//underfined ture</span><br><span class="hljs-comment">//“abc” ture</span><br><br><span class="hljs-comment">// console.log(isNAN(&quot;abc&quot;));</span><br><span class="hljs-comment">// Number(&#x27;abc&#x27;)----&gt;NAN  流程</span><br></code></pre></td></tr></table></figure><blockquote><p>++/—  +/-（一元正负）——调用number</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var a = &quot;123&quot;;</span><br><span class="hljs-comment">// a++;//字符串计算也是124</span><br><span class="hljs-comment">// var a = &quot;abc&quot;;</span><br><span class="hljs-comment">// a ++;</span><br><span class="hljs-comment">// // NAN 但是typeof是number</span><br></code></pre></td></tr></table></figure><blockquote><p>+</p></blockquote><p>两侧有一侧是字符串，就调用string 变成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var a = &quot;a&quot; + 1;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));</span><br></code></pre></td></tr></table></figure><blockquote><p>*/% ——调用number</p></blockquote><blockquote><p>&amp;&amp; || ！</p></blockquote><blockquote><p>&lt;  &gt;  &lt;=  &gt;= </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// var a = &quot;3&quot; &gt; 2;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));</span><br><span class="hljs-comment">// // 转换成数字比较</span><br><span class="hljs-comment">// var a = &quot;3&quot; &gt; &quot;2&quot;;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));</span><br><span class="hljs-comment">// // 比较ASCII</span><br><br><span class="hljs-comment">// var a = 1 == &quot;1&quot;;</span><br><span class="hljs-comment">// console.log(a + &quot; : &quot; + typeof(a));//隐式类型转 相等</span><br><br><span class="hljs-comment">// // undefined == null:true,其他都是false</span><br><span class="hljs-comment">// undefined&gt;0</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// undefined&lt;0</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// undefined==0</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// null同理</span><br><br><span class="hljs-comment">// NAN == NAN : false;</span><br></code></pre></td></tr></table></figure><p>== !=</p><h2 id="3-不发生类型转换"><a href="#3-不发生类型转换" class="headerlink" title="3.不发生类型转换"></a>3.不发生类型转换</h2><p>===  !==</p><p>没定义直接使用会报错，除了console.log(typeof(a))</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS">alert(<span class="hljs-keyword">typeof</span>(a));<br>alert(<span class="hljs-keyword">typeof</span>(<span class="hljs-literal">undefined</span>));<br>alert(<span class="hljs-keyword">typeof</span>(NAN));<br>alert(<span class="hljs-keyword">typeof</span>(<span class="hljs-literal">null</span>));<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;123abc&quot;</span>;<br>alert(<span class="hljs-keyword">typeof</span>(+a));<br>alert(<span class="hljs-keyword">typeof</span>(!!a));<br>alert(<span class="hljs-keyword">typeof</span>(a+<span class="hljs-string">&quot;&quot;</span>));<br>alert(<span class="hljs-number">1</span> == <span class="hljs-string">&quot;1&quot;</span>);<br>alert(NAN == NAN);<br>alert(<span class="hljs-keyword">typeof</span>(NAN == <span class="hljs-literal">undefined</span>));<br>alert(<span class="hljs-string">&quot;11&quot;</span>+<span class="hljs-number">11</span>);<br>alert(<span class="hljs-number">1</span>===<span class="hljs-string">&quot;1&quot;</span>);<br>alert(parentInt(<span class="hljs-string">&quot;13abx&quot;</span>));<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">123123.22324</span>;<br>alert(num.toFixed(<span class="hljs-number">3</span>));<br>alert(<span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">typeof</span>(a)));<br></code></pre></td></tr></table></figure><h1 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h1><p>函数组成形式</p><ul><li>函数名称</li><li>参数<br>​    形参<br>​    实参</li><li>返回值</li></ul><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p><strong>方法1：函数声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>方法2：函数表达式</strong></p><p>函数定义方式</p><blockquote><p>1.命名函数表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.匿名函数表达式（常用）——函数表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> demo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;b&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.现象：</p></blockquote><p>abc不是函数了，test才是。等号右边是表达式，表达式忽略abc名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">test.name<span class="hljs-comment">//abc</span><br>demo.name<span class="hljs-comment">//demo</span><br>test.name<span class="hljs-comment">//test</span><br></code></pre></td></tr></table></figure><h2 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2.函数参数"></a>2.函数参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">text</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-comment">// 相当于隐式var a,b;</span><br>    <span class="hljs-built_in">document</span>.write(a+b);<br>&#125;<br>text(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><blockquote><p>形式参数—形参</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> c = a + b;<br>    <span class="hljs-built_in">document</span>.write(c);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实际参数—实参</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><blockquote><p>形参实参不一定相等数量，谁都谁少都行，传参传什么类型都行，也不一定一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(a);<br>&#125;<br>sum(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>不管调用没调用，都有</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b,c,d</span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(a);<br>    <span class="hljs-built_in">document</span>.write(d);<span class="hljs-comment">//undefined</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-comment">//arguments--[11,2,3];实参列表</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.length);<br>&#125;<br></code></pre></td></tr></table></figure><p>小应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[i])<br>    &#125;<br>&#125;<br>sum(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>求形参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b,c,d</span>)</span>&#123;            <br>    <span class="hljs-built_in">console</span>.log(sum.length);<span class="hljs-comment">//形参长度           </span><br>&#125;<br>sum(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>映射规则（形参=实参才映射）：但是是两个东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>]);<br>&#125;<br>sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//2    a变，arguments也变</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br>sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//3    a 也变</span><br></code></pre></td></tr></table></figure><p>参数不相等，不映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-comment">// argument[1]就没值了</span><br>    b = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">// 返回undefined</span><br>&#125;<br>sum(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="3-return"><a href="#3-return" class="headerlink" title="3.return"></a>3.return</h2><p>1.函数终止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//在这里终止</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>);<br>&#125;<br>sum(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>2.返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//本句不好使，因为也终止函数</span><br>&#125;<br>sum(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> num = sum();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNumber</span>(<span class="hljs-params">target</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> +target;<br>&#125;<br><span class="hljs-keyword">var</span> num = myNumber(<span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(num) + <span class="hljs-string">&quot; &quot;</span> + num);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS2.0基础</title>
    <link href="/2021/10/15/CSS2.0%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/10/15/CSS2.0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS（cascading-style-sheet层叠样式表）"><a href="#CSS（cascading-style-sheet层叠样式表）" class="headerlink" title="CSS（cascading style sheet层叠样式表）"></a>CSS（cascading style sheet层叠样式表）</h1><h2 id="一-引入CSS"><a href="#一-引入CSS" class="headerlink" title="(一)引入CSS"></a>(一)引入CSS</h2><h3 id="1-行间样式"><a href="#1-行间样式" class="headerlink" title="1.行间样式"></a>1.行间样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">    width: 100px;</span></span><br><span class="hljs-string"><span class="hljs-tag">    height: 100px;</span></span><br><span class="hljs-string"><span class="hljs-tag">    background-color: red;</span></span><br><span class="hljs-string"><span class="hljs-tag">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-页面级CSS"><a href="#2-页面级CSS" class="headerlink" title="2.页面级CSS"></a>2.页面级CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-外部CSS文件"><a href="#3-外部CSS文件" class="headerlink" title="3.外部CSS文件"></a>3.外部CSS文件</h3><p>加载css</p><p><a href="http://www.baidu.com/">www.baidu.com</a> 通过dns解析——192.122.222.666</p><p>开启新的线程</p><p>下载一行，执行一行</p><p>执行到CSS文件，开启新线程，同时下载，叫异步加载</p><p>异步的——同时<br>​同步的——不同时</p><h2 id="二-CSS选择器"><a href="#二-CSS选择器" class="headerlink" title="(二)CSS选择器"></a>(二)CSS选择器</h2><h3 id="1-ID选择器-一个元素——一个ID，一对一"><a href="#1-ID选择器-一个元素——一个ID，一对一" class="headerlink" title="1.ID选择器(一个元素——一个ID，一对一)"></a>1.ID选择器(一个元素——一个ID，一对一)</h3><p>roseOnly    darryRing</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">HTML:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”only”</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">CSS: #only&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-class选择器（特点选择）——多对多"><a href="#2-class选择器（特点选择）——多对多" class="headerlink" title="2.class选择器（特点选择）——多对多"></a>2.class选择器（特点选择）——多对多</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">HTML: <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">”demo”</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">CSS: .demo&#123;&#125;<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo demo1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo &quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.demo</span>&#123;<br><span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>&#123;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-标签选择器"><a href="#3-标签选择器" class="headerlink" title="3.标签选择器"></a>3.标签选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;&#125;    任意，所有标签——整个页面<br></code></pre></td></tr></table></figure><h4 id="优先级-（CSS权重）：10-1差256进制"><a href="#优先级-（CSS权重）：10-1差256进制" class="headerlink" title="优先级  （CSS权重）：10-1差256进制"></a>优先级  （CSS权重）：10-1差256进制</h4><p>！important               Infinity(能计算,不同于数学)<br>行间样式（纹身）      1000<br>Id                               100<br>Class|属性|伪类         10    （先来后到，后面为准）<br>标签|伪元素               1<br>通配符                       0</p><h3 id="5-属性选择器"><a href="#5-属性选择器" class="headerlink" title="5.属性选择器"></a>5.属性选择器</h3><p>实例一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>1123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>[id]&#123;<br>background-color: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例二</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>1123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;only1&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-attr">[id=<span class="hljs-string">&quot;only&quot;</span>]</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-伪类选择器"><a href="#6-伪类选择器" class="headerlink" title="6.伪类选择器"></a>6.伪类选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS">！important<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red<span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-派生选择器（父子选择器）"><a href="#7-派生选择器（父子选择器）" class="headerlink" title="7.派生选择器（父子选择器）"></a>7.派生选择器（父子选择器）</h3><p>实例一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>345<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例二：不一定非要标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>3454<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">em</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-直接子元素选择器"><a href="#8-直接子元素选择器" class="headerlink" title="8.直接子元素选择器"></a>8.直接子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">em</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>浏览器内核原理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></figure><p>原理：section div ul li a em {}从右往左识别快</p><h3 id="9-并列选择器：实现不能实现的问题"><a href="#9-并列选择器：实现不能实现的问题" class="headerlink" title="9.并列选择器：实现不能实现的问题"></a>9.并列选择器：实现不能实现的问题</h3><p>问题：选择中间的div</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">calss</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.demo</span>&#123;&#125;权重计算，一样的话，后面覆盖前面的   不加空格<br></code></pre></td></tr></table></figure><p>并列选择器：实现不能实现的问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classDiv&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idDiv&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classP&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idP&quot;</span>&gt;</span><br>        1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><span class="hljs-selector-id">#idDiv</span> <span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-comment">/* 100+1 */</span><br><span class="hljs-selector-class">.classDiv</span><span class="hljs-selector-class">.classP</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><span class="hljs-comment">/* 10+10 */</span><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>正无穷+1&gt;正无穷</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#idDiv</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.classP</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red<span class="hljs-meta">!important</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.classP</span><span class="hljs-selector-id">#idP</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green<span class="hljs-meta">!important</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classDiv&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idDiv&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classP&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;idP&quot;</span>&gt;</span><br>                1<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-分组选择器——代码耦合度高"><a href="#10-分组选择器——代码耦合度高" class="headerlink" title="10.分组选择器——代码耦合度高"></a>10.分组选择器——代码耦合度高</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">em</span>,<br><span class="hljs-selector-tag">strong</span>,<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.demo1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>,<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-CSS代码块"><a href="#三-CSS代码块" class="headerlink" title="(三)CSS代码块"></a>(三)CSS代码块</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<span class="hljs-comment">/*字体大小，浏览器默认16px，一般12px,设置的高*/</span><br><span class="hljs-attribute">font-weight</span>: bold;<span class="hljs-comment">/*bold加粗=strong；lighter细体，默认normal, bolder更粗100,200,900没有单位*/</span><br><span class="hljs-attribute">font-style</span>: italic;<span class="hljs-comment">/*斜体= em*/</span><br><span class="hljs-attribute">font-family</span>: arial;<span class="hljs-comment">/*字体，默认:arial*/</span><br>字典：www<span class="hljs-selector-class">.css88</span><span class="hljs-selector-class">.com</span><br><span class="hljs-attribute">color</span>:<br>font-color不对，直接就color<br>r    g     b<br><span class="hljs-number">00</span>-ff  <span class="hljs-number">00</span>-ff    <span class="hljs-number">00</span>-ff<br><span class="hljs-number">1</span>.土鳖式：英文单词（开发不能用）<br><span class="hljs-number">2</span>.颜色代码（常用）<br>每两个一样，就变三位<br><span class="hljs-number">3</span>.颜色函数<br><span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span><span class="hljs-built_in">-255</span>(十进制),<span class="hljs-number">0</span>-<span class="hljs-number">255</span>,<span class="hljs-number">0</span>-<span class="hljs-number">255</span>);<br><span class="hljs-attribute">border</span>:<br>给容器加一个盒子（外边框）<br>border:  <span class="hljs-number">1px</span>   solid  black<br>         粗细    实心  颜色<br>border-width:<span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border-style</span>: solid;<span class="hljs-comment">/*实心*/</span><span class="hljs-comment">/*dotted或 dashed 虚线*/</span><br><span class="hljs-attribute">border-color</span>: red;<br>透明色：transparent<br></code></pre></td></tr></table></figure><p>百度面试题：画气泡(宽高为零)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">100px</span> solid black;<br>    <span class="hljs-attribute">border-left-color</span>: red;<br>    <span class="hljs-attribute">border-right-color</span>: <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">border-top-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-CSS进阶"><a href="#四-CSS进阶" class="headerlink" title="(四)CSS进阶"></a>(四)CSS进阶</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS">对齐方式：<span class="hljs-attribute">text-align</span>: left;(center居中显示)<br>文本行高：<span class="hljs-attribute">line-height</span>(单行文本所占高度)<br>文字在容器内水平(单行文本)垂直居中: 实现：height=line-height：实现上下居中——文本所占高度=容器高度<br><br>首行缩进：text-indent:<span class="hljs-number">2em</span>;——两个文本距离<br>关于单位：px(像素)<span class="hljs-selector-tag">em</span>()——<span class="hljs-number">1em</span>=<span class="hljs-number">1</span>*<span class="hljs-attribute">font-size</span><br><span class="hljs-number">1.2</span>倍行高：<span class="hljs-attribute">line-height</span> : <span class="hljs-number">1.2em</span>;<br>关于<span class="hljs-attribute">text-decoration</span><br>&lt;<span class="hljs-selector-tag">del</span>&gt;原价<span class="hljs-number">120</span>&lt;/<span class="hljs-selector-tag">del</span>&gt;<br>&lt;<span class="hljs-selector-tag">span</span>&gt;原价<span class="hljs-number">120</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;模拟<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: line-through;<span class="hljs-comment">/* 有线* /</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">    del&#123;</span><br><span class="hljs-comment">    text-decoration: none;/*使del没有线*/</span><br>&#125;<br>下划线：(仿生<span class="hljs-selector-tag">a</span>标签)<br>&lt;<span class="hljs-selector-tag">span</span>&gt;www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline;// <span class="hljs-attribute">text-decoration</span>: overline;上划线<br>    <span class="hljs-attribute">color</span>: rgb (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">238</span>);<br>&#125;<br><span class="hljs-attribute">cursor</span>: pointer;<span class="hljs-comment">/*当鼠标移入显示什么样式*/</span><br></code></pre></td></tr></table></figure><p>伪类选择器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<span class="hljs-comment">/*一样[href]:hover&#123;&#125;*/</span><br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">font-family</span>: arial;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span>&gt;</span>www.taobao.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.jd.com&quot;</span>&gt;</span>www.jd.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五-总结标签"><a href="#五-总结标签" class="headerlink" title="(五)总结标签"></a>(五)总结标签</h2><h3 id="1-行级元素、内联元素-inline"><a href="#1-行级元素、内联元素-inline" class="headerlink" title="1.行级元素、内联元素  inline"></a>1.行级元素、内联元素  inline</h3><p>feature:内容决定元素所占位置 不可通过css改变宽高</p><p>span strong em a del</p><h3 id="2-块级元素-block"><a href="#2-块级元素-block" class="headerlink" title="2.块级元素 block"></a>2.块级元素 block</h3><p>feature：独占一行 可以通过css改变宽高</p><p>div  p ul li ol form address</p><h3 id="3-行级块元素-inline-block"><a href="#3-行级块元素-inline-block" class="headerlink" title="3.行级块元素 inline -block"></a>3.行级块元素 inline -block</h3><p>feature: 内容决定大小       可以改宽高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>：一般只设置一个宽或者高，另一个等比例缩放<br></code></pre></td></tr></table></figure><p>一切事物没有绝对：</p><p>CSS控制属性和特点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br>So可以改变<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">display</span>：block；<br>&#125;<br></code></pre></td></tr></table></figure><p>企业级开发项目</p><p>N张图片排列一起：(实战)——凡是带有inline的都有文字属性 被分割</p><p>解决方法1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>变为<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>间距为4px<br></code></pre></td></tr></table></figure><p>解决方法2</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">6px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是：所以，实际上压缩代码：img——-一个字母；空格回车删除，so margin-left: -6px;内嵌了，不用管他</p><h2 id="六-公司用法（开发经验）："><a href="#六-公司用法（开发经验）：" class="headerlink" title="(六)公司用法（开发经验）："></a>(六)公司用法（开发经验）：</h2><p>1.先定义功能，后选配</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">先定义class:<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red size1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;green size2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gray size3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.red</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.green</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><span class="hljs-selector-class">.gray</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><span class="hljs-selector-class">.size1</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.size2</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.size3</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>标签先天缺陷——自定义标签：标签选择器</li></ol><p>初始化标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#424242</span>;<br>&#125; <br><span class="hljs-selector-tag">ul</span>&#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>&#125;<br>*&#123;<br>    <span class="hljs-comment">/*初始化所有标签*/</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/*权重为0，可以后期更改*/</span><br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>了解各种标签的先天值</p><h2 id="七-盒子模型（万物皆盒子）"><a href="#七-盒子模型（万物皆盒子）" class="headerlink" title="(七)盒子模型（万物皆盒子）"></a>(七)盒子模型（万物皆盒子）</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">margin + <span class="hljs-built_in">border</span> + padding + (<span class="hljs-built_in">content</span> = <span class="hljs-built_in">width</span> + <span class="hljs-built_in">height</span>) <br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于padding:100px;</p><p>​    等价于padding:100px 100px 100px 100px; </p><p>​    四个值顺时针上右下左</p><p>​    三个值：上左右下：左右等距情况多</p><p>​    两个值：上下左右</p><p>​    这也可以：border-width:100px:==100px 100px 100px 100px</p><p>盒模型计算：</p><p>求视觉宽高：（margin不能算，不能被看到）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-comment">/* 160 160 */</span><br></code></pre></td></tr></table></figure><p>求可视区宽高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-id">#my-defined</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid orange;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用:远视图：一个快在一个快的中间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mmm.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.content1</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八-定位：定点在某处展示position"><a href="#八-定位：定点在某处展示position" class="headerlink" title="(八)定位：定点在某处展示position"></a>(八)定位：定点在某处展示position</h2><ol><li>absolute绝对定位——可定位</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-comment">/*left: 200px;左边线距离*/</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-comment">/*right右边线距离*/</span><br>    <span class="hljs-comment">/*bottom*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>body的margin   8px;天生</p><p>层模型：</p><p>absolute：脱离原来位置进行定位：一个是absolute另一个可以在它下面，不在一个层级了(立交桥)</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.demo</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>.relative相对定位 保留他原来位置定位，也是不同层级，占据的位置不给另一个（灵魂出来，尸体占位置）</p><p>结论</p><p>absolute相对于最近的有定位的父级进行定位，没有最近的定位的父级，就相对于文档定位<br>relative:相对于原来的位置进行定位</p><p>定位——参照物+有定位</p><p>经验定律：relative作为参照物，absolute定位——减小对后续元素的破坏</p><p>DMEO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>广告定位：fixed 位置不动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面居中广告+不动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;   But定位定的是左顶点<br></code></pre></td></tr></table></figure><p>文档居中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>;（-<span class="hljs-number">0.5</span>宽高）<br>    <span class="hljs-comment">/*margin-left: -10px;嵌入在里面*/</span><br>&#125;<br>可视区窗口：<span class="hljs-attribute">position</span>为fixed<br>可用&lt;br&gt;验证<br></code></pre></td></tr></table></figure><p>五环——屏幕正中央永远居中</p><p>z-index:0;默认     1：更靠近我——层级</p><p>border-radius:50%;圆角</p><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mmm.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;plat&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.circle1</span>,<br><span class="hljs-selector-class">.circle2</span>,<br><span class="hljs-selector-class">.circle3</span>,<br><span class="hljs-selector-class">.circle4</span>,<br><span class="hljs-selector-class">.circle5</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.circle1</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: red;<br>    <span class="hljs-attribute">left</span> :<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.circle2</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: green;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">130px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-selector-class">.circle3</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: yellow;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">260px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.circle4</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: blue;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">65px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">70px</span>;<br>&#125;<br><span class="hljs-selector-class">.circle5</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: purple;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">195px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">70px</span>;<br>&#125;<br><span class="hljs-comment">/*居中五环必须居中容器*/</span><br><span class="hljs-selector-class">.plat</span>&#123;<br>    <span class="hljs-comment">/*border: 5px solid black;*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">186px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">380px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">190px</span>;<span class="hljs-comment">/*一半*/</span><br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">93px</span>;<span class="hljs-comment">/*一半*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九-两栏布局"><a href="#九-两栏布局" class="headerlink" title="(九)两栏布局"></a>(九)两栏布局</h2><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<span class="hljs-comment">/*黑的就能上去*/</span><br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*粉的右边*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcc</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<span class="hljs-comment">/*粉的让出来*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#123</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">如果这样：<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十-两个经典bug"><a href="#十-两个经典bug" class="headerlink" title="(十)两个经典bug"></a>(十)两个经典bug</h2><p>弥补不能解决</p><h3 id="margin塌陷"><a href="#margin塌陷" class="headerlink" title="margin塌陷:"></a>margin塌陷:</h3><p>垂直方向的margin父子元素是结合到一起的，他俩取最大值</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid red;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<span class="hljs-comment">/*不相对于父级往下走。只有比父级设置的margin还大，带着父级一起动，取最大值*/</span> <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>不能用的解决方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid red;<span class="hljs-comment">/*因为缺一个棚子，有了此方法*/</span><br>&#125;  <br></code></pre></td></tr></table></figure><p>专业手法</p><p>BFC——block format content(块级格式化上下文)：改变盒子的语法规则</p><p>overflow : hidden;溢出部分隐藏——引发新的问题：隐藏了</p><p>demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">75px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决：改变父级的渲染规则，让父级变成BFC</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    针对需求选择</p><ol><li>   父级加上display: inline-block;</li><li>   父级加上position: absolute;</li><li>   父级加上float: left;或right</li><li>   父级加上overflow : hidden</li></ol><h3 id="margin合并"><a href="#margin合并" class="headerlink" title="margin合并"></a>margin合并</h3><p>两个demo兄弟之间，垂直方向的margin是合并的，一个100，一个200，加起来才200</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.box1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.box2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决：BFC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.box1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.box2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo1</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结</p><p>margin塌陷：更改CSS<br>margin合并：更改HTML CSS<br>但是，不能因为该bug加html结构，影响很大<br>不用解决margin合并：数学计算解决，多写点像素</p><h2 id="十一-浮动模型"><a href="#十一-浮动模型" class="headerlink" title="(十一)浮动模型"></a>(十一)浮动模型</h2><p>盒模型<br>层模型<br>浮动模型</p><p>（浮动）:left/right 元素站队</p><p>DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*块级元素不能独占一行了*/</span><span class="hljs-comment">/**改为right顺序变为321/</span><br><span class="hljs-comment">    color: #fff;</span><br><span class="hljs-comment">    background-color: black;</span><br><span class="hljs-comment">    width: 100px;</span><br><span class="hljs-comment">    height: 100px;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>如果变多，1-9，left,在盒子里面变成九宫格；right,则321 654 987</p><p>网页淘宝app展示项目——九宫格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*块级元素不能独占一行了*/</span><br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>浮动元素产生了浮动流（并不是简单地分层），所有产生了浮动流的元素，只有块级元素看不到他们（分层）， 产生了BFC的元素和文本类属性（inline属性）的元素以及文本都能看到浮动元素（不分层）</p><p>清除浮动流的clear：</p><p>现象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    <span class="hljs-comment">/*父级抱不住了：父级是块级元素，看不到浮动元素*/</span><br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>加上一个p元素，产生的浮动流影响在p身上，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="css">                <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是不能用，因为html 不能随便添，结构不能顺便添</p><p>最优实现方式</p><p><strong>伪元素</strong>：元素结构存在，没写在html里面，可以被CSS操作，没有html结构，<strong>实现父级元素包住子集元素</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS">把标签里面的最前面的伪元素选出来<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123;&#125;，最后面<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span>&#123;&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123; <br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;ChengGe&quot;</span>;<br>&#125;<br>伪元素是行级元素，so不能加宽高，要<span class="hljs-attribute">display</span>: inline-block;来改成块级元素<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span>&#123; <br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br>还是没生效<br></code></pre></td></tr></table></figure><p>方法一：因为能清除浮动的是块级元素，所以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br>不能管用 So改为<br><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br>以上为清除浮动法<br></code></pre></td></tr></table></figure><p>方法二：所有产生了浮动流的元素，只有块级元素看不到他们，反之，能看到的有BFC,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<br>    <span class="hljs-comment">/*display:inline-block*/</span><br>    <span class="hljs-comment">/*position: absolute;*/</span><br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-comment">/*以上三种触发了BFC*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果content设置了float : left——&gt;父级不能把她包住了，因为父级块级，块级元素看不到浮动元素<br>原理：产生了浮动流——解决：干掉浮动流<br>去掉p所受最后一个content的浮动流</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br><br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">border-top</span>:<span class="hljs-number">10px</span> solid green;<br>    <span class="hljs-attribute">clear</span> : both;<br>&#125;<br></code></pre></td></tr></table></figure><p>蹬开：border-top:0px solid green; 包住了，不管多少个，都在最后一个元素的位置撑开</p><p>但是凡是设置了position：absolute；和float：left/right；的元素，打内部把元素转换成Inline-block——导致宽高由内容决定</p><p>演示demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;把内部转换成inline-block<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>报纸布局   之前的浮动用于：文字环绕图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*就能实现*/</span><br>    <span class="hljs-comment">/*margin-right:10px*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个标准导航栏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;</span><br><span class="css">                <span class="hljs-attribute">font-family</span>: arial;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.list-item</span><span class="hljs-comment">/*空格*/</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="css">                <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">                <span class="hljs-comment">/*border: 1px solid black;*/</span></span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.list-item</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-comment">/*a行级元素，要变成块级元素，才能*/</span></span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">                <span class="hljs-attribute">display</span>: inline-block;<span class="hljs-comment">/*实现选择后全部包住*/</span></span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.list-item</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-comment">/*清除此处的浮动流，以免对后面产生影响——但凡写在他后面的都会排在他后面*/</span></span><br><span class="css">            <span class="hljs-selector-class">.nav</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">                <span class="hljs-attribute">display</span>: block;</span><br><span class="css">                <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>天猫<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>聚划算<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>天猫超市<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十二-文字溢出处理"><a href="#十二-文字溢出处理" class="headerlink" title="(十二)文字溢出处理"></a>(十二)文字溢出处理</h2><p>溢出容器，打点展示</p><p>1．    单行文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Web前端开发之HTML+CSS零基础教学，适合想入门前端开发的同学们。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br><span class="hljs-attribute">font-family</span>: arial;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现一行打点：三件套</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS">（<span class="hljs-number">1</span>）失去换行功能：<br><span class="hljs-attribute">white-space</span>: nowrap;<br>（<span class="hljs-number">2</span>）溢出部分不能展示：<br><span class="hljs-attribute">overflow</span>: hidden;<br>（<span class="hljs-number">3</span>）打点：<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure><p>2.多行文本</p><p>手写的    多行截断：溢出部分隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Web前端开发之HTML+CSS零基础教学，适合想入门前端开发的同学们。Web前端开发之HTML+CSS零基础教学，适合想入门前端开发的同学们<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">font-family</span>: arial;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么保证两行，其余文字隐藏：height 与Line-height倍数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">200px</span> <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;不能盛满就平铺<br>不让他平铺：<span class="hljs-attribute">background-repeat</span>: no-repeat;<br><span class="hljs-attribute">background-repeat</span>: repeat-x;//x轴平铺<br><span class="hljs-attribute">background-position</span> : x y;自己定位置。也能填<span class="hljs-attribute">background-position</span> : left top/center;<br></code></pre></td></tr></table></figure><p>淘宝案例 实现网速不好，展现文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank_&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">190px</span> <span class="hljs-number">90px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大型网站，网速不行，只展示html——怎么实现只有html<br>图片代替文字：去掉CSS，一样展示；有CSS，不影响图片</p><p>方法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank_&quot;</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">190px</span> <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">190px</span>;<span class="hljs-comment">/*首行缩进容器的宽*/</span><br>    <span class="hljs-attribute">white-space</span>: nowrap;<span class="hljs-comment">/*不换行*/</span><br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><p>盒子有三部分，加上背景颜色，padding变色，背景图片也能加载padding上，只是内容不能写在padding上。So有CSS就没有文字</p><p>淘宝实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.taobao.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank_&quot;</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#424242</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">地址</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">190px</span> <span class="hljs-number">90px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十三-淘宝项目提示"><a href="#十三-淘宝项目提示" class="headerlink" title="(十三)淘宝项目提示"></a>(十三)淘宝项目提示</h2><p>行级元素只能嵌套行级元素<br>块级元素可以嵌套任何元素（p特殊）  （p标签不能套块级元素）</p><p> 不允许1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不允许2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.淘宝两侧的留白：屏幕缩小，留白减少，内容不变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;!-- 父子级都是块级 --&gt;<br>*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#123</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<span class="hljs-comment">/*auto:自适应*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>文本类属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS">inline block inline-block<br>inline inline-block——文本类元素：凡是带有inline的元素，都有文本类特点<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML">eg:<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>与<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>234<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>相差一个文本分隔符<br>图片同理<br></code></pre></td></tr></table></figure><p>position : absolute; float : left/right;一旦设置了一个，元素会在内部转换成display : inline-block;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    啦啦啦,<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>呵呵<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一行文本里面，文本底对齐，文本图片同理<br>但是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>345<br><span class="hljs-comment">&lt;!-- 如果span里面有文字，就和文本底对齐，没有文字，就和内容对齐 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>调整对齐线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">vertical-align</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><h2 id="十四-公司实战项目"><a href="#十四-公司实战项目" class="headerlink" title="(十四)公司实战项目"></a>(十四)公司实战项目</h2><p>基教授贴吧项目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>姬教授贴吧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to)<br>        color:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.8</span>);<br><br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>        <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">11px</span>;<br>        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>();<br>        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>        <span class="hljs-comment">/*vertical-align: -1px;/*控制台调*/</span><br>    &#125;<br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">6.5px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">11.5px</span>;<br>        <span class="hljs-attribute">float</span>: right;<br>        <span class="hljs-comment">/*margin-top: 3px;*/</span><br>        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><p>阿里巴巴笔试题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content1&quot;</span>&gt;</span>wenzi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content2&quot;</span>&gt;</span>wenzi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CSS">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">320px</span>;<br>    <span class="hljs-comment">/*border: 2px solid black;*/</span><br>&#125;<br><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.img</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>&#125;<br><span class="hljs-selector-class">.content1</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;<br>&#125;<br><span class="hljs-selector-class">.content2</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.2em</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML4.0 基础</title>
    <link href="/2021/10/14/HTML4.0%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/10/14/HTML4.0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="(一)简介"></a>(一)简介</h2><p>专业素养：超文本标记语言 Hyper Text Markup Language</p><h2 id="二-HTML-标签"><a href="#二-HTML-标签" class="headerlink" title="(二)HTML 标签"></a>(二)HTML 标签</h2><p>1.根标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.段落标签:只能有一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.h 标签 独成一段，逐次减少。更改字体大小，加粗字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>——<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.加粗字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.原价 50 元</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7.地址标签 &lt;——&gt;p+em:成段展示和斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure><p>8.容器 ，捆绑操作，独行展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>9.没作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>10.单标签</p><p>(1). 回车：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2).水平线：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(3).标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br></code></pre></td></tr></table></figure><p>11.有序列表</p><p>(1).喜欢看的电影</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>marvel<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>速度与激情8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>返老还童<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2)五种排序方式:只能这五种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;I&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>倒序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">reversed</span>=<span class="hljs-string">&quot;”&quot;</span> <span class="hljs-attr">reversed</span>”&gt;</span><br>  从第几个开始排序：<br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;”2”&quot;</span>&gt;</span><br>    从2开始排序<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;”2”&quot;</span>&gt;</span><br>      b(第几个)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>12.无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（1）实心圆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;disc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2） 方块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）圆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f40</span>;</span><br><span class="css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>天猫<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>聚划算<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>天猫超市<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>14.图片</p><p>（1）网上 url</p><p>​ 新标签页中打开图，拷贝网址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）本地绝对路径，相对路径</p><p>相对路径：直接写 a.jpg 就行</p><p>D:/A/B/a</p><p>D:/A/B/b</p><p>绝对路径：写全 D:/A/B/b/c</p><p>D:/A/B/a</p><p>D:/A/B/b/c</p><p>alt：图片占位符 挽回错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px;&quot;</span>  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;这是什么&quot;</span> <span class="hljs-attr">title:</span>&quot;图片提示符&quot;&gt;</span><br></code></pre></td></tr></table></figure><ol start="15"><li>a 标签功能</li></ol><p>（1）超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>新标签页中打开：<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;”_blank”&quot;</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）锚 anchor</p><p>demo1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: green;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo1&quot;</span>&gt;</span>find demo1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo2&quot;</span>&gt;</span>find demo2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: green;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100px;height: 100px;background-color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:block;position:fixed;bottom:100px;right:100px;border:1px solid black;height:50px;width:200px;background-color:#fcc;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo1&quot;</span>&gt;</span>find demo1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:block;position:fixed;bottom:150px;right:100px;border:1px solid black;height:50px;width:200px;background-color:#ffc;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#demo2&quot;</span>&gt;</span>find demo2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）打电话，发邮件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:1669248141@qq.com&quot;</span>&gt;</span>发邮件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:19811715506&quot;</span>&gt;</span>打电话<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）协议限定符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:while(1)&#123;alert(&#x27;让你手欠&#x27;)&#125;&quot;</span>&gt;</span>点我呀<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>16.form 表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>能发送数据<br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 提取密码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsBytagName(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(div.value);<br></code></pre></td></tr></table></figure><p>大型公司密码加密：保密协议 md5 不可破解</p><p><strong>没有真正的安全</strong></p><p>2G 网：安全性低，抓包工具</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        你们喜欢的明星？<br>        1.mike<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>        2.tom<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>        3.tilla<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请输入用户名 demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #999&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;if(this.value==&#x27;请输入用户名&#x27;)&#123;this.value=&#x27;&#x27;;this.style.color=&#x27;#424242&#x27;&#125;&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;if(this.value==&#x27;&#x27;)&#123;this.value=&#x27;请输入用户名&#x27;;this.style.color=&#x27;#999&#x27;&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span></span><br><span class="hljs-tag">               &lt;/<span class="hljs-attr">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">1.mike<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>2.tom<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot; checkbox &quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>3.tilla<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot; checkbox &quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>企业开发经验 : 性别：（互联网思维：用户懒）用户体验，用户粘性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>choose your sex<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        male:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>        female:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下拉菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>  province<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>beijing<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>tianjin<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>加上value,就会以value为准<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> province<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>beijing<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>tianjin<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三-编码"><a href="#三-编码" class="headerlink" title="(三)编码"></a>(三)编码</h2><p>防止乱码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>charset:编码字符集<br>编码字符集：<br>1.gb2132 中国国家标准第 2132 条：只能识别简体，不认识繁体<br>2.gbk 国家标准扩展版本 只包含繁体（亚洲也有）<br>3.unicode 万国码<br>4.utf-8 8 比特版本，还有 16 比特的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>lang=”en”：告诉搜索引擎爬虫，我们的网站是关于什么内容的<br>除了英文，其他都汉语拼音表示<br>关于百度搜索：关键字协议 IP 段锁定 生物行为</p><p>SEO 搜索引擎爬虫：搜素引擎优化技术</p><p>网站靠前概率更大</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;服装&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;这是一个你穿了就不想拖的衣服&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3 个 HTML 编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">打空格：实际上是英文单词文字分隔符 1.<span class="hljs-symbol">&amp;nbsp;</span>==空格 2.打印<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>:<span class="hljs-symbol">&amp;lt;</span>div<span class="hljs-symbol">&amp;gt;</span> 3.回车 <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四）三个单标签"><a href="#四）三个单标签" class="headerlink" title="(四）三个单标签"></a>(四）三个单标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五-专业知识"><a href="#五-专业知识" class="headerlink" title="(五)专业知识"></a>(五)专业知识</h2><p>主流浏览器及其内核</p><p>要求</p><p>1.市场份额</p><p>2.独立研发的内核</p><table><thead><tr><th>IE</th><th>trident</th></tr></thead><tbody><tr><td>Firefox</td><td>Gecko</td></tr><tr><td>Google chrome</td><td>Webkit</td></tr><tr><td>Safari</td><td>Webkit/blink</td></tr><tr><td>Opera</td><td>presto</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
